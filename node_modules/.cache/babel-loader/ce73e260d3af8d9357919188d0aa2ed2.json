{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\r\n * Returns an array which contains all values that reside\r\n * in the given set.\r\n */\n\nexport function values(from) {\n  var result = [];\n\n  for (var key in from) {\n    if (hasOwnProperty.call(from, key)) {\n      result.push(from[key]);\n    }\n  }\n\n  return result;\n}\nexport function first(from) {\n  for (var key in from) {\n    if (hasOwnProperty.call(from, key)) {\n      return from[key];\n    }\n  }\n\n  return undefined;\n}\n/**\r\n * Iterates over each entry in the provided set. The iterator allows\r\n * to remove elements and will stop when the callback returns {{false}}.\r\n */\n\nexport function forEach(from, callback) {\n  var _loop_1 = function (key) {\n    if (hasOwnProperty.call(from, key)) {\n      var result = callback({\n        key: key,\n        value: from[key]\n      }, function () {\n        delete from[key];\n      });\n\n      if (result === false) {\n        return {\n          value: void 0\n        };\n      }\n    }\n  };\n\n  for (var key in from) {\n    var state_1 = _loop_1(key);\n\n    if (typeof state_1 === \"object\") return state_1.value;\n  }\n}\n\nvar SetMap =\n/** @class */\nfunction () {\n  function SetMap() {\n    this.map = new Map();\n  }\n\n  SetMap.prototype.add = function (key, value) {\n    var values = this.map.get(key);\n\n    if (!values) {\n      values = new Set();\n      this.map.set(key, values);\n    }\n\n    values.add(value);\n  };\n\n  SetMap.prototype.delete = function (key, value) {\n    var values = this.map.get(key);\n\n    if (!values) {\n      return;\n    }\n\n    values.delete(value);\n\n    if (values.size === 0) {\n      this.map.delete(key);\n    }\n  };\n\n  SetMap.prototype.forEach = function (key, fn) {\n    var values = this.map.get(key);\n\n    if (!values) {\n      return;\n    }\n\n    values.forEach(fn);\n  };\n\n  return SetMap;\n}();\n\nexport { SetMap };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/base/common/collections.js"],"names":["hasOwnProperty","Object","prototype","values","from","result","key","call","push","first","undefined","forEach","callback","_loop_1","value","state_1","SetMap","map","Map","add","get","Set","set","delete","size","fn"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n/**\r\n * Returns an array which contains all values that reside\r\n * in the given set.\r\n */\r\nexport function values(from) {\r\n    var result = [];\r\n    for (var key in from) {\r\n        if (hasOwnProperty.call(from, key)) {\r\n            result.push(from[key]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexport function first(from) {\r\n    for (var key in from) {\r\n        if (hasOwnProperty.call(from, key)) {\r\n            return from[key];\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Iterates over each entry in the provided set. The iterator allows\r\n * to remove elements and will stop when the callback returns {{false}}.\r\n */\r\nexport function forEach(from, callback) {\r\n    var _loop_1 = function (key) {\r\n        if (hasOwnProperty.call(from, key)) {\r\n            var result = callback({ key: key, value: from[key] }, function () {\r\n                delete from[key];\r\n            });\r\n            if (result === false) {\r\n                return { value: void 0 };\r\n            }\r\n        }\r\n    };\r\n    for (var key in from) {\r\n        var state_1 = _loop_1(key);\r\n        if (typeof state_1 === \"object\")\r\n            return state_1.value;\r\n    }\r\n}\r\nvar SetMap = /** @class */ (function () {\r\n    function SetMap() {\r\n        this.map = new Map();\r\n    }\r\n    SetMap.prototype.add = function (key, value) {\r\n        var values = this.map.get(key);\r\n        if (!values) {\r\n            values = new Set();\r\n            this.map.set(key, values);\r\n        }\r\n        values.add(value);\r\n    };\r\n    SetMap.prototype.delete = function (key, value) {\r\n        var values = this.map.get(key);\r\n        if (!values) {\r\n            return;\r\n        }\r\n        values.delete(value);\r\n        if (values.size === 0) {\r\n            this.map.delete(key);\r\n        }\r\n    };\r\n    SetMap.prototype.forEach = function (key, fn) {\r\n        var values = this.map.get(key);\r\n        if (!values) {\r\n            return;\r\n        }\r\n        values.forEach(fn);\r\n    };\r\n    return SetMap;\r\n}());\r\nexport { SetMap };\r\n"]},"metadata":{},"sourceType":"module"}