{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict'; // Allow for running under nodejs/requirejs in tests\n\nvar _monaco = typeof monaco === 'undefined' ? self.monaco : monaco;\n\nvar languageDefinitions = {};\nvar lazyLanguageLoaders = {};\n\nvar LazyLanguageLoader =\n/** @class */\nfunction () {\n  function LazyLanguageLoader(languageId) {\n    var _this = this;\n\n    this._languageId = languageId;\n    this._loadingTriggered = false;\n    this._lazyLoadPromise = new Promise(function (resolve, reject) {\n      _this._lazyLoadPromiseResolve = resolve;\n      _this._lazyLoadPromiseReject = reject;\n    });\n  }\n\n  LazyLanguageLoader.getOrCreate = function (languageId) {\n    if (!lazyLanguageLoaders[languageId]) {\n      lazyLanguageLoaders[languageId] = new LazyLanguageLoader(languageId);\n    }\n\n    return lazyLanguageLoaders[languageId];\n  };\n\n  LazyLanguageLoader.prototype.whenLoaded = function () {\n    return this._lazyLoadPromise;\n  };\n\n  LazyLanguageLoader.prototype.load = function () {\n    var _this = this;\n\n    if (!this._loadingTriggered) {\n      this._loadingTriggered = true;\n\n      languageDefinitions[this._languageId].loader().then(function (mod) {\n        return _this._lazyLoadPromiseResolve(mod);\n      }, function (err) {\n        return _this._lazyLoadPromiseReject(err);\n      });\n    }\n\n    return this._lazyLoadPromise;\n  };\n\n  return LazyLanguageLoader;\n}();\n\nexport function loadLanguage(languageId) {\n  return LazyLanguageLoader.getOrCreate(languageId).load();\n}\nexport function registerLanguage(def) {\n  var languageId = def.id;\n  languageDefinitions[languageId] = def;\n\n  _monaco.languages.register(def);\n\n  var lazyLanguageLoader = LazyLanguageLoader.getOrCreate(languageId);\n\n  _monaco.languages.setMonarchTokensProvider(languageId, lazyLanguageLoader.whenLoaded().then(function (mod) {\n    return mod.language;\n  }));\n\n  _monaco.languages.onLanguage(languageId, function () {\n    lazyLanguageLoader.load().then(function (mod) {\n      _monaco.languages.setLanguageConfiguration(languageId, mod.conf);\n    });\n  });\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/basic-languages/_.contribution.js"],"names":["_monaco","monaco","self","languageDefinitions","lazyLanguageLoaders","LazyLanguageLoader","languageId","_this","_languageId","_loadingTriggered","_lazyLoadPromise","Promise","resolve","reject","_lazyLoadPromiseResolve","_lazyLoadPromiseReject","getOrCreate","prototype","whenLoaded","load","loader","then","mod","err","loadLanguage","registerLanguage","def","id","languages","register","lazyLanguageLoader","setMonarchTokensProvider","language","onLanguage","setLanguageConfiguration","conf"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n// Allow for running under nodejs/requirejs in tests\r\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\r\nvar languageDefinitions = {};\r\nvar lazyLanguageLoaders = {};\r\nvar LazyLanguageLoader = /** @class */ (function () {\r\n    function LazyLanguageLoader(languageId) {\r\n        var _this = this;\r\n        this._languageId = languageId;\r\n        this._loadingTriggered = false;\r\n        this._lazyLoadPromise = new Promise(function (resolve, reject) {\r\n            _this._lazyLoadPromiseResolve = resolve;\r\n            _this._lazyLoadPromiseReject = reject;\r\n        });\r\n    }\r\n    LazyLanguageLoader.getOrCreate = function (languageId) {\r\n        if (!lazyLanguageLoaders[languageId]) {\r\n            lazyLanguageLoaders[languageId] = new LazyLanguageLoader(languageId);\r\n        }\r\n        return lazyLanguageLoaders[languageId];\r\n    };\r\n    LazyLanguageLoader.prototype.whenLoaded = function () {\r\n        return this._lazyLoadPromise;\r\n    };\r\n    LazyLanguageLoader.prototype.load = function () {\r\n        var _this = this;\r\n        if (!this._loadingTriggered) {\r\n            this._loadingTriggered = true;\r\n            languageDefinitions[this._languageId].loader().then(function (mod) { return _this._lazyLoadPromiseResolve(mod); }, function (err) { return _this._lazyLoadPromiseReject(err); });\r\n        }\r\n        return this._lazyLoadPromise;\r\n    };\r\n    return LazyLanguageLoader;\r\n}());\r\nexport function loadLanguage(languageId) {\r\n    return LazyLanguageLoader.getOrCreate(languageId).load();\r\n}\r\nexport function registerLanguage(def) {\r\n    var languageId = def.id;\r\n    languageDefinitions[languageId] = def;\r\n    _monaco.languages.register(def);\r\n    var lazyLanguageLoader = LazyLanguageLoader.getOrCreate(languageId);\r\n    _monaco.languages.setMonarchTokensProvider(languageId, lazyLanguageLoader.whenLoaded().then(function (mod) { return mod.language; }));\r\n    _monaco.languages.onLanguage(languageId, function () {\r\n        lazyLanguageLoader.load().then(function (mod) {\r\n            _monaco.languages.setLanguageConfiguration(languageId, mod.conf);\r\n        });\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}