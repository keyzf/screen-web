{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../config/editorOptions.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport * as model from '../model.js';\nimport { EditStack } from './editStack.js';\nimport { guessIndentation } from './indentationGuesser.js';\nimport { IntervalNode, IntervalTree, getNodeIsInOverviewRuler, recomputeMaxEnd } from './intervalTree.js';\nimport { PieceTreeTextBufferBuilder } from './pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\nimport { InternalModelContentChangeEvent, ModelRawContentChangedEvent, ModelRawEOLChanged, ModelRawFlush, ModelRawLineChanged, ModelRawLinesDeleted, ModelRawLinesInserted } from './textModelEvents.js';\nimport { SearchParams, TextModelSearch } from './textModelSearch.js';\nimport { TextModelTokenization } from './textModelTokens.js';\nimport { getWordAtText } from './wordHelper.js';\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\nimport { NULL_LANGUAGE_IDENTIFIER } from '../modes/nullMode.js';\nimport { ignoreBracketsInToken } from '../modes/supports.js';\nimport { BracketsUtils } from '../modes/supports/richEditBrackets.js';\nimport { withUndefinedAsNull } from '../../../base/common/types.js';\nimport { TokensStore, countEOL, TokensStore2 } from './tokensStore.js';\nimport { Color } from '../../../base/common/color.js';\n\nfunction createTextBufferBuilder() {\n  return new PieceTreeTextBufferBuilder();\n}\n\nexport function createTextBufferFactory(text) {\n  var builder = createTextBufferBuilder();\n  builder.acceptChunk(text);\n  return builder.finish();\n}\nexport function createTextBuffer(value, defaultEOL) {\n  var factory = typeof value === 'string' ? createTextBufferFactory(value) : value;\n  return factory.create(defaultEOL);\n}\nvar MODEL_ID = 0;\nvar LIMIT_FIND_COUNT = 999;\nexport var LONG_LINE_BOUNDARY = 10000;\n\nvar invalidFunc = function () {\n  throw new Error(\"Invalid change accessor\");\n};\n\nvar TextModel =\n/** @class */\nfunction (_super) {\n  __extends(TextModel, _super); //#endregion\n\n\n  function TextModel(source, creationOptions, languageIdentifier, associatedResource) {\n    if (associatedResource === void 0) {\n      associatedResource = null;\n    }\n\n    var _this = _super.call(this) || this; //#region Events\n\n\n    _this._onWillDispose = _this._register(new Emitter());\n    _this.onWillDispose = _this._onWillDispose.event;\n    _this._onDidChangeDecorations = _this._register(new DidChangeDecorationsEmitter());\n    _this.onDidChangeDecorations = _this._onDidChangeDecorations.event;\n    _this._onDidChangeLanguage = _this._register(new Emitter());\n    _this.onDidChangeLanguage = _this._onDidChangeLanguage.event;\n    _this._onDidChangeLanguageConfiguration = _this._register(new Emitter());\n    _this.onDidChangeLanguageConfiguration = _this._onDidChangeLanguageConfiguration.event;\n    _this._onDidChangeTokens = _this._register(new Emitter());\n    _this.onDidChangeTokens = _this._onDidChangeTokens.event;\n    _this._onDidChangeOptions = _this._register(new Emitter());\n    _this.onDidChangeOptions = _this._onDidChangeOptions.event;\n    _this._onDidChangeAttached = _this._register(new Emitter());\n    _this.onDidChangeAttached = _this._onDidChangeAttached.event;\n    _this._eventEmitter = _this._register(new DidChangeContentEmitter()); // Generate a new unique model id\n\n    MODEL_ID++;\n    _this.id = '$model' + MODEL_ID;\n    _this.isForSimpleWidget = creationOptions.isForSimpleWidget;\n\n    if (typeof associatedResource === 'undefined' || associatedResource === null) {\n      _this._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\n    } else {\n      _this._associatedResource = associatedResource;\n    }\n\n    _this._attachedEditorCount = 0;\n    _this._buffer = createTextBuffer(source, creationOptions.defaultEOL);\n    _this._options = TextModel.resolveOptions(_this._buffer, creationOptions);\n\n    var bufferLineCount = _this._buffer.getLineCount();\n\n    var bufferTextLength = _this._buffer.getValueLengthInRange(new Range(1, 1, bufferLineCount, _this._buffer.getLineLength(bufferLineCount) + 1), 0\n    /* TextDefined */\n    ); // !!! Make a decision in the ctor and permanently respect this decision !!!\n    // If a model is too large at construction time, it will never get tokenized,\n    // under no circumstances.\n\n\n    if (creationOptions.largeFileOptimizations) {\n      _this._isTooLargeForTokenization = bufferTextLength > TextModel.LARGE_FILE_SIZE_THRESHOLD || bufferLineCount > TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD;\n    } else {\n      _this._isTooLargeForTokenization = false;\n    }\n\n    _this._isTooLargeForSyncing = bufferTextLength > TextModel.MODEL_SYNC_LIMIT;\n    _this._versionId = 1;\n    _this._alternativeVersionId = 1;\n    _this._isDisposed = false;\n    _this._isDisposing = false;\n    _this._languageIdentifier = languageIdentifier || NULL_LANGUAGE_IDENTIFIER;\n    _this._languageRegistryListener = LanguageConfigurationRegistry.onDidChange(function (e) {\n      if (e.languageIdentifier.id === _this._languageIdentifier.id) {\n        _this._onDidChangeLanguageConfiguration.fire({});\n      }\n    });\n    _this._instanceId = strings.singleLetterHash(MODEL_ID);\n    _this._lastDecorationId = 0;\n    _this._decorations = Object.create(null);\n    _this._decorationsTree = new DecorationsTrees();\n    _this._commandManager = new EditStack(_this);\n    _this._isUndoing = false;\n    _this._isRedoing = false;\n    _this._trimAutoWhitespaceLines = null;\n    _this._tokens = new TokensStore();\n    _this._tokens2 = new TokensStore2();\n    _this._tokenization = new TextModelTokenization(_this);\n    return _this;\n  }\n\n  TextModel.createFromString = function (text, options, languageIdentifier, uri) {\n    if (options === void 0) {\n      options = TextModel.DEFAULT_CREATION_OPTIONS;\n    }\n\n    if (languageIdentifier === void 0) {\n      languageIdentifier = null;\n    }\n\n    if (uri === void 0) {\n      uri = null;\n    }\n\n    return new TextModel(text, options, languageIdentifier, uri);\n  };\n\n  TextModel.resolveOptions = function (textBuffer, options) {\n    if (options.detectIndentation) {\n      var guessedIndentation = guessIndentation(textBuffer, options.tabSize, options.insertSpaces);\n      return new model.TextModelResolvedOptions({\n        tabSize: guessedIndentation.tabSize,\n        indentSize: guessedIndentation.tabSize,\n        insertSpaces: guessedIndentation.insertSpaces,\n        trimAutoWhitespace: options.trimAutoWhitespace,\n        defaultEOL: options.defaultEOL\n      });\n    }\n\n    return new model.TextModelResolvedOptions({\n      tabSize: options.tabSize,\n      indentSize: options.indentSize,\n      insertSpaces: options.insertSpaces,\n      trimAutoWhitespace: options.trimAutoWhitespace,\n      defaultEOL: options.defaultEOL\n    });\n  };\n\n  TextModel.prototype.onDidChangeRawContentFast = function (listener) {\n    return this._eventEmitter.fastEvent(function (e) {\n      return listener(e.rawContentChangedEvent);\n    });\n  };\n\n  TextModel.prototype.onDidChangeRawContent = function (listener) {\n    return this._eventEmitter.slowEvent(function (e) {\n      return listener(e.rawContentChangedEvent);\n    });\n  };\n\n  TextModel.prototype.onDidChangeContentFast = function (listener) {\n    return this._eventEmitter.fastEvent(function (e) {\n      return listener(e.contentChangedEvent);\n    });\n  };\n\n  TextModel.prototype.onDidChangeContent = function (listener) {\n    return this._eventEmitter.slowEvent(function (e) {\n      return listener(e.contentChangedEvent);\n    });\n  };\n\n  TextModel.prototype.dispose = function () {\n    this._isDisposing = true;\n\n    this._onWillDispose.fire();\n\n    this._languageRegistryListener.dispose();\n\n    this._tokenization.dispose();\n\n    this._isDisposed = true;\n\n    _super.prototype.dispose.call(this);\n\n    this._isDisposing = false;\n  };\n\n  TextModel.prototype._assertNotDisposed = function () {\n    if (this._isDisposed) {\n      throw new Error('Model is disposed!');\n    }\n  };\n\n  TextModel.prototype._emitContentChangedEvent = function (rawChange, change) {\n    if (this._isDisposing) {\n      // Do not confuse listeners by emitting any event after disposing\n      return;\n    }\n\n    this._eventEmitter.fire(new InternalModelContentChangeEvent(rawChange, change));\n  };\n\n  TextModel.prototype.setValue = function (value) {\n    this._assertNotDisposed();\n\n    if (value === null) {\n      // There's nothing to do\n      return;\n    }\n\n    var textBuffer = createTextBuffer(value, this._options.defaultEOL);\n    this.setValueFromTextBuffer(textBuffer);\n  };\n\n  TextModel.prototype._createContentChanged2 = function (range, rangeOffset, rangeLength, text, isUndoing, isRedoing, isFlush) {\n    return {\n      changes: [{\n        range: range,\n        rangeOffset: rangeOffset,\n        rangeLength: rangeLength,\n        text: text\n      }],\n      eol: this._buffer.getEOL(),\n      versionId: this.getVersionId(),\n      isUndoing: isUndoing,\n      isRedoing: isRedoing,\n      isFlush: isFlush\n    };\n  };\n\n  TextModel.prototype.setValueFromTextBuffer = function (textBuffer) {\n    this._assertNotDisposed();\n\n    if (textBuffer === null) {\n      // There's nothing to do\n      return;\n    }\n\n    var oldFullModelRange = this.getFullModelRange();\n    var oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n    var endLineNumber = this.getLineCount();\n    var endColumn = this.getLineMaxColumn(endLineNumber);\n    this._buffer = textBuffer;\n\n    this._increaseVersionId(); // Flush all tokens\n\n\n    this._tokens.flush();\n\n    this._tokens2.flush(); // Destroy all my decorations\n\n\n    this._decorations = Object.create(null);\n    this._decorationsTree = new DecorationsTrees(); // Destroy my edit history and settings\n\n    this._commandManager = new EditStack(this);\n    this._trimAutoWhitespaceLines = null;\n\n    this._emitContentChangedEvent(new ModelRawContentChangedEvent([new ModelRawFlush()], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, true));\n  };\n\n  TextModel.prototype.setEOL = function (eol) {\n    this._assertNotDisposed();\n\n    var newEOL = eol === 1\n    /* CRLF */\n    ? '\\r\\n' : '\\n';\n\n    if (this._buffer.getEOL() === newEOL) {\n      // Nothing to do\n      return;\n    }\n\n    var oldFullModelRange = this.getFullModelRange();\n    var oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n    var endLineNumber = this.getLineCount();\n    var endColumn = this.getLineMaxColumn(endLineNumber);\n\n    this._onBeforeEOLChange();\n\n    this._buffer.setEOL(newEOL);\n\n    this._increaseVersionId();\n\n    this._onAfterEOLChange();\n\n    this._emitContentChangedEvent(new ModelRawContentChangedEvent([new ModelRawEOLChanged()], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, false));\n  };\n\n  TextModel.prototype._onBeforeEOLChange = function () {\n    // Ensure all decorations get their `range` set.\n    var versionId = this.getVersionId();\n\n    var allDecorations = this._decorationsTree.search(0, false, false, versionId);\n\n    this._ensureNodesHaveRanges(allDecorations);\n  };\n\n  TextModel.prototype._onAfterEOLChange = function () {\n    // Transform back `range` to offsets\n    var versionId = this.getVersionId();\n\n    var allDecorations = this._decorationsTree.collectNodesPostOrder();\n\n    for (var i = 0, len = allDecorations.length; i < len; i++) {\n      var node = allDecorations[i];\n      var delta = node.cachedAbsoluteStart - node.start;\n\n      var startOffset = this._buffer.getOffsetAt(node.range.startLineNumber, node.range.startColumn);\n\n      var endOffset = this._buffer.getOffsetAt(node.range.endLineNumber, node.range.endColumn);\n\n      node.cachedAbsoluteStart = startOffset;\n      node.cachedAbsoluteEnd = endOffset;\n      node.cachedVersionId = versionId;\n      node.start = startOffset - delta;\n      node.end = endOffset - delta;\n      recomputeMaxEnd(node);\n    }\n  };\n\n  TextModel.prototype.onBeforeAttached = function () {\n    this._attachedEditorCount++;\n\n    if (this._attachedEditorCount === 1) {\n      this._onDidChangeAttached.fire(undefined);\n    }\n  };\n\n  TextModel.prototype.onBeforeDetached = function () {\n    this._attachedEditorCount--;\n\n    if (this._attachedEditorCount === 0) {\n      this._onDidChangeAttached.fire(undefined);\n    }\n  };\n\n  TextModel.prototype.isAttachedToEditor = function () {\n    return this._attachedEditorCount > 0;\n  };\n\n  TextModel.prototype.getAttachedEditorCount = function () {\n    return this._attachedEditorCount;\n  };\n\n  TextModel.prototype.isTooLargeForSyncing = function () {\n    return this._isTooLargeForSyncing;\n  };\n\n  TextModel.prototype.isTooLargeForTokenization = function () {\n    return this._isTooLargeForTokenization;\n  };\n\n  TextModel.prototype.isDisposed = function () {\n    return this._isDisposed;\n  };\n\n  TextModel.prototype.isDominatedByLongLines = function () {\n    this._assertNotDisposed();\n\n    if (this.isTooLargeForTokenization()) {\n      // Cannot word wrap huge files anyways, so it doesn't really matter\n      return false;\n    }\n\n    var smallLineCharCount = 0;\n    var longLineCharCount = 0;\n\n    var lineCount = this._buffer.getLineCount();\n\n    for (var lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n      var lineLength = this._buffer.getLineLength(lineNumber);\n\n      if (lineLength >= LONG_LINE_BOUNDARY) {\n        longLineCharCount += lineLength;\n      } else {\n        smallLineCharCount += lineLength;\n      }\n    }\n\n    return longLineCharCount > smallLineCharCount;\n  };\n\n  Object.defineProperty(TextModel.prototype, \"uri\", {\n    get: function () {\n      return this._associatedResource;\n    },\n    enumerable: true,\n    configurable: true\n  }); //#region Options\n\n  TextModel.prototype.getOptions = function () {\n    this._assertNotDisposed();\n\n    return this._options;\n  };\n\n  TextModel.prototype.getFormattingOptions = function () {\n    return {\n      tabSize: this._options.indentSize,\n      insertSpaces: this._options.insertSpaces\n    };\n  };\n\n  TextModel.prototype.updateOptions = function (_newOpts) {\n    this._assertNotDisposed();\n\n    var tabSize = typeof _newOpts.tabSize !== 'undefined' ? _newOpts.tabSize : this._options.tabSize;\n    var indentSize = typeof _newOpts.indentSize !== 'undefined' ? _newOpts.indentSize : this._options.indentSize;\n    var insertSpaces = typeof _newOpts.insertSpaces !== 'undefined' ? _newOpts.insertSpaces : this._options.insertSpaces;\n    var trimAutoWhitespace = typeof _newOpts.trimAutoWhitespace !== 'undefined' ? _newOpts.trimAutoWhitespace : this._options.trimAutoWhitespace;\n    var newOpts = new model.TextModelResolvedOptions({\n      tabSize: tabSize,\n      indentSize: indentSize,\n      insertSpaces: insertSpaces,\n      defaultEOL: this._options.defaultEOL,\n      trimAutoWhitespace: trimAutoWhitespace\n    });\n\n    if (this._options.equals(newOpts)) {\n      return;\n    }\n\n    var e = this._options.createChangeEvent(newOpts);\n\n    this._options = newOpts;\n\n    this._onDidChangeOptions.fire(e);\n  };\n\n  TextModel.prototype.detectIndentation = function (defaultInsertSpaces, defaultTabSize) {\n    this._assertNotDisposed();\n\n    var guessedIndentation = guessIndentation(this._buffer, defaultTabSize, defaultInsertSpaces);\n    this.updateOptions({\n      insertSpaces: guessedIndentation.insertSpaces,\n      tabSize: guessedIndentation.tabSize,\n      indentSize: guessedIndentation.tabSize\n    });\n  };\n\n  TextModel._normalizeIndentationFromWhitespace = function (str, indentSize, insertSpaces) {\n    var spacesCnt = 0;\n\n    for (var i = 0; i < str.length; i++) {\n      if (str.charAt(i) === '\\t') {\n        spacesCnt += indentSize;\n      } else {\n        spacesCnt++;\n      }\n    }\n\n    var result = '';\n\n    if (!insertSpaces) {\n      var tabsCnt = Math.floor(spacesCnt / indentSize);\n      spacesCnt = spacesCnt % indentSize;\n\n      for (var i = 0; i < tabsCnt; i++) {\n        result += '\\t';\n      }\n    }\n\n    for (var i = 0; i < spacesCnt; i++) {\n      result += ' ';\n    }\n\n    return result;\n  };\n\n  TextModel.normalizeIndentation = function (str, indentSize, insertSpaces) {\n    var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(str);\n\n    if (firstNonWhitespaceIndex === -1) {\n      firstNonWhitespaceIndex = str.length;\n    }\n\n    return TextModel._normalizeIndentationFromWhitespace(str.substring(0, firstNonWhitespaceIndex), indentSize, insertSpaces) + str.substring(firstNonWhitespaceIndex);\n  };\n\n  TextModel.prototype.normalizeIndentation = function (str) {\n    this._assertNotDisposed();\n\n    return TextModel.normalizeIndentation(str, this._options.indentSize, this._options.insertSpaces);\n  }; //#endregion\n  //#region Reading\n\n\n  TextModel.prototype.getVersionId = function () {\n    this._assertNotDisposed();\n\n    return this._versionId;\n  };\n\n  TextModel.prototype.mightContainRTL = function () {\n    return this._buffer.mightContainRTL();\n  };\n\n  TextModel.prototype.mightContainNonBasicASCII = function () {\n    return this._buffer.mightContainNonBasicASCII();\n  };\n\n  TextModel.prototype.getAlternativeVersionId = function () {\n    this._assertNotDisposed();\n\n    return this._alternativeVersionId;\n  };\n\n  TextModel.prototype.getOffsetAt = function (rawPosition) {\n    this._assertNotDisposed();\n\n    var position = this._validatePosition(rawPosition.lineNumber, rawPosition.column, 0\n    /* Relaxed */\n    );\n\n    return this._buffer.getOffsetAt(position.lineNumber, position.column);\n  };\n\n  TextModel.prototype.getPositionAt = function (rawOffset) {\n    this._assertNotDisposed();\n\n    var offset = Math.min(this._buffer.getLength(), Math.max(0, rawOffset));\n    return this._buffer.getPositionAt(offset);\n  };\n\n  TextModel.prototype._increaseVersionId = function () {\n    this._versionId = this._versionId + 1;\n    this._alternativeVersionId = this._versionId;\n  };\n\n  TextModel.prototype._overwriteAlternativeVersionId = function (newAlternativeVersionId) {\n    this._alternativeVersionId = newAlternativeVersionId;\n  };\n\n  TextModel.prototype.getValue = function (eol, preserveBOM) {\n    if (preserveBOM === void 0) {\n      preserveBOM = false;\n    }\n\n    this._assertNotDisposed();\n\n    var fullModelRange = this.getFullModelRange();\n    var fullModelValue = this.getValueInRange(fullModelRange, eol);\n\n    if (preserveBOM) {\n      return this._buffer.getBOM() + fullModelValue;\n    }\n\n    return fullModelValue;\n  };\n\n  TextModel.prototype.getValueLength = function (eol, preserveBOM) {\n    if (preserveBOM === void 0) {\n      preserveBOM = false;\n    }\n\n    this._assertNotDisposed();\n\n    var fullModelRange = this.getFullModelRange();\n    var fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\n\n    if (preserveBOM) {\n      return this._buffer.getBOM().length + fullModelValue;\n    }\n\n    return fullModelValue;\n  };\n\n  TextModel.prototype.getValueInRange = function (rawRange, eol) {\n    if (eol === void 0) {\n      eol = 0\n      /* TextDefined */\n      ;\n    }\n\n    this._assertNotDisposed();\n\n    return this._buffer.getValueInRange(this.validateRange(rawRange), eol);\n  };\n\n  TextModel.prototype.getValueLengthInRange = function (rawRange, eol) {\n    if (eol === void 0) {\n      eol = 0\n      /* TextDefined */\n      ;\n    }\n\n    this._assertNotDisposed();\n\n    return this._buffer.getValueLengthInRange(this.validateRange(rawRange), eol);\n  };\n\n  TextModel.prototype.getCharacterCountInRange = function (rawRange, eol) {\n    if (eol === void 0) {\n      eol = 0\n      /* TextDefined */\n      ;\n    }\n\n    this._assertNotDisposed();\n\n    return this._buffer.getCharacterCountInRange(this.validateRange(rawRange), eol);\n  };\n\n  TextModel.prototype.getLineCount = function () {\n    this._assertNotDisposed();\n\n    return this._buffer.getLineCount();\n  };\n\n  TextModel.prototype.getLineContent = function (lineNumber) {\n    this._assertNotDisposed();\n\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n\n    return this._buffer.getLineContent(lineNumber);\n  };\n\n  TextModel.prototype.getLineLength = function (lineNumber) {\n    this._assertNotDisposed();\n\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n\n    return this._buffer.getLineLength(lineNumber);\n  };\n\n  TextModel.prototype.getLinesContent = function () {\n    this._assertNotDisposed();\n\n    return this._buffer.getLinesContent();\n  };\n\n  TextModel.prototype.getEOL = function () {\n    this._assertNotDisposed();\n\n    return this._buffer.getEOL();\n  };\n\n  TextModel.prototype.getLineMinColumn = function (lineNumber) {\n    this._assertNotDisposed();\n\n    return 1;\n  };\n\n  TextModel.prototype.getLineMaxColumn = function (lineNumber) {\n    this._assertNotDisposed();\n\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n\n    return this._buffer.getLineLength(lineNumber) + 1;\n  };\n\n  TextModel.prototype.getLineFirstNonWhitespaceColumn = function (lineNumber) {\n    this._assertNotDisposed();\n\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n\n    return this._buffer.getLineFirstNonWhitespaceColumn(lineNumber);\n  };\n\n  TextModel.prototype.getLineLastNonWhitespaceColumn = function (lineNumber) {\n    this._assertNotDisposed();\n\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n\n    return this._buffer.getLineLastNonWhitespaceColumn(lineNumber);\n  };\n  /**\r\n   * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.\r\n   * Will try to not allocate if possible.\r\n   */\n\n\n  TextModel.prototype._validateRangeRelaxedNoAllocations = function (range) {\n    var linesCount = this._buffer.getLineCount();\n\n    var initialStartLineNumber = range.startLineNumber;\n    var initialStartColumn = range.startColumn;\n    var startLineNumber;\n    var startColumn;\n\n    if (initialStartLineNumber < 1) {\n      startLineNumber = 1;\n      startColumn = 1;\n    } else if (initialStartLineNumber > linesCount) {\n      startLineNumber = linesCount;\n      startColumn = this.getLineMaxColumn(startLineNumber);\n    } else {\n      startLineNumber = initialStartLineNumber | 0;\n\n      if (initialStartColumn <= 1) {\n        startColumn = 1;\n      } else {\n        var maxColumn = this.getLineMaxColumn(startLineNumber);\n\n        if (initialStartColumn >= maxColumn) {\n          startColumn = maxColumn;\n        } else {\n          startColumn = initialStartColumn | 0;\n        }\n      }\n    }\n\n    var initialEndLineNumber = range.endLineNumber;\n    var initialEndColumn = range.endColumn;\n    var endLineNumber;\n    var endColumn;\n\n    if (initialEndLineNumber < 1) {\n      endLineNumber = 1;\n      endColumn = 1;\n    } else if (initialEndLineNumber > linesCount) {\n      endLineNumber = linesCount;\n      endColumn = this.getLineMaxColumn(endLineNumber);\n    } else {\n      endLineNumber = initialEndLineNumber | 0;\n\n      if (initialEndColumn <= 1) {\n        endColumn = 1;\n      } else {\n        var maxColumn = this.getLineMaxColumn(endLineNumber);\n\n        if (initialEndColumn >= maxColumn) {\n          endColumn = maxColumn;\n        } else {\n          endColumn = initialEndColumn | 0;\n        }\n      }\n    }\n\n    if (initialStartLineNumber === startLineNumber && initialStartColumn === startColumn && initialEndLineNumber === endLineNumber && initialEndColumn === endColumn && range instanceof Range && !(range instanceof Selection)) {\n      return range;\n    }\n\n    return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n  };\n\n  TextModel.prototype._isValidPosition = function (lineNumber, column, validationType) {\n    if (typeof lineNumber !== 'number' || typeof column !== 'number') {\n      return false;\n    }\n\n    if (isNaN(lineNumber) || isNaN(column)) {\n      return false;\n    }\n\n    if (lineNumber < 1 || column < 1) {\n      return false;\n    }\n\n    if ((lineNumber | 0) !== lineNumber || (column | 0) !== column) {\n      return false;\n    }\n\n    var lineCount = this._buffer.getLineCount();\n\n    if (lineNumber > lineCount) {\n      return false;\n    }\n\n    if (column === 1) {\n      return true;\n    }\n\n    var maxColumn = this.getLineMaxColumn(lineNumber);\n\n    if (column > maxColumn) {\n      return false;\n    }\n\n    if (validationType === 1\n    /* SurrogatePairs */\n    ) {\n        // !!At this point, column > 1\n        var charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n\n        if (strings.isHighSurrogate(charCodeBefore)) {\n          return false;\n        }\n      }\n\n    return true;\n  };\n\n  TextModel.prototype._validatePosition = function (_lineNumber, _column, validationType) {\n    var lineNumber = Math.floor(typeof _lineNumber === 'number' && !isNaN(_lineNumber) ? _lineNumber : 1);\n    var column = Math.floor(typeof _column === 'number' && !isNaN(_column) ? _column : 1);\n\n    var lineCount = this._buffer.getLineCount();\n\n    if (lineNumber < 1) {\n      return new Position(1, 1);\n    }\n\n    if (lineNumber > lineCount) {\n      return new Position(lineCount, this.getLineMaxColumn(lineCount));\n    }\n\n    if (column <= 1) {\n      return new Position(lineNumber, 1);\n    }\n\n    var maxColumn = this.getLineMaxColumn(lineNumber);\n\n    if (column >= maxColumn) {\n      return new Position(lineNumber, maxColumn);\n    }\n\n    if (validationType === 1\n    /* SurrogatePairs */\n    ) {\n        // If the position would end up in the middle of a high-low surrogate pair,\n        // we move it to before the pair\n        // !!At this point, column > 1\n        var charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n\n        if (strings.isHighSurrogate(charCodeBefore)) {\n          return new Position(lineNumber, column - 1);\n        }\n      }\n\n    return new Position(lineNumber, column);\n  };\n\n  TextModel.prototype.validatePosition = function (position) {\n    var validationType = 1\n    /* SurrogatePairs */\n    ;\n\n    this._assertNotDisposed(); // Avoid object allocation and cover most likely case\n\n\n    if (position instanceof Position) {\n      if (this._isValidPosition(position.lineNumber, position.column, validationType)) {\n        return position;\n      }\n    }\n\n    return this._validatePosition(position.lineNumber, position.column, validationType);\n  };\n\n  TextModel.prototype._isValidRange = function (range, validationType) {\n    var startLineNumber = range.startLineNumber;\n    var startColumn = range.startColumn;\n    var endLineNumber = range.endLineNumber;\n    var endColumn = range.endColumn;\n\n    if (!this._isValidPosition(startLineNumber, startColumn, 0\n    /* Relaxed */\n    )) {\n      return false;\n    }\n\n    if (!this._isValidPosition(endLineNumber, endColumn, 0\n    /* Relaxed */\n    )) {\n      return false;\n    }\n\n    if (validationType === 1\n    /* SurrogatePairs */\n    ) {\n        var charCodeBeforeStart = startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0;\n        var charCodeBeforeEnd = endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0;\n        var startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n        var endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n\n        if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n          return true;\n        }\n\n        return false;\n      }\n\n    return true;\n  };\n\n  TextModel.prototype.validateRange = function (_range) {\n    var validationType = 1\n    /* SurrogatePairs */\n    ;\n\n    this._assertNotDisposed(); // Avoid object allocation and cover most likely case\n\n\n    if (_range instanceof Range && !(_range instanceof Selection)) {\n      if (this._isValidRange(_range, validationType)) {\n        return _range;\n      }\n    }\n\n    var start = this._validatePosition(_range.startLineNumber, _range.startColumn, 0\n    /* Relaxed */\n    );\n\n    var end = this._validatePosition(_range.endLineNumber, _range.endColumn, 0\n    /* Relaxed */\n    );\n\n    var startLineNumber = start.lineNumber;\n    var startColumn = start.column;\n    var endLineNumber = end.lineNumber;\n    var endColumn = end.column;\n\n    if (validationType === 1\n    /* SurrogatePairs */\n    ) {\n        var charCodeBeforeStart = startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0;\n        var charCodeBeforeEnd = endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0;\n        var startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n        var endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n\n        if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n          return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n\n        if (startLineNumber === endLineNumber && startColumn === endColumn) {\n          // do not expand a collapsed range, simply move it to a valid location\n          return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn - 1);\n        }\n\n        if (startInsideSurrogatePair && endInsideSurrogatePair) {\n          // expand range at both ends\n          return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn + 1);\n        }\n\n        if (startInsideSurrogatePair) {\n          // only expand range at the start\n          return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn);\n        } // only expand range at the end\n\n\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn + 1);\n      }\n\n    return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n  };\n\n  TextModel.prototype.modifyPosition = function (rawPosition, offset) {\n    this._assertNotDisposed();\n\n    var candidate = this.getOffsetAt(rawPosition) + offset;\n    return this.getPositionAt(Math.min(this._buffer.getLength(), Math.max(0, candidate)));\n  };\n\n  TextModel.prototype.getFullModelRange = function () {\n    this._assertNotDisposed();\n\n    var lineCount = this.getLineCount();\n    return new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\n  };\n\n  TextModel.prototype.findMatchesLineByLine = function (searchRange, searchData, captureMatches, limitResultCount) {\n    return this._buffer.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n  };\n\n  TextModel.prototype.findMatches = function (searchString, rawSearchScope, isRegex, matchCase, wordSeparators, captureMatches, limitResultCount) {\n    if (limitResultCount === void 0) {\n      limitResultCount = LIMIT_FIND_COUNT;\n    }\n\n    this._assertNotDisposed();\n\n    var searchRange;\n\n    if (Range.isIRange(rawSearchScope)) {\n      searchRange = this.validateRange(rawSearchScope);\n    } else {\n      searchRange = this.getFullModelRange();\n    }\n\n    if (!isRegex && searchString.indexOf('\\n') < 0) {\n      // not regex, not multi line\n      var searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n      var searchData = searchParams.parseSearchRequest();\n\n      if (!searchData) {\n        return [];\n      }\n\n      return this.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n    }\n\n    return TextModelSearch.findMatches(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchRange, captureMatches, limitResultCount);\n  };\n\n  TextModel.prototype.findNextMatch = function (searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n    this._assertNotDisposed();\n\n    var searchStart = this.validatePosition(rawSearchStart);\n\n    if (!isRegex && searchString.indexOf('\\n') < 0) {\n      var searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n      var searchData = searchParams.parseSearchRequest();\n\n      if (!searchData) {\n        return null;\n      }\n\n      var lineCount = this.getLineCount();\n      var searchRange = new Range(searchStart.lineNumber, searchStart.column, lineCount, this.getLineMaxColumn(lineCount));\n      var ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n      TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n\n      if (ret.length > 0) {\n        return ret[0];\n      }\n\n      searchRange = new Range(1, 1, searchStart.lineNumber, this.getLineMaxColumn(searchStart.lineNumber));\n      ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n\n      if (ret.length > 0) {\n        return ret[0];\n      }\n\n      return null;\n    }\n\n    return TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n  };\n\n  TextModel.prototype.findPreviousMatch = function (searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n    this._assertNotDisposed();\n\n    var searchStart = this.validatePosition(rawSearchStart);\n    return TextModelSearch.findPreviousMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n  }; //#endregion\n  //#region Editing\n\n\n  TextModel.prototype.pushStackElement = function () {\n    this._commandManager.pushStackElement();\n  };\n\n  TextModel.prototype.pushEOL = function (eol) {\n    var currentEOL = this.getEOL() === '\\n' ? 0\n    /* LF */\n    : 1\n    /* CRLF */\n    ;\n\n    if (currentEOL === eol) {\n      return;\n    }\n\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n\n      this._eventEmitter.beginDeferredEmit();\n\n      this._commandManager.pushEOL(eol);\n    } finally {\n      this._eventEmitter.endDeferredEmit();\n\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n\n  TextModel.prototype.pushEditOperations = function (beforeCursorState, editOperations, cursorStateComputer) {\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n\n      this._eventEmitter.beginDeferredEmit();\n\n      return this._pushEditOperations(beforeCursorState, editOperations, cursorStateComputer);\n    } finally {\n      this._eventEmitter.endDeferredEmit();\n\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n\n  TextModel.prototype._pushEditOperations = function (beforeCursorState, editOperations, cursorStateComputer) {\n    var _this = this;\n\n    if (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\n      // Go through each saved line number and insert a trim whitespace edit\n      // if it is safe to do so (no conflicts with other edits).\n      var incomingEdits = editOperations.map(function (op) {\n        return {\n          range: _this.validateRange(op.range),\n          text: op.text\n        };\n      }); // Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\n      // We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\n\n      var editsAreNearCursors = true;\n\n      for (var i = 0, len = beforeCursorState.length; i < len; i++) {\n        var sel = beforeCursorState[i];\n        var foundEditNearSel = false;\n\n        for (var j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n          var editRange = incomingEdits[j].range;\n          var selIsAbove = editRange.startLineNumber > sel.endLineNumber;\n          var selIsBelow = sel.startLineNumber > editRange.endLineNumber;\n\n          if (!selIsAbove && !selIsBelow) {\n            foundEditNearSel = true;\n            break;\n          }\n        }\n\n        if (!foundEditNearSel) {\n          editsAreNearCursors = false;\n          break;\n        }\n      }\n\n      if (editsAreNearCursors) {\n        for (var i = 0, len = this._trimAutoWhitespaceLines.length; i < len; i++) {\n          var trimLineNumber = this._trimAutoWhitespaceLines[i];\n          var maxLineColumn = this.getLineMaxColumn(trimLineNumber);\n          var allowTrimLine = true;\n\n          for (var j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n            var editRange = incomingEdits[j].range;\n            var editText = incomingEdits[j].text;\n\n            if (trimLineNumber < editRange.startLineNumber || trimLineNumber > editRange.endLineNumber) {\n              // `trimLine` is completely outside this edit\n              continue;\n            } // At this point:\n            //   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\n\n\n            if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === maxLineColumn && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n') {\n              // This edit inserts a new line (and maybe other text) after `trimLine`\n              continue;\n            }\n\n            if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === 1 && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(editText.length - 1) === '\\n') {\n              // This edit inserts a new line (and maybe other text) before `trimLine`\n              continue;\n            } // Looks like we can't trim this line as it would interfere with an incoming edit\n\n\n            allowTrimLine = false;\n            break;\n          }\n\n          if (allowTrimLine) {\n            editOperations.push({\n              range: new Range(trimLineNumber, 1, trimLineNumber, maxLineColumn),\n              text: null\n            });\n          }\n        }\n      }\n\n      this._trimAutoWhitespaceLines = null;\n    }\n\n    return this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer);\n  };\n\n  TextModel.prototype.applyEdits = function (rawOperations) {\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n\n      this._eventEmitter.beginDeferredEmit();\n\n      return this._applyEdits(rawOperations);\n    } finally {\n      this._eventEmitter.endDeferredEmit();\n\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n\n  TextModel.prototype._applyEdits = function (rawOperations) {\n    for (var i = 0, len = rawOperations.length; i < len; i++) {\n      rawOperations[i].range = this.validateRange(rawOperations[i].range);\n    }\n\n    var oldLineCount = this._buffer.getLineCount();\n\n    var result = this._buffer.applyEdits(rawOperations, this._options.trimAutoWhitespace);\n\n    var newLineCount = this._buffer.getLineCount();\n\n    var contentChanges = result.changes;\n    this._trimAutoWhitespaceLines = result.trimAutoWhitespaceLineNumbers;\n\n    if (contentChanges.length !== 0) {\n      var rawContentChanges = [];\n      var lineCount = oldLineCount;\n\n      for (var i = 0, len = contentChanges.length; i < len; i++) {\n        var change = contentChanges[i];\n\n        var _a = countEOL(change.text),\n            eolCount = _a[0],\n            firstLineLength = _a[1],\n            lastLineLength = _a[2];\n\n        this._tokens.acceptEdit(change.range, eolCount, firstLineLength);\n\n        this._tokens2.acceptEdit(change.range, eolCount, firstLineLength, lastLineLength, change.text.length > 0 ? change.text.charCodeAt(0) : 0\n        /* Null */\n        );\n\n        this._onDidChangeDecorations.fire();\n\n        this._decorationsTree.acceptReplace(change.rangeOffset, change.rangeLength, change.text.length, change.forceMoveMarkers);\n\n        var startLineNumber = change.range.startLineNumber;\n        var endLineNumber = change.range.endLineNumber;\n        var deletingLinesCnt = endLineNumber - startLineNumber;\n        var insertingLinesCnt = eolCount;\n        var editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\n        var changeLineCountDelta = insertingLinesCnt - deletingLinesCnt;\n\n        for (var j = editingLinesCnt; j >= 0; j--) {\n          var editLineNumber = startLineNumber + j;\n          var currentEditLineNumber = newLineCount - lineCount - changeLineCountDelta + editLineNumber;\n          rawContentChanges.push(new ModelRawLineChanged(editLineNumber, this.getLineContent(currentEditLineNumber)));\n        }\n\n        if (editingLinesCnt < deletingLinesCnt) {\n          // Must delete some lines\n          var spliceStartLineNumber = startLineNumber + editingLinesCnt;\n          rawContentChanges.push(new ModelRawLinesDeleted(spliceStartLineNumber + 1, endLineNumber));\n        }\n\n        if (editingLinesCnt < insertingLinesCnt) {\n          // Must insert some lines\n          var spliceLineNumber = startLineNumber + editingLinesCnt;\n          var cnt = insertingLinesCnt - editingLinesCnt;\n          var fromLineNumber = newLineCount - lineCount - cnt + spliceLineNumber + 1;\n          var newLines = [];\n\n          for (var i_1 = 0; i_1 < cnt; i_1++) {\n            var lineNumber = fromLineNumber + i_1;\n            newLines[lineNumber - fromLineNumber] = this.getLineContent(lineNumber);\n          }\n\n          rawContentChanges.push(new ModelRawLinesInserted(spliceLineNumber + 1, startLineNumber + insertingLinesCnt, newLines));\n        }\n\n        lineCount += changeLineCountDelta;\n      }\n\n      this._increaseVersionId();\n\n      this._emitContentChangedEvent(new ModelRawContentChangedEvent(rawContentChanges, this.getVersionId(), this._isUndoing, this._isRedoing), {\n        changes: contentChanges,\n        eol: this._buffer.getEOL(),\n        versionId: this.getVersionId(),\n        isUndoing: this._isUndoing,\n        isRedoing: this._isRedoing,\n        isFlush: false\n      });\n    }\n\n    return result.reverseEdits;\n  };\n\n  TextModel.prototype._undo = function () {\n    this._isUndoing = true;\n\n    var r = this._commandManager.undo();\n\n    this._isUndoing = false;\n\n    if (!r) {\n      return null;\n    }\n\n    this._overwriteAlternativeVersionId(r.recordedVersionId);\n\n    return r.selections;\n  };\n\n  TextModel.prototype.undo = function () {\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n\n      this._eventEmitter.beginDeferredEmit();\n\n      return this._undo();\n    } finally {\n      this._eventEmitter.endDeferredEmit();\n\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n\n  TextModel.prototype.canUndo = function () {\n    return this._commandManager.canUndo();\n  };\n\n  TextModel.prototype._redo = function () {\n    this._isRedoing = true;\n\n    var r = this._commandManager.redo();\n\n    this._isRedoing = false;\n\n    if (!r) {\n      return null;\n    }\n\n    this._overwriteAlternativeVersionId(r.recordedVersionId);\n\n    return r.selections;\n  };\n\n  TextModel.prototype.redo = function () {\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n\n      this._eventEmitter.beginDeferredEmit();\n\n      return this._redo();\n    } finally {\n      this._eventEmitter.endDeferredEmit();\n\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n\n  TextModel.prototype.canRedo = function () {\n    return this._commandManager.canRedo();\n  }; //#endregion\n  //#region Decorations\n\n\n  TextModel.prototype.changeDecorations = function (callback, ownerId) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n\n    this._assertNotDisposed();\n\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n\n      return this._changeDecorations(ownerId, callback);\n    } finally {\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n\n  TextModel.prototype._changeDecorations = function (ownerId, callback) {\n    var _this = this;\n\n    var changeAccessor = {\n      addDecoration: function (range, options) {\n        _this._onDidChangeDecorations.fire();\n\n        return _this._deltaDecorationsImpl(ownerId, [], [{\n          range: range,\n          options: options\n        }])[0];\n      },\n      changeDecoration: function (id, newRange) {\n        _this._onDidChangeDecorations.fire();\n\n        _this._changeDecorationImpl(id, newRange);\n      },\n      changeDecorationOptions: function (id, options) {\n        _this._onDidChangeDecorations.fire();\n\n        _this._changeDecorationOptionsImpl(id, _normalizeOptions(options));\n      },\n      removeDecoration: function (id) {\n        _this._onDidChangeDecorations.fire();\n\n        _this._deltaDecorationsImpl(ownerId, [id], []);\n      },\n      deltaDecorations: function (oldDecorations, newDecorations) {\n        if (oldDecorations.length === 0 && newDecorations.length === 0) {\n          // nothing to do\n          return [];\n        }\n\n        _this._onDidChangeDecorations.fire();\n\n        return _this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n      }\n    };\n    var result = null;\n\n    try {\n      result = callback(changeAccessor);\n    } catch (e) {\n      onUnexpectedError(e);\n    } // Invalidate change accessor\n\n\n    changeAccessor.addDecoration = invalidFunc;\n    changeAccessor.changeDecoration = invalidFunc;\n    changeAccessor.changeDecorationOptions = invalidFunc;\n    changeAccessor.removeDecoration = invalidFunc;\n    changeAccessor.deltaDecorations = invalidFunc;\n    return result;\n  };\n\n  TextModel.prototype.deltaDecorations = function (oldDecorations, newDecorations, ownerId) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n\n    this._assertNotDisposed();\n\n    if (!oldDecorations) {\n      oldDecorations = [];\n    }\n\n    if (oldDecorations.length === 0 && newDecorations.length === 0) {\n      // nothing to do\n      return [];\n    }\n\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n\n      this._onDidChangeDecorations.fire();\n\n      return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n    } finally {\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n\n  TextModel.prototype._getTrackedRange = function (id) {\n    return this.getDecorationRange(id);\n  };\n\n  TextModel.prototype._setTrackedRange = function (id, newRange, newStickiness) {\n    var node = id ? this._decorations[id] : null;\n\n    if (!node) {\n      if (!newRange) {\n        // node doesn't exist, the request is to delete => nothing to do\n        return null;\n      } // node doesn't exist, the request is to set => add the tracked range\n\n\n      return this._deltaDecorationsImpl(0, [], [{\n        range: newRange,\n        options: TRACKED_RANGE_OPTIONS[newStickiness]\n      }])[0];\n    }\n\n    if (!newRange) {\n      // node exists, the request is to delete => delete node\n      this._decorationsTree.delete(node);\n\n      delete this._decorations[node.id];\n      return null;\n    } // node exists, the request is to set => change the tracked range and its options\n\n\n    var range = this._validateRangeRelaxedNoAllocations(newRange);\n\n    var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n\n    var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n\n    this._decorationsTree.delete(node);\n\n    node.reset(this.getVersionId(), startOffset, endOffset, range);\n    node.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\n\n    this._decorationsTree.insert(node);\n\n    return node.id;\n  };\n\n  TextModel.prototype.removeAllDecorationsWithOwnerId = function (ownerId) {\n    if (this._isDisposed) {\n      return;\n    }\n\n    var nodes = this._decorationsTree.collectNodesFromOwner(ownerId);\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var node = nodes[i];\n\n      this._decorationsTree.delete(node);\n\n      delete this._decorations[node.id];\n    }\n  };\n\n  TextModel.prototype.getDecorationOptions = function (decorationId) {\n    var node = this._decorations[decorationId];\n\n    if (!node) {\n      return null;\n    }\n\n    return node.options;\n  };\n\n  TextModel.prototype.getDecorationRange = function (decorationId) {\n    var node = this._decorations[decorationId];\n\n    if (!node) {\n      return null;\n    }\n\n    var versionId = this.getVersionId();\n\n    if (node.cachedVersionId !== versionId) {\n      this._decorationsTree.resolveNode(node, versionId);\n    }\n\n    if (node.range === null) {\n      node.range = this._getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n    }\n\n    return node.range;\n  };\n\n  TextModel.prototype.getLineDecorations = function (lineNumber, ownerId, filterOutValidation) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n\n    if (filterOutValidation === void 0) {\n      filterOutValidation = false;\n    }\n\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      return [];\n    }\n\n    return this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation);\n  };\n\n  TextModel.prototype.getLinesDecorations = function (_startLineNumber, _endLineNumber, ownerId, filterOutValidation) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n\n    if (filterOutValidation === void 0) {\n      filterOutValidation = false;\n    }\n\n    var lineCount = this.getLineCount();\n    var startLineNumber = Math.min(lineCount, Math.max(1, _startLineNumber));\n    var endLineNumber = Math.min(lineCount, Math.max(1, _endLineNumber));\n    var endColumn = this.getLineMaxColumn(endLineNumber);\n    return this._getDecorationsInRange(new Range(startLineNumber, 1, endLineNumber, endColumn), ownerId, filterOutValidation);\n  };\n\n  TextModel.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n\n    if (filterOutValidation === void 0) {\n      filterOutValidation = false;\n    }\n\n    var validatedRange = this.validateRange(range);\n    return this._getDecorationsInRange(validatedRange, ownerId, filterOutValidation);\n  };\n\n  TextModel.prototype.getOverviewRulerDecorations = function (ownerId, filterOutValidation) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n\n    if (filterOutValidation === void 0) {\n      filterOutValidation = false;\n    }\n\n    var versionId = this.getVersionId();\n\n    var result = this._decorationsTree.search(ownerId, filterOutValidation, true, versionId);\n\n    return this._ensureNodesHaveRanges(result);\n  };\n\n  TextModel.prototype.getAllDecorations = function (ownerId, filterOutValidation) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n\n    if (filterOutValidation === void 0) {\n      filterOutValidation = false;\n    }\n\n    var versionId = this.getVersionId();\n\n    var result = this._decorationsTree.search(ownerId, filterOutValidation, false, versionId);\n\n    return this._ensureNodesHaveRanges(result);\n  };\n\n  TextModel.prototype._getDecorationsInRange = function (filterRange, filterOwnerId, filterOutValidation) {\n    var startOffset = this._buffer.getOffsetAt(filterRange.startLineNumber, filterRange.startColumn);\n\n    var endOffset = this._buffer.getOffsetAt(filterRange.endLineNumber, filterRange.endColumn);\n\n    var versionId = this.getVersionId();\n\n    var result = this._decorationsTree.intervalSearch(startOffset, endOffset, filterOwnerId, filterOutValidation, versionId);\n\n    return this._ensureNodesHaveRanges(result);\n  };\n\n  TextModel.prototype._ensureNodesHaveRanges = function (nodes) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var node = nodes[i];\n\n      if (node.range === null) {\n        node.range = this._getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n      }\n    }\n\n    return nodes;\n  };\n\n  TextModel.prototype._getRangeAt = function (start, end) {\n    return this._buffer.getRangeAt(start, end - start);\n  };\n\n  TextModel.prototype._changeDecorationImpl = function (decorationId, _range) {\n    var node = this._decorations[decorationId];\n\n    if (!node) {\n      return;\n    }\n\n    var range = this._validateRangeRelaxedNoAllocations(_range);\n\n    var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n\n    var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n\n    this._decorationsTree.delete(node);\n\n    node.reset(this.getVersionId(), startOffset, endOffset, range);\n\n    this._decorationsTree.insert(node);\n  };\n\n  TextModel.prototype._changeDecorationOptionsImpl = function (decorationId, options) {\n    var node = this._decorations[decorationId];\n\n    if (!node) {\n      return;\n    }\n\n    var nodeWasInOverviewRuler = node.options.overviewRuler && node.options.overviewRuler.color ? true : false;\n    var nodeIsInOverviewRuler = options.overviewRuler && options.overviewRuler.color ? true : false;\n\n    if (nodeWasInOverviewRuler !== nodeIsInOverviewRuler) {\n      // Delete + Insert due to an overview ruler status change\n      this._decorationsTree.delete(node);\n\n      node.setOptions(options);\n\n      this._decorationsTree.insert(node);\n    } else {\n      node.setOptions(options);\n    }\n  };\n\n  TextModel.prototype._deltaDecorationsImpl = function (ownerId, oldDecorationsIds, newDecorations) {\n    var versionId = this.getVersionId();\n    var oldDecorationsLen = oldDecorationsIds.length;\n    var oldDecorationIndex = 0;\n    var newDecorationsLen = newDecorations.length;\n    var newDecorationIndex = 0;\n    var result = new Array(newDecorationsLen);\n\n    while (oldDecorationIndex < oldDecorationsLen || newDecorationIndex < newDecorationsLen) {\n      var node = null;\n\n      if (oldDecorationIndex < oldDecorationsLen) {\n        // (1) get ourselves an old node\n        do {\n          node = this._decorations[oldDecorationsIds[oldDecorationIndex++]];\n        } while (!node && oldDecorationIndex < oldDecorationsLen); // (2) remove the node from the tree (if it exists)\n\n\n        if (node) {\n          this._decorationsTree.delete(node);\n        }\n      }\n\n      if (newDecorationIndex < newDecorationsLen) {\n        // (3) create a new node if necessary\n        if (!node) {\n          var internalDecorationId = ++this._lastDecorationId;\n          var decorationId = this._instanceId + \";\" + internalDecorationId;\n          node = new IntervalNode(decorationId, 0, 0);\n          this._decorations[decorationId] = node;\n        } // (4) initialize node\n\n\n        var newDecoration = newDecorations[newDecorationIndex];\n\n        var range = this._validateRangeRelaxedNoAllocations(newDecoration.range);\n\n        var options = _normalizeOptions(newDecoration.options);\n\n        var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n\n        var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n\n        node.ownerId = ownerId;\n        node.reset(versionId, startOffset, endOffset, range);\n        node.setOptions(options);\n\n        this._decorationsTree.insert(node);\n\n        result[newDecorationIndex] = node.id;\n        newDecorationIndex++;\n      } else {\n        if (node) {\n          delete this._decorations[node.id];\n        }\n      }\n    }\n\n    return result;\n  }; //#endregion\n  //#region Tokenization\n\n\n  TextModel.prototype.setLineTokens = function (lineNumber, tokens) {\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n\n    this._tokens.setTokens(this._languageIdentifier.id, lineNumber - 1, this._buffer.getLineLength(lineNumber), tokens);\n  };\n\n  TextModel.prototype.setTokens = function (tokens) {\n    if (tokens.length === 0) {\n      return;\n    }\n\n    var ranges = [];\n\n    for (var i = 0, len = tokens.length; i < len; i++) {\n      var element = tokens[i];\n      ranges.push({\n        fromLineNumber: element.startLineNumber,\n        toLineNumber: element.startLineNumber + element.tokens.length - 1\n      });\n\n      for (var j = 0, lenJ = element.tokens.length; j < lenJ; j++) {\n        this.setLineTokens(element.startLineNumber + j, element.tokens[j]);\n      }\n    }\n\n    this._emitModelTokensChangedEvent({\n      tokenizationSupportChanged: false,\n      ranges: ranges\n    });\n  };\n\n  TextModel.prototype.setSemanticTokens = function (tokens) {\n    this._tokens2.set(tokens);\n\n    this._emitModelTokensChangedEvent({\n      tokenizationSupportChanged: false,\n      ranges: [{\n        fromLineNumber: 1,\n        toLineNumber: this.getLineCount()\n      }]\n    });\n  };\n\n  TextModel.prototype.tokenizeViewport = function (startLineNumber, endLineNumber) {\n    startLineNumber = Math.max(1, startLineNumber);\n    endLineNumber = Math.min(this._buffer.getLineCount(), endLineNumber);\n\n    this._tokenization.tokenizeViewport(startLineNumber, endLineNumber);\n  };\n\n  TextModel.prototype.clearTokens = function () {\n    this._tokens.flush();\n\n    this._emitModelTokensChangedEvent({\n      tokenizationSupportChanged: true,\n      ranges: [{\n        fromLineNumber: 1,\n        toLineNumber: this._buffer.getLineCount()\n      }]\n    });\n  };\n\n  TextModel.prototype._emitModelTokensChangedEvent = function (e) {\n    if (!this._isDisposing) {\n      this._onDidChangeTokens.fire(e);\n    }\n  };\n\n  TextModel.prototype.resetTokenization = function () {\n    this._tokenization.reset();\n  };\n\n  TextModel.prototype.forceTokenization = function (lineNumber) {\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n\n    this._tokenization.forceTokenization(lineNumber);\n  };\n\n  TextModel.prototype.isCheapToTokenize = function (lineNumber) {\n    return this._tokenization.isCheapToTokenize(lineNumber);\n  };\n\n  TextModel.prototype.tokenizeIfCheap = function (lineNumber) {\n    if (this.isCheapToTokenize(lineNumber)) {\n      this.forceTokenization(lineNumber);\n    }\n  };\n\n  TextModel.prototype.getLineTokens = function (lineNumber) {\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n\n    return this._getLineTokens(lineNumber);\n  };\n\n  TextModel.prototype._getLineTokens = function (lineNumber) {\n    var lineText = this.getLineContent(lineNumber);\n\n    var syntacticTokens = this._tokens.getTokens(this._languageIdentifier.id, lineNumber - 1, lineText);\n\n    return this._tokens2.addSemanticTokens(lineNumber, syntacticTokens);\n  };\n\n  TextModel.prototype.getLanguageIdentifier = function () {\n    return this._languageIdentifier;\n  };\n\n  TextModel.prototype.getModeId = function () {\n    return this._languageIdentifier.language;\n  };\n\n  TextModel.prototype.setMode = function (languageIdentifier) {\n    if (this._languageIdentifier.id === languageIdentifier.id) {\n      // There's nothing to do\n      return;\n    }\n\n    var e = {\n      oldLanguage: this._languageIdentifier.language,\n      newLanguage: languageIdentifier.language\n    };\n    this._languageIdentifier = languageIdentifier;\n\n    this._onDidChangeLanguage.fire(e);\n\n    this._onDidChangeLanguageConfiguration.fire({});\n  };\n\n  TextModel.prototype.getLanguageIdAtPosition = function (lineNumber, column) {\n    var position = this.validatePosition(new Position(lineNumber, column));\n    var lineTokens = this.getLineTokens(position.lineNumber);\n    return lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\n  }; // Having tokens allows implementing additional helper methods\n\n\n  TextModel.prototype.getWordAtPosition = function (_position) {\n    this._assertNotDisposed();\n\n    var position = this.validatePosition(_position);\n    var lineContent = this.getLineContent(position.lineNumber);\n\n    var lineTokens = this._getLineTokens(position.lineNumber);\n\n    var tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1); // (1). First try checking right biased word\n\n    var _a = TextModel._findLanguageBoundaries(lineTokens, tokenIndex),\n        rbStartOffset = _a[0],\n        rbEndOffset = _a[1];\n\n    var rightBiasedWord = getWordAtText(position.column, LanguageConfigurationRegistry.getWordDefinition(lineTokens.getLanguageId(tokenIndex)), lineContent.substring(rbStartOffset, rbEndOffset), rbStartOffset); // Make sure the result touches the original passed in position\n\n    if (rightBiasedWord && rightBiasedWord.startColumn <= _position.column && _position.column <= rightBiasedWord.endColumn) {\n      return rightBiasedWord;\n    } // (2). Else, if we were at a language boundary, check the left biased word\n\n\n    if (tokenIndex > 0 && rbStartOffset === position.column - 1) {\n      // edge case, where `position` sits between two tokens belonging to two different languages\n      var _b = TextModel._findLanguageBoundaries(lineTokens, tokenIndex - 1),\n          lbStartOffset = _b[0],\n          lbEndOffset = _b[1];\n\n      var leftBiasedWord = getWordAtText(position.column, LanguageConfigurationRegistry.getWordDefinition(lineTokens.getLanguageId(tokenIndex - 1)), lineContent.substring(lbStartOffset, lbEndOffset), lbStartOffset); // Make sure the result touches the original passed in position\n\n      if (leftBiasedWord && leftBiasedWord.startColumn <= _position.column && _position.column <= leftBiasedWord.endColumn) {\n        return leftBiasedWord;\n      }\n    }\n\n    return null;\n  };\n\n  TextModel._findLanguageBoundaries = function (lineTokens, tokenIndex) {\n    var languageId = lineTokens.getLanguageId(tokenIndex); // go left until a different language is hit\n\n    var startOffset = 0;\n\n    for (var i = tokenIndex; i >= 0 && lineTokens.getLanguageId(i) === languageId; i--) {\n      startOffset = lineTokens.getStartOffset(i);\n    } // go right until a different language is hit\n\n\n    var endOffset = lineTokens.getLineContent().length;\n\n    for (var i = tokenIndex, tokenCount = lineTokens.getCount(); i < tokenCount && lineTokens.getLanguageId(i) === languageId; i++) {\n      endOffset = lineTokens.getEndOffset(i);\n    }\n\n    return [startOffset, endOffset];\n  };\n\n  TextModel.prototype.getWordUntilPosition = function (position) {\n    var wordAtPosition = this.getWordAtPosition(position);\n\n    if (!wordAtPosition) {\n      return {\n        word: '',\n        startColumn: position.column,\n        endColumn: position.column\n      };\n    }\n\n    return {\n      word: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\n      startColumn: wordAtPosition.startColumn,\n      endColumn: position.column\n    };\n  };\n\n  TextModel.prototype.findMatchingBracketUp = function (_bracket, _position) {\n    var bracket = _bracket.toLowerCase();\n\n    var position = this.validatePosition(_position);\n\n    var lineTokens = this._getLineTokens(position.lineNumber);\n\n    var languageId = lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\n    var bracketsSupport = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n\n    if (!bracketsSupport) {\n      return null;\n    }\n\n    var data = bracketsSupport.textIsBracket[bracket];\n\n    if (!data) {\n      return null;\n    }\n\n    return this._findMatchingBracketUp(data, position);\n  };\n\n  TextModel.prototype.matchBracket = function (position) {\n    return this._matchBracket(this.validatePosition(position));\n  };\n\n  TextModel.prototype._matchBracket = function (position) {\n    var lineNumber = position.lineNumber;\n\n    var lineTokens = this._getLineTokens(lineNumber);\n\n    var tokenCount = lineTokens.getCount();\n\n    var lineText = this._buffer.getLineContent(lineNumber);\n\n    var tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n\n    if (tokenIndex < 0) {\n      return null;\n    }\n\n    var currentModeBrackets = LanguageConfigurationRegistry.getBracketsSupport(lineTokens.getLanguageId(tokenIndex)); // check that the token is not to be ignored\n\n    if (currentModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex))) {\n      // limit search to not go before `maxBracketLength`\n      var searchStartOffset = Math.max(0, position.column - 1 - currentModeBrackets.maxBracketLength);\n\n      for (var i = tokenIndex - 1; i >= 0; i--) {\n        var tokenEndOffset = lineTokens.getEndOffset(i);\n\n        if (tokenEndOffset <= searchStartOffset) {\n          break;\n        }\n\n        if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i))) {\n          searchStartOffset = tokenEndOffset;\n        }\n      } // limit search to not go after `maxBracketLength`\n\n\n      var searchEndOffset = Math.min(lineText.length, position.column - 1 + currentModeBrackets.maxBracketLength); // it might be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\n      // `bestResult` will contain the most right-side result\n\n      var bestResult = null;\n\n      while (true) {\n        var foundBracket = BracketsUtils.findNextBracketInRange(currentModeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n        if (!foundBracket) {\n          // there are no more brackets in this text\n          break;\n        } // check that we didn't hit a bracket too far away from position\n\n\n        if (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n          var foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n\n          var r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText]);\n\n          if (r) {\n            bestResult = r;\n          }\n        }\n\n        searchStartOffset = foundBracket.endColumn - 1;\n      }\n\n      if (bestResult) {\n        return bestResult;\n      }\n    } // If position is in between two tokens, try also looking in the previous token\n\n\n    if (tokenIndex > 0 && lineTokens.getStartOffset(tokenIndex) === position.column - 1) {\n      var prevTokenIndex = tokenIndex - 1;\n      var prevModeBrackets = LanguageConfigurationRegistry.getBracketsSupport(lineTokens.getLanguageId(prevTokenIndex)); // check that previous token is not to be ignored\n\n      if (prevModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(prevTokenIndex))) {\n        // limit search in case previous token is very large, there's no need to go beyond `maxBracketLength`\n        var searchStartOffset = Math.max(0, position.column - 1 - prevModeBrackets.maxBracketLength);\n        var searchEndOffset = Math.min(lineText.length, position.column - 1 + prevModeBrackets.maxBracketLength);\n\n        for (var i = prevTokenIndex + 1; i < tokenCount; i++) {\n          var tokenStartOffset = lineTokens.getStartOffset(i);\n\n          if (tokenStartOffset >= searchEndOffset) {\n            break;\n          }\n\n          if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i))) {\n            searchEndOffset = tokenStartOffset;\n          }\n        }\n\n        var foundBracket = BracketsUtils.findPrevBracketInRange(prevModeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset); // check that we didn't hit a bracket too far away from position\n\n        if (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n          var foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n\n          var r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText]);\n\n          if (r) {\n            return r;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  TextModel.prototype._matchFoundBracket = function (foundBracket, data, isOpen) {\n    if (!data) {\n      return null;\n    }\n\n    if (isOpen) {\n      var matched = this._findMatchingBracketDown(data, foundBracket.getEndPosition());\n\n      if (matched) {\n        return [foundBracket, matched];\n      }\n    } else {\n      var matched = this._findMatchingBracketUp(data, foundBracket.getStartPosition());\n\n      if (matched) {\n        return [foundBracket, matched];\n      }\n    }\n\n    return null;\n  };\n\n  TextModel.prototype._findMatchingBracketUp = function (bracket, position) {\n    // console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n    var languageId = bracket.languageIdentifier.id;\n    var reversedBracketRegex = bracket.reversedRegex;\n    var count = -1;\n\n    var searchPrevMatchingBracketInRange = function (lineNumber, lineText, searchStartOffset, searchEndOffset) {\n      while (true) {\n        var r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n        if (!r) {\n          break;\n        }\n\n        var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n\n        if (bracket.isOpen(hitText)) {\n          count++;\n        } else if (bracket.isClose(hitText)) {\n          count--;\n        }\n\n        if (count === 0) {\n          return r;\n        }\n\n        searchEndOffset = r.startColumn - 1;\n      }\n\n      return null;\n    };\n\n    for (var lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n      var lineTokens = this._getLineTokens(lineNumber);\n\n      var tokenCount = lineTokens.getCount();\n\n      var lineText = this._buffer.getLineContent(lineNumber);\n\n      var tokenIndex = tokenCount - 1;\n      var searchStartOffset = lineText.length;\n      var searchEndOffset = lineText.length;\n\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n      }\n\n      var prevSearchInToken = true;\n\n      for (; tokenIndex >= 0; tokenIndex--) {\n        var searchInToken = lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchStartOffset\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n            if (r) {\n              return r;\n            }\n          }\n        }\n\n        prevSearchInToken = searchInToken;\n      }\n\n      if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        var r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n        if (r) {\n          return r;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  TextModel.prototype._findMatchingBracketDown = function (bracket, position) {\n    // console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n    var languageId = bracket.languageIdentifier.id;\n    var bracketRegex = bracket.forwardRegex;\n    var count = 1;\n\n    var searchNextMatchingBracketInRange = function (lineNumber, lineText, searchStartOffset, searchEndOffset) {\n      while (true) {\n        var r = BracketsUtils.findNextBracketInRange(bracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n        if (!r) {\n          break;\n        }\n\n        var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n\n        if (bracket.isOpen(hitText)) {\n          count++;\n        } else if (bracket.isClose(hitText)) {\n          count--;\n        }\n\n        if (count === 0) {\n          return r;\n        }\n\n        searchStartOffset = r.endColumn - 1;\n      }\n\n      return null;\n    };\n\n    var lineCount = this.getLineCount();\n\n    for (var lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n      var lineTokens = this._getLineTokens(lineNumber);\n\n      var tokenCount = lineTokens.getCount();\n\n      var lineText = this._buffer.getLineContent(lineNumber);\n\n      var tokenIndex = 0;\n      var searchStartOffset = 0;\n      var searchEndOffset = 0;\n\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n      }\n\n      var prevSearchInToken = true;\n\n      for (; tokenIndex < tokenCount; tokenIndex++) {\n        var searchInToken = lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchEndOffset\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n            if (r) {\n              return r;\n            }\n          }\n        }\n\n        prevSearchInToken = searchInToken;\n      }\n\n      if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        var r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n        if (r) {\n          return r;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  TextModel.prototype.findPrevBracket = function (_position) {\n    var position = this.validatePosition(_position);\n    var languageId = -1;\n    var modeBrackets = null;\n\n    for (var lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n      var lineTokens = this._getLineTokens(lineNumber);\n\n      var tokenCount = lineTokens.getCount();\n\n      var lineText = this._buffer.getLineContent(lineNumber);\n\n      var tokenIndex = tokenCount - 1;\n      var searchStartOffset = lineText.length;\n      var searchEndOffset = lineText.length;\n\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n        var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n        if (languageId !== tokenLanguageId) {\n          languageId = tokenLanguageId;\n          modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n        }\n      }\n\n      var prevSearchInToken = true;\n\n      for (; tokenIndex >= 0; tokenIndex--) {\n        var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n        if (languageId !== tokenLanguageId) {\n          // language id change!\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n            if (r) {\n              return this._toFoundBracket(modeBrackets, r);\n            }\n\n            prevSearchInToken = false;\n          }\n\n          languageId = tokenLanguageId;\n          modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n        }\n\n        var searchInToken = !!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchStartOffset\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n            if (r) {\n              return this._toFoundBracket(modeBrackets, r);\n            }\n          }\n        }\n\n        prevSearchInToken = searchInToken;\n      }\n\n      if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        var r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n        if (r) {\n          return this._toFoundBracket(modeBrackets, r);\n        }\n      }\n    }\n\n    return null;\n  };\n\n  TextModel.prototype.findNextBracket = function (_position) {\n    var position = this.validatePosition(_position);\n    var lineCount = this.getLineCount();\n    var languageId = -1;\n    var modeBrackets = null;\n\n    for (var lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n      var lineTokens = this._getLineTokens(lineNumber);\n\n      var tokenCount = lineTokens.getCount();\n\n      var lineText = this._buffer.getLineContent(lineNumber);\n\n      var tokenIndex = 0;\n      var searchStartOffset = 0;\n      var searchEndOffset = 0;\n\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n        var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n        if (languageId !== tokenLanguageId) {\n          languageId = tokenLanguageId;\n          modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n        }\n      }\n\n      var prevSearchInToken = true;\n\n      for (; tokenIndex < tokenCount; tokenIndex++) {\n        var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n        if (languageId !== tokenLanguageId) {\n          // language id change!\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n            if (r) {\n              return this._toFoundBracket(modeBrackets, r);\n            }\n\n            prevSearchInToken = false;\n          }\n\n          languageId = tokenLanguageId;\n          modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n        }\n\n        var searchInToken = !!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchEndOffset\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n            if (r) {\n              return this._toFoundBracket(modeBrackets, r);\n            }\n          }\n        }\n\n        prevSearchInToken = searchInToken;\n      }\n\n      if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n        if (r) {\n          return this._toFoundBracket(modeBrackets, r);\n        }\n      }\n    }\n\n    return null;\n  };\n\n  TextModel.prototype.findEnclosingBrackets = function (_position, maxDuration) {\n    var _this = this;\n\n    if (maxDuration === void 0) {\n      maxDuration = 1073741824\n      /* MAX_SAFE_SMALL_INTEGER */\n      ;\n    }\n\n    var position = this.validatePosition(_position);\n    var lineCount = this.getLineCount();\n    var savedCounts = new Map();\n    var counts = [];\n\n    var resetCounts = function (languageId, modeBrackets) {\n      if (!savedCounts.has(languageId)) {\n        var tmp = [];\n\n        for (var i = 0, len = modeBrackets ? modeBrackets.brackets.length : 0; i < len; i++) {\n          tmp[i] = 0;\n        }\n\n        savedCounts.set(languageId, tmp);\n      }\n\n      counts = savedCounts.get(languageId);\n    };\n\n    var searchInRange = function (modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset) {\n      while (true) {\n        var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n        if (!r) {\n          break;\n        }\n\n        var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n        var bracket = modeBrackets.textIsBracket[hitText];\n\n        if (bracket) {\n          if (bracket.isOpen(hitText)) {\n            counts[bracket.index]++;\n          } else if (bracket.isClose(hitText)) {\n            counts[bracket.index]--;\n          }\n\n          if (counts[bracket.index] === -1) {\n            return _this._matchFoundBracket(r, bracket, false);\n          }\n        }\n\n        searchStartOffset = r.endColumn - 1;\n      }\n\n      return null;\n    };\n\n    var languageId = -1;\n    var modeBrackets = null;\n    var startTime = Date.now();\n\n    for (var lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n      var elapsedTime = Date.now() - startTime;\n\n      if (elapsedTime > maxDuration) {\n        return null;\n      }\n\n      var lineTokens = this._getLineTokens(lineNumber);\n\n      var tokenCount = lineTokens.getCount();\n\n      var lineText = this._buffer.getLineContent(lineNumber);\n\n      var tokenIndex = 0;\n      var searchStartOffset = 0;\n      var searchEndOffset = 0;\n\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n        var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n        if (languageId !== tokenLanguageId) {\n          languageId = tokenLanguageId;\n          modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n          resetCounts(languageId, modeBrackets);\n        }\n      }\n\n      var prevSearchInToken = true;\n\n      for (; tokenIndex < tokenCount; tokenIndex++) {\n        var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n\n        if (languageId !== tokenLanguageId) {\n          // language id change!\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n            if (r) {\n              return r;\n            }\n\n            prevSearchInToken = false;\n          }\n\n          languageId = tokenLanguageId;\n          modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n          resetCounts(languageId, modeBrackets);\n        }\n\n        var searchInToken = !!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchEndOffset\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n            if (r) {\n              return r;\n            }\n          }\n        }\n\n        prevSearchInToken = searchInToken;\n      }\n\n      if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        var r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n\n        if (r) {\n          return r;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  TextModel.prototype._toFoundBracket = function (modeBrackets, r) {\n    if (!r) {\n      return null;\n    }\n\n    var text = this.getValueInRange(r);\n    text = text.toLowerCase();\n    var data = modeBrackets.textIsBracket[text];\n\n    if (!data) {\n      return null;\n    }\n\n    return {\n      range: r,\n      open: data.open,\n      close: data.close,\n      isOpen: modeBrackets.textIsOpenBracket[text]\n    };\n  };\n  /**\r\n   * Returns:\r\n   *  - -1 => the line consists of whitespace\r\n   *  - otherwise => the indent level is returned value\r\n   */\n\n\n  TextModel.computeIndentLevel = function (line, tabSize) {\n    var indent = 0;\n    var i = 0;\n    var len = line.length;\n\n    while (i < len) {\n      var chCode = line.charCodeAt(i);\n\n      if (chCode === 32\n      /* Space */\n      ) {\n          indent++;\n        } else if (chCode === 9\n      /* Tab */\n      ) {\n          indent = indent - indent % tabSize + tabSize;\n        } else {\n        break;\n      }\n\n      i++;\n    }\n\n    if (i === len) {\n      return -1; // line only consists of whitespace\n    }\n\n    return indent;\n  };\n\n  TextModel.prototype._computeIndentLevel = function (lineIndex) {\n    return TextModel.computeIndentLevel(this._buffer.getLineContent(lineIndex + 1), this._options.tabSize);\n  };\n\n  TextModel.prototype.getActiveIndentGuide = function (lineNumber, minLineNumber, maxLineNumber) {\n    var _this = this;\n\n    this._assertNotDisposed();\n\n    var lineCount = this.getLineCount();\n\n    if (lineNumber < 1 || lineNumber > lineCount) {\n      throw new Error('Illegal value for lineNumber');\n    }\n\n    var foldingRules = LanguageConfigurationRegistry.getFoldingRules(this._languageIdentifier.id);\n    var offSide = Boolean(foldingRules && foldingRules.offSide);\n    var up_aboveContentLineIndex = -2;\n    /* -2 is a marker for not having computed it */\n\n    var up_aboveContentLineIndent = -1;\n    var up_belowContentLineIndex = -2;\n    /* -2 is a marker for not having computed it */\n\n    var up_belowContentLineIndent = -1;\n\n    var up_resolveIndents = function (lineNumber) {\n      if (up_aboveContentLineIndex !== -1 && (up_aboveContentLineIndex === -2 || up_aboveContentLineIndex > lineNumber - 1)) {\n        up_aboveContentLineIndex = -1;\n        up_aboveContentLineIndent = -1; // must find previous line with content\n\n        for (var lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n          var indent_1 = _this._computeIndentLevel(lineIndex);\n\n          if (indent_1 >= 0) {\n            up_aboveContentLineIndex = lineIndex;\n            up_aboveContentLineIndent = indent_1;\n            break;\n          }\n        }\n      }\n\n      if (up_belowContentLineIndex === -2) {\n        up_belowContentLineIndex = -1;\n        up_belowContentLineIndent = -1; // must find next line with content\n\n        for (var lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n          var indent_2 = _this._computeIndentLevel(lineIndex);\n\n          if (indent_2 >= 0) {\n            up_belowContentLineIndex = lineIndex;\n            up_belowContentLineIndent = indent_2;\n            break;\n          }\n        }\n      }\n    };\n\n    var down_aboveContentLineIndex = -2;\n    /* -2 is a marker for not having computed it */\n\n    var down_aboveContentLineIndent = -1;\n    var down_belowContentLineIndex = -2;\n    /* -2 is a marker for not having computed it */\n\n    var down_belowContentLineIndent = -1;\n\n    var down_resolveIndents = function (lineNumber) {\n      if (down_aboveContentLineIndex === -2) {\n        down_aboveContentLineIndex = -1;\n        down_aboveContentLineIndent = -1; // must find previous line with content\n\n        for (var lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n          var indent_3 = _this._computeIndentLevel(lineIndex);\n\n          if (indent_3 >= 0) {\n            down_aboveContentLineIndex = lineIndex;\n            down_aboveContentLineIndent = indent_3;\n            break;\n          }\n        }\n      }\n\n      if (down_belowContentLineIndex !== -1 && (down_belowContentLineIndex === -2 || down_belowContentLineIndex < lineNumber - 1)) {\n        down_belowContentLineIndex = -1;\n        down_belowContentLineIndent = -1; // must find next line with content\n\n        for (var lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n          var indent_4 = _this._computeIndentLevel(lineIndex);\n\n          if (indent_4 >= 0) {\n            down_belowContentLineIndex = lineIndex;\n            down_belowContentLineIndent = indent_4;\n            break;\n          }\n        }\n      }\n    };\n\n    var startLineNumber = 0;\n    var goUp = true;\n    var endLineNumber = 0;\n    var goDown = true;\n    var indent = 0;\n\n    for (var distance = 0; goUp || goDown; distance++) {\n      var upLineNumber = lineNumber - distance;\n      var downLineNumber = lineNumber + distance;\n\n      if (distance !== 0 && (upLineNumber < 1 || upLineNumber < minLineNumber)) {\n        goUp = false;\n      }\n\n      if (distance !== 0 && (downLineNumber > lineCount || downLineNumber > maxLineNumber)) {\n        goDown = false;\n      }\n\n      if (distance > 50000) {\n        // stop processing\n        goUp = false;\n        goDown = false;\n      }\n\n      if (goUp) {\n        // compute indent level going up\n        var upLineIndentLevel = void 0;\n\n        var currentIndent = this._computeIndentLevel(upLineNumber - 1);\n\n        if (currentIndent >= 0) {\n          // This line has content (besides whitespace)\n          // Use the line's indent\n          up_belowContentLineIndex = upLineNumber - 1;\n          up_belowContentLineIndent = currentIndent;\n          upLineIndentLevel = Math.ceil(currentIndent / this._options.indentSize);\n        } else {\n          up_resolveIndents(upLineNumber);\n          upLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, up_aboveContentLineIndent, up_belowContentLineIndent);\n        }\n\n        if (distance === 0) {\n          // This is the initial line number\n          startLineNumber = upLineNumber;\n          endLineNumber = downLineNumber;\n          indent = upLineIndentLevel;\n\n          if (indent === 0) {\n            // No need to continue\n            return {\n              startLineNumber: startLineNumber,\n              endLineNumber: endLineNumber,\n              indent: indent\n            };\n          }\n\n          continue;\n        }\n\n        if (upLineIndentLevel >= indent) {\n          startLineNumber = upLineNumber;\n        } else {\n          goUp = false;\n        }\n      }\n\n      if (goDown) {\n        // compute indent level going down\n        var downLineIndentLevel = void 0;\n\n        var currentIndent = this._computeIndentLevel(downLineNumber - 1);\n\n        if (currentIndent >= 0) {\n          // This line has content (besides whitespace)\n          // Use the line's indent\n          down_aboveContentLineIndex = downLineNumber - 1;\n          down_aboveContentLineIndent = currentIndent;\n          downLineIndentLevel = Math.ceil(currentIndent / this._options.indentSize);\n        } else {\n          down_resolveIndents(downLineNumber);\n          downLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, down_aboveContentLineIndent, down_belowContentLineIndent);\n        }\n\n        if (downLineIndentLevel >= indent) {\n          endLineNumber = downLineNumber;\n        } else {\n          goDown = false;\n        }\n      }\n    }\n\n    return {\n      startLineNumber: startLineNumber,\n      endLineNumber: endLineNumber,\n      indent: indent\n    };\n  };\n\n  TextModel.prototype.getLinesIndentGuides = function (startLineNumber, endLineNumber) {\n    this._assertNotDisposed();\n\n    var lineCount = this.getLineCount();\n\n    if (startLineNumber < 1 || startLineNumber > lineCount) {\n      throw new Error('Illegal value for startLineNumber');\n    }\n\n    if (endLineNumber < 1 || endLineNumber > lineCount) {\n      throw new Error('Illegal value for endLineNumber');\n    }\n\n    var foldingRules = LanguageConfigurationRegistry.getFoldingRules(this._languageIdentifier.id);\n    var offSide = Boolean(foldingRules && foldingRules.offSide);\n    var result = new Array(endLineNumber - startLineNumber + 1);\n    var aboveContentLineIndex = -2;\n    /* -2 is a marker for not having computed it */\n\n    var aboveContentLineIndent = -1;\n    var belowContentLineIndex = -2;\n    /* -2 is a marker for not having computed it */\n\n    var belowContentLineIndent = -1;\n\n    for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      var resultIndex = lineNumber - startLineNumber;\n\n      var currentIndent = this._computeIndentLevel(lineNumber - 1);\n\n      if (currentIndent >= 0) {\n        // This line has content (besides whitespace)\n        // Use the line's indent\n        aboveContentLineIndex = lineNumber - 1;\n        aboveContentLineIndent = currentIndent;\n        result[resultIndex] = Math.ceil(currentIndent / this._options.indentSize);\n        continue;\n      }\n\n      if (aboveContentLineIndex === -2) {\n        aboveContentLineIndex = -1;\n        aboveContentLineIndent = -1; // must find previous line with content\n\n        for (var lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n          var indent = this._computeIndentLevel(lineIndex);\n\n          if (indent >= 0) {\n            aboveContentLineIndex = lineIndex;\n            aboveContentLineIndent = indent;\n            break;\n          }\n        }\n      }\n\n      if (belowContentLineIndex !== -1 && (belowContentLineIndex === -2 || belowContentLineIndex < lineNumber - 1)) {\n        belowContentLineIndex = -1;\n        belowContentLineIndent = -1; // must find next line with content\n\n        for (var lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n          var indent = this._computeIndentLevel(lineIndex);\n\n          if (indent >= 0) {\n            belowContentLineIndex = lineIndex;\n            belowContentLineIndent = indent;\n            break;\n          }\n        }\n      }\n\n      result[resultIndex] = this._getIndentLevelForWhitespaceLine(offSide, aboveContentLineIndent, belowContentLineIndent);\n    }\n\n    return result;\n  };\n\n  TextModel.prototype._getIndentLevelForWhitespaceLine = function (offSide, aboveContentLineIndent, belowContentLineIndent) {\n    if (aboveContentLineIndent === -1 || belowContentLineIndent === -1) {\n      // At the top or bottom of the file\n      return 0;\n    } else if (aboveContentLineIndent < belowContentLineIndent) {\n      // we are inside the region above\n      return 1 + Math.floor(aboveContentLineIndent / this._options.indentSize);\n    } else if (aboveContentLineIndent === belowContentLineIndent) {\n      // we are in between two regions\n      return Math.ceil(belowContentLineIndent / this._options.indentSize);\n    } else {\n      if (offSide) {\n        // same level as region below\n        return Math.ceil(belowContentLineIndent / this._options.indentSize);\n      } else {\n        // we are inside the region that ends below\n        return 1 + Math.floor(belowContentLineIndent / this._options.indentSize);\n      }\n    }\n  };\n\n  TextModel.MODEL_SYNC_LIMIT = 50 * 1024 * 1024; // 50 MB\n\n  TextModel.LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024; // 20 MB;\n\n  TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1000; // 300K lines\n\n  TextModel.DEFAULT_CREATION_OPTIONS = {\n    isForSimpleWidget: false,\n    tabSize: EDITOR_MODEL_DEFAULTS.tabSize,\n    indentSize: EDITOR_MODEL_DEFAULTS.indentSize,\n    insertSpaces: EDITOR_MODEL_DEFAULTS.insertSpaces,\n    detectIndentation: false,\n    defaultEOL: 1\n    /* LF */\n    ,\n    trimAutoWhitespace: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n    largeFileOptimizations: EDITOR_MODEL_DEFAULTS.largeFileOptimizations\n  };\n  return TextModel;\n}(Disposable);\n\nexport { TextModel }; //#region Decorations\n\nvar DecorationsTrees =\n/** @class */\nfunction () {\n  function DecorationsTrees() {\n    this._decorationsTree0 = new IntervalTree();\n    this._decorationsTree1 = new IntervalTree();\n  }\n\n  DecorationsTrees.prototype.intervalSearch = function (start, end, filterOwnerId, filterOutValidation, cachedVersionId) {\n    var r0 = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n\n    var r1 = this._decorationsTree1.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n\n    return r0.concat(r1);\n  };\n\n  DecorationsTrees.prototype.search = function (filterOwnerId, filterOutValidation, overviewRulerOnly, cachedVersionId) {\n    if (overviewRulerOnly) {\n      return this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId);\n    } else {\n      var r0 = this._decorationsTree0.search(filterOwnerId, filterOutValidation, cachedVersionId);\n\n      var r1 = this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId);\n\n      return r0.concat(r1);\n    }\n  };\n\n  DecorationsTrees.prototype.collectNodesFromOwner = function (ownerId) {\n    var r0 = this._decorationsTree0.collectNodesFromOwner(ownerId);\n\n    var r1 = this._decorationsTree1.collectNodesFromOwner(ownerId);\n\n    return r0.concat(r1);\n  };\n\n  DecorationsTrees.prototype.collectNodesPostOrder = function () {\n    var r0 = this._decorationsTree0.collectNodesPostOrder();\n\n    var r1 = this._decorationsTree1.collectNodesPostOrder();\n\n    return r0.concat(r1);\n  };\n\n  DecorationsTrees.prototype.insert = function (node) {\n    if (getNodeIsInOverviewRuler(node)) {\n      this._decorationsTree1.insert(node);\n    } else {\n      this._decorationsTree0.insert(node);\n    }\n  };\n\n  DecorationsTrees.prototype.delete = function (node) {\n    if (getNodeIsInOverviewRuler(node)) {\n      this._decorationsTree1.delete(node);\n    } else {\n      this._decorationsTree0.delete(node);\n    }\n  };\n\n  DecorationsTrees.prototype.resolveNode = function (node, cachedVersionId) {\n    if (getNodeIsInOverviewRuler(node)) {\n      this._decorationsTree1.resolveNode(node, cachedVersionId);\n    } else {\n      this._decorationsTree0.resolveNode(node, cachedVersionId);\n    }\n  };\n\n  DecorationsTrees.prototype.acceptReplace = function (offset, length, textLength, forceMoveMarkers) {\n    this._decorationsTree0.acceptReplace(offset, length, textLength, forceMoveMarkers);\n\n    this._decorationsTree1.acceptReplace(offset, length, textLength, forceMoveMarkers);\n  };\n\n  return DecorationsTrees;\n}();\n\nfunction cleanClassName(className) {\n  return className.replace(/[^a-z0-9\\-_]/gi, ' ');\n}\n\nvar DecorationOptions =\n/** @class */\nfunction () {\n  function DecorationOptions(options) {\n    this.color = options.color || '';\n    this.darkColor = options.darkColor || '';\n  }\n\n  return DecorationOptions;\n}();\n\nvar ModelDecorationOverviewRulerOptions =\n/** @class */\nfunction (_super) {\n  __extends(ModelDecorationOverviewRulerOptions, _super);\n\n  function ModelDecorationOverviewRulerOptions(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this._resolvedColor = null;\n    _this.position = typeof options.position === 'number' ? options.position : model.OverviewRulerLane.Center;\n    return _this;\n  }\n\n  ModelDecorationOverviewRulerOptions.prototype.getColor = function (theme) {\n    if (!this._resolvedColor) {\n      if (theme.type !== 'light' && this.darkColor) {\n        this._resolvedColor = this._resolveColor(this.darkColor, theme);\n      } else {\n        this._resolvedColor = this._resolveColor(this.color, theme);\n      }\n    }\n\n    return this._resolvedColor;\n  };\n\n  ModelDecorationOverviewRulerOptions.prototype.invalidateCachedColor = function () {\n    this._resolvedColor = null;\n  };\n\n  ModelDecorationOverviewRulerOptions.prototype._resolveColor = function (color, theme) {\n    if (typeof color === 'string') {\n      return color;\n    }\n\n    var c = color ? theme.getColor(color.id) : null;\n\n    if (!c) {\n      return '';\n    }\n\n    return c.toString();\n  };\n\n  return ModelDecorationOverviewRulerOptions;\n}(DecorationOptions);\n\nexport { ModelDecorationOverviewRulerOptions };\n\nvar ModelDecorationMinimapOptions =\n/** @class */\nfunction (_super) {\n  __extends(ModelDecorationMinimapOptions, _super);\n\n  function ModelDecorationMinimapOptions(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this.position = options.position;\n    return _this;\n  }\n\n  ModelDecorationMinimapOptions.prototype.getColor = function (theme) {\n    if (!this._resolvedColor) {\n      if (theme.type !== 'light' && this.darkColor) {\n        this._resolvedColor = this._resolveColor(this.darkColor, theme);\n      } else {\n        this._resolvedColor = this._resolveColor(this.color, theme);\n      }\n    }\n\n    return this._resolvedColor;\n  };\n\n  ModelDecorationMinimapOptions.prototype.invalidateCachedColor = function () {\n    this._resolvedColor = undefined;\n  };\n\n  ModelDecorationMinimapOptions.prototype._resolveColor = function (color, theme) {\n    if (typeof color === 'string') {\n      return Color.fromHex(color);\n    }\n\n    return theme.getColor(color.id);\n  };\n\n  return ModelDecorationMinimapOptions;\n}(DecorationOptions);\n\nexport { ModelDecorationMinimapOptions };\n\nvar ModelDecorationOptions =\n/** @class */\nfunction () {\n  function ModelDecorationOptions(options) {\n    this.stickiness = options.stickiness || 0\n    /* AlwaysGrowsWhenTypingAtEdges */\n    ;\n    this.zIndex = options.zIndex || 0;\n    this.className = options.className ? cleanClassName(options.className) : null;\n    this.hoverMessage = withUndefinedAsNull(options.hoverMessage);\n    this.glyphMarginHoverMessage = withUndefinedAsNull(options.glyphMarginHoverMessage);\n    this.isWholeLine = options.isWholeLine || false;\n    this.showIfCollapsed = options.showIfCollapsed || false;\n    this.collapseOnReplaceEdit = options.collapseOnReplaceEdit || false;\n    this.overviewRuler = options.overviewRuler ? new ModelDecorationOverviewRulerOptions(options.overviewRuler) : null;\n    this.minimap = options.minimap ? new ModelDecorationMinimapOptions(options.minimap) : null;\n    this.glyphMarginClassName = options.glyphMarginClassName ? cleanClassName(options.glyphMarginClassName) : null;\n    this.linesDecorationsClassName = options.linesDecorationsClassName ? cleanClassName(options.linesDecorationsClassName) : null;\n    this.marginClassName = options.marginClassName ? cleanClassName(options.marginClassName) : null;\n    this.inlineClassName = options.inlineClassName ? cleanClassName(options.inlineClassName) : null;\n    this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n    this.beforeContentClassName = options.beforeContentClassName ? cleanClassName(options.beforeContentClassName) : null;\n    this.afterContentClassName = options.afterContentClassName ? cleanClassName(options.afterContentClassName) : null;\n  }\n\n  ModelDecorationOptions.register = function (options) {\n    return new ModelDecorationOptions(options);\n  };\n\n  ModelDecorationOptions.createDynamic = function (options) {\n    return new ModelDecorationOptions(options);\n  };\n\n  return ModelDecorationOptions;\n}();\n\nexport { ModelDecorationOptions };\nModelDecorationOptions.EMPTY = ModelDecorationOptions.register({});\n/**\r\n * The order carefully matches the values of the enum.\r\n */\n\nvar TRACKED_RANGE_OPTIONS = [ModelDecorationOptions.register({\n  stickiness: 0\n  /* AlwaysGrowsWhenTypingAtEdges */\n\n}), ModelDecorationOptions.register({\n  stickiness: 1\n  /* NeverGrowsWhenTypingAtEdges */\n\n}), ModelDecorationOptions.register({\n  stickiness: 2\n  /* GrowsOnlyWhenTypingBefore */\n\n}), ModelDecorationOptions.register({\n  stickiness: 3\n  /* GrowsOnlyWhenTypingAfter */\n\n})];\n\nfunction _normalizeOptions(options) {\n  if (options instanceof ModelDecorationOptions) {\n    return options;\n  }\n\n  return ModelDecorationOptions.createDynamic(options);\n}\n\nvar DidChangeDecorationsEmitter =\n/** @class */\nfunction (_super) {\n  __extends(DidChangeDecorationsEmitter, _super);\n\n  function DidChangeDecorationsEmitter() {\n    var _this = _super.call(this) || this;\n\n    _this._actual = _this._register(new Emitter());\n    _this.event = _this._actual.event;\n    _this._deferredCnt = 0;\n    _this._shouldFire = false;\n    return _this;\n  }\n\n  DidChangeDecorationsEmitter.prototype.beginDeferredEmit = function () {\n    this._deferredCnt++;\n  };\n\n  DidChangeDecorationsEmitter.prototype.endDeferredEmit = function () {\n    this._deferredCnt--;\n\n    if (this._deferredCnt === 0) {\n      if (this._shouldFire) {\n        this._shouldFire = false;\n\n        this._actual.fire({});\n      }\n    }\n  };\n\n  DidChangeDecorationsEmitter.prototype.fire = function () {\n    this._shouldFire = true;\n  };\n\n  return DidChangeDecorationsEmitter;\n}(Disposable);\n\nexport { DidChangeDecorationsEmitter }; //#endregion\n\nvar DidChangeContentEmitter =\n/** @class */\nfunction (_super) {\n  __extends(DidChangeContentEmitter, _super);\n\n  function DidChangeContentEmitter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.\r\n     */\n\n\n    _this._fastEmitter = _this._register(new Emitter());\n    _this.fastEvent = _this._fastEmitter.event;\n    _this._slowEmitter = _this._register(new Emitter());\n    _this.slowEvent = _this._slowEmitter.event;\n    _this._deferredCnt = 0;\n    _this._deferredEvent = null;\n    return _this;\n  }\n\n  DidChangeContentEmitter.prototype.beginDeferredEmit = function () {\n    this._deferredCnt++;\n  };\n\n  DidChangeContentEmitter.prototype.endDeferredEmit = function () {\n    this._deferredCnt--;\n\n    if (this._deferredCnt === 0) {\n      if (this._deferredEvent !== null) {\n        var e = this._deferredEvent;\n        this._deferredEvent = null;\n\n        this._fastEmitter.fire(e);\n\n        this._slowEmitter.fire(e);\n      }\n    }\n  };\n\n  DidChangeContentEmitter.prototype.fire = function (e) {\n    if (this._deferredCnt > 0) {\n      if (this._deferredEvent) {\n        this._deferredEvent = this._deferredEvent.merge(e);\n      } else {\n        this._deferredEvent = e;\n      }\n\n      return;\n    }\n\n    this._fastEmitter.fire(e);\n\n    this._slowEmitter.fire(e);\n  };\n\n  return DidChangeContentEmitter;\n}(Disposable);\n\nexport { DidChangeContentEmitter };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","onUnexpectedError","Emitter","Disposable","strings","URI","EDITOR_MODEL_DEFAULTS","Position","Range","Selection","model","EditStack","guessIndentation","IntervalNode","IntervalTree","getNodeIsInOverviewRuler","recomputeMaxEnd","PieceTreeTextBufferBuilder","InternalModelContentChangeEvent","ModelRawContentChangedEvent","ModelRawEOLChanged","ModelRawFlush","ModelRawLineChanged","ModelRawLinesDeleted","ModelRawLinesInserted","SearchParams","TextModelSearch","TextModelTokenization","getWordAtText","LanguageConfigurationRegistry","NULL_LANGUAGE_IDENTIFIER","ignoreBracketsInToken","BracketsUtils","withUndefinedAsNull","TokensStore","countEOL","TokensStore2","Color","createTextBufferBuilder","createTextBufferFactory","text","builder","acceptChunk","finish","createTextBuffer","value","defaultEOL","factory","MODEL_ID","LIMIT_FIND_COUNT","LONG_LINE_BOUNDARY","invalidFunc","Error","TextModel","_super","source","creationOptions","languageIdentifier","associatedResource","_this","call","_onWillDispose","_register","onWillDispose","event","_onDidChangeDecorations","DidChangeDecorationsEmitter","onDidChangeDecorations","_onDidChangeLanguage","onDidChangeLanguage","_onDidChangeLanguageConfiguration","onDidChangeLanguageConfiguration","_onDidChangeTokens","onDidChangeTokens","_onDidChangeOptions","onDidChangeOptions","_onDidChangeAttached","onDidChangeAttached","_eventEmitter","DidChangeContentEmitter","id","isForSimpleWidget","_associatedResource","parse","_attachedEditorCount","_buffer","_options","resolveOptions","bufferLineCount","getLineCount","bufferTextLength","getValueLengthInRange","getLineLength","largeFileOptimizations","_isTooLargeForTokenization","LARGE_FILE_SIZE_THRESHOLD","LARGE_FILE_LINE_COUNT_THRESHOLD","_isTooLargeForSyncing","MODEL_SYNC_LIMIT","_versionId","_alternativeVersionId","_isDisposed","_isDisposing","_languageIdentifier","_languageRegistryListener","onDidChange","e","fire","_instanceId","singleLetterHash","_lastDecorationId","_decorations","_decorationsTree","DecorationsTrees","_commandManager","_isUndoing","_isRedoing","_trimAutoWhitespaceLines","_tokens","_tokens2","_tokenization","createFromString","options","uri","DEFAULT_CREATION_OPTIONS","textBuffer","detectIndentation","guessedIndentation","tabSize","insertSpaces","TextModelResolvedOptions","indentSize","trimAutoWhitespace","onDidChangeRawContentFast","listener","fastEvent","rawContentChangedEvent","onDidChangeRawContent","slowEvent","onDidChangeContentFast","contentChangedEvent","onDidChangeContent","dispose","_assertNotDisposed","_emitContentChangedEvent","rawChange","change","setValue","setValueFromTextBuffer","_createContentChanged2","range","rangeOffset","rangeLength","isUndoing","isRedoing","isFlush","changes","eol","getEOL","versionId","getVersionId","oldFullModelRange","getFullModelRange","oldModelValueLength","endLineNumber","endColumn","getLineMaxColumn","_increaseVersionId","flush","getValue","setEOL","newEOL","_onBeforeEOLChange","_onAfterEOLChange","allDecorations","search","_ensureNodesHaveRanges","collectNodesPostOrder","i","len","length","node","delta","cachedAbsoluteStart","start","startOffset","getOffsetAt","startLineNumber","startColumn","endOffset","cachedAbsoluteEnd","cachedVersionId","end","onBeforeAttached","undefined","onBeforeDetached","isAttachedToEditor","getAttachedEditorCount","isTooLargeForSyncing","isTooLargeForTokenization","isDisposed","isDominatedByLongLines","smallLineCharCount","longLineCharCount","lineCount","lineNumber","lineLength","defineProperty","get","enumerable","configurable","getOptions","getFormattingOptions","updateOptions","_newOpts","newOpts","equals","createChangeEvent","defaultInsertSpaces","defaultTabSize","_normalizeIndentationFromWhitespace","str","spacesCnt","charAt","result","tabsCnt","Math","floor","normalizeIndentation","firstNonWhitespaceIndex","substring","mightContainRTL","mightContainNonBasicASCII","getAlternativeVersionId","rawPosition","position","_validatePosition","column","getPositionAt","rawOffset","offset","min","getLength","max","_overwriteAlternativeVersionId","newAlternativeVersionId","preserveBOM","fullModelRange","fullModelValue","getValueInRange","getBOM","getValueLength","rawRange","validateRange","getCharacterCountInRange","getLineContent","getLinesContent","getLineMinColumn","getLineFirstNonWhitespaceColumn","getLineLastNonWhitespaceColumn","_validateRangeRelaxedNoAllocations","linesCount","initialStartLineNumber","initialStartColumn","maxColumn","initialEndLineNumber","initialEndColumn","_isValidPosition","validationType","isNaN","charCodeBefore","getLineCharCode","isHighSurrogate","_lineNumber","_column","validatePosition","_isValidRange","charCodeBeforeStart","charCodeBeforeEnd","startInsideSurrogatePair","endInsideSurrogatePair","_range","modifyPosition","candidate","findMatchesLineByLine","searchRange","searchData","captureMatches","limitResultCount","findMatches","searchString","rawSearchScope","isRegex","matchCase","wordSeparators","isIRange","indexOf","searchParams","parseSearchRequest","findNextMatch","rawSearchStart","searchStart","ret","findPreviousMatch","pushStackElement","pushEOL","currentEOL","beginDeferredEmit","endDeferredEmit","pushEditOperations","beforeCursorState","editOperations","cursorStateComputer","_pushEditOperations","incomingEdits","map","op","editsAreNearCursors","sel","foundEditNearSel","j","lenJ","editRange","selIsAbove","selIsBelow","trimLineNumber","maxLineColumn","allowTrimLine","editText","isEmpty","push","pushEditOperation","applyEdits","rawOperations","_applyEdits","oldLineCount","newLineCount","contentChanges","trimAutoWhitespaceLineNumbers","rawContentChanges","_a","eolCount","firstLineLength","lastLineLength","acceptEdit","charCodeAt","acceptReplace","forceMoveMarkers","deletingLinesCnt","insertingLinesCnt","editingLinesCnt","changeLineCountDelta","editLineNumber","currentEditLineNumber","spliceStartLineNumber","spliceLineNumber","cnt","fromLineNumber","newLines","i_1","reverseEdits","_undo","r","undo","recordedVersionId","selections","canUndo","_redo","redo","canRedo","changeDecorations","callback","ownerId","_changeDecorations","changeAccessor","addDecoration","_deltaDecorationsImpl","changeDecoration","newRange","_changeDecorationImpl","changeDecorationOptions","_changeDecorationOptionsImpl","_normalizeOptions","removeDecoration","deltaDecorations","oldDecorations","newDecorations","_getTrackedRange","getDecorationRange","_setTrackedRange","newStickiness","TRACKED_RANGE_OPTIONS","delete","reset","setOptions","insert","removeAllDecorationsWithOwnerId","nodes","collectNodesFromOwner","getDecorationOptions","decorationId","resolveNode","_getRangeAt","getLineDecorations","filterOutValidation","getLinesDecorations","_startLineNumber","_endLineNumber","_getDecorationsInRange","getDecorationsInRange","validatedRange","getOverviewRulerDecorations","getAllDecorations","filterRange","filterOwnerId","intervalSearch","getRangeAt","nodeWasInOverviewRuler","overviewRuler","color","nodeIsInOverviewRuler","oldDecorationsIds","oldDecorationsLen","oldDecorationIndex","newDecorationsLen","newDecorationIndex","internalDecorationId","newDecoration","setLineTokens","tokens","setTokens","ranges","element","toLineNumber","_emitModelTokensChangedEvent","tokenizationSupportChanged","setSemanticTokens","set","tokenizeViewport","clearTokens","resetTokenization","forceTokenization","isCheapToTokenize","tokenizeIfCheap","getLineTokens","_getLineTokens","lineText","syntacticTokens","getTokens","addSemanticTokens","getLanguageIdentifier","getModeId","language","setMode","oldLanguage","newLanguage","getLanguageIdAtPosition","lineTokens","getLanguageId","findTokenIndexAtOffset","getWordAtPosition","_position","lineContent","tokenIndex","_findLanguageBoundaries","rbStartOffset","rbEndOffset","rightBiasedWord","getWordDefinition","_b","lbStartOffset","lbEndOffset","leftBiasedWord","languageId","getStartOffset","tokenCount","getCount","getEndOffset","getWordUntilPosition","wordAtPosition","word","substr","findMatchingBracketUp","_bracket","bracket","toLowerCase","bracketsSupport","getBracketsSupport","data","textIsBracket","_findMatchingBracketUp","matchBracket","_matchBracket","currentModeBrackets","getStandardTokenType","searchStartOffset","maxBracketLength","tokenEndOffset","searchEndOffset","bestResult","foundBracket","findNextBracketInRange","forwardRegex","foundBracketText","_matchFoundBracket","textIsOpenBracket","prevTokenIndex","prevModeBrackets","tokenStartOffset","findPrevBracketInRange","reversedRegex","isOpen","matched","_findMatchingBracketDown","getEndPosition","getStartPosition","reversedBracketRegex","count","searchPrevMatchingBracketInRange","hitText","isClose","prevSearchInToken","searchInToken","bracketRegex","searchNextMatchingBracketInRange","findPrevBracket","modeBrackets","tokenLanguageId","_toFoundBracket","findNextBracket","findEnclosingBrackets","maxDuration","savedCounts","Map","counts","resetCounts","has","tmp","brackets","searchInRange","index","startTime","Date","now","elapsedTime","open","close","computeIndentLevel","line","indent","chCode","_computeIndentLevel","lineIndex","getActiveIndentGuide","minLineNumber","maxLineNumber","foldingRules","getFoldingRules","offSide","Boolean","up_aboveContentLineIndex","up_aboveContentLineIndent","up_belowContentLineIndex","up_belowContentLineIndent","up_resolveIndents","indent_1","indent_2","down_aboveContentLineIndex","down_aboveContentLineIndent","down_belowContentLineIndex","down_belowContentLineIndent","down_resolveIndents","indent_3","indent_4","goUp","goDown","distance","upLineNumber","downLineNumber","upLineIndentLevel","currentIndent","ceil","_getIndentLevelForWhitespaceLine","downLineIndentLevel","getLinesIndentGuides","aboveContentLineIndex","aboveContentLineIndent","belowContentLineIndex","belowContentLineIndent","resultIndex","_decorationsTree0","_decorationsTree1","r0","r1","concat","overviewRulerOnly","textLength","cleanClassName","className","replace","DecorationOptions","darkColor","ModelDecorationOverviewRulerOptions","_resolvedColor","OverviewRulerLane","Center","getColor","theme","type","_resolveColor","invalidateCachedColor","c","toString","ModelDecorationMinimapOptions","fromHex","ModelDecorationOptions","stickiness","zIndex","hoverMessage","glyphMarginHoverMessage","isWholeLine","showIfCollapsed","collapseOnReplaceEdit","minimap","glyphMarginClassName","linesDecorationsClassName","marginClassName","inlineClassName","inlineClassNameAffectsLetterSpacing","beforeContentClassName","afterContentClassName","register","createDynamic","EMPTY","_actual","_deferredCnt","_shouldFire","_fastEmitter","_slowEmitter","_deferredEvent","merge"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { URI } from '../../../base/common/uri.js';\r\nimport { EDITOR_MODEL_DEFAULTS } from '../config/editorOptions.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport * as model from '../model.js';\r\nimport { EditStack } from './editStack.js';\r\nimport { guessIndentation } from './indentationGuesser.js';\r\nimport { IntervalNode, IntervalTree, getNodeIsInOverviewRuler, recomputeMaxEnd } from './intervalTree.js';\r\nimport { PieceTreeTextBufferBuilder } from './pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\r\nimport { InternalModelContentChangeEvent, ModelRawContentChangedEvent, ModelRawEOLChanged, ModelRawFlush, ModelRawLineChanged, ModelRawLinesDeleted, ModelRawLinesInserted } from './textModelEvents.js';\r\nimport { SearchParams, TextModelSearch } from './textModelSearch.js';\r\nimport { TextModelTokenization } from './textModelTokens.js';\r\nimport { getWordAtText } from './wordHelper.js';\r\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\r\nimport { NULL_LANGUAGE_IDENTIFIER } from '../modes/nullMode.js';\r\nimport { ignoreBracketsInToken } from '../modes/supports.js';\r\nimport { BracketsUtils } from '../modes/supports/richEditBrackets.js';\r\nimport { withUndefinedAsNull } from '../../../base/common/types.js';\r\nimport { TokensStore, countEOL, TokensStore2 } from './tokensStore.js';\r\nimport { Color } from '../../../base/common/color.js';\r\nfunction createTextBufferBuilder() {\r\n    return new PieceTreeTextBufferBuilder();\r\n}\r\nexport function createTextBufferFactory(text) {\r\n    var builder = createTextBufferBuilder();\r\n    builder.acceptChunk(text);\r\n    return builder.finish();\r\n}\r\nexport function createTextBuffer(value, defaultEOL) {\r\n    var factory = (typeof value === 'string' ? createTextBufferFactory(value) : value);\r\n    return factory.create(defaultEOL);\r\n}\r\nvar MODEL_ID = 0;\r\nvar LIMIT_FIND_COUNT = 999;\r\nexport var LONG_LINE_BOUNDARY = 10000;\r\nvar invalidFunc = function () { throw new Error(\"Invalid change accessor\"); };\r\nvar TextModel = /** @class */ (function (_super) {\r\n    __extends(TextModel, _super);\r\n    //#endregion\r\n    function TextModel(source, creationOptions, languageIdentifier, associatedResource) {\r\n        if (associatedResource === void 0) { associatedResource = null; }\r\n        var _this = _super.call(this) || this;\r\n        //#region Events\r\n        _this._onWillDispose = _this._register(new Emitter());\r\n        _this.onWillDispose = _this._onWillDispose.event;\r\n        _this._onDidChangeDecorations = _this._register(new DidChangeDecorationsEmitter());\r\n        _this.onDidChangeDecorations = _this._onDidChangeDecorations.event;\r\n        _this._onDidChangeLanguage = _this._register(new Emitter());\r\n        _this.onDidChangeLanguage = _this._onDidChangeLanguage.event;\r\n        _this._onDidChangeLanguageConfiguration = _this._register(new Emitter());\r\n        _this.onDidChangeLanguageConfiguration = _this._onDidChangeLanguageConfiguration.event;\r\n        _this._onDidChangeTokens = _this._register(new Emitter());\r\n        _this.onDidChangeTokens = _this._onDidChangeTokens.event;\r\n        _this._onDidChangeOptions = _this._register(new Emitter());\r\n        _this.onDidChangeOptions = _this._onDidChangeOptions.event;\r\n        _this._onDidChangeAttached = _this._register(new Emitter());\r\n        _this.onDidChangeAttached = _this._onDidChangeAttached.event;\r\n        _this._eventEmitter = _this._register(new DidChangeContentEmitter());\r\n        // Generate a new unique model id\r\n        MODEL_ID++;\r\n        _this.id = '$model' + MODEL_ID;\r\n        _this.isForSimpleWidget = creationOptions.isForSimpleWidget;\r\n        if (typeof associatedResource === 'undefined' || associatedResource === null) {\r\n            _this._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\r\n        }\r\n        else {\r\n            _this._associatedResource = associatedResource;\r\n        }\r\n        _this._attachedEditorCount = 0;\r\n        _this._buffer = createTextBuffer(source, creationOptions.defaultEOL);\r\n        _this._options = TextModel.resolveOptions(_this._buffer, creationOptions);\r\n        var bufferLineCount = _this._buffer.getLineCount();\r\n        var bufferTextLength = _this._buffer.getValueLengthInRange(new Range(1, 1, bufferLineCount, _this._buffer.getLineLength(bufferLineCount) + 1), 0 /* TextDefined */);\r\n        // !!! Make a decision in the ctor and permanently respect this decision !!!\r\n        // If a model is too large at construction time, it will never get tokenized,\r\n        // under no circumstances.\r\n        if (creationOptions.largeFileOptimizations) {\r\n            _this._isTooLargeForTokenization = ((bufferTextLength > TextModel.LARGE_FILE_SIZE_THRESHOLD)\r\n                || (bufferLineCount > TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD));\r\n        }\r\n        else {\r\n            _this._isTooLargeForTokenization = false;\r\n        }\r\n        _this._isTooLargeForSyncing = (bufferTextLength > TextModel.MODEL_SYNC_LIMIT);\r\n        _this._versionId = 1;\r\n        _this._alternativeVersionId = 1;\r\n        _this._isDisposed = false;\r\n        _this._isDisposing = false;\r\n        _this._languageIdentifier = languageIdentifier || NULL_LANGUAGE_IDENTIFIER;\r\n        _this._languageRegistryListener = LanguageConfigurationRegistry.onDidChange(function (e) {\r\n            if (e.languageIdentifier.id === _this._languageIdentifier.id) {\r\n                _this._onDidChangeLanguageConfiguration.fire({});\r\n            }\r\n        });\r\n        _this._instanceId = strings.singleLetterHash(MODEL_ID);\r\n        _this._lastDecorationId = 0;\r\n        _this._decorations = Object.create(null);\r\n        _this._decorationsTree = new DecorationsTrees();\r\n        _this._commandManager = new EditStack(_this);\r\n        _this._isUndoing = false;\r\n        _this._isRedoing = false;\r\n        _this._trimAutoWhitespaceLines = null;\r\n        _this._tokens = new TokensStore();\r\n        _this._tokens2 = new TokensStore2();\r\n        _this._tokenization = new TextModelTokenization(_this);\r\n        return _this;\r\n    }\r\n    TextModel.createFromString = function (text, options, languageIdentifier, uri) {\r\n        if (options === void 0) { options = TextModel.DEFAULT_CREATION_OPTIONS; }\r\n        if (languageIdentifier === void 0) { languageIdentifier = null; }\r\n        if (uri === void 0) { uri = null; }\r\n        return new TextModel(text, options, languageIdentifier, uri);\r\n    };\r\n    TextModel.resolveOptions = function (textBuffer, options) {\r\n        if (options.detectIndentation) {\r\n            var guessedIndentation = guessIndentation(textBuffer, options.tabSize, options.insertSpaces);\r\n            return new model.TextModelResolvedOptions({\r\n                tabSize: guessedIndentation.tabSize,\r\n                indentSize: guessedIndentation.tabSize,\r\n                insertSpaces: guessedIndentation.insertSpaces,\r\n                trimAutoWhitespace: options.trimAutoWhitespace,\r\n                defaultEOL: options.defaultEOL\r\n            });\r\n        }\r\n        return new model.TextModelResolvedOptions({\r\n            tabSize: options.tabSize,\r\n            indentSize: options.indentSize,\r\n            insertSpaces: options.insertSpaces,\r\n            trimAutoWhitespace: options.trimAutoWhitespace,\r\n            defaultEOL: options.defaultEOL\r\n        });\r\n    };\r\n    TextModel.prototype.onDidChangeRawContentFast = function (listener) {\r\n        return this._eventEmitter.fastEvent(function (e) { return listener(e.rawContentChangedEvent); });\r\n    };\r\n    TextModel.prototype.onDidChangeRawContent = function (listener) {\r\n        return this._eventEmitter.slowEvent(function (e) { return listener(e.rawContentChangedEvent); });\r\n    };\r\n    TextModel.prototype.onDidChangeContentFast = function (listener) {\r\n        return this._eventEmitter.fastEvent(function (e) { return listener(e.contentChangedEvent); });\r\n    };\r\n    TextModel.prototype.onDidChangeContent = function (listener) {\r\n        return this._eventEmitter.slowEvent(function (e) { return listener(e.contentChangedEvent); });\r\n    };\r\n    TextModel.prototype.dispose = function () {\r\n        this._isDisposing = true;\r\n        this._onWillDispose.fire();\r\n        this._languageRegistryListener.dispose();\r\n        this._tokenization.dispose();\r\n        this._isDisposed = true;\r\n        _super.prototype.dispose.call(this);\r\n        this._isDisposing = false;\r\n    };\r\n    TextModel.prototype._assertNotDisposed = function () {\r\n        if (this._isDisposed) {\r\n            throw new Error('Model is disposed!');\r\n        }\r\n    };\r\n    TextModel.prototype._emitContentChangedEvent = function (rawChange, change) {\r\n        if (this._isDisposing) {\r\n            // Do not confuse listeners by emitting any event after disposing\r\n            return;\r\n        }\r\n        this._eventEmitter.fire(new InternalModelContentChangeEvent(rawChange, change));\r\n    };\r\n    TextModel.prototype.setValue = function (value) {\r\n        this._assertNotDisposed();\r\n        if (value === null) {\r\n            // There's nothing to do\r\n            return;\r\n        }\r\n        var textBuffer = createTextBuffer(value, this._options.defaultEOL);\r\n        this.setValueFromTextBuffer(textBuffer);\r\n    };\r\n    TextModel.prototype._createContentChanged2 = function (range, rangeOffset, rangeLength, text, isUndoing, isRedoing, isFlush) {\r\n        return {\r\n            changes: [{\r\n                    range: range,\r\n                    rangeOffset: rangeOffset,\r\n                    rangeLength: rangeLength,\r\n                    text: text,\r\n                }],\r\n            eol: this._buffer.getEOL(),\r\n            versionId: this.getVersionId(),\r\n            isUndoing: isUndoing,\r\n            isRedoing: isRedoing,\r\n            isFlush: isFlush\r\n        };\r\n    };\r\n    TextModel.prototype.setValueFromTextBuffer = function (textBuffer) {\r\n        this._assertNotDisposed();\r\n        if (textBuffer === null) {\r\n            // There's nothing to do\r\n            return;\r\n        }\r\n        var oldFullModelRange = this.getFullModelRange();\r\n        var oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\r\n        var endLineNumber = this.getLineCount();\r\n        var endColumn = this.getLineMaxColumn(endLineNumber);\r\n        this._buffer = textBuffer;\r\n        this._increaseVersionId();\r\n        // Flush all tokens\r\n        this._tokens.flush();\r\n        this._tokens2.flush();\r\n        // Destroy all my decorations\r\n        this._decorations = Object.create(null);\r\n        this._decorationsTree = new DecorationsTrees();\r\n        // Destroy my edit history and settings\r\n        this._commandManager = new EditStack(this);\r\n        this._trimAutoWhitespaceLines = null;\r\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\r\n            new ModelRawFlush()\r\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, true));\r\n    };\r\n    TextModel.prototype.setEOL = function (eol) {\r\n        this._assertNotDisposed();\r\n        var newEOL = (eol === 1 /* CRLF */ ? '\\r\\n' : '\\n');\r\n        if (this._buffer.getEOL() === newEOL) {\r\n            // Nothing to do\r\n            return;\r\n        }\r\n        var oldFullModelRange = this.getFullModelRange();\r\n        var oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\r\n        var endLineNumber = this.getLineCount();\r\n        var endColumn = this.getLineMaxColumn(endLineNumber);\r\n        this._onBeforeEOLChange();\r\n        this._buffer.setEOL(newEOL);\r\n        this._increaseVersionId();\r\n        this._onAfterEOLChange();\r\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\r\n            new ModelRawEOLChanged()\r\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, false));\r\n    };\r\n    TextModel.prototype._onBeforeEOLChange = function () {\r\n        // Ensure all decorations get their `range` set.\r\n        var versionId = this.getVersionId();\r\n        var allDecorations = this._decorationsTree.search(0, false, false, versionId);\r\n        this._ensureNodesHaveRanges(allDecorations);\r\n    };\r\n    TextModel.prototype._onAfterEOLChange = function () {\r\n        // Transform back `range` to offsets\r\n        var versionId = this.getVersionId();\r\n        var allDecorations = this._decorationsTree.collectNodesPostOrder();\r\n        for (var i = 0, len = allDecorations.length; i < len; i++) {\r\n            var node = allDecorations[i];\r\n            var delta = node.cachedAbsoluteStart - node.start;\r\n            var startOffset = this._buffer.getOffsetAt(node.range.startLineNumber, node.range.startColumn);\r\n            var endOffset = this._buffer.getOffsetAt(node.range.endLineNumber, node.range.endColumn);\r\n            node.cachedAbsoluteStart = startOffset;\r\n            node.cachedAbsoluteEnd = endOffset;\r\n            node.cachedVersionId = versionId;\r\n            node.start = startOffset - delta;\r\n            node.end = endOffset - delta;\r\n            recomputeMaxEnd(node);\r\n        }\r\n    };\r\n    TextModel.prototype.onBeforeAttached = function () {\r\n        this._attachedEditorCount++;\r\n        if (this._attachedEditorCount === 1) {\r\n            this._onDidChangeAttached.fire(undefined);\r\n        }\r\n    };\r\n    TextModel.prototype.onBeforeDetached = function () {\r\n        this._attachedEditorCount--;\r\n        if (this._attachedEditorCount === 0) {\r\n            this._onDidChangeAttached.fire(undefined);\r\n        }\r\n    };\r\n    TextModel.prototype.isAttachedToEditor = function () {\r\n        return this._attachedEditorCount > 0;\r\n    };\r\n    TextModel.prototype.getAttachedEditorCount = function () {\r\n        return this._attachedEditorCount;\r\n    };\r\n    TextModel.prototype.isTooLargeForSyncing = function () {\r\n        return this._isTooLargeForSyncing;\r\n    };\r\n    TextModel.prototype.isTooLargeForTokenization = function () {\r\n        return this._isTooLargeForTokenization;\r\n    };\r\n    TextModel.prototype.isDisposed = function () {\r\n        return this._isDisposed;\r\n    };\r\n    TextModel.prototype.isDominatedByLongLines = function () {\r\n        this._assertNotDisposed();\r\n        if (this.isTooLargeForTokenization()) {\r\n            // Cannot word wrap huge files anyways, so it doesn't really matter\r\n            return false;\r\n        }\r\n        var smallLineCharCount = 0;\r\n        var longLineCharCount = 0;\r\n        var lineCount = this._buffer.getLineCount();\r\n        for (var lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\r\n            var lineLength = this._buffer.getLineLength(lineNumber);\r\n            if (lineLength >= LONG_LINE_BOUNDARY) {\r\n                longLineCharCount += lineLength;\r\n            }\r\n            else {\r\n                smallLineCharCount += lineLength;\r\n            }\r\n        }\r\n        return (longLineCharCount > smallLineCharCount);\r\n    };\r\n    Object.defineProperty(TextModel.prototype, \"uri\", {\r\n        get: function () {\r\n            return this._associatedResource;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    //#region Options\r\n    TextModel.prototype.getOptions = function () {\r\n        this._assertNotDisposed();\r\n        return this._options;\r\n    };\r\n    TextModel.prototype.getFormattingOptions = function () {\r\n        return {\r\n            tabSize: this._options.indentSize,\r\n            insertSpaces: this._options.insertSpaces\r\n        };\r\n    };\r\n    TextModel.prototype.updateOptions = function (_newOpts) {\r\n        this._assertNotDisposed();\r\n        var tabSize = (typeof _newOpts.tabSize !== 'undefined') ? _newOpts.tabSize : this._options.tabSize;\r\n        var indentSize = (typeof _newOpts.indentSize !== 'undefined') ? _newOpts.indentSize : this._options.indentSize;\r\n        var insertSpaces = (typeof _newOpts.insertSpaces !== 'undefined') ? _newOpts.insertSpaces : this._options.insertSpaces;\r\n        var trimAutoWhitespace = (typeof _newOpts.trimAutoWhitespace !== 'undefined') ? _newOpts.trimAutoWhitespace : this._options.trimAutoWhitespace;\r\n        var newOpts = new model.TextModelResolvedOptions({\r\n            tabSize: tabSize,\r\n            indentSize: indentSize,\r\n            insertSpaces: insertSpaces,\r\n            defaultEOL: this._options.defaultEOL,\r\n            trimAutoWhitespace: trimAutoWhitespace\r\n        });\r\n        if (this._options.equals(newOpts)) {\r\n            return;\r\n        }\r\n        var e = this._options.createChangeEvent(newOpts);\r\n        this._options = newOpts;\r\n        this._onDidChangeOptions.fire(e);\r\n    };\r\n    TextModel.prototype.detectIndentation = function (defaultInsertSpaces, defaultTabSize) {\r\n        this._assertNotDisposed();\r\n        var guessedIndentation = guessIndentation(this._buffer, defaultTabSize, defaultInsertSpaces);\r\n        this.updateOptions({\r\n            insertSpaces: guessedIndentation.insertSpaces,\r\n            tabSize: guessedIndentation.tabSize,\r\n            indentSize: guessedIndentation.tabSize,\r\n        });\r\n    };\r\n    TextModel._normalizeIndentationFromWhitespace = function (str, indentSize, insertSpaces) {\r\n        var spacesCnt = 0;\r\n        for (var i = 0; i < str.length; i++) {\r\n            if (str.charAt(i) === '\\t') {\r\n                spacesCnt += indentSize;\r\n            }\r\n            else {\r\n                spacesCnt++;\r\n            }\r\n        }\r\n        var result = '';\r\n        if (!insertSpaces) {\r\n            var tabsCnt = Math.floor(spacesCnt / indentSize);\r\n            spacesCnt = spacesCnt % indentSize;\r\n            for (var i = 0; i < tabsCnt; i++) {\r\n                result += '\\t';\r\n            }\r\n        }\r\n        for (var i = 0; i < spacesCnt; i++) {\r\n            result += ' ';\r\n        }\r\n        return result;\r\n    };\r\n    TextModel.normalizeIndentation = function (str, indentSize, insertSpaces) {\r\n        var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(str);\r\n        if (firstNonWhitespaceIndex === -1) {\r\n            firstNonWhitespaceIndex = str.length;\r\n        }\r\n        return TextModel._normalizeIndentationFromWhitespace(str.substring(0, firstNonWhitespaceIndex), indentSize, insertSpaces) + str.substring(firstNonWhitespaceIndex);\r\n    };\r\n    TextModel.prototype.normalizeIndentation = function (str) {\r\n        this._assertNotDisposed();\r\n        return TextModel.normalizeIndentation(str, this._options.indentSize, this._options.insertSpaces);\r\n    };\r\n    //#endregion\r\n    //#region Reading\r\n    TextModel.prototype.getVersionId = function () {\r\n        this._assertNotDisposed();\r\n        return this._versionId;\r\n    };\r\n    TextModel.prototype.mightContainRTL = function () {\r\n        return this._buffer.mightContainRTL();\r\n    };\r\n    TextModel.prototype.mightContainNonBasicASCII = function () {\r\n        return this._buffer.mightContainNonBasicASCII();\r\n    };\r\n    TextModel.prototype.getAlternativeVersionId = function () {\r\n        this._assertNotDisposed();\r\n        return this._alternativeVersionId;\r\n    };\r\n    TextModel.prototype.getOffsetAt = function (rawPosition) {\r\n        this._assertNotDisposed();\r\n        var position = this._validatePosition(rawPosition.lineNumber, rawPosition.column, 0 /* Relaxed */);\r\n        return this._buffer.getOffsetAt(position.lineNumber, position.column);\r\n    };\r\n    TextModel.prototype.getPositionAt = function (rawOffset) {\r\n        this._assertNotDisposed();\r\n        var offset = (Math.min(this._buffer.getLength(), Math.max(0, rawOffset)));\r\n        return this._buffer.getPositionAt(offset);\r\n    };\r\n    TextModel.prototype._increaseVersionId = function () {\r\n        this._versionId = this._versionId + 1;\r\n        this._alternativeVersionId = this._versionId;\r\n    };\r\n    TextModel.prototype._overwriteAlternativeVersionId = function (newAlternativeVersionId) {\r\n        this._alternativeVersionId = newAlternativeVersionId;\r\n    };\r\n    TextModel.prototype.getValue = function (eol, preserveBOM) {\r\n        if (preserveBOM === void 0) { preserveBOM = false; }\r\n        this._assertNotDisposed();\r\n        var fullModelRange = this.getFullModelRange();\r\n        var fullModelValue = this.getValueInRange(fullModelRange, eol);\r\n        if (preserveBOM) {\r\n            return this._buffer.getBOM() + fullModelValue;\r\n        }\r\n        return fullModelValue;\r\n    };\r\n    TextModel.prototype.getValueLength = function (eol, preserveBOM) {\r\n        if (preserveBOM === void 0) { preserveBOM = false; }\r\n        this._assertNotDisposed();\r\n        var fullModelRange = this.getFullModelRange();\r\n        var fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\r\n        if (preserveBOM) {\r\n            return this._buffer.getBOM().length + fullModelValue;\r\n        }\r\n        return fullModelValue;\r\n    };\r\n    TextModel.prototype.getValueInRange = function (rawRange, eol) {\r\n        if (eol === void 0) { eol = 0 /* TextDefined */; }\r\n        this._assertNotDisposed();\r\n        return this._buffer.getValueInRange(this.validateRange(rawRange), eol);\r\n    };\r\n    TextModel.prototype.getValueLengthInRange = function (rawRange, eol) {\r\n        if (eol === void 0) { eol = 0 /* TextDefined */; }\r\n        this._assertNotDisposed();\r\n        return this._buffer.getValueLengthInRange(this.validateRange(rawRange), eol);\r\n    };\r\n    TextModel.prototype.getCharacterCountInRange = function (rawRange, eol) {\r\n        if (eol === void 0) { eol = 0 /* TextDefined */; }\r\n        this._assertNotDisposed();\r\n        return this._buffer.getCharacterCountInRange(this.validateRange(rawRange), eol);\r\n    };\r\n    TextModel.prototype.getLineCount = function () {\r\n        this._assertNotDisposed();\r\n        return this._buffer.getLineCount();\r\n    };\r\n    TextModel.prototype.getLineContent = function (lineNumber) {\r\n        this._assertNotDisposed();\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._buffer.getLineContent(lineNumber);\r\n    };\r\n    TextModel.prototype.getLineLength = function (lineNumber) {\r\n        this._assertNotDisposed();\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._buffer.getLineLength(lineNumber);\r\n    };\r\n    TextModel.prototype.getLinesContent = function () {\r\n        this._assertNotDisposed();\r\n        return this._buffer.getLinesContent();\r\n    };\r\n    TextModel.prototype.getEOL = function () {\r\n        this._assertNotDisposed();\r\n        return this._buffer.getEOL();\r\n    };\r\n    TextModel.prototype.getLineMinColumn = function (lineNumber) {\r\n        this._assertNotDisposed();\r\n        return 1;\r\n    };\r\n    TextModel.prototype.getLineMaxColumn = function (lineNumber) {\r\n        this._assertNotDisposed();\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._buffer.getLineLength(lineNumber) + 1;\r\n    };\r\n    TextModel.prototype.getLineFirstNonWhitespaceColumn = function (lineNumber) {\r\n        this._assertNotDisposed();\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._buffer.getLineFirstNonWhitespaceColumn(lineNumber);\r\n    };\r\n    TextModel.prototype.getLineLastNonWhitespaceColumn = function (lineNumber) {\r\n        this._assertNotDisposed();\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._buffer.getLineLastNonWhitespaceColumn(lineNumber);\r\n    };\r\n    /**\r\n     * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.\r\n     * Will try to not allocate if possible.\r\n     */\r\n    TextModel.prototype._validateRangeRelaxedNoAllocations = function (range) {\r\n        var linesCount = this._buffer.getLineCount();\r\n        var initialStartLineNumber = range.startLineNumber;\r\n        var initialStartColumn = range.startColumn;\r\n        var startLineNumber;\r\n        var startColumn;\r\n        if (initialStartLineNumber < 1) {\r\n            startLineNumber = 1;\r\n            startColumn = 1;\r\n        }\r\n        else if (initialStartLineNumber > linesCount) {\r\n            startLineNumber = linesCount;\r\n            startColumn = this.getLineMaxColumn(startLineNumber);\r\n        }\r\n        else {\r\n            startLineNumber = initialStartLineNumber | 0;\r\n            if (initialStartColumn <= 1) {\r\n                startColumn = 1;\r\n            }\r\n            else {\r\n                var maxColumn = this.getLineMaxColumn(startLineNumber);\r\n                if (initialStartColumn >= maxColumn) {\r\n                    startColumn = maxColumn;\r\n                }\r\n                else {\r\n                    startColumn = initialStartColumn | 0;\r\n                }\r\n            }\r\n        }\r\n        var initialEndLineNumber = range.endLineNumber;\r\n        var initialEndColumn = range.endColumn;\r\n        var endLineNumber;\r\n        var endColumn;\r\n        if (initialEndLineNumber < 1) {\r\n            endLineNumber = 1;\r\n            endColumn = 1;\r\n        }\r\n        else if (initialEndLineNumber > linesCount) {\r\n            endLineNumber = linesCount;\r\n            endColumn = this.getLineMaxColumn(endLineNumber);\r\n        }\r\n        else {\r\n            endLineNumber = initialEndLineNumber | 0;\r\n            if (initialEndColumn <= 1) {\r\n                endColumn = 1;\r\n            }\r\n            else {\r\n                var maxColumn = this.getLineMaxColumn(endLineNumber);\r\n                if (initialEndColumn >= maxColumn) {\r\n                    endColumn = maxColumn;\r\n                }\r\n                else {\r\n                    endColumn = initialEndColumn | 0;\r\n                }\r\n            }\r\n        }\r\n        if (initialStartLineNumber === startLineNumber\r\n            && initialStartColumn === startColumn\r\n            && initialEndLineNumber === endLineNumber\r\n            && initialEndColumn === endColumn\r\n            && range instanceof Range\r\n            && !(range instanceof Selection)) {\r\n            return range;\r\n        }\r\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n    };\r\n    TextModel.prototype._isValidPosition = function (lineNumber, column, validationType) {\r\n        if (typeof lineNumber !== 'number' || typeof column !== 'number') {\r\n            return false;\r\n        }\r\n        if (isNaN(lineNumber) || isNaN(column)) {\r\n            return false;\r\n        }\r\n        if (lineNumber < 1 || column < 1) {\r\n            return false;\r\n        }\r\n        if ((lineNumber | 0) !== lineNumber || (column | 0) !== column) {\r\n            return false;\r\n        }\r\n        var lineCount = this._buffer.getLineCount();\r\n        if (lineNumber > lineCount) {\r\n            return false;\r\n        }\r\n        if (column === 1) {\r\n            return true;\r\n        }\r\n        var maxColumn = this.getLineMaxColumn(lineNumber);\r\n        if (column > maxColumn) {\r\n            return false;\r\n        }\r\n        if (validationType === 1 /* SurrogatePairs */) {\r\n            // !!At this point, column > 1\r\n            var charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\r\n            if (strings.isHighSurrogate(charCodeBefore)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    TextModel.prototype._validatePosition = function (_lineNumber, _column, validationType) {\r\n        var lineNumber = Math.floor((typeof _lineNumber === 'number' && !isNaN(_lineNumber)) ? _lineNumber : 1);\r\n        var column = Math.floor((typeof _column === 'number' && !isNaN(_column)) ? _column : 1);\r\n        var lineCount = this._buffer.getLineCount();\r\n        if (lineNumber < 1) {\r\n            return new Position(1, 1);\r\n        }\r\n        if (lineNumber > lineCount) {\r\n            return new Position(lineCount, this.getLineMaxColumn(lineCount));\r\n        }\r\n        if (column <= 1) {\r\n            return new Position(lineNumber, 1);\r\n        }\r\n        var maxColumn = this.getLineMaxColumn(lineNumber);\r\n        if (column >= maxColumn) {\r\n            return new Position(lineNumber, maxColumn);\r\n        }\r\n        if (validationType === 1 /* SurrogatePairs */) {\r\n            // If the position would end up in the middle of a high-low surrogate pair,\r\n            // we move it to before the pair\r\n            // !!At this point, column > 1\r\n            var charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\r\n            if (strings.isHighSurrogate(charCodeBefore)) {\r\n                return new Position(lineNumber, column - 1);\r\n            }\r\n        }\r\n        return new Position(lineNumber, column);\r\n    };\r\n    TextModel.prototype.validatePosition = function (position) {\r\n        var validationType = 1 /* SurrogatePairs */;\r\n        this._assertNotDisposed();\r\n        // Avoid object allocation and cover most likely case\r\n        if (position instanceof Position) {\r\n            if (this._isValidPosition(position.lineNumber, position.column, validationType)) {\r\n                return position;\r\n            }\r\n        }\r\n        return this._validatePosition(position.lineNumber, position.column, validationType);\r\n    };\r\n    TextModel.prototype._isValidRange = function (range, validationType) {\r\n        var startLineNumber = range.startLineNumber;\r\n        var startColumn = range.startColumn;\r\n        var endLineNumber = range.endLineNumber;\r\n        var endColumn = range.endColumn;\r\n        if (!this._isValidPosition(startLineNumber, startColumn, 0 /* Relaxed */)) {\r\n            return false;\r\n        }\r\n        if (!this._isValidPosition(endLineNumber, endColumn, 0 /* Relaxed */)) {\r\n            return false;\r\n        }\r\n        if (validationType === 1 /* SurrogatePairs */) {\r\n            var charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\r\n            var charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\r\n            var startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\r\n            var endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\r\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    TextModel.prototype.validateRange = function (_range) {\r\n        var validationType = 1 /* SurrogatePairs */;\r\n        this._assertNotDisposed();\r\n        // Avoid object allocation and cover most likely case\r\n        if ((_range instanceof Range) && !(_range instanceof Selection)) {\r\n            if (this._isValidRange(_range, validationType)) {\r\n                return _range;\r\n            }\r\n        }\r\n        var start = this._validatePosition(_range.startLineNumber, _range.startColumn, 0 /* Relaxed */);\r\n        var end = this._validatePosition(_range.endLineNumber, _range.endColumn, 0 /* Relaxed */);\r\n        var startLineNumber = start.lineNumber;\r\n        var startColumn = start.column;\r\n        var endLineNumber = end.lineNumber;\r\n        var endColumn = end.column;\r\n        if (validationType === 1 /* SurrogatePairs */) {\r\n            var charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\r\n            var charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\r\n            var startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\r\n            var endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\r\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\r\n                return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n            }\r\n            if (startLineNumber === endLineNumber && startColumn === endColumn) {\r\n                // do not expand a collapsed range, simply move it to a valid location\r\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn - 1);\r\n            }\r\n            if (startInsideSurrogatePair && endInsideSurrogatePair) {\r\n                // expand range at both ends\r\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn + 1);\r\n            }\r\n            if (startInsideSurrogatePair) {\r\n                // only expand range at the start\r\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn);\r\n            }\r\n            // only expand range at the end\r\n            return new Range(startLineNumber, startColumn, endLineNumber, endColumn + 1);\r\n        }\r\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n    };\r\n    TextModel.prototype.modifyPosition = function (rawPosition, offset) {\r\n        this._assertNotDisposed();\r\n        var candidate = this.getOffsetAt(rawPosition) + offset;\r\n        return this.getPositionAt(Math.min(this._buffer.getLength(), Math.max(0, candidate)));\r\n    };\r\n    TextModel.prototype.getFullModelRange = function () {\r\n        this._assertNotDisposed();\r\n        var lineCount = this.getLineCount();\r\n        return new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\r\n    };\r\n    TextModel.prototype.findMatchesLineByLine = function (searchRange, searchData, captureMatches, limitResultCount) {\r\n        return this._buffer.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\r\n    };\r\n    TextModel.prototype.findMatches = function (searchString, rawSearchScope, isRegex, matchCase, wordSeparators, captureMatches, limitResultCount) {\r\n        if (limitResultCount === void 0) { limitResultCount = LIMIT_FIND_COUNT; }\r\n        this._assertNotDisposed();\r\n        var searchRange;\r\n        if (Range.isIRange(rawSearchScope)) {\r\n            searchRange = this.validateRange(rawSearchScope);\r\n        }\r\n        else {\r\n            searchRange = this.getFullModelRange();\r\n        }\r\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\r\n            // not regex, not multi line\r\n            var searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\r\n            var searchData = searchParams.parseSearchRequest();\r\n            if (!searchData) {\r\n                return [];\r\n            }\r\n            return this.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\r\n        }\r\n        return TextModelSearch.findMatches(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchRange, captureMatches, limitResultCount);\r\n    };\r\n    TextModel.prototype.findNextMatch = function (searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\r\n        this._assertNotDisposed();\r\n        var searchStart = this.validatePosition(rawSearchStart);\r\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\r\n            var searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\r\n            var searchData = searchParams.parseSearchRequest();\r\n            if (!searchData) {\r\n                return null;\r\n            }\r\n            var lineCount = this.getLineCount();\r\n            var searchRange = new Range(searchStart.lineNumber, searchStart.column, lineCount, this.getLineMaxColumn(lineCount));\r\n            var ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\r\n            TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\r\n            if (ret.length > 0) {\r\n                return ret[0];\r\n            }\r\n            searchRange = new Range(1, 1, searchStart.lineNumber, this.getLineMaxColumn(searchStart.lineNumber));\r\n            ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\r\n            if (ret.length > 0) {\r\n                return ret[0];\r\n            }\r\n            return null;\r\n        }\r\n        return TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\r\n    };\r\n    TextModel.prototype.findPreviousMatch = function (searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\r\n        this._assertNotDisposed();\r\n        var searchStart = this.validatePosition(rawSearchStart);\r\n        return TextModelSearch.findPreviousMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\r\n    };\r\n    //#endregion\r\n    //#region Editing\r\n    TextModel.prototype.pushStackElement = function () {\r\n        this._commandManager.pushStackElement();\r\n    };\r\n    TextModel.prototype.pushEOL = function (eol) {\r\n        var currentEOL = (this.getEOL() === '\\n' ? 0 /* LF */ : 1 /* CRLF */);\r\n        if (currentEOL === eol) {\r\n            return;\r\n        }\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            this._eventEmitter.beginDeferredEmit();\r\n            this._commandManager.pushEOL(eol);\r\n        }\r\n        finally {\r\n            this._eventEmitter.endDeferredEmit();\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype.pushEditOperations = function (beforeCursorState, editOperations, cursorStateComputer) {\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            this._eventEmitter.beginDeferredEmit();\r\n            return this._pushEditOperations(beforeCursorState, editOperations, cursorStateComputer);\r\n        }\r\n        finally {\r\n            this._eventEmitter.endDeferredEmit();\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype._pushEditOperations = function (beforeCursorState, editOperations, cursorStateComputer) {\r\n        var _this = this;\r\n        if (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\r\n            // Go through each saved line number and insert a trim whitespace edit\r\n            // if it is safe to do so (no conflicts with other edits).\r\n            var incomingEdits = editOperations.map(function (op) {\r\n                return {\r\n                    range: _this.validateRange(op.range),\r\n                    text: op.text\r\n                };\r\n            });\r\n            // Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\r\n            // We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\r\n            var editsAreNearCursors = true;\r\n            for (var i = 0, len = beforeCursorState.length; i < len; i++) {\r\n                var sel = beforeCursorState[i];\r\n                var foundEditNearSel = false;\r\n                for (var j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\r\n                    var editRange = incomingEdits[j].range;\r\n                    var selIsAbove = editRange.startLineNumber > sel.endLineNumber;\r\n                    var selIsBelow = sel.startLineNumber > editRange.endLineNumber;\r\n                    if (!selIsAbove && !selIsBelow) {\r\n                        foundEditNearSel = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!foundEditNearSel) {\r\n                    editsAreNearCursors = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (editsAreNearCursors) {\r\n                for (var i = 0, len = this._trimAutoWhitespaceLines.length; i < len; i++) {\r\n                    var trimLineNumber = this._trimAutoWhitespaceLines[i];\r\n                    var maxLineColumn = this.getLineMaxColumn(trimLineNumber);\r\n                    var allowTrimLine = true;\r\n                    for (var j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\r\n                        var editRange = incomingEdits[j].range;\r\n                        var editText = incomingEdits[j].text;\r\n                        if (trimLineNumber < editRange.startLineNumber || trimLineNumber > editRange.endLineNumber) {\r\n                            // `trimLine` is completely outside this edit\r\n                            continue;\r\n                        }\r\n                        // At this point:\r\n                        //   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\r\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === maxLineColumn\r\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n') {\r\n                            // This edit inserts a new line (and maybe other text) after `trimLine`\r\n                            continue;\r\n                        }\r\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === 1\r\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(editText.length - 1) === '\\n') {\r\n                            // This edit inserts a new line (and maybe other text) before `trimLine`\r\n                            continue;\r\n                        }\r\n                        // Looks like we can't trim this line as it would interfere with an incoming edit\r\n                        allowTrimLine = false;\r\n                        break;\r\n                    }\r\n                    if (allowTrimLine) {\r\n                        editOperations.push({\r\n                            range: new Range(trimLineNumber, 1, trimLineNumber, maxLineColumn),\r\n                            text: null\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            this._trimAutoWhitespaceLines = null;\r\n        }\r\n        return this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer);\r\n    };\r\n    TextModel.prototype.applyEdits = function (rawOperations) {\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            this._eventEmitter.beginDeferredEmit();\r\n            return this._applyEdits(rawOperations);\r\n        }\r\n        finally {\r\n            this._eventEmitter.endDeferredEmit();\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype._applyEdits = function (rawOperations) {\r\n        for (var i = 0, len = rawOperations.length; i < len; i++) {\r\n            rawOperations[i].range = this.validateRange(rawOperations[i].range);\r\n        }\r\n        var oldLineCount = this._buffer.getLineCount();\r\n        var result = this._buffer.applyEdits(rawOperations, this._options.trimAutoWhitespace);\r\n        var newLineCount = this._buffer.getLineCount();\r\n        var contentChanges = result.changes;\r\n        this._trimAutoWhitespaceLines = result.trimAutoWhitespaceLineNumbers;\r\n        if (contentChanges.length !== 0) {\r\n            var rawContentChanges = [];\r\n            var lineCount = oldLineCount;\r\n            for (var i = 0, len = contentChanges.length; i < len; i++) {\r\n                var change = contentChanges[i];\r\n                var _a = countEOL(change.text), eolCount = _a[0], firstLineLength = _a[1], lastLineLength = _a[2];\r\n                this._tokens.acceptEdit(change.range, eolCount, firstLineLength);\r\n                this._tokens2.acceptEdit(change.range, eolCount, firstLineLength, lastLineLength, change.text.length > 0 ? change.text.charCodeAt(0) : 0 /* Null */);\r\n                this._onDidChangeDecorations.fire();\r\n                this._decorationsTree.acceptReplace(change.rangeOffset, change.rangeLength, change.text.length, change.forceMoveMarkers);\r\n                var startLineNumber = change.range.startLineNumber;\r\n                var endLineNumber = change.range.endLineNumber;\r\n                var deletingLinesCnt = endLineNumber - startLineNumber;\r\n                var insertingLinesCnt = eolCount;\r\n                var editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\r\n                var changeLineCountDelta = (insertingLinesCnt - deletingLinesCnt);\r\n                for (var j = editingLinesCnt; j >= 0; j--) {\r\n                    var editLineNumber = startLineNumber + j;\r\n                    var currentEditLineNumber = newLineCount - lineCount - changeLineCountDelta + editLineNumber;\r\n                    rawContentChanges.push(new ModelRawLineChanged(editLineNumber, this.getLineContent(currentEditLineNumber)));\r\n                }\r\n                if (editingLinesCnt < deletingLinesCnt) {\r\n                    // Must delete some lines\r\n                    var spliceStartLineNumber = startLineNumber + editingLinesCnt;\r\n                    rawContentChanges.push(new ModelRawLinesDeleted(spliceStartLineNumber + 1, endLineNumber));\r\n                }\r\n                if (editingLinesCnt < insertingLinesCnt) {\r\n                    // Must insert some lines\r\n                    var spliceLineNumber = startLineNumber + editingLinesCnt;\r\n                    var cnt = insertingLinesCnt - editingLinesCnt;\r\n                    var fromLineNumber = newLineCount - lineCount - cnt + spliceLineNumber + 1;\r\n                    var newLines = [];\r\n                    for (var i_1 = 0; i_1 < cnt; i_1++) {\r\n                        var lineNumber = fromLineNumber + i_1;\r\n                        newLines[lineNumber - fromLineNumber] = this.getLineContent(lineNumber);\r\n                    }\r\n                    rawContentChanges.push(new ModelRawLinesInserted(spliceLineNumber + 1, startLineNumber + insertingLinesCnt, newLines));\r\n                }\r\n                lineCount += changeLineCountDelta;\r\n            }\r\n            this._increaseVersionId();\r\n            this._emitContentChangedEvent(new ModelRawContentChangedEvent(rawContentChanges, this.getVersionId(), this._isUndoing, this._isRedoing), {\r\n                changes: contentChanges,\r\n                eol: this._buffer.getEOL(),\r\n                versionId: this.getVersionId(),\r\n                isUndoing: this._isUndoing,\r\n                isRedoing: this._isRedoing,\r\n                isFlush: false\r\n            });\r\n        }\r\n        return result.reverseEdits;\r\n    };\r\n    TextModel.prototype._undo = function () {\r\n        this._isUndoing = true;\r\n        var r = this._commandManager.undo();\r\n        this._isUndoing = false;\r\n        if (!r) {\r\n            return null;\r\n        }\r\n        this._overwriteAlternativeVersionId(r.recordedVersionId);\r\n        return r.selections;\r\n    };\r\n    TextModel.prototype.undo = function () {\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            this._eventEmitter.beginDeferredEmit();\r\n            return this._undo();\r\n        }\r\n        finally {\r\n            this._eventEmitter.endDeferredEmit();\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype.canUndo = function () {\r\n        return this._commandManager.canUndo();\r\n    };\r\n    TextModel.prototype._redo = function () {\r\n        this._isRedoing = true;\r\n        var r = this._commandManager.redo();\r\n        this._isRedoing = false;\r\n        if (!r) {\r\n            return null;\r\n        }\r\n        this._overwriteAlternativeVersionId(r.recordedVersionId);\r\n        return r.selections;\r\n    };\r\n    TextModel.prototype.redo = function () {\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            this._eventEmitter.beginDeferredEmit();\r\n            return this._redo();\r\n        }\r\n        finally {\r\n            this._eventEmitter.endDeferredEmit();\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype.canRedo = function () {\r\n        return this._commandManager.canRedo();\r\n    };\r\n    //#endregion\r\n    //#region Decorations\r\n    TextModel.prototype.changeDecorations = function (callback, ownerId) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        this._assertNotDisposed();\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            return this._changeDecorations(ownerId, callback);\r\n        }\r\n        finally {\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype._changeDecorations = function (ownerId, callback) {\r\n        var _this = this;\r\n        var changeAccessor = {\r\n            addDecoration: function (range, options) {\r\n                _this._onDidChangeDecorations.fire();\r\n                return _this._deltaDecorationsImpl(ownerId, [], [{ range: range, options: options }])[0];\r\n            },\r\n            changeDecoration: function (id, newRange) {\r\n                _this._onDidChangeDecorations.fire();\r\n                _this._changeDecorationImpl(id, newRange);\r\n            },\r\n            changeDecorationOptions: function (id, options) {\r\n                _this._onDidChangeDecorations.fire();\r\n                _this._changeDecorationOptionsImpl(id, _normalizeOptions(options));\r\n            },\r\n            removeDecoration: function (id) {\r\n                _this._onDidChangeDecorations.fire();\r\n                _this._deltaDecorationsImpl(ownerId, [id], []);\r\n            },\r\n            deltaDecorations: function (oldDecorations, newDecorations) {\r\n                if (oldDecorations.length === 0 && newDecorations.length === 0) {\r\n                    // nothing to do\r\n                    return [];\r\n                }\r\n                _this._onDidChangeDecorations.fire();\r\n                return _this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\r\n            }\r\n        };\r\n        var result = null;\r\n        try {\r\n            result = callback(changeAccessor);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n        }\r\n        // Invalidate change accessor\r\n        changeAccessor.addDecoration = invalidFunc;\r\n        changeAccessor.changeDecoration = invalidFunc;\r\n        changeAccessor.changeDecorationOptions = invalidFunc;\r\n        changeAccessor.removeDecoration = invalidFunc;\r\n        changeAccessor.deltaDecorations = invalidFunc;\r\n        return result;\r\n    };\r\n    TextModel.prototype.deltaDecorations = function (oldDecorations, newDecorations, ownerId) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        this._assertNotDisposed();\r\n        if (!oldDecorations) {\r\n            oldDecorations = [];\r\n        }\r\n        if (oldDecorations.length === 0 && newDecorations.length === 0) {\r\n            // nothing to do\r\n            return [];\r\n        }\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            this._onDidChangeDecorations.fire();\r\n            return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\r\n        }\r\n        finally {\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype._getTrackedRange = function (id) {\r\n        return this.getDecorationRange(id);\r\n    };\r\n    TextModel.prototype._setTrackedRange = function (id, newRange, newStickiness) {\r\n        var node = (id ? this._decorations[id] : null);\r\n        if (!node) {\r\n            if (!newRange) {\r\n                // node doesn't exist, the request is to delete => nothing to do\r\n                return null;\r\n            }\r\n            // node doesn't exist, the request is to set => add the tracked range\r\n            return this._deltaDecorationsImpl(0, [], [{ range: newRange, options: TRACKED_RANGE_OPTIONS[newStickiness] }])[0];\r\n        }\r\n        if (!newRange) {\r\n            // node exists, the request is to delete => delete node\r\n            this._decorationsTree.delete(node);\r\n            delete this._decorations[node.id];\r\n            return null;\r\n        }\r\n        // node exists, the request is to set => change the tracked range and its options\r\n        var range = this._validateRangeRelaxedNoAllocations(newRange);\r\n        var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\r\n        var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\r\n        this._decorationsTree.delete(node);\r\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\r\n        node.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\r\n        this._decorationsTree.insert(node);\r\n        return node.id;\r\n    };\r\n    TextModel.prototype.removeAllDecorationsWithOwnerId = function (ownerId) {\r\n        if (this._isDisposed) {\r\n            return;\r\n        }\r\n        var nodes = this._decorationsTree.collectNodesFromOwner(ownerId);\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            var node = nodes[i];\r\n            this._decorationsTree.delete(node);\r\n            delete this._decorations[node.id];\r\n        }\r\n    };\r\n    TextModel.prototype.getDecorationOptions = function (decorationId) {\r\n        var node = this._decorations[decorationId];\r\n        if (!node) {\r\n            return null;\r\n        }\r\n        return node.options;\r\n    };\r\n    TextModel.prototype.getDecorationRange = function (decorationId) {\r\n        var node = this._decorations[decorationId];\r\n        if (!node) {\r\n            return null;\r\n        }\r\n        var versionId = this.getVersionId();\r\n        if (node.cachedVersionId !== versionId) {\r\n            this._decorationsTree.resolveNode(node, versionId);\r\n        }\r\n        if (node.range === null) {\r\n            node.range = this._getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\r\n        }\r\n        return node.range;\r\n    };\r\n    TextModel.prototype.getLineDecorations = function (lineNumber, ownerId, filterOutValidation) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        if (filterOutValidation === void 0) { filterOutValidation = false; }\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            return [];\r\n        }\r\n        return this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation);\r\n    };\r\n    TextModel.prototype.getLinesDecorations = function (_startLineNumber, _endLineNumber, ownerId, filterOutValidation) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        if (filterOutValidation === void 0) { filterOutValidation = false; }\r\n        var lineCount = this.getLineCount();\r\n        var startLineNumber = Math.min(lineCount, Math.max(1, _startLineNumber));\r\n        var endLineNumber = Math.min(lineCount, Math.max(1, _endLineNumber));\r\n        var endColumn = this.getLineMaxColumn(endLineNumber);\r\n        return this._getDecorationsInRange(new Range(startLineNumber, 1, endLineNumber, endColumn), ownerId, filterOutValidation);\r\n    };\r\n    TextModel.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        if (filterOutValidation === void 0) { filterOutValidation = false; }\r\n        var validatedRange = this.validateRange(range);\r\n        return this._getDecorationsInRange(validatedRange, ownerId, filterOutValidation);\r\n    };\r\n    TextModel.prototype.getOverviewRulerDecorations = function (ownerId, filterOutValidation) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        if (filterOutValidation === void 0) { filterOutValidation = false; }\r\n        var versionId = this.getVersionId();\r\n        var result = this._decorationsTree.search(ownerId, filterOutValidation, true, versionId);\r\n        return this._ensureNodesHaveRanges(result);\r\n    };\r\n    TextModel.prototype.getAllDecorations = function (ownerId, filterOutValidation) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        if (filterOutValidation === void 0) { filterOutValidation = false; }\r\n        var versionId = this.getVersionId();\r\n        var result = this._decorationsTree.search(ownerId, filterOutValidation, false, versionId);\r\n        return this._ensureNodesHaveRanges(result);\r\n    };\r\n    TextModel.prototype._getDecorationsInRange = function (filterRange, filterOwnerId, filterOutValidation) {\r\n        var startOffset = this._buffer.getOffsetAt(filterRange.startLineNumber, filterRange.startColumn);\r\n        var endOffset = this._buffer.getOffsetAt(filterRange.endLineNumber, filterRange.endColumn);\r\n        var versionId = this.getVersionId();\r\n        var result = this._decorationsTree.intervalSearch(startOffset, endOffset, filterOwnerId, filterOutValidation, versionId);\r\n        return this._ensureNodesHaveRanges(result);\r\n    };\r\n    TextModel.prototype._ensureNodesHaveRanges = function (nodes) {\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            var node = nodes[i];\r\n            if (node.range === null) {\r\n                node.range = this._getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\r\n            }\r\n        }\r\n        return nodes;\r\n    };\r\n    TextModel.prototype._getRangeAt = function (start, end) {\r\n        return this._buffer.getRangeAt(start, end - start);\r\n    };\r\n    TextModel.prototype._changeDecorationImpl = function (decorationId, _range) {\r\n        var node = this._decorations[decorationId];\r\n        if (!node) {\r\n            return;\r\n        }\r\n        var range = this._validateRangeRelaxedNoAllocations(_range);\r\n        var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\r\n        var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\r\n        this._decorationsTree.delete(node);\r\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\r\n        this._decorationsTree.insert(node);\r\n    };\r\n    TextModel.prototype._changeDecorationOptionsImpl = function (decorationId, options) {\r\n        var node = this._decorations[decorationId];\r\n        if (!node) {\r\n            return;\r\n        }\r\n        var nodeWasInOverviewRuler = (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\r\n        var nodeIsInOverviewRuler = (options.overviewRuler && options.overviewRuler.color ? true : false);\r\n        if (nodeWasInOverviewRuler !== nodeIsInOverviewRuler) {\r\n            // Delete + Insert due to an overview ruler status change\r\n            this._decorationsTree.delete(node);\r\n            node.setOptions(options);\r\n            this._decorationsTree.insert(node);\r\n        }\r\n        else {\r\n            node.setOptions(options);\r\n        }\r\n    };\r\n    TextModel.prototype._deltaDecorationsImpl = function (ownerId, oldDecorationsIds, newDecorations) {\r\n        var versionId = this.getVersionId();\r\n        var oldDecorationsLen = oldDecorationsIds.length;\r\n        var oldDecorationIndex = 0;\r\n        var newDecorationsLen = newDecorations.length;\r\n        var newDecorationIndex = 0;\r\n        var result = new Array(newDecorationsLen);\r\n        while (oldDecorationIndex < oldDecorationsLen || newDecorationIndex < newDecorationsLen) {\r\n            var node = null;\r\n            if (oldDecorationIndex < oldDecorationsLen) {\r\n                // (1) get ourselves an old node\r\n                do {\r\n                    node = this._decorations[oldDecorationsIds[oldDecorationIndex++]];\r\n                } while (!node && oldDecorationIndex < oldDecorationsLen);\r\n                // (2) remove the node from the tree (if it exists)\r\n                if (node) {\r\n                    this._decorationsTree.delete(node);\r\n                }\r\n            }\r\n            if (newDecorationIndex < newDecorationsLen) {\r\n                // (3) create a new node if necessary\r\n                if (!node) {\r\n                    var internalDecorationId = (++this._lastDecorationId);\r\n                    var decorationId = this._instanceId + \";\" + internalDecorationId;\r\n                    node = new IntervalNode(decorationId, 0, 0);\r\n                    this._decorations[decorationId] = node;\r\n                }\r\n                // (4) initialize node\r\n                var newDecoration = newDecorations[newDecorationIndex];\r\n                var range = this._validateRangeRelaxedNoAllocations(newDecoration.range);\r\n                var options = _normalizeOptions(newDecoration.options);\r\n                var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\r\n                var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\r\n                node.ownerId = ownerId;\r\n                node.reset(versionId, startOffset, endOffset, range);\r\n                node.setOptions(options);\r\n                this._decorationsTree.insert(node);\r\n                result[newDecorationIndex] = node.id;\r\n                newDecorationIndex++;\r\n            }\r\n            else {\r\n                if (node) {\r\n                    delete this._decorations[node.id];\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    //#endregion\r\n    //#region Tokenization\r\n    TextModel.prototype.setLineTokens = function (lineNumber, tokens) {\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        this._tokens.setTokens(this._languageIdentifier.id, lineNumber - 1, this._buffer.getLineLength(lineNumber), tokens);\r\n    };\r\n    TextModel.prototype.setTokens = function (tokens) {\r\n        if (tokens.length === 0) {\r\n            return;\r\n        }\r\n        var ranges = [];\r\n        for (var i = 0, len = tokens.length; i < len; i++) {\r\n            var element = tokens[i];\r\n            ranges.push({ fromLineNumber: element.startLineNumber, toLineNumber: element.startLineNumber + element.tokens.length - 1 });\r\n            for (var j = 0, lenJ = element.tokens.length; j < lenJ; j++) {\r\n                this.setLineTokens(element.startLineNumber + j, element.tokens[j]);\r\n            }\r\n        }\r\n        this._emitModelTokensChangedEvent({\r\n            tokenizationSupportChanged: false,\r\n            ranges: ranges\r\n        });\r\n    };\r\n    TextModel.prototype.setSemanticTokens = function (tokens) {\r\n        this._tokens2.set(tokens);\r\n        this._emitModelTokensChangedEvent({\r\n            tokenizationSupportChanged: false,\r\n            ranges: [{ fromLineNumber: 1, toLineNumber: this.getLineCount() }]\r\n        });\r\n    };\r\n    TextModel.prototype.tokenizeViewport = function (startLineNumber, endLineNumber) {\r\n        startLineNumber = Math.max(1, startLineNumber);\r\n        endLineNumber = Math.min(this._buffer.getLineCount(), endLineNumber);\r\n        this._tokenization.tokenizeViewport(startLineNumber, endLineNumber);\r\n    };\r\n    TextModel.prototype.clearTokens = function () {\r\n        this._tokens.flush();\r\n        this._emitModelTokensChangedEvent({\r\n            tokenizationSupportChanged: true,\r\n            ranges: [{\r\n                    fromLineNumber: 1,\r\n                    toLineNumber: this._buffer.getLineCount()\r\n                }]\r\n        });\r\n    };\r\n    TextModel.prototype._emitModelTokensChangedEvent = function (e) {\r\n        if (!this._isDisposing) {\r\n            this._onDidChangeTokens.fire(e);\r\n        }\r\n    };\r\n    TextModel.prototype.resetTokenization = function () {\r\n        this._tokenization.reset();\r\n    };\r\n    TextModel.prototype.forceTokenization = function (lineNumber) {\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        this._tokenization.forceTokenization(lineNumber);\r\n    };\r\n    TextModel.prototype.isCheapToTokenize = function (lineNumber) {\r\n        return this._tokenization.isCheapToTokenize(lineNumber);\r\n    };\r\n    TextModel.prototype.tokenizeIfCheap = function (lineNumber) {\r\n        if (this.isCheapToTokenize(lineNumber)) {\r\n            this.forceTokenization(lineNumber);\r\n        }\r\n    };\r\n    TextModel.prototype.getLineTokens = function (lineNumber) {\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._getLineTokens(lineNumber);\r\n    };\r\n    TextModel.prototype._getLineTokens = function (lineNumber) {\r\n        var lineText = this.getLineContent(lineNumber);\r\n        var syntacticTokens = this._tokens.getTokens(this._languageIdentifier.id, lineNumber - 1, lineText);\r\n        return this._tokens2.addSemanticTokens(lineNumber, syntacticTokens);\r\n    };\r\n    TextModel.prototype.getLanguageIdentifier = function () {\r\n        return this._languageIdentifier;\r\n    };\r\n    TextModel.prototype.getModeId = function () {\r\n        return this._languageIdentifier.language;\r\n    };\r\n    TextModel.prototype.setMode = function (languageIdentifier) {\r\n        if (this._languageIdentifier.id === languageIdentifier.id) {\r\n            // There's nothing to do\r\n            return;\r\n        }\r\n        var e = {\r\n            oldLanguage: this._languageIdentifier.language,\r\n            newLanguage: languageIdentifier.language\r\n        };\r\n        this._languageIdentifier = languageIdentifier;\r\n        this._onDidChangeLanguage.fire(e);\r\n        this._onDidChangeLanguageConfiguration.fire({});\r\n    };\r\n    TextModel.prototype.getLanguageIdAtPosition = function (lineNumber, column) {\r\n        var position = this.validatePosition(new Position(lineNumber, column));\r\n        var lineTokens = this.getLineTokens(position.lineNumber);\r\n        return lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\r\n    };\r\n    // Having tokens allows implementing additional helper methods\r\n    TextModel.prototype.getWordAtPosition = function (_position) {\r\n        this._assertNotDisposed();\r\n        var position = this.validatePosition(_position);\r\n        var lineContent = this.getLineContent(position.lineNumber);\r\n        var lineTokens = this._getLineTokens(position.lineNumber);\r\n        var tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n        // (1). First try checking right biased word\r\n        var _a = TextModel._findLanguageBoundaries(lineTokens, tokenIndex), rbStartOffset = _a[0], rbEndOffset = _a[1];\r\n        var rightBiasedWord = getWordAtText(position.column, LanguageConfigurationRegistry.getWordDefinition(lineTokens.getLanguageId(tokenIndex)), lineContent.substring(rbStartOffset, rbEndOffset), rbStartOffset);\r\n        // Make sure the result touches the original passed in position\r\n        if (rightBiasedWord && rightBiasedWord.startColumn <= _position.column && _position.column <= rightBiasedWord.endColumn) {\r\n            return rightBiasedWord;\r\n        }\r\n        // (2). Else, if we were at a language boundary, check the left biased word\r\n        if (tokenIndex > 0 && rbStartOffset === position.column - 1) {\r\n            // edge case, where `position` sits between two tokens belonging to two different languages\r\n            var _b = TextModel._findLanguageBoundaries(lineTokens, tokenIndex - 1), lbStartOffset = _b[0], lbEndOffset = _b[1];\r\n            var leftBiasedWord = getWordAtText(position.column, LanguageConfigurationRegistry.getWordDefinition(lineTokens.getLanguageId(tokenIndex - 1)), lineContent.substring(lbStartOffset, lbEndOffset), lbStartOffset);\r\n            // Make sure the result touches the original passed in position\r\n            if (leftBiasedWord && leftBiasedWord.startColumn <= _position.column && _position.column <= leftBiasedWord.endColumn) {\r\n                return leftBiasedWord;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel._findLanguageBoundaries = function (lineTokens, tokenIndex) {\r\n        var languageId = lineTokens.getLanguageId(tokenIndex);\r\n        // go left until a different language is hit\r\n        var startOffset = 0;\r\n        for (var i = tokenIndex; i >= 0 && lineTokens.getLanguageId(i) === languageId; i--) {\r\n            startOffset = lineTokens.getStartOffset(i);\r\n        }\r\n        // go right until a different language is hit\r\n        var endOffset = lineTokens.getLineContent().length;\r\n        for (var i = tokenIndex, tokenCount = lineTokens.getCount(); i < tokenCount && lineTokens.getLanguageId(i) === languageId; i++) {\r\n            endOffset = lineTokens.getEndOffset(i);\r\n        }\r\n        return [startOffset, endOffset];\r\n    };\r\n    TextModel.prototype.getWordUntilPosition = function (position) {\r\n        var wordAtPosition = this.getWordAtPosition(position);\r\n        if (!wordAtPosition) {\r\n            return {\r\n                word: '',\r\n                startColumn: position.column,\r\n                endColumn: position.column\r\n            };\r\n        }\r\n        return {\r\n            word: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\r\n            startColumn: wordAtPosition.startColumn,\r\n            endColumn: position.column\r\n        };\r\n    };\r\n    TextModel.prototype.findMatchingBracketUp = function (_bracket, _position) {\r\n        var bracket = _bracket.toLowerCase();\r\n        var position = this.validatePosition(_position);\r\n        var lineTokens = this._getLineTokens(position.lineNumber);\r\n        var languageId = lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\r\n        var bracketsSupport = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n        if (!bracketsSupport) {\r\n            return null;\r\n        }\r\n        var data = bracketsSupport.textIsBracket[bracket];\r\n        if (!data) {\r\n            return null;\r\n        }\r\n        return this._findMatchingBracketUp(data, position);\r\n    };\r\n    TextModel.prototype.matchBracket = function (position) {\r\n        return this._matchBracket(this.validatePosition(position));\r\n    };\r\n    TextModel.prototype._matchBracket = function (position) {\r\n        var lineNumber = position.lineNumber;\r\n        var lineTokens = this._getLineTokens(lineNumber);\r\n        var tokenCount = lineTokens.getCount();\r\n        var lineText = this._buffer.getLineContent(lineNumber);\r\n        var tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n        if (tokenIndex < 0) {\r\n            return null;\r\n        }\r\n        var currentModeBrackets = LanguageConfigurationRegistry.getBracketsSupport(lineTokens.getLanguageId(tokenIndex));\r\n        // check that the token is not to be ignored\r\n        if (currentModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex))) {\r\n            // limit search to not go before `maxBracketLength`\r\n            var searchStartOffset = Math.max(0, position.column - 1 - currentModeBrackets.maxBracketLength);\r\n            for (var i = tokenIndex - 1; i >= 0; i--) {\r\n                var tokenEndOffset = lineTokens.getEndOffset(i);\r\n                if (tokenEndOffset <= searchStartOffset) {\r\n                    break;\r\n                }\r\n                if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i))) {\r\n                    searchStartOffset = tokenEndOffset;\r\n                }\r\n            }\r\n            // limit search to not go after `maxBracketLength`\r\n            var searchEndOffset = Math.min(lineText.length, position.column - 1 + currentModeBrackets.maxBracketLength);\r\n            // it might be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\r\n            // `bestResult` will contain the most right-side result\r\n            var bestResult = null;\r\n            while (true) {\r\n                var foundBracket = BracketsUtils.findNextBracketInRange(currentModeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (!foundBracket) {\r\n                    // there are no more brackets in this text\r\n                    break;\r\n                }\r\n                // check that we didn't hit a bracket too far away from position\r\n                if (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\r\n                    var foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\r\n                    var r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText]);\r\n                    if (r) {\r\n                        bestResult = r;\r\n                    }\r\n                }\r\n                searchStartOffset = foundBracket.endColumn - 1;\r\n            }\r\n            if (bestResult) {\r\n                return bestResult;\r\n            }\r\n        }\r\n        // If position is in between two tokens, try also looking in the previous token\r\n        if (tokenIndex > 0 && lineTokens.getStartOffset(tokenIndex) === position.column - 1) {\r\n            var prevTokenIndex = tokenIndex - 1;\r\n            var prevModeBrackets = LanguageConfigurationRegistry.getBracketsSupport(lineTokens.getLanguageId(prevTokenIndex));\r\n            // check that previous token is not to be ignored\r\n            if (prevModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(prevTokenIndex))) {\r\n                // limit search in case previous token is very large, there's no need to go beyond `maxBracketLength`\r\n                var searchStartOffset = Math.max(0, position.column - 1 - prevModeBrackets.maxBracketLength);\r\n                var searchEndOffset = Math.min(lineText.length, position.column - 1 + prevModeBrackets.maxBracketLength);\r\n                for (var i = prevTokenIndex + 1; i < tokenCount; i++) {\r\n                    var tokenStartOffset = lineTokens.getStartOffset(i);\r\n                    if (tokenStartOffset >= searchEndOffset) {\r\n                        break;\r\n                    }\r\n                    if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i))) {\r\n                        searchEndOffset = tokenStartOffset;\r\n                    }\r\n                }\r\n                var foundBracket = BracketsUtils.findPrevBracketInRange(prevModeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                // check that we didn't hit a bracket too far away from position\r\n                if (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\r\n                    var foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\r\n                    var r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText]);\r\n                    if (r) {\r\n                        return r;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype._matchFoundBracket = function (foundBracket, data, isOpen) {\r\n        if (!data) {\r\n            return null;\r\n        }\r\n        if (isOpen) {\r\n            var matched = this._findMatchingBracketDown(data, foundBracket.getEndPosition());\r\n            if (matched) {\r\n                return [foundBracket, matched];\r\n            }\r\n        }\r\n        else {\r\n            var matched = this._findMatchingBracketUp(data, foundBracket.getStartPosition());\r\n            if (matched) {\r\n                return [foundBracket, matched];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype._findMatchingBracketUp = function (bracket, position) {\r\n        // console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\r\n        var languageId = bracket.languageIdentifier.id;\r\n        var reversedBracketRegex = bracket.reversedRegex;\r\n        var count = -1;\r\n        var searchPrevMatchingBracketInRange = function (lineNumber, lineText, searchStartOffset, searchEndOffset) {\r\n            while (true) {\r\n                var r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (!r) {\r\n                    break;\r\n                }\r\n                var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\r\n                if (bracket.isOpen(hitText)) {\r\n                    count++;\r\n                }\r\n                else if (bracket.isClose(hitText)) {\r\n                    count--;\r\n                }\r\n                if (count === 0) {\r\n                    return r;\r\n                }\r\n                searchEndOffset = r.startColumn - 1;\r\n            }\r\n            return null;\r\n        };\r\n        for (var lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\r\n            var lineTokens = this._getLineTokens(lineNumber);\r\n            var tokenCount = lineTokens.getCount();\r\n            var lineText = this._buffer.getLineContent(lineNumber);\r\n            var tokenIndex = tokenCount - 1;\r\n            var searchStartOffset = lineText.length;\r\n            var searchEndOffset = lineText.length;\r\n            if (lineNumber === position.lineNumber) {\r\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n                searchStartOffset = position.column - 1;\r\n                searchEndOffset = position.column - 1;\r\n            }\r\n            var prevSearchInToken = true;\r\n            for (; tokenIndex >= 0; tokenIndex--) {\r\n                var searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\r\n                if (searchInToken) {\r\n                    // this token should be searched\r\n                    if (prevSearchInToken) {\r\n                        // the previous token should be searched, simply extend searchStartOffset\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                    }\r\n                    else {\r\n                        // the previous token should not be searched\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                }\r\n                else {\r\n                    // this token should not be searched\r\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return r;\r\n                        }\r\n                    }\r\n                }\r\n                prevSearchInToken = searchInToken;\r\n            }\r\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                var r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (r) {\r\n                    return r;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype._findMatchingBracketDown = function (bracket, position) {\r\n        // console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\r\n        var languageId = bracket.languageIdentifier.id;\r\n        var bracketRegex = bracket.forwardRegex;\r\n        var count = 1;\r\n        var searchNextMatchingBracketInRange = function (lineNumber, lineText, searchStartOffset, searchEndOffset) {\r\n            while (true) {\r\n                var r = BracketsUtils.findNextBracketInRange(bracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (!r) {\r\n                    break;\r\n                }\r\n                var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\r\n                if (bracket.isOpen(hitText)) {\r\n                    count++;\r\n                }\r\n                else if (bracket.isClose(hitText)) {\r\n                    count--;\r\n                }\r\n                if (count === 0) {\r\n                    return r;\r\n                }\r\n                searchStartOffset = r.endColumn - 1;\r\n            }\r\n            return null;\r\n        };\r\n        var lineCount = this.getLineCount();\r\n        for (var lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\r\n            var lineTokens = this._getLineTokens(lineNumber);\r\n            var tokenCount = lineTokens.getCount();\r\n            var lineText = this._buffer.getLineContent(lineNumber);\r\n            var tokenIndex = 0;\r\n            var searchStartOffset = 0;\r\n            var searchEndOffset = 0;\r\n            if (lineNumber === position.lineNumber) {\r\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n                searchStartOffset = position.column - 1;\r\n                searchEndOffset = position.column - 1;\r\n            }\r\n            var prevSearchInToken = true;\r\n            for (; tokenIndex < tokenCount; tokenIndex++) {\r\n                var searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\r\n                if (searchInToken) {\r\n                    // this token should be searched\r\n                    if (prevSearchInToken) {\r\n                        // the previous token should be searched, simply extend searchEndOffset\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                    else {\r\n                        // the previous token should not be searched\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                }\r\n                else {\r\n                    // this token should not be searched\r\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return r;\r\n                        }\r\n                    }\r\n                }\r\n                prevSearchInToken = searchInToken;\r\n            }\r\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                var r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (r) {\r\n                    return r;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype.findPrevBracket = function (_position) {\r\n        var position = this.validatePosition(_position);\r\n        var languageId = -1;\r\n        var modeBrackets = null;\r\n        for (var lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\r\n            var lineTokens = this._getLineTokens(lineNumber);\r\n            var tokenCount = lineTokens.getCount();\r\n            var lineText = this._buffer.getLineContent(lineNumber);\r\n            var tokenIndex = tokenCount - 1;\r\n            var searchStartOffset = lineText.length;\r\n            var searchEndOffset = lineText.length;\r\n            if (lineNumber === position.lineNumber) {\r\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n                searchStartOffset = position.column - 1;\r\n                searchEndOffset = position.column - 1;\r\n                var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\r\n                if (languageId !== tokenLanguageId) {\r\n                    languageId = tokenLanguageId;\r\n                    modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n                }\r\n            }\r\n            var prevSearchInToken = true;\r\n            for (; tokenIndex >= 0; tokenIndex--) {\r\n                var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\r\n                if (languageId !== tokenLanguageId) {\r\n                    // language id change!\r\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return this._toFoundBracket(modeBrackets, r);\r\n                        }\r\n                        prevSearchInToken = false;\r\n                    }\r\n                    languageId = tokenLanguageId;\r\n                    modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n                }\r\n                var searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\r\n                if (searchInToken) {\r\n                    // this token should be searched\r\n                    if (prevSearchInToken) {\r\n                        // the previous token should be searched, simply extend searchStartOffset\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                    }\r\n                    else {\r\n                        // the previous token should not be searched\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                }\r\n                else {\r\n                    // this token should not be searched\r\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return this._toFoundBracket(modeBrackets, r);\r\n                        }\r\n                    }\r\n                }\r\n                prevSearchInToken = searchInToken;\r\n            }\r\n            if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                var r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (r) {\r\n                    return this._toFoundBracket(modeBrackets, r);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype.findNextBracket = function (_position) {\r\n        var position = this.validatePosition(_position);\r\n        var lineCount = this.getLineCount();\r\n        var languageId = -1;\r\n        var modeBrackets = null;\r\n        for (var lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\r\n            var lineTokens = this._getLineTokens(lineNumber);\r\n            var tokenCount = lineTokens.getCount();\r\n            var lineText = this._buffer.getLineContent(lineNumber);\r\n            var tokenIndex = 0;\r\n            var searchStartOffset = 0;\r\n            var searchEndOffset = 0;\r\n            if (lineNumber === position.lineNumber) {\r\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n                searchStartOffset = position.column - 1;\r\n                searchEndOffset = position.column - 1;\r\n                var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\r\n                if (languageId !== tokenLanguageId) {\r\n                    languageId = tokenLanguageId;\r\n                    modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n                }\r\n            }\r\n            var prevSearchInToken = true;\r\n            for (; tokenIndex < tokenCount; tokenIndex++) {\r\n                var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\r\n                if (languageId !== tokenLanguageId) {\r\n                    // language id change!\r\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return this._toFoundBracket(modeBrackets, r);\r\n                        }\r\n                        prevSearchInToken = false;\r\n                    }\r\n                    languageId = tokenLanguageId;\r\n                    modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n                }\r\n                var searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\r\n                if (searchInToken) {\r\n                    // this token should be searched\r\n                    if (prevSearchInToken) {\r\n                        // the previous token should be searched, simply extend searchEndOffset\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                    else {\r\n                        // the previous token should not be searched\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                }\r\n                else {\r\n                    // this token should not be searched\r\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return this._toFoundBracket(modeBrackets, r);\r\n                        }\r\n                    }\r\n                }\r\n                prevSearchInToken = searchInToken;\r\n            }\r\n            if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (r) {\r\n                    return this._toFoundBracket(modeBrackets, r);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype.findEnclosingBrackets = function (_position, maxDuration) {\r\n        var _this = this;\r\n        if (maxDuration === void 0) { maxDuration = 1073741824 /* MAX_SAFE_SMALL_INTEGER */; }\r\n        var position = this.validatePosition(_position);\r\n        var lineCount = this.getLineCount();\r\n        var savedCounts = new Map();\r\n        var counts = [];\r\n        var resetCounts = function (languageId, modeBrackets) {\r\n            if (!savedCounts.has(languageId)) {\r\n                var tmp = [];\r\n                for (var i = 0, len = modeBrackets ? modeBrackets.brackets.length : 0; i < len; i++) {\r\n                    tmp[i] = 0;\r\n                }\r\n                savedCounts.set(languageId, tmp);\r\n            }\r\n            counts = savedCounts.get(languageId);\r\n        };\r\n        var searchInRange = function (modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset) {\r\n            while (true) {\r\n                var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (!r) {\r\n                    break;\r\n                }\r\n                var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\r\n                var bracket = modeBrackets.textIsBracket[hitText];\r\n                if (bracket) {\r\n                    if (bracket.isOpen(hitText)) {\r\n                        counts[bracket.index]++;\r\n                    }\r\n                    else if (bracket.isClose(hitText)) {\r\n                        counts[bracket.index]--;\r\n                    }\r\n                    if (counts[bracket.index] === -1) {\r\n                        return _this._matchFoundBracket(r, bracket, false);\r\n                    }\r\n                }\r\n                searchStartOffset = r.endColumn - 1;\r\n            }\r\n            return null;\r\n        };\r\n        var languageId = -1;\r\n        var modeBrackets = null;\r\n        var startTime = Date.now();\r\n        for (var lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\r\n            var elapsedTime = Date.now() - startTime;\r\n            if (elapsedTime > maxDuration) {\r\n                return null;\r\n            }\r\n            var lineTokens = this._getLineTokens(lineNumber);\r\n            var tokenCount = lineTokens.getCount();\r\n            var lineText = this._buffer.getLineContent(lineNumber);\r\n            var tokenIndex = 0;\r\n            var searchStartOffset = 0;\r\n            var searchEndOffset = 0;\r\n            if (lineNumber === position.lineNumber) {\r\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n                searchStartOffset = position.column - 1;\r\n                searchEndOffset = position.column - 1;\r\n                var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\r\n                if (languageId !== tokenLanguageId) {\r\n                    languageId = tokenLanguageId;\r\n                    modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n                    resetCounts(languageId, modeBrackets);\r\n                }\r\n            }\r\n            var prevSearchInToken = true;\r\n            for (; tokenIndex < tokenCount; tokenIndex++) {\r\n                var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\r\n                if (languageId !== tokenLanguageId) {\r\n                    // language id change!\r\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return r;\r\n                        }\r\n                        prevSearchInToken = false;\r\n                    }\r\n                    languageId = tokenLanguageId;\r\n                    modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n                    resetCounts(languageId, modeBrackets);\r\n                }\r\n                var searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\r\n                if (searchInToken) {\r\n                    // this token should be searched\r\n                    if (prevSearchInToken) {\r\n                        // the previous token should be searched, simply extend searchEndOffset\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                    else {\r\n                        // the previous token should not be searched\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                }\r\n                else {\r\n                    // this token should not be searched\r\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return r;\r\n                        }\r\n                    }\r\n                }\r\n                prevSearchInToken = searchInToken;\r\n            }\r\n            if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                var r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (r) {\r\n                    return r;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype._toFoundBracket = function (modeBrackets, r) {\r\n        if (!r) {\r\n            return null;\r\n        }\r\n        var text = this.getValueInRange(r);\r\n        text = text.toLowerCase();\r\n        var data = modeBrackets.textIsBracket[text];\r\n        if (!data) {\r\n            return null;\r\n        }\r\n        return {\r\n            range: r,\r\n            open: data.open,\r\n            close: data.close,\r\n            isOpen: modeBrackets.textIsOpenBracket[text]\r\n        };\r\n    };\r\n    /**\r\n     * Returns:\r\n     *  - -1 => the line consists of whitespace\r\n     *  - otherwise => the indent level is returned value\r\n     */\r\n    TextModel.computeIndentLevel = function (line, tabSize) {\r\n        var indent = 0;\r\n        var i = 0;\r\n        var len = line.length;\r\n        while (i < len) {\r\n            var chCode = line.charCodeAt(i);\r\n            if (chCode === 32 /* Space */) {\r\n                indent++;\r\n            }\r\n            else if (chCode === 9 /* Tab */) {\r\n                indent = indent - indent % tabSize + tabSize;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        if (i === len) {\r\n            return -1; // line only consists of whitespace\r\n        }\r\n        return indent;\r\n    };\r\n    TextModel.prototype._computeIndentLevel = function (lineIndex) {\r\n        return TextModel.computeIndentLevel(this._buffer.getLineContent(lineIndex + 1), this._options.tabSize);\r\n    };\r\n    TextModel.prototype.getActiveIndentGuide = function (lineNumber, minLineNumber, maxLineNumber) {\r\n        var _this = this;\r\n        this._assertNotDisposed();\r\n        var lineCount = this.getLineCount();\r\n        if (lineNumber < 1 || lineNumber > lineCount) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        var foldingRules = LanguageConfigurationRegistry.getFoldingRules(this._languageIdentifier.id);\r\n        var offSide = Boolean(foldingRules && foldingRules.offSide);\r\n        var up_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\r\n        var up_aboveContentLineIndent = -1;\r\n        var up_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\r\n        var up_belowContentLineIndent = -1;\r\n        var up_resolveIndents = function (lineNumber) {\r\n            if (up_aboveContentLineIndex !== -1 && (up_aboveContentLineIndex === -2 || up_aboveContentLineIndex > lineNumber - 1)) {\r\n                up_aboveContentLineIndex = -1;\r\n                up_aboveContentLineIndent = -1;\r\n                // must find previous line with content\r\n                for (var lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\r\n                    var indent_1 = _this._computeIndentLevel(lineIndex);\r\n                    if (indent_1 >= 0) {\r\n                        up_aboveContentLineIndex = lineIndex;\r\n                        up_aboveContentLineIndent = indent_1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (up_belowContentLineIndex === -2) {\r\n                up_belowContentLineIndex = -1;\r\n                up_belowContentLineIndent = -1;\r\n                // must find next line with content\r\n                for (var lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\r\n                    var indent_2 = _this._computeIndentLevel(lineIndex);\r\n                    if (indent_2 >= 0) {\r\n                        up_belowContentLineIndex = lineIndex;\r\n                        up_belowContentLineIndent = indent_2;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        var down_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\r\n        var down_aboveContentLineIndent = -1;\r\n        var down_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\r\n        var down_belowContentLineIndent = -1;\r\n        var down_resolveIndents = function (lineNumber) {\r\n            if (down_aboveContentLineIndex === -2) {\r\n                down_aboveContentLineIndex = -1;\r\n                down_aboveContentLineIndent = -1;\r\n                // must find previous line with content\r\n                for (var lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\r\n                    var indent_3 = _this._computeIndentLevel(lineIndex);\r\n                    if (indent_3 >= 0) {\r\n                        down_aboveContentLineIndex = lineIndex;\r\n                        down_aboveContentLineIndent = indent_3;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (down_belowContentLineIndex !== -1 && (down_belowContentLineIndex === -2 || down_belowContentLineIndex < lineNumber - 1)) {\r\n                down_belowContentLineIndex = -1;\r\n                down_belowContentLineIndent = -1;\r\n                // must find next line with content\r\n                for (var lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\r\n                    var indent_4 = _this._computeIndentLevel(lineIndex);\r\n                    if (indent_4 >= 0) {\r\n                        down_belowContentLineIndex = lineIndex;\r\n                        down_belowContentLineIndent = indent_4;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        var startLineNumber = 0;\r\n        var goUp = true;\r\n        var endLineNumber = 0;\r\n        var goDown = true;\r\n        var indent = 0;\r\n        for (var distance = 0; goUp || goDown; distance++) {\r\n            var upLineNumber = lineNumber - distance;\r\n            var downLineNumber = lineNumber + distance;\r\n            if (distance !== 0 && (upLineNumber < 1 || upLineNumber < minLineNumber)) {\r\n                goUp = false;\r\n            }\r\n            if (distance !== 0 && (downLineNumber > lineCount || downLineNumber > maxLineNumber)) {\r\n                goDown = false;\r\n            }\r\n            if (distance > 50000) {\r\n                // stop processing\r\n                goUp = false;\r\n                goDown = false;\r\n            }\r\n            if (goUp) {\r\n                // compute indent level going up\r\n                var upLineIndentLevel = void 0;\r\n                var currentIndent = this._computeIndentLevel(upLineNumber - 1);\r\n                if (currentIndent >= 0) {\r\n                    // This line has content (besides whitespace)\r\n                    // Use the line's indent\r\n                    up_belowContentLineIndex = upLineNumber - 1;\r\n                    up_belowContentLineIndent = currentIndent;\r\n                    upLineIndentLevel = Math.ceil(currentIndent / this._options.indentSize);\r\n                }\r\n                else {\r\n                    up_resolveIndents(upLineNumber);\r\n                    upLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, up_aboveContentLineIndent, up_belowContentLineIndent);\r\n                }\r\n                if (distance === 0) {\r\n                    // This is the initial line number\r\n                    startLineNumber = upLineNumber;\r\n                    endLineNumber = downLineNumber;\r\n                    indent = upLineIndentLevel;\r\n                    if (indent === 0) {\r\n                        // No need to continue\r\n                        return { startLineNumber: startLineNumber, endLineNumber: endLineNumber, indent: indent };\r\n                    }\r\n                    continue;\r\n                }\r\n                if (upLineIndentLevel >= indent) {\r\n                    startLineNumber = upLineNumber;\r\n                }\r\n                else {\r\n                    goUp = false;\r\n                }\r\n            }\r\n            if (goDown) {\r\n                // compute indent level going down\r\n                var downLineIndentLevel = void 0;\r\n                var currentIndent = this._computeIndentLevel(downLineNumber - 1);\r\n                if (currentIndent >= 0) {\r\n                    // This line has content (besides whitespace)\r\n                    // Use the line's indent\r\n                    down_aboveContentLineIndex = downLineNumber - 1;\r\n                    down_aboveContentLineIndent = currentIndent;\r\n                    downLineIndentLevel = Math.ceil(currentIndent / this._options.indentSize);\r\n                }\r\n                else {\r\n                    down_resolveIndents(downLineNumber);\r\n                    downLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, down_aboveContentLineIndent, down_belowContentLineIndent);\r\n                }\r\n                if (downLineIndentLevel >= indent) {\r\n                    endLineNumber = downLineNumber;\r\n                }\r\n                else {\r\n                    goDown = false;\r\n                }\r\n            }\r\n        }\r\n        return { startLineNumber: startLineNumber, endLineNumber: endLineNumber, indent: indent };\r\n    };\r\n    TextModel.prototype.getLinesIndentGuides = function (startLineNumber, endLineNumber) {\r\n        this._assertNotDisposed();\r\n        var lineCount = this.getLineCount();\r\n        if (startLineNumber < 1 || startLineNumber > lineCount) {\r\n            throw new Error('Illegal value for startLineNumber');\r\n        }\r\n        if (endLineNumber < 1 || endLineNumber > lineCount) {\r\n            throw new Error('Illegal value for endLineNumber');\r\n        }\r\n        var foldingRules = LanguageConfigurationRegistry.getFoldingRules(this._languageIdentifier.id);\r\n        var offSide = Boolean(foldingRules && foldingRules.offSide);\r\n        var result = new Array(endLineNumber - startLineNumber + 1);\r\n        var aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\r\n        var aboveContentLineIndent = -1;\r\n        var belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\r\n        var belowContentLineIndent = -1;\r\n        for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n            var resultIndex = lineNumber - startLineNumber;\r\n            var currentIndent = this._computeIndentLevel(lineNumber - 1);\r\n            if (currentIndent >= 0) {\r\n                // This line has content (besides whitespace)\r\n                // Use the line's indent\r\n                aboveContentLineIndex = lineNumber - 1;\r\n                aboveContentLineIndent = currentIndent;\r\n                result[resultIndex] = Math.ceil(currentIndent / this._options.indentSize);\r\n                continue;\r\n            }\r\n            if (aboveContentLineIndex === -2) {\r\n                aboveContentLineIndex = -1;\r\n                aboveContentLineIndent = -1;\r\n                // must find previous line with content\r\n                for (var lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\r\n                    var indent = this._computeIndentLevel(lineIndex);\r\n                    if (indent >= 0) {\r\n                        aboveContentLineIndex = lineIndex;\r\n                        aboveContentLineIndent = indent;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (belowContentLineIndex !== -1 && (belowContentLineIndex === -2 || belowContentLineIndex < lineNumber - 1)) {\r\n                belowContentLineIndex = -1;\r\n                belowContentLineIndent = -1;\r\n                // must find next line with content\r\n                for (var lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\r\n                    var indent = this._computeIndentLevel(lineIndex);\r\n                    if (indent >= 0) {\r\n                        belowContentLineIndex = lineIndex;\r\n                        belowContentLineIndent = indent;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            result[resultIndex] = this._getIndentLevelForWhitespaceLine(offSide, aboveContentLineIndent, belowContentLineIndent);\r\n        }\r\n        return result;\r\n    };\r\n    TextModel.prototype._getIndentLevelForWhitespaceLine = function (offSide, aboveContentLineIndent, belowContentLineIndent) {\r\n        if (aboveContentLineIndent === -1 || belowContentLineIndent === -1) {\r\n            // At the top or bottom of the file\r\n            return 0;\r\n        }\r\n        else if (aboveContentLineIndent < belowContentLineIndent) {\r\n            // we are inside the region above\r\n            return (1 + Math.floor(aboveContentLineIndent / this._options.indentSize));\r\n        }\r\n        else if (aboveContentLineIndent === belowContentLineIndent) {\r\n            // we are in between two regions\r\n            return Math.ceil(belowContentLineIndent / this._options.indentSize);\r\n        }\r\n        else {\r\n            if (offSide) {\r\n                // same level as region below\r\n                return Math.ceil(belowContentLineIndent / this._options.indentSize);\r\n            }\r\n            else {\r\n                // we are inside the region that ends below\r\n                return (1 + Math.floor(belowContentLineIndent / this._options.indentSize));\r\n            }\r\n        }\r\n    };\r\n    TextModel.MODEL_SYNC_LIMIT = 50 * 1024 * 1024; // 50 MB\r\n    TextModel.LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024; // 20 MB;\r\n    TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1000; // 300K lines\r\n    TextModel.DEFAULT_CREATION_OPTIONS = {\r\n        isForSimpleWidget: false,\r\n        tabSize: EDITOR_MODEL_DEFAULTS.tabSize,\r\n        indentSize: EDITOR_MODEL_DEFAULTS.indentSize,\r\n        insertSpaces: EDITOR_MODEL_DEFAULTS.insertSpaces,\r\n        detectIndentation: false,\r\n        defaultEOL: 1 /* LF */,\r\n        trimAutoWhitespace: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\r\n        largeFileOptimizations: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\r\n    };\r\n    return TextModel;\r\n}(Disposable));\r\nexport { TextModel };\r\n//#region Decorations\r\nvar DecorationsTrees = /** @class */ (function () {\r\n    function DecorationsTrees() {\r\n        this._decorationsTree0 = new IntervalTree();\r\n        this._decorationsTree1 = new IntervalTree();\r\n    }\r\n    DecorationsTrees.prototype.intervalSearch = function (start, end, filterOwnerId, filterOutValidation, cachedVersionId) {\r\n        var r0 = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\r\n        var r1 = this._decorationsTree1.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\r\n        return r0.concat(r1);\r\n    };\r\n    DecorationsTrees.prototype.search = function (filterOwnerId, filterOutValidation, overviewRulerOnly, cachedVersionId) {\r\n        if (overviewRulerOnly) {\r\n            return this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId);\r\n        }\r\n        else {\r\n            var r0 = this._decorationsTree0.search(filterOwnerId, filterOutValidation, cachedVersionId);\r\n            var r1 = this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId);\r\n            return r0.concat(r1);\r\n        }\r\n    };\r\n    DecorationsTrees.prototype.collectNodesFromOwner = function (ownerId) {\r\n        var r0 = this._decorationsTree0.collectNodesFromOwner(ownerId);\r\n        var r1 = this._decorationsTree1.collectNodesFromOwner(ownerId);\r\n        return r0.concat(r1);\r\n    };\r\n    DecorationsTrees.prototype.collectNodesPostOrder = function () {\r\n        var r0 = this._decorationsTree0.collectNodesPostOrder();\r\n        var r1 = this._decorationsTree1.collectNodesPostOrder();\r\n        return r0.concat(r1);\r\n    };\r\n    DecorationsTrees.prototype.insert = function (node) {\r\n        if (getNodeIsInOverviewRuler(node)) {\r\n            this._decorationsTree1.insert(node);\r\n        }\r\n        else {\r\n            this._decorationsTree0.insert(node);\r\n        }\r\n    };\r\n    DecorationsTrees.prototype.delete = function (node) {\r\n        if (getNodeIsInOverviewRuler(node)) {\r\n            this._decorationsTree1.delete(node);\r\n        }\r\n        else {\r\n            this._decorationsTree0.delete(node);\r\n        }\r\n    };\r\n    DecorationsTrees.prototype.resolveNode = function (node, cachedVersionId) {\r\n        if (getNodeIsInOverviewRuler(node)) {\r\n            this._decorationsTree1.resolveNode(node, cachedVersionId);\r\n        }\r\n        else {\r\n            this._decorationsTree0.resolveNode(node, cachedVersionId);\r\n        }\r\n    };\r\n    DecorationsTrees.prototype.acceptReplace = function (offset, length, textLength, forceMoveMarkers) {\r\n        this._decorationsTree0.acceptReplace(offset, length, textLength, forceMoveMarkers);\r\n        this._decorationsTree1.acceptReplace(offset, length, textLength, forceMoveMarkers);\r\n    };\r\n    return DecorationsTrees;\r\n}());\r\nfunction cleanClassName(className) {\r\n    return className.replace(/[^a-z0-9\\-_]/gi, ' ');\r\n}\r\nvar DecorationOptions = /** @class */ (function () {\r\n    function DecorationOptions(options) {\r\n        this.color = options.color || '';\r\n        this.darkColor = options.darkColor || '';\r\n    }\r\n    return DecorationOptions;\r\n}());\r\nvar ModelDecorationOverviewRulerOptions = /** @class */ (function (_super) {\r\n    __extends(ModelDecorationOverviewRulerOptions, _super);\r\n    function ModelDecorationOverviewRulerOptions(options) {\r\n        var _this = _super.call(this, options) || this;\r\n        _this._resolvedColor = null;\r\n        _this.position = (typeof options.position === 'number' ? options.position : model.OverviewRulerLane.Center);\r\n        return _this;\r\n    }\r\n    ModelDecorationOverviewRulerOptions.prototype.getColor = function (theme) {\r\n        if (!this._resolvedColor) {\r\n            if (theme.type !== 'light' && this.darkColor) {\r\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\r\n            }\r\n            else {\r\n                this._resolvedColor = this._resolveColor(this.color, theme);\r\n            }\r\n        }\r\n        return this._resolvedColor;\r\n    };\r\n    ModelDecorationOverviewRulerOptions.prototype.invalidateCachedColor = function () {\r\n        this._resolvedColor = null;\r\n    };\r\n    ModelDecorationOverviewRulerOptions.prototype._resolveColor = function (color, theme) {\r\n        if (typeof color === 'string') {\r\n            return color;\r\n        }\r\n        var c = color ? theme.getColor(color.id) : null;\r\n        if (!c) {\r\n            return '';\r\n        }\r\n        return c.toString();\r\n    };\r\n    return ModelDecorationOverviewRulerOptions;\r\n}(DecorationOptions));\r\nexport { ModelDecorationOverviewRulerOptions };\r\nvar ModelDecorationMinimapOptions = /** @class */ (function (_super) {\r\n    __extends(ModelDecorationMinimapOptions, _super);\r\n    function ModelDecorationMinimapOptions(options) {\r\n        var _this = _super.call(this, options) || this;\r\n        _this.position = options.position;\r\n        return _this;\r\n    }\r\n    ModelDecorationMinimapOptions.prototype.getColor = function (theme) {\r\n        if (!this._resolvedColor) {\r\n            if (theme.type !== 'light' && this.darkColor) {\r\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\r\n            }\r\n            else {\r\n                this._resolvedColor = this._resolveColor(this.color, theme);\r\n            }\r\n        }\r\n        return this._resolvedColor;\r\n    };\r\n    ModelDecorationMinimapOptions.prototype.invalidateCachedColor = function () {\r\n        this._resolvedColor = undefined;\r\n    };\r\n    ModelDecorationMinimapOptions.prototype._resolveColor = function (color, theme) {\r\n        if (typeof color === 'string') {\r\n            return Color.fromHex(color);\r\n        }\r\n        return theme.getColor(color.id);\r\n    };\r\n    return ModelDecorationMinimapOptions;\r\n}(DecorationOptions));\r\nexport { ModelDecorationMinimapOptions };\r\nvar ModelDecorationOptions = /** @class */ (function () {\r\n    function ModelDecorationOptions(options) {\r\n        this.stickiness = options.stickiness || 0 /* AlwaysGrowsWhenTypingAtEdges */;\r\n        this.zIndex = options.zIndex || 0;\r\n        this.className = options.className ? cleanClassName(options.className) : null;\r\n        this.hoverMessage = withUndefinedAsNull(options.hoverMessage);\r\n        this.glyphMarginHoverMessage = withUndefinedAsNull(options.glyphMarginHoverMessage);\r\n        this.isWholeLine = options.isWholeLine || false;\r\n        this.showIfCollapsed = options.showIfCollapsed || false;\r\n        this.collapseOnReplaceEdit = options.collapseOnReplaceEdit || false;\r\n        this.overviewRuler = options.overviewRuler ? new ModelDecorationOverviewRulerOptions(options.overviewRuler) : null;\r\n        this.minimap = options.minimap ? new ModelDecorationMinimapOptions(options.minimap) : null;\r\n        this.glyphMarginClassName = options.glyphMarginClassName ? cleanClassName(options.glyphMarginClassName) : null;\r\n        this.linesDecorationsClassName = options.linesDecorationsClassName ? cleanClassName(options.linesDecorationsClassName) : null;\r\n        this.marginClassName = options.marginClassName ? cleanClassName(options.marginClassName) : null;\r\n        this.inlineClassName = options.inlineClassName ? cleanClassName(options.inlineClassName) : null;\r\n        this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\r\n        this.beforeContentClassName = options.beforeContentClassName ? cleanClassName(options.beforeContentClassName) : null;\r\n        this.afterContentClassName = options.afterContentClassName ? cleanClassName(options.afterContentClassName) : null;\r\n    }\r\n    ModelDecorationOptions.register = function (options) {\r\n        return new ModelDecorationOptions(options);\r\n    };\r\n    ModelDecorationOptions.createDynamic = function (options) {\r\n        return new ModelDecorationOptions(options);\r\n    };\r\n    return ModelDecorationOptions;\r\n}());\r\nexport { ModelDecorationOptions };\r\nModelDecorationOptions.EMPTY = ModelDecorationOptions.register({});\r\n/**\r\n * The order carefully matches the values of the enum.\r\n */\r\nvar TRACKED_RANGE_OPTIONS = [\r\n    ModelDecorationOptions.register({ stickiness: 0 /* AlwaysGrowsWhenTypingAtEdges */ }),\r\n    ModelDecorationOptions.register({ stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ }),\r\n    ModelDecorationOptions.register({ stickiness: 2 /* GrowsOnlyWhenTypingBefore */ }),\r\n    ModelDecorationOptions.register({ stickiness: 3 /* GrowsOnlyWhenTypingAfter */ }),\r\n];\r\nfunction _normalizeOptions(options) {\r\n    if (options instanceof ModelDecorationOptions) {\r\n        return options;\r\n    }\r\n    return ModelDecorationOptions.createDynamic(options);\r\n}\r\nvar DidChangeDecorationsEmitter = /** @class */ (function (_super) {\r\n    __extends(DidChangeDecorationsEmitter, _super);\r\n    function DidChangeDecorationsEmitter() {\r\n        var _this = _super.call(this) || this;\r\n        _this._actual = _this._register(new Emitter());\r\n        _this.event = _this._actual.event;\r\n        _this._deferredCnt = 0;\r\n        _this._shouldFire = false;\r\n        return _this;\r\n    }\r\n    DidChangeDecorationsEmitter.prototype.beginDeferredEmit = function () {\r\n        this._deferredCnt++;\r\n    };\r\n    DidChangeDecorationsEmitter.prototype.endDeferredEmit = function () {\r\n        this._deferredCnt--;\r\n        if (this._deferredCnt === 0) {\r\n            if (this._shouldFire) {\r\n                this._shouldFire = false;\r\n                this._actual.fire({});\r\n            }\r\n        }\r\n    };\r\n    DidChangeDecorationsEmitter.prototype.fire = function () {\r\n        this._shouldFire = true;\r\n    };\r\n    return DidChangeDecorationsEmitter;\r\n}(Disposable));\r\nexport { DidChangeDecorationsEmitter };\r\n//#endregion\r\nvar DidChangeContentEmitter = /** @class */ (function (_super) {\r\n    __extends(DidChangeContentEmitter, _super);\r\n    function DidChangeContentEmitter() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.\r\n         */\r\n        _this._fastEmitter = _this._register(new Emitter());\r\n        _this.fastEvent = _this._fastEmitter.event;\r\n        _this._slowEmitter = _this._register(new Emitter());\r\n        _this.slowEvent = _this._slowEmitter.event;\r\n        _this._deferredCnt = 0;\r\n        _this._deferredEvent = null;\r\n        return _this;\r\n    }\r\n    DidChangeContentEmitter.prototype.beginDeferredEmit = function () {\r\n        this._deferredCnt++;\r\n    };\r\n    DidChangeContentEmitter.prototype.endDeferredEmit = function () {\r\n        this._deferredCnt--;\r\n        if (this._deferredCnt === 0) {\r\n            if (this._deferredEvent !== null) {\r\n                var e = this._deferredEvent;\r\n                this._deferredEvent = null;\r\n                this._fastEmitter.fire(e);\r\n                this._slowEmitter.fire(e);\r\n            }\r\n        }\r\n    };\r\n    DidChangeContentEmitter.prototype.fire = function (e) {\r\n        if (this._deferredCnt > 0) {\r\n            if (this._deferredEvent) {\r\n                this._deferredEvent = this._deferredEvent.merge(e);\r\n            }\r\n            else {\r\n                this._deferredEvent = e;\r\n            }\r\n            return;\r\n        }\r\n        this._fastEmitter.fire(e);\r\n        this._slowEmitter.fire(e);\r\n    };\r\n    return DidChangeContentEmitter;\r\n}(Disposable));\r\nexport { DidChangeContentEmitter };\r\n"]},"metadata":{},"sourceType":"module"}