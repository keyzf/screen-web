{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { Emitter } from '../../../base/common/event.js';\nexport var IThemeService = createDecorator('themeService');\nexport function themeColorFromId(id) {\n  return {\n    id: id\n  };\n} // base themes\n\nexport var DARK = 'dark';\nexport var HIGH_CONTRAST = 'hc';\nexport function getThemeTypeSelector(type) {\n  switch (type) {\n    case DARK:\n      return 'vs-dark';\n\n    case HIGH_CONTRAST:\n      return 'hc-black';\n\n    default:\n      return 'vs';\n  }\n} // static theming participant\n\nexport var Extensions = {\n  ThemingContribution: 'base.contributions.theming'\n};\n\nvar ThemingRegistry =\n/** @class */\nfunction () {\n  function ThemingRegistry() {\n    this.themingParticipants = [];\n    this.themingParticipants = [];\n    this.onThemingParticipantAddedEmitter = new Emitter();\n  }\n\n  ThemingRegistry.prototype.onThemeChange = function (participant) {\n    var _this = this;\n\n    this.themingParticipants.push(participant);\n    this.onThemingParticipantAddedEmitter.fire(participant);\n    return toDisposable(function () {\n      var idx = _this.themingParticipants.indexOf(participant);\n\n      _this.themingParticipants.splice(idx, 1);\n    });\n  };\n\n  ThemingRegistry.prototype.getThemingParticipants = function () {\n    return this.themingParticipants;\n  };\n\n  return ThemingRegistry;\n}();\n\nvar themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\nexport function registerThemingParticipant(participant) {\n  return themingRegistry.onThemeChange(participant);\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js"],"names":["createDecorator","toDisposable","platform","Emitter","IThemeService","themeColorFromId","id","DARK","HIGH_CONTRAST","getThemeTypeSelector","type","Extensions","ThemingContribution","ThemingRegistry","themingParticipants","onThemingParticipantAddedEmitter","prototype","onThemeChange","participant","_this","push","fire","idx","indexOf","splice","getThemingParticipants","themingRegistry","Registry","add","registerThemingParticipant"],"mappings":"AAAA;;;;AAIA,SAASA,eAAT,QAAgC,6CAAhC;AACA,SAASC,YAAT,QAA6B,mCAA7B;AACA,OAAO,KAAKC,QAAZ,MAA0B,mCAA1B;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,OAAO,IAAIC,aAAa,GAAGJ,eAAe,CAAC,cAAD,CAAnC;AACP,OAAO,SAASK,gBAAT,CAA0BC,EAA1B,EAA8B;AACjC,SAAO;AAAEA,IAAAA,EAAE,EAAEA;AAAN,GAAP;AACH,C,CACD;;AACA,OAAO,IAAIC,IAAI,GAAG,MAAX;AACP,OAAO,IAAIC,aAAa,GAAG,IAApB;AACP,OAAO,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AACvC,UAAQA,IAAR;AACI,SAAKH,IAAL;AAAW,aAAO,SAAP;;AACX,SAAKC,aAAL;AAAoB,aAAO,UAAP;;AACpB;AAAS,aAAO,IAAP;AAHb;AAKH,C,CACD;;AACA,OAAO,IAAIG,UAAU,GAAG;AACpBC,EAAAA,mBAAmB,EAAE;AADD,CAAjB;;AAGP,IAAIC,eAAe;AAAG;AAAe,YAAY;AAC7C,WAASA,eAAT,GAA2B;AACvB,SAAKC,mBAAL,GAA2B,EAA3B;AACA,SAAKA,mBAAL,GAA2B,EAA3B;AACA,SAAKC,gCAAL,GAAwC,IAAIZ,OAAJ,EAAxC;AACH;;AACDU,EAAAA,eAAe,CAACG,SAAhB,CAA0BC,aAA1B,GAA0C,UAAUC,WAAV,EAAuB;AAC7D,QAAIC,KAAK,GAAG,IAAZ;;AACA,SAAKL,mBAAL,CAAyBM,IAAzB,CAA8BF,WAA9B;AACA,SAAKH,gCAAL,CAAsCM,IAAtC,CAA2CH,WAA3C;AACA,WAAOjB,YAAY,CAAC,YAAY;AAC5B,UAAIqB,GAAG,GAAGH,KAAK,CAACL,mBAAN,CAA0BS,OAA1B,CAAkCL,WAAlC,CAAV;;AACAC,MAAAA,KAAK,CAACL,mBAAN,CAA0BU,MAA1B,CAAiCF,GAAjC,EAAsC,CAAtC;AACH,KAHkB,CAAnB;AAIH,GARD;;AASAT,EAAAA,eAAe,CAACG,SAAhB,CAA0BS,sBAA1B,GAAmD,YAAY;AAC3D,WAAO,KAAKX,mBAAZ;AACH,GAFD;;AAGA,SAAOD,eAAP;AACH,CAnBoC,EAArC;;AAoBA,IAAIa,eAAe,GAAG,IAAIb,eAAJ,EAAtB;AACAX,QAAQ,CAACyB,QAAT,CAAkBC,GAAlB,CAAsBjB,UAAU,CAACC,mBAAjC,EAAsDc,eAAtD;AACA,OAAO,SAASG,0BAAT,CAAoCX,WAApC,EAAiD;AACpD,SAAOQ,eAAe,CAACT,aAAhB,CAA8BC,WAA9B,CAAP;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\r\nimport { toDisposable } from '../../../base/common/lifecycle.js';\r\nimport * as platform from '../../registry/common/platform.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nexport var IThemeService = createDecorator('themeService');\r\nexport function themeColorFromId(id) {\r\n    return { id: id };\r\n}\r\n// base themes\r\nexport var DARK = 'dark';\r\nexport var HIGH_CONTRAST = 'hc';\r\nexport function getThemeTypeSelector(type) {\r\n    switch (type) {\r\n        case DARK: return 'vs-dark';\r\n        case HIGH_CONTRAST: return 'hc-black';\r\n        default: return 'vs';\r\n    }\r\n}\r\n// static theming participant\r\nexport var Extensions = {\r\n    ThemingContribution: 'base.contributions.theming'\r\n};\r\nvar ThemingRegistry = /** @class */ (function () {\r\n    function ThemingRegistry() {\r\n        this.themingParticipants = [];\r\n        this.themingParticipants = [];\r\n        this.onThemingParticipantAddedEmitter = new Emitter();\r\n    }\r\n    ThemingRegistry.prototype.onThemeChange = function (participant) {\r\n        var _this = this;\r\n        this.themingParticipants.push(participant);\r\n        this.onThemingParticipantAddedEmitter.fire(participant);\r\n        return toDisposable(function () {\r\n            var idx = _this.themingParticipants.indexOf(participant);\r\n            _this.themingParticipants.splice(idx, 1);\r\n        });\r\n    };\r\n    ThemingRegistry.prototype.getThemingParticipants = function () {\r\n        return this.themingParticipants;\r\n    };\r\n    return ThemingRegistry;\r\n}());\r\nvar themingRegistry = new ThemingRegistry();\r\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\r\nexport function registerThemingParticipant(participant) {\r\n    return themingRegistry.onThemeChange(participant);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}