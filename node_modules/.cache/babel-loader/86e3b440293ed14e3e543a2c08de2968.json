{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\n\nvar ColumnSelection =\n/** @class */\nfunction () {\n  function ColumnSelection() {}\n\n  ColumnSelection.columnSelect = function (config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n    var lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n    var reversed = fromLineNumber > toLineNumber;\n    var isRTL = fromVisibleColumn > toVisibleColumn;\n    var isLTR = fromVisibleColumn < toVisibleColumn;\n    var result = []; // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n\n    for (var i = 0; i < lineCount; i++) {\n      var lineNumber = fromLineNumber + (reversed ? -i : i);\n      var startColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, fromVisibleColumn);\n      var endColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, toVisibleColumn);\n      var visibleStartColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, startColumn));\n      var visibleEndColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, endColumn)); // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n\n      if (isLTR) {\n        if (visibleStartColumn > toVisibleColumn) {\n          continue;\n        }\n\n        if (visibleEndColumn < fromVisibleColumn) {\n          continue;\n        }\n      }\n\n      if (isRTL) {\n        if (visibleEndColumn > fromVisibleColumn) {\n          continue;\n        }\n\n        if (visibleStartColumn < toVisibleColumn) {\n          continue;\n        }\n      }\n\n      result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0, new Position(lineNumber, endColumn), 0));\n    }\n\n    if (result.length === 0) {\n      // We are after all the lines, so add cursor at the end of each line\n      for (var i = 0; i < lineCount; i++) {\n        var lineNumber = fromLineNumber + (reversed ? -i : i);\n        var maxColumn = model.getLineMaxColumn(lineNumber);\n        result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0, new Position(lineNumber, maxColumn), 0));\n      }\n    }\n\n    return {\n      viewStates: result,\n      reversed: reversed,\n      fromLineNumber: fromLineNumber,\n      fromVisualColumn: fromVisibleColumn,\n      toLineNumber: toLineNumber,\n      toVisualColumn: toVisibleColumn\n    };\n  };\n\n  ColumnSelection.columnSelectLeft = function (config, model, prevColumnSelectData) {\n    var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n\n    if (toViewVisualColumn > 1) {\n      toViewVisualColumn--;\n    }\n\n    return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n  };\n\n  ColumnSelection.columnSelectRight = function (config, model, prevColumnSelectData) {\n    var maxVisualViewColumn = 0;\n    var minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n    var maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n\n    for (var lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n      var lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n      var lineMaxVisualViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, lineMaxViewColumn));\n      maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n    }\n\n    var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n\n    if (toViewVisualColumn < maxVisualViewColumn) {\n      toViewVisualColumn++;\n    }\n\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n  };\n\n  ColumnSelection.columnSelectUp = function (config, model, prevColumnSelectData, isPaged) {\n    var linesCount = isPaged ? config.pageSize : 1;\n    var toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n  };\n\n  ColumnSelection.columnSelectDown = function (config, model, prevColumnSelectData, isPaged) {\n    var linesCount = isPaged ? config.pageSize : 1;\n    var toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n  };\n\n  return ColumnSelection;\n}();\n\nexport { ColumnSelection };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorColumnSelection.js"],"names":["CursorColumns","SingleCursorState","Position","Range","ColumnSelection","columnSelect","config","model","fromLineNumber","fromVisibleColumn","toLineNumber","toVisibleColumn","lineCount","Math","abs","reversed","isRTL","isLTR","result","i","lineNumber","startColumn","columnFromVisibleColumn2","endColumn","visibleStartColumn","visibleColumnFromColumn2","visibleEndColumn","push","length","maxColumn","getLineMaxColumn","viewStates","fromVisualColumn","toVisualColumn","columnSelectLeft","prevColumnSelectData","toViewVisualColumn","fromViewLineNumber","fromViewVisualColumn","toViewLineNumber","columnSelectRight","maxVisualViewColumn","minViewLineNumber","min","maxViewLineNumber","max","lineMaxViewColumn","lineMaxVisualViewColumn","columnSelectUp","isPaged","linesCount","pageSize","columnSelectDown","getLineCount"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nvar ColumnSelection = /** @class */ (function () {\r\n    function ColumnSelection() {\r\n    }\r\n    ColumnSelection.columnSelect = function (config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\r\n        var lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\r\n        var reversed = (fromLineNumber > toLineNumber);\r\n        var isRTL = (fromVisibleColumn > toVisibleColumn);\r\n        var isLTR = (fromVisibleColumn < toVisibleColumn);\r\n        var result = [];\r\n        // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\r\n        for (var i = 0; i < lineCount; i++) {\r\n            var lineNumber = fromLineNumber + (reversed ? -i : i);\r\n            var startColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, fromVisibleColumn);\r\n            var endColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, toVisibleColumn);\r\n            var visibleStartColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, startColumn));\r\n            var visibleEndColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, endColumn));\r\n            // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\r\n            if (isLTR) {\r\n                if (visibleStartColumn > toVisibleColumn) {\r\n                    continue;\r\n                }\r\n                if (visibleEndColumn < fromVisibleColumn) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (isRTL) {\r\n                if (visibleEndColumn > fromVisibleColumn) {\r\n                    continue;\r\n                }\r\n                if (visibleStartColumn < toVisibleColumn) {\r\n                    continue;\r\n                }\r\n            }\r\n            result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0, new Position(lineNumber, endColumn), 0));\r\n        }\r\n        if (result.length === 0) {\r\n            // We are after all the lines, so add cursor at the end of each line\r\n            for (var i = 0; i < lineCount; i++) {\r\n                var lineNumber = fromLineNumber + (reversed ? -i : i);\r\n                var maxColumn = model.getLineMaxColumn(lineNumber);\r\n                result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0, new Position(lineNumber, maxColumn), 0));\r\n            }\r\n        }\r\n        return {\r\n            viewStates: result,\r\n            reversed: reversed,\r\n            fromLineNumber: fromLineNumber,\r\n            fromVisualColumn: fromVisibleColumn,\r\n            toLineNumber: toLineNumber,\r\n            toVisualColumn: toVisibleColumn\r\n        };\r\n    };\r\n    ColumnSelection.columnSelectLeft = function (config, model, prevColumnSelectData) {\r\n        var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\r\n        if (toViewVisualColumn > 1) {\r\n            toViewVisualColumn--;\r\n        }\r\n        return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\r\n    };\r\n    ColumnSelection.columnSelectRight = function (config, model, prevColumnSelectData) {\r\n        var maxVisualViewColumn = 0;\r\n        var minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\r\n        var maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\r\n        for (var lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\r\n            var lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\r\n            var lineMaxVisualViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, lineMaxViewColumn));\r\n            maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\r\n        }\r\n        var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\r\n        if (toViewVisualColumn < maxVisualViewColumn) {\r\n            toViewVisualColumn++;\r\n        }\r\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\r\n    };\r\n    ColumnSelection.columnSelectUp = function (config, model, prevColumnSelectData, isPaged) {\r\n        var linesCount = isPaged ? config.pageSize : 1;\r\n        var toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\r\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\r\n    };\r\n    ColumnSelection.columnSelectDown = function (config, model, prevColumnSelectData, isPaged) {\r\n        var linesCount = isPaged ? config.pageSize : 1;\r\n        var toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\r\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\r\n    };\r\n    return ColumnSelection;\r\n}());\r\nexport { ColumnSelection };\r\n"]},"metadata":{},"sourceType":"module"}