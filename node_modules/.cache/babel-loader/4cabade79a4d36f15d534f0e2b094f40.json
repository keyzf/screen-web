{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { RGBA8 } from '../core/rgba.js';\nimport { TokenizationRegistry } from '../modes.js';\n\nvar MinimapTokensColorTracker =\n/** @class */\nfunction () {\n  function MinimapTokensColorTracker() {\n    var _this = this;\n\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n\n    this._updateColorMap();\n\n    TokenizationRegistry.onDidChange(function (e) {\n      if (e.changedColorMap) {\n        _this._updateColorMap();\n      }\n    });\n  }\n\n  MinimapTokensColorTracker.getInstance = function () {\n    if (!this._INSTANCE) {\n      this._INSTANCE = new MinimapTokensColorTracker();\n    }\n\n    return this._INSTANCE;\n  };\n\n  MinimapTokensColorTracker.prototype._updateColorMap = function () {\n    var colorMap = TokenizationRegistry.getColorMap();\n\n    if (!colorMap) {\n      this._colors = [RGBA8.Empty];\n      this._backgroundIsLight = true;\n      return;\n    }\n\n    this._colors = [RGBA8.Empty];\n\n    for (var colorId = 1; colorId < colorMap.length; colorId++) {\n      var source = colorMap[colorId].rgba; // Use a VM friendly data-type\n\n      this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n    }\n\n    var backgroundLuminosity = colorMap[2\n    /* DefaultBackground */\n    ].getRelativeLuminance();\n    this._backgroundIsLight = backgroundLuminosity >= 0.5;\n\n    this._onDidChange.fire(undefined);\n  };\n\n  MinimapTokensColorTracker.prototype.getColor = function (colorId) {\n    if (colorId < 1 || colorId >= this._colors.length) {\n      // background color (basically invisible)\n      colorId = 2\n      /* DefaultBackground */\n      ;\n    }\n\n    return this._colors[colorId];\n  };\n\n  MinimapTokensColorTracker.prototype.backgroundIsLight = function () {\n    return this._backgroundIsLight;\n  };\n\n  MinimapTokensColorTracker._INSTANCE = null;\n  return MinimapTokensColorTracker;\n}();\n\nexport { MinimapTokensColorTracker };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/viewModel/minimapTokensColorTracker.js"],"names":["Emitter","RGBA8","TokenizationRegistry","MinimapTokensColorTracker","_this","_onDidChange","onDidChange","event","_updateColorMap","e","changedColorMap","getInstance","_INSTANCE","prototype","colorMap","getColorMap","_colors","Empty","_backgroundIsLight","colorId","length","source","rgba","r","g","b","Math","round","a","backgroundLuminosity","getRelativeLuminance","fire","undefined","getColor","backgroundIsLight"],"mappings":"AAAA;;;;AAIA,SAASA,OAAT,QAAwB,+BAAxB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,oBAAT,QAAqC,aAArC;;AACA,IAAIC,yBAAyB;AAAG;AAAe,YAAY;AACvD,WAASA,yBAAT,GAAqC;AACjC,QAAIC,KAAK,GAAG,IAAZ;;AACA,SAAKC,YAAL,GAAoB,IAAIL,OAAJ,EAApB;AACA,SAAKM,WAAL,GAAmB,KAAKD,YAAL,CAAkBE,KAArC;;AACA,SAAKC,eAAL;;AACAN,IAAAA,oBAAoB,CAACI,WAArB,CAAiC,UAAUG,CAAV,EAAa;AAC1C,UAAIA,CAAC,CAACC,eAAN,EAAuB;AACnBN,QAAAA,KAAK,CAACI,eAAN;AACH;AACJ,KAJD;AAKH;;AACDL,EAAAA,yBAAyB,CAACQ,WAA1B,GAAwC,YAAY;AAChD,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACjB,WAAKA,SAAL,GAAiB,IAAIT,yBAAJ,EAAjB;AACH;;AACD,WAAO,KAAKS,SAAZ;AACH,GALD;;AAMAT,EAAAA,yBAAyB,CAACU,SAA1B,CAAoCL,eAApC,GAAsD,YAAY;AAC9D,QAAIM,QAAQ,GAAGZ,oBAAoB,CAACa,WAArB,EAAf;;AACA,QAAI,CAACD,QAAL,EAAe;AACX,WAAKE,OAAL,GAAe,CAACf,KAAK,CAACgB,KAAP,CAAf;AACA,WAAKC,kBAAL,GAA0B,IAA1B;AACA;AACH;;AACD,SAAKF,OAAL,GAAe,CAACf,KAAK,CAACgB,KAAP,CAAf;;AACA,SAAK,IAAIE,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGL,QAAQ,CAACM,MAAzC,EAAiDD,OAAO,EAAxD,EAA4D;AACxD,UAAIE,MAAM,GAAGP,QAAQ,CAACK,OAAD,CAAR,CAAkBG,IAA/B,CADwD,CAExD;;AACA,WAAKN,OAAL,CAAaG,OAAb,IAAwB,IAAIlB,KAAJ,CAAUoB,MAAM,CAACE,CAAjB,EAAoBF,MAAM,CAACG,CAA3B,EAA8BH,MAAM,CAACI,CAArC,EAAwCC,IAAI,CAACC,KAAL,CAAWN,MAAM,CAACO,CAAP,GAAW,GAAtB,CAAxC,CAAxB;AACH;;AACD,QAAIC,oBAAoB,GAAGf,QAAQ,CAAC;AAAE;AAAH,KAAR,CAAoCgB,oBAApC,EAA3B;AACA,SAAKZ,kBAAL,GAA0BW,oBAAoB,IAAI,GAAlD;;AACA,SAAKxB,YAAL,CAAkB0B,IAAlB,CAAuBC,SAAvB;AACH,GAhBD;;AAiBA7B,EAAAA,yBAAyB,CAACU,SAA1B,CAAoCoB,QAApC,GAA+C,UAAUd,OAAV,EAAmB;AAC9D,QAAIA,OAAO,GAAG,CAAV,IAAeA,OAAO,IAAI,KAAKH,OAAL,CAAaI,MAA3C,EAAmD;AAC/C;AACAD,MAAAA,OAAO,GAAG;AAAE;AAAZ;AACH;;AACD,WAAO,KAAKH,OAAL,CAAaG,OAAb,CAAP;AACH,GAND;;AAOAhB,EAAAA,yBAAyB,CAACU,SAA1B,CAAoCqB,iBAApC,GAAwD,YAAY;AAChE,WAAO,KAAKhB,kBAAZ;AACH,GAFD;;AAGAf,EAAAA,yBAAyB,CAACS,SAA1B,GAAsC,IAAtC;AACA,SAAOT,yBAAP;AACH,CA/C8C,EAA/C;;AAgDA,SAASA,yBAAT","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { RGBA8 } from '../core/rgba.js';\r\nimport { TokenizationRegistry } from '../modes.js';\r\nvar MinimapTokensColorTracker = /** @class */ (function () {\r\n    function MinimapTokensColorTracker() {\r\n        var _this = this;\r\n        this._onDidChange = new Emitter();\r\n        this.onDidChange = this._onDidChange.event;\r\n        this._updateColorMap();\r\n        TokenizationRegistry.onDidChange(function (e) {\r\n            if (e.changedColorMap) {\r\n                _this._updateColorMap();\r\n            }\r\n        });\r\n    }\r\n    MinimapTokensColorTracker.getInstance = function () {\r\n        if (!this._INSTANCE) {\r\n            this._INSTANCE = new MinimapTokensColorTracker();\r\n        }\r\n        return this._INSTANCE;\r\n    };\r\n    MinimapTokensColorTracker.prototype._updateColorMap = function () {\r\n        var colorMap = TokenizationRegistry.getColorMap();\r\n        if (!colorMap) {\r\n            this._colors = [RGBA8.Empty];\r\n            this._backgroundIsLight = true;\r\n            return;\r\n        }\r\n        this._colors = [RGBA8.Empty];\r\n        for (var colorId = 1; colorId < colorMap.length; colorId++) {\r\n            var source = colorMap[colorId].rgba;\r\n            // Use a VM friendly data-type\r\n            this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\r\n        }\r\n        var backgroundLuminosity = colorMap[2 /* DefaultBackground */].getRelativeLuminance();\r\n        this._backgroundIsLight = backgroundLuminosity >= 0.5;\r\n        this._onDidChange.fire(undefined);\r\n    };\r\n    MinimapTokensColorTracker.prototype.getColor = function (colorId) {\r\n        if (colorId < 1 || colorId >= this._colors.length) {\r\n            // background color (basically invisible)\r\n            colorId = 2 /* DefaultBackground */;\r\n        }\r\n        return this._colors[colorId];\r\n    };\r\n    MinimapTokensColorTracker.prototype.backgroundIsLight = function () {\r\n        return this._backgroundIsLight;\r\n    };\r\n    MinimapTokensColorTracker._INSTANCE = null;\r\n    return MinimapTokensColorTracker;\r\n}());\r\nexport { MinimapTokensColorTracker };\r\n"]},"metadata":{},"sourceType":"module"}