{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Color } from '../../../base/common/color.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { TokenizationRegistry } from '../modes.js';\nimport { tokenizeLineToHTML } from '../modes/textToHtmlTokenizer.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport * as viewEvents from '../view/viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { IdentityLinesCollection, SplitLinesCollection } from './splitLinesCollection.js';\nimport { MinimapLinesRenderingData, ViewLineRenderingData } from './viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport * as platform from '../../../base/common/platform.js';\nvar USE_IDENTITY_LINES_COLLECTION = true;\n\nvar ViewModel =\n/** @class */\nfunction (_super) {\n  __extends(ViewModel, _super);\n\n  function ViewModel(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame) {\n    var _this = _super.call(this) || this;\n\n    _this.editorId = editorId;\n    _this.configuration = configuration;\n    _this.model = model;\n    _this._tokenizeViewportSoon = _this._register(new RunOnceScheduler(function () {\n      return _this.tokenizeViewport();\n    }, 50));\n    _this.hasFocus = false;\n    _this.viewportStartLine = -1;\n    _this.viewportStartLineTrackedRange = null;\n    _this.viewportStartLineDelta = 0;\n\n    if (USE_IDENTITY_LINES_COLLECTION && _this.model.isTooLargeForTokenization()) {\n      _this.lines = new IdentityLinesCollection(_this.model);\n    } else {\n      var options = _this.configuration.options;\n      var fontInfo = options.get(34\n      /* fontInfo */\n      );\n      var wrappingStrategy = options.get(103\n      /* wrappingStrategy */\n      );\n      var wrappingInfo = options.get(108\n      /* wrappingInfo */\n      );\n      var wrappingIndent = options.get(102\n      /* wrappingIndent */\n      );\n      _this.lines = new SplitLinesCollection(_this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, _this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent);\n    }\n\n    _this.coordinatesConverter = _this.lines.createCoordinatesConverter();\n    _this.viewLayout = _this._register(new ViewLayout(_this.configuration, _this.getLineCount(), scheduleAtNextAnimationFrame));\n\n    _this._register(_this.viewLayout.onDidScroll(function (e) {\n      if (e.scrollTopChanged) {\n        _this._tokenizeViewportSoon.schedule();\n      }\n\n      try {\n        var eventsCollector = _this._beginEmit();\n\n        eventsCollector.emit(new viewEvents.ViewScrollChangedEvent(e));\n      } finally {\n        _this._endEmit();\n      }\n    }));\n\n    _this._register(_this.viewLayout.onDidContentSizeChange(function (e) {\n      try {\n        var eventsCollector = _this._beginEmit();\n\n        eventsCollector.emit(new viewEvents.ViewContentSizeChangedEvent(e));\n      } finally {\n        _this._endEmit();\n      }\n    }));\n\n    _this.decorations = new ViewModelDecorations(_this.editorId, _this.model, _this.configuration, _this.lines, _this.coordinatesConverter);\n\n    _this._registerModelEvents();\n\n    _this._register(_this.configuration.onDidChange(function (e) {\n      try {\n        var eventsCollector = _this._beginEmit();\n\n        _this._onConfigurationChanged(eventsCollector, e);\n      } finally {\n        _this._endEmit();\n      }\n    }));\n\n    _this._register(MinimapTokensColorTracker.getInstance().onDidChange(function () {\n      try {\n        var eventsCollector = _this._beginEmit();\n\n        eventsCollector.emit(new viewEvents.ViewTokensColorsChangedEvent());\n      } finally {\n        _this._endEmit();\n      }\n    }));\n\n    return _this;\n  }\n\n  ViewModel.prototype.dispose = function () {\n    // First remove listeners, as disposing the lines might end up sending\n    // model decoration changed events ... and we no longer care about them ...\n    _super.prototype.dispose.call(this);\n\n    this.decorations.dispose();\n    this.lines.dispose();\n    this.invalidateMinimapColorCache();\n    this.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, null, 1\n    /* NeverGrowsWhenTypingAtEdges */\n    );\n  };\n\n  ViewModel.prototype.tokenizeViewport = function () {\n    var linesViewportData = this.viewLayout.getLinesViewportData();\n    var startPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.startLineNumber, 1));\n    var endPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.endLineNumber, 1));\n    this.model.tokenizeViewport(startPosition.lineNumber, endPosition.lineNumber);\n  };\n\n  ViewModel.prototype.setHasFocus = function (hasFocus) {\n    this.hasFocus = hasFocus;\n  };\n\n  ViewModel.prototype._onConfigurationChanged = function (eventsCollector, e) {\n    // We might need to restore the current centered view range, so save it (if available)\n    var previousViewportStartModelPosition = null;\n\n    if (this.viewportStartLine !== -1) {\n      var previousViewportStartViewPosition = new Position(this.viewportStartLine, this.getLineMinColumn(this.viewportStartLine));\n      previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n    }\n\n    var restorePreviousViewportStart = false;\n    var options = this.configuration.options;\n    var fontInfo = options.get(34\n    /* fontInfo */\n    );\n    var wrappingStrategy = options.get(103\n    /* wrappingStrategy */\n    );\n    var wrappingInfo = options.get(108\n    /* wrappingInfo */\n    );\n    var wrappingIndent = options.get(102\n    /* wrappingIndent */\n    );\n\n    if (this.lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent)) {\n      eventsCollector.emit(new viewEvents.ViewFlushedEvent());\n      eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n      eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n      this.decorations.onLineMappingChanged();\n      this.viewLayout.onFlushed(this.getLineCount());\n\n      if (this.viewLayout.getCurrentScrollTop() !== 0) {\n        // Never change the scroll position from 0 to something else...\n        restorePreviousViewportStart = true;\n      }\n    }\n\n    if (e.hasChanged(68\n    /* readOnly */\n    )) {\n      // Must read again all decorations due to readOnly filtering\n      this.decorations.reset();\n      eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n    }\n\n    eventsCollector.emit(new viewEvents.ViewConfigurationChangedEvent(e));\n    this.viewLayout.onConfigurationChanged(e);\n\n    if (restorePreviousViewportStart && previousViewportStartModelPosition) {\n      var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(previousViewportStartModelPosition);\n      var viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n      this.viewLayout.setScrollPositionNow({\n        scrollTop: viewPositionTop + this.viewportStartLineDelta\n      });\n    }\n  };\n\n  ViewModel.prototype._registerModelEvents = function () {\n    var _this = this;\n\n    this._register(this.model.onDidChangeRawContentFast(function (e) {\n      try {\n        var eventsCollector = _this._beginEmit();\n\n        var hadOtherModelChange = false;\n        var hadModelLineChangeThatChangedLineMapping = false;\n        var changes = e.changes;\n        var versionId = e.versionId; // Do a first pass to compute line mappings, and a second pass to actually interpret them\n\n        var lineBreaksComputer = _this.lines.createLineBreaksComputer();\n\n        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {\n          var change = changes_1[_i];\n\n          switch (change.changeType) {\n            case 4\n            /* LinesInserted */\n            :\n              {\n                for (var _a = 0, _b = change.detail; _a < _b.length; _a++) {\n                  var line = _b[_a];\n                  lineBreaksComputer.addRequest(line, null);\n                }\n\n                break;\n              }\n\n            case 2\n            /* LineChanged */\n            :\n              {\n                lineBreaksComputer.addRequest(change.detail, null);\n                break;\n              }\n          }\n        }\n\n        var lineBreaks = lineBreaksComputer.finalize();\n        var lineBreaksOffset = 0;\n\n        for (var _c = 0, changes_2 = changes; _c < changes_2.length; _c++) {\n          var change = changes_2[_c];\n\n          switch (change.changeType) {\n            case 1\n            /* Flush */\n            :\n              {\n                _this.lines.onModelFlushed();\n\n                eventsCollector.emit(new viewEvents.ViewFlushedEvent());\n\n                _this.decorations.reset();\n\n                _this.viewLayout.onFlushed(_this.getLineCount());\n\n                hadOtherModelChange = true;\n                break;\n              }\n\n            case 3\n            /* LinesDeleted */\n            :\n              {\n                var linesDeletedEvent = _this.lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n\n                if (linesDeletedEvent !== null) {\n                  eventsCollector.emit(linesDeletedEvent);\n\n                  _this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                }\n\n                hadOtherModelChange = true;\n                break;\n              }\n\n            case 4\n            /* LinesInserted */\n            :\n              {\n                var insertedLineBreaks = lineBreaks.slice(lineBreaksOffset, lineBreaksOffset + change.detail.length);\n                lineBreaksOffset += change.detail.length;\n\n                var linesInsertedEvent = _this.lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n\n                if (linesInsertedEvent !== null) {\n                  eventsCollector.emit(linesInsertedEvent);\n\n                  _this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                }\n\n                hadOtherModelChange = true;\n                break;\n              }\n\n            case 2\n            /* LineChanged */\n            :\n              {\n                var changedLineBreakData = lineBreaks[lineBreaksOffset];\n                lineBreaksOffset++;\n\n                var _d = _this.lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData),\n                    lineMappingChanged = _d[0],\n                    linesChangedEvent = _d[1],\n                    linesInsertedEvent = _d[2],\n                    linesDeletedEvent = _d[3];\n\n                hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n\n                if (linesChangedEvent) {\n                  eventsCollector.emit(linesChangedEvent);\n                }\n\n                if (linesInsertedEvent) {\n                  eventsCollector.emit(linesInsertedEvent);\n\n                  _this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                }\n\n                if (linesDeletedEvent) {\n                  eventsCollector.emit(linesDeletedEvent);\n\n                  _this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                }\n\n                break;\n              }\n\n            case 5\n            /* EOLChanged */\n            :\n              {\n                // Nothing to do. The new version will be accepted below\n                break;\n              }\n          }\n        }\n\n        _this.lines.acceptVersionId(versionId);\n\n        _this.viewLayout.onHeightMaybeChanged();\n\n        if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n          eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n          eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n\n          _this.decorations.onLineMappingChanged();\n        }\n      } finally {\n        _this._endEmit();\n      } // Update the configuration and reset the centered view line\n\n\n      _this.viewportStartLine = -1;\n\n      _this.configuration.setMaxLineNumber(_this.model.getLineCount()); // Recover viewport\n\n\n      if (!_this.hasFocus && _this.model.getAttachedEditorCount() >= 2 && _this.viewportStartLineTrackedRange) {\n        var modelRange = _this.model._getTrackedRange(_this.viewportStartLineTrackedRange);\n\n        if (modelRange) {\n          var viewPosition = _this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n\n          var viewPositionTop = _this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n\n          _this.viewLayout.setScrollPositionNow({\n            scrollTop: viewPositionTop + _this.viewportStartLineDelta\n          });\n        }\n      }\n    }));\n\n    this._register(this.model.onDidChangeTokens(function (e) {\n      var viewRanges = [];\n\n      for (var j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n        var modelRange = e.ranges[j];\n\n        var viewStartLineNumber = _this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n\n        var viewEndLineNumber = _this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, _this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n\n        viewRanges[j] = {\n          fromLineNumber: viewStartLineNumber,\n          toLineNumber: viewEndLineNumber\n        };\n      }\n\n      try {\n        var eventsCollector = _this._beginEmit();\n\n        eventsCollector.emit(new viewEvents.ViewTokensChangedEvent(viewRanges));\n      } finally {\n        _this._endEmit();\n      }\n\n      if (e.tokenizationSupportChanged) {\n        _this._tokenizeViewportSoon.schedule();\n      }\n    }));\n\n    this._register(this.model.onDidChangeLanguageConfiguration(function (e) {\n      try {\n        var eventsCollector = _this._beginEmit();\n\n        eventsCollector.emit(new viewEvents.ViewLanguageConfigurationEvent());\n      } finally {\n        _this._endEmit();\n      }\n    }));\n\n    this._register(this.model.onDidChangeOptions(function (e) {\n      // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n      if (_this.lines.setTabSize(_this.model.getOptions().tabSize)) {\n        _this.decorations.onLineMappingChanged();\n\n        _this.viewLayout.onFlushed(_this.getLineCount());\n\n        try {\n          var eventsCollector = _this._beginEmit();\n\n          eventsCollector.emit(new viewEvents.ViewFlushedEvent());\n          eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n          eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n        } finally {\n          _this._endEmit();\n        }\n      }\n    }));\n\n    this._register(this.model.onDidChangeDecorations(function (e) {\n      _this.decorations.onModelDecorationsChanged();\n\n      try {\n        var eventsCollector = _this._beginEmit();\n\n        eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n      } finally {\n        _this._endEmit();\n      }\n    }));\n  };\n\n  ViewModel.prototype.setHiddenAreas = function (ranges) {\n    try {\n      var eventsCollector = this._beginEmit();\n\n      var lineMappingChanged = this.lines.setHiddenAreas(ranges);\n\n      if (lineMappingChanged) {\n        eventsCollector.emit(new viewEvents.ViewFlushedEvent());\n        eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n        eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n        this.decorations.onLineMappingChanged();\n        this.viewLayout.onFlushed(this.getLineCount());\n        this.viewLayout.onHeightMaybeChanged();\n      }\n    } finally {\n      this._endEmit();\n    }\n  };\n\n  ViewModel.prototype.getVisibleRanges = function () {\n    var visibleViewRange = this.getCompletelyVisibleViewRange();\n    var visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n    var hiddenAreas = this.lines.getHiddenAreas();\n\n    if (hiddenAreas.length === 0) {\n      return [visibleRange];\n    }\n\n    var result = [],\n        resultLen = 0;\n    var startLineNumber = visibleRange.startLineNumber;\n    var startColumn = visibleRange.startColumn;\n    var endLineNumber = visibleRange.endLineNumber;\n    var endColumn = visibleRange.endColumn;\n\n    for (var i = 0, len = hiddenAreas.length; i < len; i++) {\n      var hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n      var hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n\n      if (hiddenEndLineNumber < startLineNumber) {\n        continue;\n      }\n\n      if (hiddenStartLineNumber > endLineNumber) {\n        continue;\n      }\n\n      if (startLineNumber < hiddenStartLineNumber) {\n        result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n      }\n\n      startLineNumber = hiddenEndLineNumber + 1;\n      startColumn = 1;\n    }\n\n    if (startLineNumber < endLineNumber || startLineNumber === endLineNumber && startColumn < endColumn) {\n      result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n\n    return result;\n  };\n\n  ViewModel.prototype.getCompletelyVisibleViewRange = function () {\n    var partialData = this.viewLayout.getLinesViewportData();\n    var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n    var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n    return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n  };\n\n  ViewModel.prototype.getCompletelyVisibleViewRangeAtScrollTop = function (scrollTop) {\n    var partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n    var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n    var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n    return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n  };\n\n  ViewModel.prototype.saveState = function () {\n    var compatViewState = this.viewLayout.saveState();\n    var scrollTop = compatViewState.scrollTop;\n    var firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n    var firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n    var firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n    return {\n      scrollLeft: compatViewState.scrollLeft,\n      firstPosition: firstPosition,\n      firstPositionDeltaTop: firstPositionDeltaTop\n    };\n  };\n\n  ViewModel.prototype.reduceRestoreState = function (state) {\n    if (typeof state.firstPosition === 'undefined') {\n      // This is a view state serialized by an older version\n      return this._reduceRestoreStateCompatibility(state);\n    }\n\n    var modelPosition = this.model.validatePosition(state.firstPosition);\n    var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n    var scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n    return {\n      scrollLeft: state.scrollLeft,\n      scrollTop: scrollTop\n    };\n  };\n\n  ViewModel.prototype._reduceRestoreStateCompatibility = function (state) {\n    return {\n      scrollLeft: state.scrollLeft,\n      scrollTop: state.scrollTopWithoutViewZones\n    };\n  };\n\n  ViewModel.prototype.getTabSize = function () {\n    return this.model.getOptions().tabSize;\n  };\n\n  ViewModel.prototype.getOptions = function () {\n    return this.model.getOptions();\n  };\n\n  ViewModel.prototype.getLineCount = function () {\n    return this.lines.getViewLineCount();\n  };\n  /**\r\n   * Gives a hint that a lot of requests are about to come in for these line numbers.\r\n   */\n\n\n  ViewModel.prototype.setViewport = function (startLineNumber, endLineNumber, centeredLineNumber) {\n    this.viewportStartLine = startLineNumber;\n    var position = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, this.getLineMinColumn(startLineNumber)));\n    this.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1\n    /* NeverGrowsWhenTypingAtEdges */\n    );\n    var viewportStartLineTop = this.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n    var scrollTop = this.viewLayout.getCurrentScrollTop();\n    this.viewportStartLineDelta = scrollTop - viewportStartLineTop;\n  };\n\n  ViewModel.prototype.getActiveIndentGuide = function (lineNumber, minLineNumber, maxLineNumber) {\n    return this.lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n  };\n\n  ViewModel.prototype.getLinesIndentGuides = function (startLineNumber, endLineNumber) {\n    return this.lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n  };\n\n  ViewModel.prototype.getLineContent = function (lineNumber) {\n    return this.lines.getViewLineContent(lineNumber);\n  };\n\n  ViewModel.prototype.getLineLength = function (lineNumber) {\n    return this.lines.getViewLineLength(lineNumber);\n  };\n\n  ViewModel.prototype.getLineMinColumn = function (lineNumber) {\n    return this.lines.getViewLineMinColumn(lineNumber);\n  };\n\n  ViewModel.prototype.getLineMaxColumn = function (lineNumber) {\n    return this.lines.getViewLineMaxColumn(lineNumber);\n  };\n\n  ViewModel.prototype.getLineFirstNonWhitespaceColumn = function (lineNumber) {\n    var result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n\n    if (result === -1) {\n      return 0;\n    }\n\n    return result + 1;\n  };\n\n  ViewModel.prototype.getLineLastNonWhitespaceColumn = function (lineNumber) {\n    var result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n\n    if (result === -1) {\n      return 0;\n    }\n\n    return result + 2;\n  };\n\n  ViewModel.prototype.getDecorationsInViewport = function (visibleRange) {\n    return this.decorations.getDecorationsViewportData(visibleRange).decorations;\n  };\n\n  ViewModel.prototype.getViewLineRenderingData = function (visibleRange, lineNumber) {\n    var mightContainRTL = this.model.mightContainRTL();\n    var mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n    var tabSize = this.getTabSize();\n    var lineData = this.lines.getViewLineData(lineNumber);\n    var allInlineDecorations = this.decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n    var inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n    return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n  };\n\n  ViewModel.prototype.getViewLineData = function (lineNumber) {\n    return this.lines.getViewLineData(lineNumber);\n  };\n\n  ViewModel.prototype.getMinimapLinesRenderingData = function (startLineNumber, endLineNumber, needed) {\n    var result = this.lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n    return new MinimapLinesRenderingData(this.getTabSize(), result);\n  };\n\n  ViewModel.prototype.getAllOverviewRulerDecorations = function (theme) {\n    return this.lines.getAllOverviewRulerDecorations(this.editorId, filterValidationDecorations(this.configuration.options), theme);\n  };\n\n  ViewModel.prototype.invalidateOverviewRulerColorCache = function () {\n    var decorations = this.model.getOverviewRulerDecorations();\n\n    for (var _i = 0, decorations_1 = decorations; _i < decorations_1.length; _i++) {\n      var decoration = decorations_1[_i];\n      var opts = decoration.options.overviewRuler;\n\n      if (opts) {\n        opts.invalidateCachedColor();\n      }\n    }\n  };\n\n  ViewModel.prototype.invalidateMinimapColorCache = function () {\n    var decorations = this.model.getAllDecorations();\n\n    for (var _i = 0, decorations_2 = decorations; _i < decorations_2.length; _i++) {\n      var decoration = decorations_2[_i];\n      var opts = decoration.options.minimap;\n\n      if (opts) {\n        opts.invalidateCachedColor();\n      }\n    }\n  };\n\n  ViewModel.prototype.getValueInRange = function (range, eol) {\n    var modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n    return this.model.getValueInRange(modelRange, eol);\n  };\n\n  ViewModel.prototype.getModelLineMaxColumn = function (modelLineNumber) {\n    return this.model.getLineMaxColumn(modelLineNumber);\n  };\n\n  ViewModel.prototype.validateModelPosition = function (position) {\n    return this.model.validatePosition(position);\n  };\n\n  ViewModel.prototype.validateModelRange = function (range) {\n    return this.model.validateRange(range);\n  };\n\n  ViewModel.prototype.deduceModelPositionRelativeToViewPosition = function (viewAnchorPosition, deltaOffset, lineFeedCnt) {\n    var modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n\n    if (this.model.getEOL().length === 2) {\n      // This model uses CRLF, so the delta must take that into account\n      if (deltaOffset < 0) {\n        deltaOffset -= lineFeedCnt;\n      } else {\n        deltaOffset += lineFeedCnt;\n      }\n    }\n\n    var modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n    var resultOffset = modelAnchorOffset + deltaOffset;\n    return this.model.getPositionAt(resultOffset);\n  };\n\n  ViewModel.prototype.getEOL = function () {\n    return this.model.getEOL();\n  };\n\n  ViewModel.prototype.getPlainTextToCopy = function (modelRanges, emptySelectionClipboard, forceCRLF) {\n    var newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n    modelRanges = modelRanges.slice(0);\n    modelRanges.sort(Range.compareRangesUsingStarts);\n    var hasEmptyRange = false;\n    var hasNonEmptyRange = false;\n\n    for (var _i = 0, modelRanges_1 = modelRanges; _i < modelRanges_1.length; _i++) {\n      var range = modelRanges_1[_i];\n\n      if (range.isEmpty()) {\n        hasEmptyRange = true;\n      } else {\n        hasNonEmptyRange = true;\n      }\n    }\n\n    if (!hasNonEmptyRange) {\n      // all ranges are empty\n      if (!emptySelectionClipboard) {\n        return '';\n      }\n\n      var modelLineNumbers = modelRanges.map(function (r) {\n        return r.startLineNumber;\n      });\n      var result_1 = '';\n\n      for (var i = 0; i < modelLineNumbers.length; i++) {\n        if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n          continue;\n        }\n\n        result_1 += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n      }\n\n      return result_1;\n    }\n\n    if (hasEmptyRange && emptySelectionClipboard) {\n      // mixed empty selections and non-empty selections\n      var result_2 = [];\n      var prevModelLineNumber = 0;\n\n      for (var _a = 0, modelRanges_2 = modelRanges; _a < modelRanges_2.length; _a++) {\n        var modelRange = modelRanges_2[_a];\n        var modelLineNumber = modelRange.startLineNumber;\n\n        if (modelRange.isEmpty()) {\n          if (modelLineNumber !== prevModelLineNumber) {\n            result_2.push(this.model.getLineContent(modelLineNumber));\n          }\n        } else {\n          result_2.push(this.model.getValueInRange(modelRange, forceCRLF ? 2\n          /* CRLF */\n          : 0\n          /* TextDefined */\n          ));\n        }\n\n        prevModelLineNumber = modelLineNumber;\n      }\n\n      return result_2.length === 1 ? result_2[0] : result_2;\n    }\n\n    var result = [];\n\n    for (var _b = 0, modelRanges_3 = modelRanges; _b < modelRanges_3.length; _b++) {\n      var modelRange = modelRanges_3[_b];\n\n      if (!modelRange.isEmpty()) {\n        result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2\n        /* CRLF */\n        : 0\n        /* TextDefined */\n        ));\n      }\n    }\n\n    return result.length === 1 ? result[0] : result;\n  };\n\n  ViewModel.prototype.getRichTextToCopy = function (modelRanges, emptySelectionClipboard) {\n    var languageId = this.model.getLanguageIdentifier();\n\n    if (languageId.id === 1\n    /* PlainText */\n    ) {\n        return null;\n      }\n\n    if (modelRanges.length !== 1) {\n      // no multiple selection support at this time\n      return null;\n    }\n\n    var range = modelRanges[0];\n\n    if (range.isEmpty()) {\n      if (!emptySelectionClipboard) {\n        // nothing to copy\n        return null;\n      }\n\n      var lineNumber = range.startLineNumber;\n      range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n    }\n\n    var fontInfo = this.configuration.options.get(34\n    /* fontInfo */\n    );\n\n    var colorMap = this._getColorMap();\n\n    var fontFamily = fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily ? fontInfo.fontFamily : \"'\" + fontInfo.fontFamily + \"', \" + EDITOR_FONT_DEFAULTS.fontFamily;\n    return {\n      mode: languageId.language,\n      html: \"<div style=\\\"\" + (\"color: \" + colorMap[1\n      /* DefaultForeground */\n      ] + \";\") + (\"background-color: \" + colorMap[2\n      /* DefaultBackground */\n      ] + \";\") + (\"font-family: \" + fontFamily + \";\") + (\"font-weight: \" + fontInfo.fontWeight + \";\") + (\"font-size: \" + fontInfo.fontSize + \"px;\") + (\"line-height: \" + fontInfo.lineHeight + \"px;\") + \"white-space: pre;\" + \"\\\">\" + this._getHTMLToCopy(range, colorMap) + '</div>'\n    };\n  };\n\n  ViewModel.prototype._getHTMLToCopy = function (modelRange, colorMap) {\n    var startLineNumber = modelRange.startLineNumber;\n    var startColumn = modelRange.startColumn;\n    var endLineNumber = modelRange.endLineNumber;\n    var endColumn = modelRange.endColumn;\n    var tabSize = this.getTabSize();\n    var result = '';\n\n    for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      var lineTokens = this.model.getLineTokens(lineNumber);\n      var lineContent = lineTokens.getLineContent();\n      var startOffset = lineNumber === startLineNumber ? startColumn - 1 : 0;\n      var endOffset = lineNumber === endLineNumber ? endColumn - 1 : lineContent.length;\n\n      if (lineContent === '') {\n        result += '<br>';\n      } else {\n        result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n      }\n    }\n\n    return result;\n  };\n\n  ViewModel.prototype._getColorMap = function () {\n    var colorMap = TokenizationRegistry.getColorMap();\n    var result = ['#000000'];\n\n    if (colorMap) {\n      for (var i = 1, len = colorMap.length; i < len; i++) {\n        result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n      }\n    }\n\n    return result;\n  };\n\n  return ViewModel;\n}(viewEvents.ViewEventEmitter);\n\nexport { ViewModel };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Color","strings","EDITOR_FONT_DEFAULTS","filterValidationDecorations","Position","Range","TokenizationRegistry","tokenizeLineToHTML","MinimapTokensColorTracker","viewEvents","ViewLayout","IdentityLinesCollection","SplitLinesCollection","MinimapLinesRenderingData","ViewLineRenderingData","ViewModelDecorations","RunOnceScheduler","platform","USE_IDENTITY_LINES_COLLECTION","ViewModel","_super","editorId","configuration","model","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","scheduleAtNextAnimationFrame","_this","call","_tokenizeViewportSoon","_register","tokenizeViewport","hasFocus","viewportStartLine","viewportStartLineTrackedRange","viewportStartLineDelta","isTooLargeForTokenization","lines","options","fontInfo","get","wrappingStrategy","wrappingInfo","wrappingIndent","getOptions","tabSize","wrappingColumn","coordinatesConverter","createCoordinatesConverter","viewLayout","getLineCount","onDidScroll","e","scrollTopChanged","schedule","eventsCollector","_beginEmit","emit","ViewScrollChangedEvent","_endEmit","onDidContentSizeChange","ViewContentSizeChangedEvent","decorations","_registerModelEvents","onDidChange","_onConfigurationChanged","getInstance","ViewTokensColorsChangedEvent","dispose","invalidateMinimapColorCache","_setTrackedRange","linesViewportData","getLinesViewportData","startPosition","convertViewPositionToModelPosition","startLineNumber","endPosition","endLineNumber","lineNumber","setHasFocus","previousViewportStartModelPosition","previousViewportStartViewPosition","getLineMinColumn","restorePreviousViewportStart","setWrappingSettings","ViewFlushedEvent","ViewLineMappingChangedEvent","ViewDecorationsChangedEvent","onLineMappingChanged","onFlushed","getCurrentScrollTop","hasChanged","reset","ViewConfigurationChangedEvent","onConfigurationChanged","viewPosition","convertModelPositionToViewPosition","viewPositionTop","getVerticalOffsetForLineNumber","setScrollPositionNow","scrollTop","onDidChangeRawContentFast","hadOtherModelChange","hadModelLineChangeThatChangedLineMapping","changes","versionId","lineBreaksComputer","createLineBreaksComputer","_i","changes_1","length","change","changeType","_a","_b","detail","line","addRequest","lineBreaks","finalize","lineBreaksOffset","_c","changes_2","onModelFlushed","linesDeletedEvent","onModelLinesDeleted","fromLineNumber","toLineNumber","onLinesDeleted","insertedLineBreaks","slice","linesInsertedEvent","onModelLinesInserted","onLinesInserted","changedLineBreakData","_d","onModelLineChanged","lineMappingChanged","linesChangedEvent","acceptVersionId","onHeightMaybeChanged","setMaxLineNumber","getAttachedEditorCount","modelRange","_getTrackedRange","getStartPosition","onDidChangeTokens","viewRanges","j","lenJ","ranges","viewStartLineNumber","viewEndLineNumber","getLineMaxColumn","ViewTokensChangedEvent","tokenizationSupportChanged","onDidChangeLanguageConfiguration","ViewLanguageConfigurationEvent","onDidChangeOptions","setTabSize","onDidChangeDecorations","onModelDecorationsChanged","setHiddenAreas","getVisibleRanges","visibleViewRange","getCompletelyVisibleViewRange","visibleRange","convertViewRangeToModelRange","hiddenAreas","getHiddenAreas","result","resultLen","startColumn","endColumn","i","len","hiddenStartLineNumber","hiddenEndLineNumber","partialData","startViewLineNumber","completelyVisibleStartLineNumber","endViewLineNumber","completelyVisibleEndLineNumber","getCompletelyVisibleViewRangeAtScrollTop","getLinesViewportDataAtScrollTop","saveState","compatViewState","firstViewLineNumber","getLineNumberAtVerticalOffset","firstPosition","firstPositionDeltaTop","scrollLeft","reduceRestoreState","state","_reduceRestoreStateCompatibility","modelPosition","validatePosition","scrollTopWithoutViewZones","getTabSize","getViewLineCount","setViewport","centeredLineNumber","position","column","viewportStartLineTop","getActiveIndentGuide","minLineNumber","maxLineNumber","getLinesIndentGuides","getViewLinesIndentGuides","getLineContent","getViewLineContent","getLineLength","getViewLineLength","getViewLineMinColumn","getViewLineMaxColumn","getLineFirstNonWhitespaceColumn","firstNonWhitespaceIndex","getLineLastNonWhitespaceColumn","lastNonWhitespaceIndex","getDecorationsInViewport","getDecorationsViewportData","getViewLineRenderingData","mightContainRTL","mightContainNonBasicASCII","lineData","getViewLineData","allInlineDecorations","inlineDecorations","minColumn","maxColumn","content","continuesWithWrappedLine","tokens","startVisibleColumn","getMinimapLinesRenderingData","needed","getViewLinesData","getAllOverviewRulerDecorations","theme","invalidateOverviewRulerColorCache","getOverviewRulerDecorations","decorations_1","decoration","opts","overviewRuler","invalidateCachedColor","getAllDecorations","decorations_2","minimap","getValueInRange","range","eol","getModelLineMaxColumn","modelLineNumber","validateModelPosition","validateModelRange","validateRange","deduceModelPositionRelativeToViewPosition","viewAnchorPosition","deltaOffset","lineFeedCnt","modelAnchor","getEOL","modelAnchorOffset","getOffsetAt","resultOffset","getPositionAt","getPlainTextToCopy","modelRanges","emptySelectionClipboard","forceCRLF","newLineCharacter","sort","compareRangesUsingStarts","hasEmptyRange","hasNonEmptyRange","modelRanges_1","isEmpty","modelLineNumbers","map","r","result_1","result_2","prevModelLineNumber","modelRanges_2","push","modelRanges_3","getRichTextToCopy","languageId","getLanguageIdentifier","id","colorMap","_getColorMap","fontFamily","mode","language","html","fontWeight","fontSize","lineHeight","_getHTMLToCopy","lineTokens","getLineTokens","lineContent","startOffset","endOffset","inflate","isWindows","getColorMap","Format","CSS","formatHex","ViewEventEmitter"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { Color } from '../../../base/common/color.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { TokenizationRegistry } from '../modes.js';\r\nimport { tokenizeLineToHTML } from '../modes/textToHtmlTokenizer.js';\r\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\r\nimport * as viewEvents from '../view/viewEvents.js';\r\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\r\nimport { IdentityLinesCollection, SplitLinesCollection } from './splitLinesCollection.js';\r\nimport { MinimapLinesRenderingData, ViewLineRenderingData } from './viewModel.js';\r\nimport { ViewModelDecorations } from './viewModelDecorations.js';\r\nimport { RunOnceScheduler } from '../../../base/common/async.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nvar USE_IDENTITY_LINES_COLLECTION = true;\r\nvar ViewModel = /** @class */ (function (_super) {\r\n    __extends(ViewModel, _super);\r\n    function ViewModel(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame) {\r\n        var _this = _super.call(this) || this;\r\n        _this.editorId = editorId;\r\n        _this.configuration = configuration;\r\n        _this.model = model;\r\n        _this._tokenizeViewportSoon = _this._register(new RunOnceScheduler(function () { return _this.tokenizeViewport(); }, 50));\r\n        _this.hasFocus = false;\r\n        _this.viewportStartLine = -1;\r\n        _this.viewportStartLineTrackedRange = null;\r\n        _this.viewportStartLineDelta = 0;\r\n        if (USE_IDENTITY_LINES_COLLECTION && _this.model.isTooLargeForTokenization()) {\r\n            _this.lines = new IdentityLinesCollection(_this.model);\r\n        }\r\n        else {\r\n            var options = _this.configuration.options;\r\n            var fontInfo = options.get(34 /* fontInfo */);\r\n            var wrappingStrategy = options.get(103 /* wrappingStrategy */);\r\n            var wrappingInfo = options.get(108 /* wrappingInfo */);\r\n            var wrappingIndent = options.get(102 /* wrappingIndent */);\r\n            _this.lines = new SplitLinesCollection(_this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, _this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent);\r\n        }\r\n        _this.coordinatesConverter = _this.lines.createCoordinatesConverter();\r\n        _this.viewLayout = _this._register(new ViewLayout(_this.configuration, _this.getLineCount(), scheduleAtNextAnimationFrame));\r\n        _this._register(_this.viewLayout.onDidScroll(function (e) {\r\n            if (e.scrollTopChanged) {\r\n                _this._tokenizeViewportSoon.schedule();\r\n            }\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewScrollChangedEvent(e));\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        _this._register(_this.viewLayout.onDidContentSizeChange(function (e) {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewContentSizeChangedEvent(e));\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        _this.decorations = new ViewModelDecorations(_this.editorId, _this.model, _this.configuration, _this.lines, _this.coordinatesConverter);\r\n        _this._registerModelEvents();\r\n        _this._register(_this.configuration.onDidChange(function (e) {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                _this._onConfigurationChanged(eventsCollector, e);\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        _this._register(MinimapTokensColorTracker.getInstance().onDidChange(function () {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewTokensColorsChangedEvent());\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        return _this;\r\n    }\r\n    ViewModel.prototype.dispose = function () {\r\n        // First remove listeners, as disposing the lines might end up sending\r\n        // model decoration changed events ... and we no longer care about them ...\r\n        _super.prototype.dispose.call(this);\r\n        this.decorations.dispose();\r\n        this.lines.dispose();\r\n        this.invalidateMinimapColorCache();\r\n        this.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, null, 1 /* NeverGrowsWhenTypingAtEdges */);\r\n    };\r\n    ViewModel.prototype.tokenizeViewport = function () {\r\n        var linesViewportData = this.viewLayout.getLinesViewportData();\r\n        var startPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.startLineNumber, 1));\r\n        var endPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.endLineNumber, 1));\r\n        this.model.tokenizeViewport(startPosition.lineNumber, endPosition.lineNumber);\r\n    };\r\n    ViewModel.prototype.setHasFocus = function (hasFocus) {\r\n        this.hasFocus = hasFocus;\r\n    };\r\n    ViewModel.prototype._onConfigurationChanged = function (eventsCollector, e) {\r\n        // We might need to restore the current centered view range, so save it (if available)\r\n        var previousViewportStartModelPosition = null;\r\n        if (this.viewportStartLine !== -1) {\r\n            var previousViewportStartViewPosition = new Position(this.viewportStartLine, this.getLineMinColumn(this.viewportStartLine));\r\n            previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\r\n        }\r\n        var restorePreviousViewportStart = false;\r\n        var options = this.configuration.options;\r\n        var fontInfo = options.get(34 /* fontInfo */);\r\n        var wrappingStrategy = options.get(103 /* wrappingStrategy */);\r\n        var wrappingInfo = options.get(108 /* wrappingInfo */);\r\n        var wrappingIndent = options.get(102 /* wrappingIndent */);\r\n        if (this.lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent)) {\r\n            eventsCollector.emit(new viewEvents.ViewFlushedEvent());\r\n            eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\r\n            eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n            this.decorations.onLineMappingChanged();\r\n            this.viewLayout.onFlushed(this.getLineCount());\r\n            if (this.viewLayout.getCurrentScrollTop() !== 0) {\r\n                // Never change the scroll position from 0 to something else...\r\n                restorePreviousViewportStart = true;\r\n            }\r\n        }\r\n        if (e.hasChanged(68 /* readOnly */)) {\r\n            // Must read again all decorations due to readOnly filtering\r\n            this.decorations.reset();\r\n            eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n        }\r\n        eventsCollector.emit(new viewEvents.ViewConfigurationChangedEvent(e));\r\n        this.viewLayout.onConfigurationChanged(e);\r\n        if (restorePreviousViewportStart && previousViewportStartModelPosition) {\r\n            var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(previousViewportStartModelPosition);\r\n            var viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\r\n            this.viewLayout.setScrollPositionNow({ scrollTop: viewPositionTop + this.viewportStartLineDelta });\r\n        }\r\n    };\r\n    ViewModel.prototype._registerModelEvents = function () {\r\n        var _this = this;\r\n        this._register(this.model.onDidChangeRawContentFast(function (e) {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                var hadOtherModelChange = false;\r\n                var hadModelLineChangeThatChangedLineMapping = false;\r\n                var changes = e.changes;\r\n                var versionId = e.versionId;\r\n                // Do a first pass to compute line mappings, and a second pass to actually interpret them\r\n                var lineBreaksComputer = _this.lines.createLineBreaksComputer();\r\n                for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {\r\n                    var change = changes_1[_i];\r\n                    switch (change.changeType) {\r\n                        case 4 /* LinesInserted */: {\r\n                            for (var _a = 0, _b = change.detail; _a < _b.length; _a++) {\r\n                                var line = _b[_a];\r\n                                lineBreaksComputer.addRequest(line, null);\r\n                            }\r\n                            break;\r\n                        }\r\n                        case 2 /* LineChanged */: {\r\n                            lineBreaksComputer.addRequest(change.detail, null);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                var lineBreaks = lineBreaksComputer.finalize();\r\n                var lineBreaksOffset = 0;\r\n                for (var _c = 0, changes_2 = changes; _c < changes_2.length; _c++) {\r\n                    var change = changes_2[_c];\r\n                    switch (change.changeType) {\r\n                        case 1 /* Flush */: {\r\n                            _this.lines.onModelFlushed();\r\n                            eventsCollector.emit(new viewEvents.ViewFlushedEvent());\r\n                            _this.decorations.reset();\r\n                            _this.viewLayout.onFlushed(_this.getLineCount());\r\n                            hadOtherModelChange = true;\r\n                            break;\r\n                        }\r\n                        case 3 /* LinesDeleted */: {\r\n                            var linesDeletedEvent = _this.lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\r\n                            if (linesDeletedEvent !== null) {\r\n                                eventsCollector.emit(linesDeletedEvent);\r\n                                _this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\r\n                            }\r\n                            hadOtherModelChange = true;\r\n                            break;\r\n                        }\r\n                        case 4 /* LinesInserted */: {\r\n                            var insertedLineBreaks = lineBreaks.slice(lineBreaksOffset, lineBreaksOffset + change.detail.length);\r\n                            lineBreaksOffset += change.detail.length;\r\n                            var linesInsertedEvent = _this.lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\r\n                            if (linesInsertedEvent !== null) {\r\n                                eventsCollector.emit(linesInsertedEvent);\r\n                                _this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\r\n                            }\r\n                            hadOtherModelChange = true;\r\n                            break;\r\n                        }\r\n                        case 2 /* LineChanged */: {\r\n                            var changedLineBreakData = lineBreaks[lineBreaksOffset];\r\n                            lineBreaksOffset++;\r\n                            var _d = _this.lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData), lineMappingChanged = _d[0], linesChangedEvent = _d[1], linesInsertedEvent = _d[2], linesDeletedEvent = _d[3];\r\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\r\n                            if (linesChangedEvent) {\r\n                                eventsCollector.emit(linesChangedEvent);\r\n                            }\r\n                            if (linesInsertedEvent) {\r\n                                eventsCollector.emit(linesInsertedEvent);\r\n                                _this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\r\n                            }\r\n                            if (linesDeletedEvent) {\r\n                                eventsCollector.emit(linesDeletedEvent);\r\n                                _this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\r\n                            }\r\n                            break;\r\n                        }\r\n                        case 5 /* EOLChanged */: {\r\n                            // Nothing to do. The new version will be accepted below\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                _this.lines.acceptVersionId(versionId);\r\n                _this.viewLayout.onHeightMaybeChanged();\r\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\r\n                    eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\r\n                    eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n                    _this.decorations.onLineMappingChanged();\r\n                }\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n            // Update the configuration and reset the centered view line\r\n            _this.viewportStartLine = -1;\r\n            _this.configuration.setMaxLineNumber(_this.model.getLineCount());\r\n            // Recover viewport\r\n            if (!_this.hasFocus && _this.model.getAttachedEditorCount() >= 2 && _this.viewportStartLineTrackedRange) {\r\n                var modelRange = _this.model._getTrackedRange(_this.viewportStartLineTrackedRange);\r\n                if (modelRange) {\r\n                    var viewPosition = _this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\r\n                    var viewPositionTop = _this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\r\n                    _this.viewLayout.setScrollPositionNow({ scrollTop: viewPositionTop + _this.viewportStartLineDelta });\r\n                }\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeTokens(function (e) {\r\n            var viewRanges = [];\r\n            for (var j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\r\n                var modelRange = e.ranges[j];\r\n                var viewStartLineNumber = _this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\r\n                var viewEndLineNumber = _this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, _this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\r\n                viewRanges[j] = {\r\n                    fromLineNumber: viewStartLineNumber,\r\n                    toLineNumber: viewEndLineNumber\r\n                };\r\n            }\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewTokensChangedEvent(viewRanges));\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n            if (e.tokenizationSupportChanged) {\r\n                _this._tokenizeViewportSoon.schedule();\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeLanguageConfiguration(function (e) {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewLanguageConfigurationEvent());\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeOptions(function (e) {\r\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\r\n            if (_this.lines.setTabSize(_this.model.getOptions().tabSize)) {\r\n                _this.decorations.onLineMappingChanged();\r\n                _this.viewLayout.onFlushed(_this.getLineCount());\r\n                try {\r\n                    var eventsCollector = _this._beginEmit();\r\n                    eventsCollector.emit(new viewEvents.ViewFlushedEvent());\r\n                    eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\r\n                    eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n                }\r\n                finally {\r\n                    _this._endEmit();\r\n                }\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeDecorations(function (e) {\r\n            _this.decorations.onModelDecorationsChanged();\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n    };\r\n    ViewModel.prototype.setHiddenAreas = function (ranges) {\r\n        try {\r\n            var eventsCollector = this._beginEmit();\r\n            var lineMappingChanged = this.lines.setHiddenAreas(ranges);\r\n            if (lineMappingChanged) {\r\n                eventsCollector.emit(new viewEvents.ViewFlushedEvent());\r\n                eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\r\n                eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n                this.decorations.onLineMappingChanged();\r\n                this.viewLayout.onFlushed(this.getLineCount());\r\n                this.viewLayout.onHeightMaybeChanged();\r\n            }\r\n        }\r\n        finally {\r\n            this._endEmit();\r\n        }\r\n    };\r\n    ViewModel.prototype.getVisibleRanges = function () {\r\n        var visibleViewRange = this.getCompletelyVisibleViewRange();\r\n        var visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\r\n        var hiddenAreas = this.lines.getHiddenAreas();\r\n        if (hiddenAreas.length === 0) {\r\n            return [visibleRange];\r\n        }\r\n        var result = [], resultLen = 0;\r\n        var startLineNumber = visibleRange.startLineNumber;\r\n        var startColumn = visibleRange.startColumn;\r\n        var endLineNumber = visibleRange.endLineNumber;\r\n        var endColumn = visibleRange.endColumn;\r\n        for (var i = 0, len = hiddenAreas.length; i < len; i++) {\r\n            var hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\r\n            var hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\r\n            if (hiddenEndLineNumber < startLineNumber) {\r\n                continue;\r\n            }\r\n            if (hiddenStartLineNumber > endLineNumber) {\r\n                continue;\r\n            }\r\n            if (startLineNumber < hiddenStartLineNumber) {\r\n                result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\r\n            }\r\n            startLineNumber = hiddenEndLineNumber + 1;\r\n            startColumn = 1;\r\n        }\r\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\r\n            result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n        }\r\n        return result;\r\n    };\r\n    ViewModel.prototype.getCompletelyVisibleViewRange = function () {\r\n        var partialData = this.viewLayout.getLinesViewportData();\r\n        var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\r\n        var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\r\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\r\n    };\r\n    ViewModel.prototype.getCompletelyVisibleViewRangeAtScrollTop = function (scrollTop) {\r\n        var partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\r\n        var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\r\n        var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\r\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\r\n    };\r\n    ViewModel.prototype.saveState = function () {\r\n        var compatViewState = this.viewLayout.saveState();\r\n        var scrollTop = compatViewState.scrollTop;\r\n        var firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\r\n        var firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\r\n        var firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\r\n        return {\r\n            scrollLeft: compatViewState.scrollLeft,\r\n            firstPosition: firstPosition,\r\n            firstPositionDeltaTop: firstPositionDeltaTop\r\n        };\r\n    };\r\n    ViewModel.prototype.reduceRestoreState = function (state) {\r\n        if (typeof state.firstPosition === 'undefined') {\r\n            // This is a view state serialized by an older version\r\n            return this._reduceRestoreStateCompatibility(state);\r\n        }\r\n        var modelPosition = this.model.validatePosition(state.firstPosition);\r\n        var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\r\n        var scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\r\n        return {\r\n            scrollLeft: state.scrollLeft,\r\n            scrollTop: scrollTop\r\n        };\r\n    };\r\n    ViewModel.prototype._reduceRestoreStateCompatibility = function (state) {\r\n        return {\r\n            scrollLeft: state.scrollLeft,\r\n            scrollTop: state.scrollTopWithoutViewZones\r\n        };\r\n    };\r\n    ViewModel.prototype.getTabSize = function () {\r\n        return this.model.getOptions().tabSize;\r\n    };\r\n    ViewModel.prototype.getOptions = function () {\r\n        return this.model.getOptions();\r\n    };\r\n    ViewModel.prototype.getLineCount = function () {\r\n        return this.lines.getViewLineCount();\r\n    };\r\n    /**\r\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\r\n     */\r\n    ViewModel.prototype.setViewport = function (startLineNumber, endLineNumber, centeredLineNumber) {\r\n        this.viewportStartLine = startLineNumber;\r\n        var position = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, this.getLineMinColumn(startLineNumber)));\r\n        this.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* NeverGrowsWhenTypingAtEdges */);\r\n        var viewportStartLineTop = this.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\r\n        var scrollTop = this.viewLayout.getCurrentScrollTop();\r\n        this.viewportStartLineDelta = scrollTop - viewportStartLineTop;\r\n    };\r\n    ViewModel.prototype.getActiveIndentGuide = function (lineNumber, minLineNumber, maxLineNumber) {\r\n        return this.lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\r\n    };\r\n    ViewModel.prototype.getLinesIndentGuides = function (startLineNumber, endLineNumber) {\r\n        return this.lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\r\n    };\r\n    ViewModel.prototype.getLineContent = function (lineNumber) {\r\n        return this.lines.getViewLineContent(lineNumber);\r\n    };\r\n    ViewModel.prototype.getLineLength = function (lineNumber) {\r\n        return this.lines.getViewLineLength(lineNumber);\r\n    };\r\n    ViewModel.prototype.getLineMinColumn = function (lineNumber) {\r\n        return this.lines.getViewLineMinColumn(lineNumber);\r\n    };\r\n    ViewModel.prototype.getLineMaxColumn = function (lineNumber) {\r\n        return this.lines.getViewLineMaxColumn(lineNumber);\r\n    };\r\n    ViewModel.prototype.getLineFirstNonWhitespaceColumn = function (lineNumber) {\r\n        var result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\r\n        if (result === -1) {\r\n            return 0;\r\n        }\r\n        return result + 1;\r\n    };\r\n    ViewModel.prototype.getLineLastNonWhitespaceColumn = function (lineNumber) {\r\n        var result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\r\n        if (result === -1) {\r\n            return 0;\r\n        }\r\n        return result + 2;\r\n    };\r\n    ViewModel.prototype.getDecorationsInViewport = function (visibleRange) {\r\n        return this.decorations.getDecorationsViewportData(visibleRange).decorations;\r\n    };\r\n    ViewModel.prototype.getViewLineRenderingData = function (visibleRange, lineNumber) {\r\n        var mightContainRTL = this.model.mightContainRTL();\r\n        var mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\r\n        var tabSize = this.getTabSize();\r\n        var lineData = this.lines.getViewLineData(lineNumber);\r\n        var allInlineDecorations = this.decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\r\n        var inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\r\n        return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\r\n    };\r\n    ViewModel.prototype.getViewLineData = function (lineNumber) {\r\n        return this.lines.getViewLineData(lineNumber);\r\n    };\r\n    ViewModel.prototype.getMinimapLinesRenderingData = function (startLineNumber, endLineNumber, needed) {\r\n        var result = this.lines.getViewLinesData(startLineNumber, endLineNumber, needed);\r\n        return new MinimapLinesRenderingData(this.getTabSize(), result);\r\n    };\r\n    ViewModel.prototype.getAllOverviewRulerDecorations = function (theme) {\r\n        return this.lines.getAllOverviewRulerDecorations(this.editorId, filterValidationDecorations(this.configuration.options), theme);\r\n    };\r\n    ViewModel.prototype.invalidateOverviewRulerColorCache = function () {\r\n        var decorations = this.model.getOverviewRulerDecorations();\r\n        for (var _i = 0, decorations_1 = decorations; _i < decorations_1.length; _i++) {\r\n            var decoration = decorations_1[_i];\r\n            var opts = decoration.options.overviewRuler;\r\n            if (opts) {\r\n                opts.invalidateCachedColor();\r\n            }\r\n        }\r\n    };\r\n    ViewModel.prototype.invalidateMinimapColorCache = function () {\r\n        var decorations = this.model.getAllDecorations();\r\n        for (var _i = 0, decorations_2 = decorations; _i < decorations_2.length; _i++) {\r\n            var decoration = decorations_2[_i];\r\n            var opts = decoration.options.minimap;\r\n            if (opts) {\r\n                opts.invalidateCachedColor();\r\n            }\r\n        }\r\n    };\r\n    ViewModel.prototype.getValueInRange = function (range, eol) {\r\n        var modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\r\n        return this.model.getValueInRange(modelRange, eol);\r\n    };\r\n    ViewModel.prototype.getModelLineMaxColumn = function (modelLineNumber) {\r\n        return this.model.getLineMaxColumn(modelLineNumber);\r\n    };\r\n    ViewModel.prototype.validateModelPosition = function (position) {\r\n        return this.model.validatePosition(position);\r\n    };\r\n    ViewModel.prototype.validateModelRange = function (range) {\r\n        return this.model.validateRange(range);\r\n    };\r\n    ViewModel.prototype.deduceModelPositionRelativeToViewPosition = function (viewAnchorPosition, deltaOffset, lineFeedCnt) {\r\n        var modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\r\n        if (this.model.getEOL().length === 2) {\r\n            // This model uses CRLF, so the delta must take that into account\r\n            if (deltaOffset < 0) {\r\n                deltaOffset -= lineFeedCnt;\r\n            }\r\n            else {\r\n                deltaOffset += lineFeedCnt;\r\n            }\r\n        }\r\n        var modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\r\n        var resultOffset = modelAnchorOffset + deltaOffset;\r\n        return this.model.getPositionAt(resultOffset);\r\n    };\r\n    ViewModel.prototype.getEOL = function () {\r\n        return this.model.getEOL();\r\n    };\r\n    ViewModel.prototype.getPlainTextToCopy = function (modelRanges, emptySelectionClipboard, forceCRLF) {\r\n        var newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\r\n        modelRanges = modelRanges.slice(0);\r\n        modelRanges.sort(Range.compareRangesUsingStarts);\r\n        var hasEmptyRange = false;\r\n        var hasNonEmptyRange = false;\r\n        for (var _i = 0, modelRanges_1 = modelRanges; _i < modelRanges_1.length; _i++) {\r\n            var range = modelRanges_1[_i];\r\n            if (range.isEmpty()) {\r\n                hasEmptyRange = true;\r\n            }\r\n            else {\r\n                hasNonEmptyRange = true;\r\n            }\r\n        }\r\n        if (!hasNonEmptyRange) {\r\n            // all ranges are empty\r\n            if (!emptySelectionClipboard) {\r\n                return '';\r\n            }\r\n            var modelLineNumbers = modelRanges.map(function (r) { return r.startLineNumber; });\r\n            var result_1 = '';\r\n            for (var i = 0; i < modelLineNumbers.length; i++) {\r\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\r\n                    continue;\r\n                }\r\n                result_1 += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\r\n            }\r\n            return result_1;\r\n        }\r\n        if (hasEmptyRange && emptySelectionClipboard) {\r\n            // mixed empty selections and non-empty selections\r\n            var result_2 = [];\r\n            var prevModelLineNumber = 0;\r\n            for (var _a = 0, modelRanges_2 = modelRanges; _a < modelRanges_2.length; _a++) {\r\n                var modelRange = modelRanges_2[_a];\r\n                var modelLineNumber = modelRange.startLineNumber;\r\n                if (modelRange.isEmpty()) {\r\n                    if (modelLineNumber !== prevModelLineNumber) {\r\n                        result_2.push(this.model.getLineContent(modelLineNumber));\r\n                    }\r\n                }\r\n                else {\r\n                    result_2.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* CRLF */ : 0 /* TextDefined */));\r\n                }\r\n                prevModelLineNumber = modelLineNumber;\r\n            }\r\n            return result_2.length === 1 ? result_2[0] : result_2;\r\n        }\r\n        var result = [];\r\n        for (var _b = 0, modelRanges_3 = modelRanges; _b < modelRanges_3.length; _b++) {\r\n            var modelRange = modelRanges_3[_b];\r\n            if (!modelRange.isEmpty()) {\r\n                result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* CRLF */ : 0 /* TextDefined */));\r\n            }\r\n        }\r\n        return result.length === 1 ? result[0] : result;\r\n    };\r\n    ViewModel.prototype.getRichTextToCopy = function (modelRanges, emptySelectionClipboard) {\r\n        var languageId = this.model.getLanguageIdentifier();\r\n        if (languageId.id === 1 /* PlainText */) {\r\n            return null;\r\n        }\r\n        if (modelRanges.length !== 1) {\r\n            // no multiple selection support at this time\r\n            return null;\r\n        }\r\n        var range = modelRanges[0];\r\n        if (range.isEmpty()) {\r\n            if (!emptySelectionClipboard) {\r\n                // nothing to copy\r\n                return null;\r\n            }\r\n            var lineNumber = range.startLineNumber;\r\n            range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\r\n        }\r\n        var fontInfo = this.configuration.options.get(34 /* fontInfo */);\r\n        var colorMap = this._getColorMap();\r\n        var fontFamily = fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily ? fontInfo.fontFamily : \"'\" + fontInfo.fontFamily + \"', \" + EDITOR_FONT_DEFAULTS.fontFamily;\r\n        return {\r\n            mode: languageId.language,\r\n            html: (\"<div style=\\\"\"\r\n                + (\"color: \" + colorMap[1 /* DefaultForeground */] + \";\")\r\n                + (\"background-color: \" + colorMap[2 /* DefaultBackground */] + \";\")\r\n                + (\"font-family: \" + fontFamily + \";\")\r\n                + (\"font-weight: \" + fontInfo.fontWeight + \";\")\r\n                + (\"font-size: \" + fontInfo.fontSize + \"px;\")\r\n                + (\"line-height: \" + fontInfo.lineHeight + \"px;\")\r\n                + \"white-space: pre;\"\r\n                + \"\\\">\"\r\n                + this._getHTMLToCopy(range, colorMap)\r\n                + '</div>')\r\n        };\r\n    };\r\n    ViewModel.prototype._getHTMLToCopy = function (modelRange, colorMap) {\r\n        var startLineNumber = modelRange.startLineNumber;\r\n        var startColumn = modelRange.startColumn;\r\n        var endLineNumber = modelRange.endLineNumber;\r\n        var endColumn = modelRange.endColumn;\r\n        var tabSize = this.getTabSize();\r\n        var result = '';\r\n        for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n            var lineTokens = this.model.getLineTokens(lineNumber);\r\n            var lineContent = lineTokens.getLineContent();\r\n            var startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\r\n            var endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\r\n            if (lineContent === '') {\r\n                result += '<br>';\r\n            }\r\n            else {\r\n                result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    ViewModel.prototype._getColorMap = function () {\r\n        var colorMap = TokenizationRegistry.getColorMap();\r\n        var result = ['#000000'];\r\n        if (colorMap) {\r\n            for (var i = 1, len = colorMap.length; i < len; i++) {\r\n                result[i] = Color.Format.CSS.formatHex(colorMap[i]);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    return ViewModel;\r\n}(viewEvents.ViewEventEmitter));\r\nexport { ViewModel };\r\n"]},"metadata":{},"sourceType":"module"}