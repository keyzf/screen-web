{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n\n/**\r\n * A position in the editor.\r\n */\nvar Position =\n/** @class */\nfunction () {\n  function Position(lineNumber, column) {\n    this.lineNumber = lineNumber;\n    this.column = column;\n  }\n  /**\r\n   * Create a new position from this position.\r\n   *\r\n   * @param newLineNumber new line number\r\n   * @param newColumn new column\r\n   */\n\n\n  Position.prototype.with = function (newLineNumber, newColumn) {\n    if (newLineNumber === void 0) {\n      newLineNumber = this.lineNumber;\n    }\n\n    if (newColumn === void 0) {\n      newColumn = this.column;\n    }\n\n    if (newLineNumber === this.lineNumber && newColumn === this.column) {\n      return this;\n    } else {\n      return new Position(newLineNumber, newColumn);\n    }\n  };\n  /**\r\n   * Derive a new position from this position.\r\n   *\r\n   * @param deltaLineNumber line number delta\r\n   * @param deltaColumn column delta\r\n   */\n\n\n  Position.prototype.delta = function (deltaLineNumber, deltaColumn) {\n    if (deltaLineNumber === void 0) {\n      deltaLineNumber = 0;\n    }\n\n    if (deltaColumn === void 0) {\n      deltaColumn = 0;\n    }\n\n    return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n  };\n  /**\r\n   * Test if this position equals other position\r\n   */\n\n\n  Position.prototype.equals = function (other) {\n    return Position.equals(this, other);\n  };\n  /**\r\n   * Test if position `a` equals position `b`\r\n   */\n\n\n  Position.equals = function (a, b) {\n    if (!a && !b) {\n      return true;\n    }\n\n    return !!a && !!b && a.lineNumber === b.lineNumber && a.column === b.column;\n  };\n  /**\r\n   * Test if this position is before other position.\r\n   * If the two positions are equal, the result will be false.\r\n   */\n\n\n  Position.prototype.isBefore = function (other) {\n    return Position.isBefore(this, other);\n  };\n  /**\r\n   * Test if position `a` is before position `b`.\r\n   * If the two positions are equal, the result will be false.\r\n   */\n\n\n  Position.isBefore = function (a, b) {\n    if (a.lineNumber < b.lineNumber) {\n      return true;\n    }\n\n    if (b.lineNumber < a.lineNumber) {\n      return false;\n    }\n\n    return a.column < b.column;\n  };\n  /**\r\n   * Test if this position is before other position.\r\n   * If the two positions are equal, the result will be true.\r\n   */\n\n\n  Position.prototype.isBeforeOrEqual = function (other) {\n    return Position.isBeforeOrEqual(this, other);\n  };\n  /**\r\n   * Test if position `a` is before position `b`.\r\n   * If the two positions are equal, the result will be true.\r\n   */\n\n\n  Position.isBeforeOrEqual = function (a, b) {\n    if (a.lineNumber < b.lineNumber) {\n      return true;\n    }\n\n    if (b.lineNumber < a.lineNumber) {\n      return false;\n    }\n\n    return a.column <= b.column;\n  };\n  /**\r\n   * A function that compares positions, useful for sorting\r\n   */\n\n\n  Position.compare = function (a, b) {\n    var aLineNumber = a.lineNumber | 0;\n    var bLineNumber = b.lineNumber | 0;\n\n    if (aLineNumber === bLineNumber) {\n      var aColumn = a.column | 0;\n      var bColumn = b.column | 0;\n      return aColumn - bColumn;\n    }\n\n    return aLineNumber - bLineNumber;\n  };\n  /**\r\n   * Clone this position.\r\n   */\n\n\n  Position.prototype.clone = function () {\n    return new Position(this.lineNumber, this.column);\n  };\n  /**\r\n   * Convert to a human-readable representation.\r\n   */\n\n\n  Position.prototype.toString = function () {\n    return '(' + this.lineNumber + ',' + this.column + ')';\n  }; // ---\n\n  /**\r\n   * Create a `Position` from an `IPosition`.\r\n   */\n\n\n  Position.lift = function (pos) {\n    return new Position(pos.lineNumber, pos.column);\n  };\n  /**\r\n   * Test if `obj` is an `IPosition`.\r\n   */\n\n\n  Position.isIPosition = function (obj) {\n    return obj && typeof obj.lineNumber === 'number' && typeof obj.column === 'number';\n  };\n\n  return Position;\n}();\n\nexport { Position };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/core/position.js"],"names":["Position","lineNumber","column","prototype","with","newLineNumber","newColumn","delta","deltaLineNumber","deltaColumn","equals","other","a","b","isBefore","isBeforeOrEqual","compare","aLineNumber","bLineNumber","aColumn","bColumn","clone","toString","lift","pos","isIPosition","obj"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * A position in the editor.\r\n */\r\nvar Position = /** @class */ (function () {\r\n    function Position(lineNumber, column) {\r\n        this.lineNumber = lineNumber;\r\n        this.column = column;\r\n    }\r\n    /**\r\n     * Create a new position from this position.\r\n     *\r\n     * @param newLineNumber new line number\r\n     * @param newColumn new column\r\n     */\r\n    Position.prototype.with = function (newLineNumber, newColumn) {\r\n        if (newLineNumber === void 0) { newLineNumber = this.lineNumber; }\r\n        if (newColumn === void 0) { newColumn = this.column; }\r\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\r\n            return this;\r\n        }\r\n        else {\r\n            return new Position(newLineNumber, newColumn);\r\n        }\r\n    };\r\n    /**\r\n     * Derive a new position from this position.\r\n     *\r\n     * @param deltaLineNumber line number delta\r\n     * @param deltaColumn column delta\r\n     */\r\n    Position.prototype.delta = function (deltaLineNumber, deltaColumn) {\r\n        if (deltaLineNumber === void 0) { deltaLineNumber = 0; }\r\n        if (deltaColumn === void 0) { deltaColumn = 0; }\r\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\r\n    };\r\n    /**\r\n     * Test if this position equals other position\r\n     */\r\n    Position.prototype.equals = function (other) {\r\n        return Position.equals(this, other);\r\n    };\r\n    /**\r\n     * Test if position `a` equals position `b`\r\n     */\r\n    Position.equals = function (a, b) {\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n        return (!!a &&\r\n            !!b &&\r\n            a.lineNumber === b.lineNumber &&\r\n            a.column === b.column);\r\n    };\r\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be false.\r\n     */\r\n    Position.prototype.isBefore = function (other) {\r\n        return Position.isBefore(this, other);\r\n    };\r\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be false.\r\n     */\r\n    Position.isBefore = function (a, b) {\r\n        if (a.lineNumber < b.lineNumber) {\r\n            return true;\r\n        }\r\n        if (b.lineNumber < a.lineNumber) {\r\n            return false;\r\n        }\r\n        return a.column < b.column;\r\n    };\r\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be true.\r\n     */\r\n    Position.prototype.isBeforeOrEqual = function (other) {\r\n        return Position.isBeforeOrEqual(this, other);\r\n    };\r\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be true.\r\n     */\r\n    Position.isBeforeOrEqual = function (a, b) {\r\n        if (a.lineNumber < b.lineNumber) {\r\n            return true;\r\n        }\r\n        if (b.lineNumber < a.lineNumber) {\r\n            return false;\r\n        }\r\n        return a.column <= b.column;\r\n    };\r\n    /**\r\n     * A function that compares positions, useful for sorting\r\n     */\r\n    Position.compare = function (a, b) {\r\n        var aLineNumber = a.lineNumber | 0;\r\n        var bLineNumber = b.lineNumber | 0;\r\n        if (aLineNumber === bLineNumber) {\r\n            var aColumn = a.column | 0;\r\n            var bColumn = b.column | 0;\r\n            return aColumn - bColumn;\r\n        }\r\n        return aLineNumber - bLineNumber;\r\n    };\r\n    /**\r\n     * Clone this position.\r\n     */\r\n    Position.prototype.clone = function () {\r\n        return new Position(this.lineNumber, this.column);\r\n    };\r\n    /**\r\n     * Convert to a human-readable representation.\r\n     */\r\n    Position.prototype.toString = function () {\r\n        return '(' + this.lineNumber + ',' + this.column + ')';\r\n    };\r\n    // ---\r\n    /**\r\n     * Create a `Position` from an `IPosition`.\r\n     */\r\n    Position.lift = function (pos) {\r\n        return new Position(pos.lineNumber, pos.column);\r\n    };\r\n    /**\r\n     * Test if `obj` is an `IPosition`.\r\n     */\r\n    Position.isIPosition = function (obj) {\r\n        return (obj\r\n            && (typeof obj.lineNumber === 'number')\r\n            && (typeof obj.column === 'number'));\r\n    };\r\n    return Position;\r\n}());\r\nexport { Position };\r\n"]},"metadata":{},"sourceType":"module"}