{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as nls from '../../../nls.js';\nimport { alert } from '../../../base/browser/ui/aria/aria.js';\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\nimport { TabFocus } from '../../common/config/commonEditorConfig.js';\n\nvar ToggleTabFocusModeAction =\n/** @class */\nfunction (_super) {\n  __extends(ToggleTabFocusModeAction, _super);\n\n  function ToggleTabFocusModeAction() {\n    return _super.call(this, {\n      id: ToggleTabFocusModeAction.ID,\n      label: nls.localize({\n        key: 'toggle.tabMovesFocus',\n        comment: ['Turn on/off use of tab key for moving focus around VS Code']\n      }, \"Toggle Tab Key Moves Focus\"),\n      alias: 'Toggle Tab Key Moves Focus',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: null,\n        primary: 2048\n        /* CtrlCmd */\n        | 43\n        /* KEY_M */\n        ,\n        mac: {\n          primary: 256\n          /* WinCtrl */\n          | 1024\n          /* Shift */\n          | 43\n          /* KEY_M */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  ToggleTabFocusModeAction.prototype.run = function (accessor, editor) {\n    var oldValue = TabFocus.getTabFocusMode();\n    var newValue = !oldValue;\n    TabFocus.setTabFocusMode(newValue);\n\n    if (newValue) {\n      alert(nls.localize('toggle.tabMovesFocus.on', \"Pressing Tab will now move focus to the next focusable element\"));\n    } else {\n      alert(nls.localize('toggle.tabMovesFocus.off', \"Pressing Tab will now insert the tab character\"));\n    }\n  };\n\n  ToggleTabFocusModeAction.ID = 'editor.action.toggleTabFocusMode';\n  return ToggleTabFocusModeAction;\n}(EditorAction);\n\nexport { ToggleTabFocusModeAction };\nregisterEditorAction(ToggleTabFocusModeAction);","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/contrib/toggleTabFocusMode/toggleTabFocusMode.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","nls","alert","EditorAction","registerEditorAction","TabFocus","ToggleTabFocusModeAction","_super","call","id","ID","label","localize","key","comment","alias","precondition","undefined","kbOpts","kbExpr","primary","mac","weight","run","accessor","editor","oldValue","getTabFocusMode","newValue","setTabFocusMode"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as nls from '../../../nls.js';\r\nimport { alert } from '../../../base/browser/ui/aria/aria.js';\r\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\r\nimport { TabFocus } from '../../common/config/commonEditorConfig.js';\r\nvar ToggleTabFocusModeAction = /** @class */ (function (_super) {\r\n    __extends(ToggleTabFocusModeAction, _super);\r\n    function ToggleTabFocusModeAction() {\r\n        return _super.call(this, {\r\n            id: ToggleTabFocusModeAction.ID,\r\n            label: nls.localize({ key: 'toggle.tabMovesFocus', comment: ['Turn on/off use of tab key for moving focus around VS Code'] }, \"Toggle Tab Key Moves Focus\"),\r\n            alias: 'Toggle Tab Key Moves Focus',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: null,\r\n                primary: 2048 /* CtrlCmd */ | 43 /* KEY_M */,\r\n                mac: { primary: 256 /* WinCtrl */ | 1024 /* Shift */ | 43 /* KEY_M */ },\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        }) || this;\r\n    }\r\n    ToggleTabFocusModeAction.prototype.run = function (accessor, editor) {\r\n        var oldValue = TabFocus.getTabFocusMode();\r\n        var newValue = !oldValue;\r\n        TabFocus.setTabFocusMode(newValue);\r\n        if (newValue) {\r\n            alert(nls.localize('toggle.tabMovesFocus.on', \"Pressing Tab will now move focus to the next focusable element\"));\r\n        }\r\n        else {\r\n            alert(nls.localize('toggle.tabMovesFocus.off', \"Pressing Tab will now insert the tab character\"));\r\n        }\r\n    };\r\n    ToggleTabFocusModeAction.ID = 'editor.action.toggleTabFocusMode';\r\n    return ToggleTabFocusModeAction;\r\n}(EditorAction));\r\nexport { ToggleTabFocusModeAction };\r\nregisterEditorAction(ToggleTabFocusModeAction);\r\n"]},"metadata":{},"sourceType":"module"}