{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './indentGuides.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorActiveIndentGuides, editorIndentGuides } from '../../../common/view/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\n\nvar IndentGuidesOverlay =\n/** @class */\nfunction (_super) {\n  __extends(IndentGuidesOverlay, _super);\n\n  function IndentGuidesOverlay(context) {\n    var _this = _super.call(this) || this;\n\n    _this._context = context;\n    _this._primaryLineNumber = 0;\n    var options = _this._context.configuration.options;\n    var wrappingInfo = options.get(108\n    /* wrappingInfo */\n    );\n    var fontInfo = options.get(34\n    /* fontInfo */\n    );\n    _this._lineHeight = options.get(49\n    /* lineHeight */\n    );\n    _this._spaceWidth = fontInfo.spaceWidth;\n    _this._enabled = options.get(70\n    /* renderIndentGuides */\n    );\n    _this._activeIndentEnabled = options.get(43\n    /* highlightActiveIndentGuide */\n    );\n    _this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth;\n    _this._renderResult = null;\n\n    _this._context.addEventHandler(_this);\n\n    return _this;\n  }\n\n  IndentGuidesOverlay.prototype.dispose = function () {\n    this._context.removeEventHandler(this);\n\n    this._renderResult = null;\n\n    _super.prototype.dispose.call(this);\n  }; // --- begin event handlers\n\n\n  IndentGuidesOverlay.prototype.onConfigurationChanged = function (e) {\n    var options = this._context.configuration.options;\n    var wrappingInfo = options.get(108\n    /* wrappingInfo */\n    );\n    var fontInfo = options.get(34\n    /* fontInfo */\n    );\n    this._lineHeight = options.get(49\n    /* lineHeight */\n    );\n    this._spaceWidth = fontInfo.spaceWidth;\n    this._enabled = options.get(70\n    /* renderIndentGuides */\n    );\n    this._activeIndentEnabled = options.get(43\n    /* highlightActiveIndentGuide */\n    );\n    this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth;\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onCursorStateChanged = function (e) {\n    var selection = e.selections[0];\n    var newPrimaryLineNumber = selection.isEmpty() ? selection.positionLineNumber : 0;\n\n    if (this._primaryLineNumber !== newPrimaryLineNumber) {\n      this._primaryLineNumber = newPrimaryLineNumber;\n      return true;\n    }\n\n    return false;\n  };\n\n  IndentGuidesOverlay.prototype.onDecorationsChanged = function (e) {\n    // true for inline decorations\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onFlushed = function (e) {\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onLinesChanged = function (e) {\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onLinesDeleted = function (e) {\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onLinesInserted = function (e) {\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onScrollChanged = function (e) {\n    return e.scrollTopChanged; // || e.scrollWidthChanged;\n  };\n\n  IndentGuidesOverlay.prototype.onZonesChanged = function (e) {\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onLanguageConfigurationChanged = function (e) {\n    return true;\n  }; // --- end event handlers\n\n\n  IndentGuidesOverlay.prototype.prepareRender = function (ctx) {\n    if (!this._enabled) {\n      this._renderResult = null;\n      return;\n    }\n\n    var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n    var indentSize = this._context.model.getOptions().indentSize;\n\n    var indentWidth = indentSize * this._spaceWidth;\n    var scrollWidth = ctx.scrollWidth;\n    var lineHeight = this._lineHeight;\n\n    var indents = this._context.model.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber);\n\n    var activeIndentStartLineNumber = 0;\n    var activeIndentEndLineNumber = 0;\n    var activeIndentLevel = 0;\n\n    if (this._activeIndentEnabled && this._primaryLineNumber) {\n      var activeIndentInfo = this._context.model.getActiveIndentGuide(this._primaryLineNumber, visibleStartLineNumber, visibleEndLineNumber);\n\n      activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\n      activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\n      activeIndentLevel = activeIndentInfo.indent;\n    }\n\n    var output = [];\n\n    for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      var containsActiveIndentGuide = activeIndentStartLineNumber <= lineNumber && lineNumber <= activeIndentEndLineNumber;\n      var lineIndex = lineNumber - visibleStartLineNumber;\n      var indent = indents[lineIndex];\n      var result = '';\n\n      if (indent >= 1) {\n        var leftMostVisiblePosition = ctx.visibleRangeForPosition(new Position(lineNumber, 1));\n        var left = leftMostVisiblePosition ? leftMostVisiblePosition.left : 0;\n\n        for (var i = 1; i <= indent; i++) {\n          var className = containsActiveIndentGuide && i === activeIndentLevel ? 'cigra' : 'cigr';\n          result += \"<div class=\\\"\" + className + \"\\\" style=\\\"left:\" + left + \"px;height:\" + lineHeight + \"px;width:\" + indentWidth + \"px\\\"></div>\";\n          left += indentWidth;\n\n          if (left > scrollWidth || this._maxIndentLeft > 0 && left > this._maxIndentLeft) {\n            break;\n          }\n        }\n      }\n\n      output[lineIndex] = result;\n    }\n\n    this._renderResult = output;\n  };\n\n  IndentGuidesOverlay.prototype.render = function (startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n\n    var lineIndex = lineNumber - startLineNumber;\n\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n\n    return this._renderResult[lineIndex];\n  };\n\n  return IndentGuidesOverlay;\n}(DynamicViewOverlay);\n\nexport { IndentGuidesOverlay };\nregisterThemingParticipant(function (theme, collector) {\n  var editorIndentGuidesColor = theme.getColor(editorIndentGuides);\n\n  if (editorIndentGuidesColor) {\n    collector.addRule(\".monaco-editor .lines-content .cigr { box-shadow: 1px 0 0 0 \" + editorIndentGuidesColor + \" inset; }\");\n  }\n\n  var editorActiveIndentGuidesColor = theme.getColor(editorActiveIndentGuides) || editorIndentGuidesColor;\n\n  if (editorActiveIndentGuidesColor) {\n    collector.addRule(\".monaco-editor .lines-content .cigra { box-shadow: 1px 0 0 0 \" + editorActiveIndentGuidesColor + \" inset; }\");\n  }\n});","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/indentGuides/indentGuides.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","DynamicViewOverlay","Position","editorActiveIndentGuides","editorIndentGuides","registerThemingParticipant","IndentGuidesOverlay","_super","context","_this","call","_context","_primaryLineNumber","options","configuration","wrappingInfo","get","fontInfo","_lineHeight","_spaceWidth","spaceWidth","_enabled","_activeIndentEnabled","_maxIndentLeft","wrappingColumn","typicalHalfwidthCharacterWidth","_renderResult","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","e","onCursorStateChanged","selection","selections","newPrimaryLineNumber","isEmpty","positionLineNumber","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","onLanguageConfigurationChanged","prepareRender","ctx","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","indentSize","model","getOptions","indentWidth","scrollWidth","lineHeight","indents","getLinesIndentGuides","activeIndentStartLineNumber","activeIndentEndLineNumber","activeIndentLevel","activeIndentInfo","getActiveIndentGuide","indent","output","lineNumber","containsActiveIndentGuide","lineIndex","result","leftMostVisiblePosition","visibleRangeForPosition","left","i","className","render","length","theme","collector","editorIndentGuidesColor","getColor","addRule","editorActiveIndentGuidesColor"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport './indentGuides.css';\r\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\r\nimport { Position } from '../../../common/core/position.js';\r\nimport { editorActiveIndentGuides, editorIndentGuides } from '../../../common/view/editorColorRegistry.js';\r\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\r\nvar IndentGuidesOverlay = /** @class */ (function (_super) {\r\n    __extends(IndentGuidesOverlay, _super);\r\n    function IndentGuidesOverlay(context) {\r\n        var _this = _super.call(this) || this;\r\n        _this._context = context;\r\n        _this._primaryLineNumber = 0;\r\n        var options = _this._context.configuration.options;\r\n        var wrappingInfo = options.get(108 /* wrappingInfo */);\r\n        var fontInfo = options.get(34 /* fontInfo */);\r\n        _this._lineHeight = options.get(49 /* lineHeight */);\r\n        _this._spaceWidth = fontInfo.spaceWidth;\r\n        _this._enabled = options.get(70 /* renderIndentGuides */);\r\n        _this._activeIndentEnabled = options.get(43 /* highlightActiveIndentGuide */);\r\n        _this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\r\n        _this._renderResult = null;\r\n        _this._context.addEventHandler(_this);\r\n        return _this;\r\n    }\r\n    IndentGuidesOverlay.prototype.dispose = function () {\r\n        this._context.removeEventHandler(this);\r\n        this._renderResult = null;\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    // --- begin event handlers\r\n    IndentGuidesOverlay.prototype.onConfigurationChanged = function (e) {\r\n        var options = this._context.configuration.options;\r\n        var wrappingInfo = options.get(108 /* wrappingInfo */);\r\n        var fontInfo = options.get(34 /* fontInfo */);\r\n        this._lineHeight = options.get(49 /* lineHeight */);\r\n        this._spaceWidth = fontInfo.spaceWidth;\r\n        this._enabled = options.get(70 /* renderIndentGuides */);\r\n        this._activeIndentEnabled = options.get(43 /* highlightActiveIndentGuide */);\r\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\r\n        return true;\r\n    };\r\n    IndentGuidesOverlay.prototype.onCursorStateChanged = function (e) {\r\n        var selection = e.selections[0];\r\n        var newPrimaryLineNumber = selection.isEmpty() ? selection.positionLineNumber : 0;\r\n        if (this._primaryLineNumber !== newPrimaryLineNumber) {\r\n            this._primaryLineNumber = newPrimaryLineNumber;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    IndentGuidesOverlay.prototype.onDecorationsChanged = function (e) {\r\n        // true for inline decorations\r\n        return true;\r\n    };\r\n    IndentGuidesOverlay.prototype.onFlushed = function (e) {\r\n        return true;\r\n    };\r\n    IndentGuidesOverlay.prototype.onLinesChanged = function (e) {\r\n        return true;\r\n    };\r\n    IndentGuidesOverlay.prototype.onLinesDeleted = function (e) {\r\n        return true;\r\n    };\r\n    IndentGuidesOverlay.prototype.onLinesInserted = function (e) {\r\n        return true;\r\n    };\r\n    IndentGuidesOverlay.prototype.onScrollChanged = function (e) {\r\n        return e.scrollTopChanged; // || e.scrollWidthChanged;\r\n    };\r\n    IndentGuidesOverlay.prototype.onZonesChanged = function (e) {\r\n        return true;\r\n    };\r\n    IndentGuidesOverlay.prototype.onLanguageConfigurationChanged = function (e) {\r\n        return true;\r\n    };\r\n    // --- end event handlers\r\n    IndentGuidesOverlay.prototype.prepareRender = function (ctx) {\r\n        if (!this._enabled) {\r\n            this._renderResult = null;\r\n            return;\r\n        }\r\n        var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\r\n        var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\r\n        var indentSize = this._context.model.getOptions().indentSize;\r\n        var indentWidth = indentSize * this._spaceWidth;\r\n        var scrollWidth = ctx.scrollWidth;\r\n        var lineHeight = this._lineHeight;\r\n        var indents = this._context.model.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber);\r\n        var activeIndentStartLineNumber = 0;\r\n        var activeIndentEndLineNumber = 0;\r\n        var activeIndentLevel = 0;\r\n        if (this._activeIndentEnabled && this._primaryLineNumber) {\r\n            var activeIndentInfo = this._context.model.getActiveIndentGuide(this._primaryLineNumber, visibleStartLineNumber, visibleEndLineNumber);\r\n            activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\r\n            activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\r\n            activeIndentLevel = activeIndentInfo.indent;\r\n        }\r\n        var output = [];\r\n        for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\r\n            var containsActiveIndentGuide = (activeIndentStartLineNumber <= lineNumber && lineNumber <= activeIndentEndLineNumber);\r\n            var lineIndex = lineNumber - visibleStartLineNumber;\r\n            var indent = indents[lineIndex];\r\n            var result = '';\r\n            if (indent >= 1) {\r\n                var leftMostVisiblePosition = ctx.visibleRangeForPosition(new Position(lineNumber, 1));\r\n                var left = leftMostVisiblePosition ? leftMostVisiblePosition.left : 0;\r\n                for (var i = 1; i <= indent; i++) {\r\n                    var className = (containsActiveIndentGuide && i === activeIndentLevel ? 'cigra' : 'cigr');\r\n                    result += \"<div class=\\\"\" + className + \"\\\" style=\\\"left:\" + left + \"px;height:\" + lineHeight + \"px;width:\" + indentWidth + \"px\\\"></div>\";\r\n                    left += indentWidth;\r\n                    if (left > scrollWidth || (this._maxIndentLeft > 0 && left > this._maxIndentLeft)) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            output[lineIndex] = result;\r\n        }\r\n        this._renderResult = output;\r\n    };\r\n    IndentGuidesOverlay.prototype.render = function (startLineNumber, lineNumber) {\r\n        if (!this._renderResult) {\r\n            return '';\r\n        }\r\n        var lineIndex = lineNumber - startLineNumber;\r\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\r\n            return '';\r\n        }\r\n        return this._renderResult[lineIndex];\r\n    };\r\n    return IndentGuidesOverlay;\r\n}(DynamicViewOverlay));\r\nexport { IndentGuidesOverlay };\r\nregisterThemingParticipant(function (theme, collector) {\r\n    var editorIndentGuidesColor = theme.getColor(editorIndentGuides);\r\n    if (editorIndentGuidesColor) {\r\n        collector.addRule(\".monaco-editor .lines-content .cigr { box-shadow: 1px 0 0 0 \" + editorIndentGuidesColor + \" inset; }\");\r\n    }\r\n    var editorActiveIndentGuidesColor = theme.getColor(editorActiveIndentGuides) || editorIndentGuidesColor;\r\n    if (editorActiveIndentGuidesColor) {\r\n        collector.addRule(\".monaco-editor .lines-content .cigra { box-shadow: 1px 0 0 0 \" + editorActiveIndentGuidesColor + \" inset; }\");\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}