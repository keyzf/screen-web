{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorCollection } from './cursorCollection.js';\nimport { CursorColumns, CursorConfiguration, CursorContext, CursorState, EditOperationResult } from './cursorCommon.js';\nimport { DeleteOperations } from './cursorDeleteOperations.js';\nimport { TypeOperations, TypeWithAutoClosingCommand } from './cursorTypeOperations.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport * as editorCommon from '../editorCommon.js';\nimport * as viewEvents from '../view/viewEvents.js';\nimport { dispose } from '../../../base/common/lifecycle.js';\n\nfunction containsLineMappingChanged(events) {\n  for (var i = 0, len = events.length; i < len; i++) {\n    if (events[i].type === 8\n    /* ViewLineMappingChanged */\n    ) {\n        return true;\n      }\n  }\n\n  return false;\n}\n\nvar CursorStateChangedEvent =\n/** @class */\nfunction () {\n  function CursorStateChangedEvent(selections, modelVersionId, oldSelections, oldModelVersionId, source, reason) {\n    this.selections = selections;\n    this.modelVersionId = modelVersionId;\n    this.oldSelections = oldSelections;\n    this.oldModelVersionId = oldModelVersionId;\n    this.source = source;\n    this.reason = reason;\n  }\n\n  return CursorStateChangedEvent;\n}();\n\nexport { CursorStateChangedEvent };\n/**\r\n * A snapshot of the cursor and the model state\r\n */\n\nvar CursorModelState =\n/** @class */\nfunction () {\n  function CursorModelState(model, cursor) {\n    this.modelVersionId = model.getVersionId();\n    this.cursorState = cursor.getAll();\n  }\n\n  CursorModelState.prototype.equals = function (other) {\n    if (!other) {\n      return false;\n    }\n\n    if (this.modelVersionId !== other.modelVersionId) {\n      return false;\n    }\n\n    if (this.cursorState.length !== other.cursorState.length) {\n      return false;\n    }\n\n    for (var i = 0, len = this.cursorState.length; i < len; i++) {\n      if (!this.cursorState[i].equals(other.cursorState[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  return CursorModelState;\n}();\n\nexport { CursorModelState };\n\nvar AutoClosedAction =\n/** @class */\nfunction () {\n  function AutoClosedAction(model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations) {\n    this._model = model;\n    this._autoClosedCharactersDecorations = autoClosedCharactersDecorations;\n    this._autoClosedEnclosingDecorations = autoClosedEnclosingDecorations;\n  }\n\n  AutoClosedAction.getAllAutoClosedCharacters = function (autoClosedActions) {\n    var autoClosedCharacters = [];\n\n    for (var _i = 0, autoClosedActions_1 = autoClosedActions; _i < autoClosedActions_1.length; _i++) {\n      var autoClosedAction = autoClosedActions_1[_i];\n      autoClosedCharacters = autoClosedCharacters.concat(autoClosedAction.getAutoClosedCharactersRanges());\n    }\n\n    return autoClosedCharacters;\n  };\n\n  AutoClosedAction.prototype.dispose = function () {\n    this._autoClosedCharactersDecorations = this._model.deltaDecorations(this._autoClosedCharactersDecorations, []);\n    this._autoClosedEnclosingDecorations = this._model.deltaDecorations(this._autoClosedEnclosingDecorations, []);\n  };\n\n  AutoClosedAction.prototype.getAutoClosedCharactersRanges = function () {\n    var result = [];\n\n    for (var i = 0; i < this._autoClosedCharactersDecorations.length; i++) {\n      var decorationRange = this._model.getDecorationRange(this._autoClosedCharactersDecorations[i]);\n\n      if (decorationRange) {\n        result.push(decorationRange);\n      }\n    }\n\n    return result;\n  };\n\n  AutoClosedAction.prototype.isValid = function (selections) {\n    var enclosingRanges = [];\n\n    for (var i = 0; i < this._autoClosedEnclosingDecorations.length; i++) {\n      var decorationRange = this._model.getDecorationRange(this._autoClosedEnclosingDecorations[i]);\n\n      if (decorationRange) {\n        enclosingRanges.push(decorationRange);\n\n        if (decorationRange.startLineNumber !== decorationRange.endLineNumber) {\n          // Stop tracking if the range becomes multiline...\n          return false;\n        }\n      }\n    }\n\n    enclosingRanges.sort(Range.compareRangesUsingStarts);\n    selections.sort(Range.compareRangesUsingStarts);\n\n    for (var i = 0; i < selections.length; i++) {\n      if (i >= enclosingRanges.length) {\n        return false;\n      }\n\n      if (!enclosingRanges[i].strictContainsRange(selections[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  return AutoClosedAction;\n}();\n\nvar Cursor =\n/** @class */\nfunction (_super) {\n  __extends(Cursor, _super);\n\n  function Cursor(configuration, model, viewModel) {\n    var _this = _super.call(this) || this;\n\n    _this._onDidReachMaxCursorCount = _this._register(new Emitter());\n    _this.onDidReachMaxCursorCount = _this._onDidReachMaxCursorCount.event;\n    _this._onDidAttemptReadOnlyEdit = _this._register(new Emitter());\n    _this.onDidAttemptReadOnlyEdit = _this._onDidAttemptReadOnlyEdit.event;\n    _this._onDidChange = _this._register(new Emitter());\n    _this.onDidChange = _this._onDidChange.event;\n    _this._configuration = configuration;\n    _this._model = model;\n    _this._knownModelVersionId = _this._model.getVersionId();\n    _this._viewModel = viewModel;\n    _this.context = new CursorContext(_this._configuration, _this._model, _this._viewModel);\n    _this._cursors = new CursorCollection(_this.context);\n    _this._isHandling = false;\n    _this._isDoingComposition = false;\n    _this._selectionsWhenCompositionStarted = null;\n    _this._columnSelectData = null;\n    _this._autoClosedActions = [];\n    _this._prevEditOperationType = 0\n    /* Other */\n    ;\n\n    _this._register(_this._model.onDidChangeRawContent(function (e) {\n      _this._knownModelVersionId = e.versionId;\n\n      if (_this._isHandling) {\n        return;\n      }\n\n      var hadFlushEvent = e.containsEvent(1\n      /* Flush */\n      );\n\n      _this._onModelContentChanged(hadFlushEvent);\n    }));\n\n    _this._register(viewModel.addEventListener(function (events) {\n      if (!containsLineMappingChanged(events)) {\n        return;\n      }\n\n      if (_this._knownModelVersionId !== _this._model.getVersionId()) {\n        // There are model change events that I didn't yet receive.\n        //\n        // This can happen when editing the model, and the view model receives the change events first,\n        // and the view model emits line mapping changed events, all before the cursor gets a chance to\n        // recover from markers.\n        //\n        // The model change listener above will be called soon and we'll ensure a valid cursor state there.\n        return;\n      } // Ensure valid state\n\n\n      _this.setStates('viewModel', 0\n      /* NotSet */\n      , _this.getAll());\n    }));\n\n    var updateCursorContext = function () {\n      _this.context = new CursorContext(_this._configuration, _this._model, _this._viewModel);\n\n      _this._cursors.updateContext(_this.context);\n    };\n\n    _this._register(_this._model.onDidChangeLanguage(function (e) {\n      updateCursorContext();\n    }));\n\n    _this._register(_this._model.onDidChangeLanguageConfiguration(function () {\n      updateCursorContext();\n    }));\n\n    _this._register(_this._model.onDidChangeOptions(function () {\n      updateCursorContext();\n    }));\n\n    _this._register(_this._configuration.onDidChange(function (e) {\n      if (CursorConfiguration.shouldRecreate(e)) {\n        updateCursorContext();\n      }\n    }));\n\n    return _this;\n  }\n\n  Cursor.prototype.dispose = function () {\n    this._cursors.dispose();\n\n    this._autoClosedActions = dispose(this._autoClosedActions);\n\n    _super.prototype.dispose.call(this);\n  };\n\n  Cursor.prototype._validateAutoClosedActions = function () {\n    if (this._autoClosedActions.length > 0) {\n      var selections = this._cursors.getSelections();\n\n      for (var i = 0; i < this._autoClosedActions.length; i++) {\n        var autoClosedAction = this._autoClosedActions[i];\n\n        if (!autoClosedAction.isValid(selections)) {\n          autoClosedAction.dispose();\n\n          this._autoClosedActions.splice(i, 1);\n\n          i--;\n        }\n      }\n    }\n  }; // ------ some getters/setters\n\n\n  Cursor.prototype.getPrimaryCursor = function () {\n    return this._cursors.getPrimaryCursor();\n  };\n\n  Cursor.prototype.getLastAddedCursorIndex = function () {\n    return this._cursors.getLastAddedCursorIndex();\n  };\n\n  Cursor.prototype.getAll = function () {\n    return this._cursors.getAll();\n  };\n\n  Cursor.prototype.setStates = function (source, reason, states) {\n    if (states !== null && states.length > Cursor.MAX_CURSOR_COUNT) {\n      states = states.slice(0, Cursor.MAX_CURSOR_COUNT);\n\n      this._onDidReachMaxCursorCount.fire(undefined);\n    }\n\n    var oldState = new CursorModelState(this._model, this);\n\n    this._cursors.setStates(states);\n\n    this._cursors.normalize();\n\n    this._columnSelectData = null;\n\n    this._validateAutoClosedActions();\n\n    this._emitStateChangedIfNecessary(source, reason, oldState);\n  };\n\n  Cursor.prototype.setColumnSelectData = function (columnSelectData) {\n    this._columnSelectData = columnSelectData;\n  };\n\n  Cursor.prototype.reveal = function (source, horizontal, target, scrollType) {\n    this._revealRange(source, target, 0\n    /* Simple */\n    , horizontal, scrollType);\n  };\n\n  Cursor.prototype.revealRange = function (source, revealHorizontal, viewRange, verticalType, scrollType) {\n    this.emitCursorRevealRange(source, viewRange, verticalType, revealHorizontal, scrollType);\n  };\n\n  Cursor.prototype.scrollTo = function (desiredScrollTop) {\n    this._viewModel.viewLayout.setScrollPositionSmooth({\n      scrollTop: desiredScrollTop\n    });\n  };\n\n  Cursor.prototype.saveState = function () {\n    var result = [];\n\n    var selections = this._cursors.getSelections();\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      result.push({\n        inSelectionMode: !selection.isEmpty(),\n        selectionStart: {\n          lineNumber: selection.selectionStartLineNumber,\n          column: selection.selectionStartColumn\n        },\n        position: {\n          lineNumber: selection.positionLineNumber,\n          column: selection.positionColumn\n        }\n      });\n    }\n\n    return result;\n  };\n\n  Cursor.prototype.restoreState = function (states) {\n    var desiredSelections = [];\n\n    for (var i = 0, len = states.length; i < len; i++) {\n      var state = states[i];\n      var positionLineNumber = 1;\n      var positionColumn = 1; // Avoid missing properties on the literal\n\n      if (state.position && state.position.lineNumber) {\n        positionLineNumber = state.position.lineNumber;\n      }\n\n      if (state.position && state.position.column) {\n        positionColumn = state.position.column;\n      }\n\n      var selectionStartLineNumber = positionLineNumber;\n      var selectionStartColumn = positionColumn; // Avoid missing properties on the literal\n\n      if (state.selectionStart && state.selectionStart.lineNumber) {\n        selectionStartLineNumber = state.selectionStart.lineNumber;\n      }\n\n      if (state.selectionStart && state.selectionStart.column) {\n        selectionStartColumn = state.selectionStart.column;\n      }\n\n      desiredSelections.push({\n        selectionStartLineNumber: selectionStartLineNumber,\n        selectionStartColumn: selectionStartColumn,\n        positionLineNumber: positionLineNumber,\n        positionColumn: positionColumn\n      });\n    }\n\n    this.setStates('restoreState', 0\n    /* NotSet */\n    , CursorState.fromModelSelections(desiredSelections));\n    this.reveal('restoreState', true, 0\n    /* Primary */\n    , 1\n    /* Immediate */\n    );\n  };\n\n  Cursor.prototype._onModelContentChanged = function (hadFlushEvent) {\n    this._prevEditOperationType = 0\n    /* Other */\n    ;\n\n    if (hadFlushEvent) {\n      // a model.setValue() was called\n      this._cursors.dispose();\n\n      this._cursors = new CursorCollection(this.context);\n\n      this._validateAutoClosedActions();\n\n      this._emitStateChangedIfNecessary('model', 1\n      /* ContentFlush */\n      , null);\n    } else {\n      var selectionsFromMarkers = this._cursors.readSelectionFromMarkers();\n\n      this.setStates('modelChange', 2\n      /* RecoverFromMarkers */\n      , CursorState.fromModelSelections(selectionsFromMarkers));\n    }\n  };\n\n  Cursor.prototype.getSelection = function () {\n    return this._cursors.getPrimaryCursor().modelState.selection;\n  };\n\n  Cursor.prototype.getColumnSelectData = function () {\n    if (this._columnSelectData) {\n      return this._columnSelectData;\n    }\n\n    var primaryCursor = this._cursors.getPrimaryCursor();\n\n    var primaryPos = primaryCursor.viewState.selectionStart.getStartPosition();\n    var viewLineNumber = primaryPos.lineNumber;\n    var viewVisualColumn = CursorColumns.visibleColumnFromColumn2(this.context.config, this.context.viewModel, primaryPos);\n    return {\n      isReal: false,\n      fromViewLineNumber: viewLineNumber,\n      fromViewVisualColumn: viewVisualColumn,\n      toViewLineNumber: viewLineNumber,\n      toViewVisualColumn: viewVisualColumn\n    };\n  };\n\n  Cursor.prototype.getSelections = function () {\n    return this._cursors.getSelections();\n  };\n\n  Cursor.prototype.getViewSelections = function () {\n    return this._cursors.getViewSelections();\n  };\n\n  Cursor.prototype.getPosition = function () {\n    return this._cursors.getPrimaryCursor().modelState.position;\n  };\n\n  Cursor.prototype.setSelections = function (source, selections) {\n    this.setStates(source, 0\n    /* NotSet */\n    , CursorState.fromModelSelections(selections));\n  };\n\n  Cursor.prototype.getPrevEditOperationType = function () {\n    return this._prevEditOperationType;\n  };\n\n  Cursor.prototype.setPrevEditOperationType = function (type) {\n    this._prevEditOperationType = type;\n  }; // ------ auxiliary handling logic\n\n\n  Cursor.prototype._pushAutoClosedAction = function (autoClosedCharactersRanges, autoClosedEnclosingRanges) {\n    var autoClosedCharactersDeltaDecorations = [];\n    var autoClosedEnclosingDeltaDecorations = [];\n\n    for (var i = 0, len = autoClosedCharactersRanges.length; i < len; i++) {\n      autoClosedCharactersDeltaDecorations.push({\n        range: autoClosedCharactersRanges[i],\n        options: {\n          inlineClassName: 'auto-closed-character',\n          stickiness: 1\n          /* NeverGrowsWhenTypingAtEdges */\n\n        }\n      });\n      autoClosedEnclosingDeltaDecorations.push({\n        range: autoClosedEnclosingRanges[i],\n        options: {\n          stickiness: 1\n          /* NeverGrowsWhenTypingAtEdges */\n\n        }\n      });\n    }\n\n    var autoClosedCharactersDecorations = this._model.deltaDecorations([], autoClosedCharactersDeltaDecorations);\n\n    var autoClosedEnclosingDecorations = this._model.deltaDecorations([], autoClosedEnclosingDeltaDecorations);\n\n    this._autoClosedActions.push(new AutoClosedAction(this._model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations));\n  };\n\n  Cursor.prototype._executeEditOperation = function (opResult) {\n    if (!opResult) {\n      // Nothing to execute\n      return;\n    }\n\n    if (opResult.shouldPushStackElementBefore) {\n      this._model.pushStackElement();\n    }\n\n    var result = CommandExecutor.executeCommands(this._model, this._cursors.getSelections(), opResult.commands);\n\n    if (result) {\n      // The commands were applied correctly\n      this._interpretCommandResult(result); // Check for auto-closing closed characters\n\n\n      var autoClosedCharactersRanges = [];\n      var autoClosedEnclosingRanges = [];\n\n      for (var i = 0; i < opResult.commands.length; i++) {\n        var command = opResult.commands[i];\n\n        if (command instanceof TypeWithAutoClosingCommand && command.enclosingRange && command.closeCharacterRange) {\n          autoClosedCharactersRanges.push(command.closeCharacterRange);\n          autoClosedEnclosingRanges.push(command.enclosingRange);\n        }\n      }\n\n      if (autoClosedCharactersRanges.length > 0) {\n        this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\n      }\n\n      this._prevEditOperationType = opResult.type;\n    }\n\n    if (opResult.shouldPushStackElementAfter) {\n      this._model.pushStackElement();\n    }\n  };\n\n  Cursor.prototype._interpretCommandResult = function (cursorState) {\n    if (!cursorState || cursorState.length === 0) {\n      cursorState = this._cursors.readSelectionFromMarkers();\n    }\n\n    this._columnSelectData = null;\n\n    this._cursors.setSelections(cursorState);\n\n    this._cursors.normalize();\n  }; // -----------------------------------------------------------------------------------------------------------\n  // ----- emitting events\n\n\n  Cursor.prototype._emitStateChangedIfNecessary = function (source, reason, oldState) {\n    var newState = new CursorModelState(this._model, this);\n\n    if (newState.equals(oldState)) {\n      return false;\n    }\n\n    var selections = this._cursors.getSelections();\n\n    var viewSelections = this._cursors.getViewSelections(); // Let the view get the event first.\n\n\n    try {\n      var eventsCollector = this._beginEmit();\n\n      eventsCollector.emit(new viewEvents.ViewCursorStateChangedEvent(viewSelections, selections));\n    } finally {\n      this._endEmit();\n    } // Only after the view has been notified, let the rest of the world know...\n\n\n    if (!oldState || oldState.cursorState.length !== newState.cursorState.length || newState.cursorState.some(function (newCursorState, i) {\n      return !newCursorState.modelState.equals(oldState.cursorState[i].modelState);\n    })) {\n      var oldSelections = oldState ? oldState.cursorState.map(function (s) {\n        return s.modelState.selection;\n      }) : null;\n      var oldModelVersionId = oldState ? oldState.modelVersionId : 0;\n\n      this._onDidChange.fire(new CursorStateChangedEvent(selections, newState.modelVersionId, oldSelections, oldModelVersionId, source || 'keyboard', reason));\n    }\n\n    return true;\n  };\n\n  Cursor.prototype._revealRange = function (source, revealTarget, verticalType, revealHorizontal, scrollType) {\n    var viewPositions = this._cursors.getViewPositions();\n\n    var viewPosition = viewPositions[0];\n\n    if (revealTarget === 1\n    /* TopMost */\n    ) {\n        for (var i = 1; i < viewPositions.length; i++) {\n          if (viewPositions[i].isBefore(viewPosition)) {\n            viewPosition = viewPositions[i];\n          }\n        }\n      } else if (revealTarget === 2\n    /* BottomMost */\n    ) {\n        for (var i = 1; i < viewPositions.length; i++) {\n          if (viewPosition.isBeforeOrEqual(viewPositions[i])) {\n            viewPosition = viewPositions[i];\n          }\n        }\n      } else {\n      if (viewPositions.length > 1) {\n        // no revealing!\n        return;\n      }\n    }\n\n    var viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n    this.emitCursorRevealRange(source, viewRange, verticalType, revealHorizontal, scrollType);\n  };\n\n  Cursor.prototype.emitCursorRevealRange = function (source, viewRange, verticalType, revealHorizontal, scrollType) {\n    try {\n      var eventsCollector = this._beginEmit();\n\n      eventsCollector.emit(new viewEvents.ViewRevealRangeRequestEvent(source, viewRange, verticalType, revealHorizontal, scrollType));\n    } finally {\n      this._endEmit();\n    }\n  }; // -----------------------------------------------------------------------------------------------------------\n  // ----- handlers beyond this point\n\n\n  Cursor.prototype._findAutoClosingPairs = function (edits) {\n    if (!edits.length) {\n      return null;\n    }\n\n    var indices = [];\n\n    for (var i = 0, len = edits.length; i < len; i++) {\n      var edit = edits[i];\n\n      if (!edit.text || edit.text.indexOf('\\n') >= 0) {\n        return null;\n      }\n\n      var m = edit.text.match(/([)\\]}>'\"`])([^)\\]}>'\"`]*)$/);\n\n      if (!m) {\n        return null;\n      }\n\n      var closeChar = m[1];\n      var autoClosingPairsCandidates = this.context.config.autoClosingPairsClose2.get(closeChar);\n\n      if (!autoClosingPairsCandidates || autoClosingPairsCandidates.length !== 1) {\n        return null;\n      }\n\n      var openChar = autoClosingPairsCandidates[0].open;\n      var closeCharIndex = edit.text.length - m[2].length - 1;\n      var openCharIndex = edit.text.lastIndexOf(openChar, closeCharIndex - 1);\n\n      if (openCharIndex === -1) {\n        return null;\n      }\n\n      indices.push([openCharIndex, closeCharIndex]);\n    }\n\n    return indices;\n  };\n\n  Cursor.prototype.executeEdits = function (source, edits, cursorStateComputer) {\n    var _this = this;\n\n    var autoClosingIndices = null;\n\n    if (source === 'snippet') {\n      autoClosingIndices = this._findAutoClosingPairs(edits);\n    }\n\n    if (autoClosingIndices) {\n      edits[0]._isTracked = true;\n    }\n\n    var autoClosedCharactersRanges = [];\n    var autoClosedEnclosingRanges = [];\n\n    var selections = this._model.pushEditOperations(this.getSelections(), edits, function (undoEdits) {\n      if (autoClosingIndices) {\n        for (var i = 0, len = autoClosingIndices.length; i < len; i++) {\n          var _a = autoClosingIndices[i],\n              openCharInnerIndex = _a[0],\n              closeCharInnerIndex = _a[1];\n          var undoEdit = undoEdits[i];\n          var lineNumber = undoEdit.range.startLineNumber;\n          var openCharIndex = undoEdit.range.startColumn - 1 + openCharInnerIndex;\n          var closeCharIndex = undoEdit.range.startColumn - 1 + closeCharInnerIndex;\n          autoClosedCharactersRanges.push(new Range(lineNumber, closeCharIndex + 1, lineNumber, closeCharIndex + 2));\n          autoClosedEnclosingRanges.push(new Range(lineNumber, openCharIndex + 1, lineNumber, closeCharIndex + 2));\n        }\n      }\n\n      var selections = cursorStateComputer(undoEdits);\n\n      if (selections) {\n        // Don't recover the selection from markers because\n        // we know what it should be.\n        _this._isHandling = true;\n      }\n\n      return selections;\n    });\n\n    if (selections) {\n      this._isHandling = false;\n      this.setSelections(source, selections);\n    }\n\n    if (autoClosedCharactersRanges.length > 0) {\n      this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\n    }\n  };\n\n  Cursor.prototype.trigger = function (source, handlerId, payload) {\n    var H = editorCommon.Handler;\n\n    if (handlerId === H.CompositionStart) {\n      this._isDoingComposition = true;\n      this._selectionsWhenCompositionStarted = this.getSelections().slice(0);\n      return;\n    }\n\n    if (handlerId === H.CompositionEnd) {\n      this._isDoingComposition = false;\n    }\n\n    if (this._configuration.options.get(68\n    /* readOnly */\n    )) {\n      // All the remaining handlers will try to edit the model,\n      // but we cannot edit when read only...\n      this._onDidAttemptReadOnlyEdit.fire(undefined);\n\n      return;\n    }\n\n    var oldState = new CursorModelState(this._model, this);\n    var cursorChangeReason = 0\n    /* NotSet */\n    ;\n\n    if (handlerId !== H.Undo && handlerId !== H.Redo) {\n      // TODO@Alex: if the undo/redo stack contains non-null selections\n      // it would also be OK to stop tracking selections here\n      this._cursors.stopTrackingSelections();\n    } // ensure valid state on all cursors\n\n\n    this._cursors.ensureValidState();\n\n    this._isHandling = true;\n\n    try {\n      switch (handlerId) {\n        case H.Type:\n          this._type(source, payload.text);\n\n          break;\n\n        case H.ReplacePreviousChar:\n          this._replacePreviousChar(payload.text, payload.replaceCharCnt);\n\n          break;\n\n        case H.Paste:\n          cursorChangeReason = 4\n          /* Paste */\n          ;\n\n          this._paste(payload.text, payload.pasteOnNewLine, payload.multicursorText || []);\n\n          break;\n\n        case H.Cut:\n          this._cut();\n\n          break;\n\n        case H.Undo:\n          cursorChangeReason = 5\n          /* Undo */\n          ;\n\n          this._interpretCommandResult(this._model.undo());\n\n          break;\n\n        case H.Redo:\n          cursorChangeReason = 6\n          /* Redo */\n          ;\n\n          this._interpretCommandResult(this._model.redo());\n\n          break;\n\n        case H.ExecuteCommand:\n          this._externalExecuteCommand(payload);\n\n          break;\n\n        case H.ExecuteCommands:\n          this._externalExecuteCommands(payload);\n\n          break;\n\n        case H.CompositionEnd:\n          this._interpretCompositionEnd(source);\n\n          break;\n      }\n    } catch (err) {\n      onUnexpectedError(err);\n    }\n\n    this._isHandling = false;\n\n    if (handlerId !== H.Undo && handlerId !== H.Redo) {\n      this._cursors.startTrackingSelections();\n    }\n\n    this._validateAutoClosedActions();\n\n    if (this._emitStateChangedIfNecessary(source, cursorChangeReason, oldState)) {\n      this._revealRange(source, 0\n      /* Primary */\n      , 0\n      /* Simple */\n      , true, 0\n      /* Smooth */\n      );\n    }\n  };\n\n  Cursor.prototype._interpretCompositionEnd = function (source) {\n    if (!this._isDoingComposition && source === 'keyboard') {\n      // composition finishes, let's check if we need to auto complete if necessary.\n      var autoClosedCharacters = AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\n\n      this._executeEditOperation(TypeOperations.compositionEndWithInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this._selectionsWhenCompositionStarted, this.getSelections(), autoClosedCharacters));\n\n      this._selectionsWhenCompositionStarted = null;\n    }\n  };\n\n  Cursor.prototype._type = function (source, text) {\n    if (!this._isDoingComposition && source === 'keyboard') {\n      // If this event is coming straight from the keyboard, look for electric characters and enter\n      var len = text.length;\n      var offset = 0;\n\n      while (offset < len) {\n        var charLength = strings.nextCharLength(text, offset);\n        var chr = text.substr(offset, charLength); // Here we must interpret each typed character individually\n\n        var autoClosedCharacters = AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\n\n        this._executeEditOperation(TypeOperations.typeWithInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), autoClosedCharacters, chr));\n\n        offset += charLength;\n      }\n    } else {\n      this._executeEditOperation(TypeOperations.typeWithoutInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), text));\n    }\n  };\n\n  Cursor.prototype._replacePreviousChar = function (text, replaceCharCnt) {\n    this._executeEditOperation(TypeOperations.replacePreviousChar(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), text, replaceCharCnt));\n  };\n\n  Cursor.prototype._paste = function (text, pasteOnNewLine, multicursorText) {\n    this._executeEditOperation(TypeOperations.paste(this.context.config, this.context.model, this.getSelections(), text, pasteOnNewLine, multicursorText));\n  };\n\n  Cursor.prototype._cut = function () {\n    this._executeEditOperation(DeleteOperations.cut(this.context.config, this.context.model, this.getSelections()));\n  };\n\n  Cursor.prototype._externalExecuteCommand = function (command) {\n    this._cursors.killSecondaryCursors();\n\n    this._executeEditOperation(new EditOperationResult(0\n    /* Other */\n    , [command], {\n      shouldPushStackElementBefore: false,\n      shouldPushStackElementAfter: false\n    }));\n  };\n\n  Cursor.prototype._externalExecuteCommands = function (commands) {\n    this._executeEditOperation(new EditOperationResult(0\n    /* Other */\n    , commands, {\n      shouldPushStackElementBefore: false,\n      shouldPushStackElementAfter: false\n    }));\n  };\n\n  Cursor.MAX_CURSOR_COUNT = 10000;\n  return Cursor;\n}(viewEvents.ViewEventEmitter);\n\nexport { Cursor };\n\nvar CommandExecutor =\n/** @class */\nfunction () {\n  function CommandExecutor() {}\n\n  CommandExecutor.executeCommands = function (model, selectionsBefore, commands) {\n    var ctx = {\n      model: model,\n      selectionsBefore: selectionsBefore,\n      trackedRanges: [],\n      trackedRangesDirection: []\n    };\n\n    var result = this._innerExecuteCommands(ctx, commands);\n\n    for (var i = 0, len = ctx.trackedRanges.length; i < len; i++) {\n      ctx.model._setTrackedRange(ctx.trackedRanges[i], null, 0\n      /* AlwaysGrowsWhenTypingAtEdges */\n      );\n    }\n\n    return result;\n  };\n\n  CommandExecutor._innerExecuteCommands = function (ctx, commands) {\n    if (this._arrayIsEmpty(commands)) {\n      return null;\n    }\n\n    var commandsData = this._getEditOperations(ctx, commands);\n\n    if (commandsData.operations.length === 0) {\n      return null;\n    }\n\n    var rawOperations = commandsData.operations;\n\n    var loserCursorsMap = this._getLoserCursorMap(rawOperations);\n\n    if (loserCursorsMap.hasOwnProperty('0')) {\n      // These commands are very messed up\n      console.warn('Ignoring commands');\n      return null;\n    } // Remove operations belonging to losing cursors\n\n\n    var filteredOperations = [];\n\n    for (var i = 0, len = rawOperations.length; i < len; i++) {\n      if (!loserCursorsMap.hasOwnProperty(rawOperations[i].identifier.major.toString())) {\n        filteredOperations.push(rawOperations[i]);\n      }\n    } // TODO@Alex: find a better way to do this.\n    // give the hint that edit operations are tracked to the model\n\n\n    if (commandsData.hadTrackedEditOperation && filteredOperations.length > 0) {\n      filteredOperations[0]._isTracked = true;\n    }\n\n    var selectionsAfter = ctx.model.pushEditOperations(ctx.selectionsBefore, filteredOperations, function (inverseEditOperations) {\n      var groupedInverseEditOperations = [];\n\n      for (var i = 0; i < ctx.selectionsBefore.length; i++) {\n        groupedInverseEditOperations[i] = [];\n      }\n\n      for (var _i = 0, inverseEditOperations_1 = inverseEditOperations; _i < inverseEditOperations_1.length; _i++) {\n        var op = inverseEditOperations_1[_i];\n\n        if (!op.identifier) {\n          // perhaps auto whitespace trim edits\n          continue;\n        }\n\n        groupedInverseEditOperations[op.identifier.major].push(op);\n      }\n\n      var minorBasedSorter = function (a, b) {\n        return a.identifier.minor - b.identifier.minor;\n      };\n\n      var cursorSelections = [];\n\n      var _loop_1 = function (i) {\n        if (groupedInverseEditOperations[i].length > 0) {\n          groupedInverseEditOperations[i].sort(minorBasedSorter);\n          cursorSelections[i] = commands[i].computeCursorState(ctx.model, {\n            getInverseEditOperations: function () {\n              return groupedInverseEditOperations[i];\n            },\n            getTrackedSelection: function (id) {\n              var idx = parseInt(id, 10);\n\n              var range = ctx.model._getTrackedRange(ctx.trackedRanges[idx]);\n\n              if (ctx.trackedRangesDirection[idx] === 0\n              /* LTR */\n              ) {\n                  return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n                }\n\n              return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n            }\n          });\n        } else {\n          cursorSelections[i] = ctx.selectionsBefore[i];\n        }\n      };\n\n      for (var i = 0; i < ctx.selectionsBefore.length; i++) {\n        _loop_1(i);\n      }\n\n      return cursorSelections;\n    });\n\n    if (!selectionsAfter) {\n      selectionsAfter = ctx.selectionsBefore;\n    } // Extract losing cursors\n\n\n    var losingCursors = [];\n\n    for (var losingCursorIndex in loserCursorsMap) {\n      if (loserCursorsMap.hasOwnProperty(losingCursorIndex)) {\n        losingCursors.push(parseInt(losingCursorIndex, 10));\n      }\n    } // Sort losing cursors descending\n\n\n    losingCursors.sort(function (a, b) {\n      return b - a;\n    }); // Remove losing cursors\n\n    for (var _i = 0, losingCursors_1 = losingCursors; _i < losingCursors_1.length; _i++) {\n      var losingCursor = losingCursors_1[_i];\n      selectionsAfter.splice(losingCursor, 1);\n    }\n\n    return selectionsAfter;\n  };\n\n  CommandExecutor._arrayIsEmpty = function (commands) {\n    for (var i = 0, len = commands.length; i < len; i++) {\n      if (commands[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  CommandExecutor._getEditOperations = function (ctx, commands) {\n    var operations = [];\n    var hadTrackedEditOperation = false;\n\n    for (var i = 0, len = commands.length; i < len; i++) {\n      var command = commands[i];\n\n      if (command) {\n        var r = this._getEditOperationsFromCommand(ctx, i, command);\n\n        operations = operations.concat(r.operations);\n        hadTrackedEditOperation = hadTrackedEditOperation || r.hadTrackedEditOperation;\n      }\n    }\n\n    return {\n      operations: operations,\n      hadTrackedEditOperation: hadTrackedEditOperation\n    };\n  };\n\n  CommandExecutor._getEditOperationsFromCommand = function (ctx, majorIdentifier, command) {\n    // This method acts as a transaction, if the command fails\n    // everything it has done is ignored\n    var operations = [];\n    var operationMinor = 0;\n\n    var addEditOperation = function (selection, text, forceMoveMarkers) {\n      if (forceMoveMarkers === void 0) {\n        forceMoveMarkers = false;\n      }\n\n      if (selection.isEmpty() && text === '') {\n        // This command wants to add a no-op => no thank you\n        return;\n      }\n\n      operations.push({\n        identifier: {\n          major: majorIdentifier,\n          minor: operationMinor++\n        },\n        range: selection,\n        text: text,\n        forceMoveMarkers: forceMoveMarkers,\n        isAutoWhitespaceEdit: command.insertsAutoWhitespace\n      });\n    };\n\n    var hadTrackedEditOperation = false;\n\n    var addTrackedEditOperation = function (selection, text, forceMoveMarkers) {\n      hadTrackedEditOperation = true;\n      addEditOperation(selection, text, forceMoveMarkers);\n    };\n\n    var trackSelection = function (selection, trackPreviousOnEmpty) {\n      var stickiness;\n\n      if (selection.isEmpty()) {\n        if (typeof trackPreviousOnEmpty === 'boolean') {\n          if (trackPreviousOnEmpty) {\n            stickiness = 2\n            /* GrowsOnlyWhenTypingBefore */\n            ;\n          } else {\n            stickiness = 3\n            /* GrowsOnlyWhenTypingAfter */\n            ;\n          }\n        } else {\n          // Try to lock it with surrounding text\n          var maxLineColumn = ctx.model.getLineMaxColumn(selection.startLineNumber);\n\n          if (selection.startColumn === maxLineColumn) {\n            stickiness = 2\n            /* GrowsOnlyWhenTypingBefore */\n            ;\n          } else {\n            stickiness = 3\n            /* GrowsOnlyWhenTypingAfter */\n            ;\n          }\n        }\n      } else {\n        stickiness = 1\n        /* NeverGrowsWhenTypingAtEdges */\n        ;\n      }\n\n      var l = ctx.trackedRanges.length;\n\n      var id = ctx.model._setTrackedRange(null, selection, stickiness);\n\n      ctx.trackedRanges[l] = id;\n      ctx.trackedRangesDirection[l] = selection.getDirection();\n      return l.toString();\n    };\n\n    var editOperationBuilder = {\n      addEditOperation: addEditOperation,\n      addTrackedEditOperation: addTrackedEditOperation,\n      trackSelection: trackSelection\n    };\n\n    try {\n      command.getEditOperations(ctx.model, editOperationBuilder);\n    } catch (e) {\n      // TODO@Alex use notification service if this should be user facing\n      // e.friendlyMessage = nls.localize('corrupt.commands', \"Unexpected exception while executing command.\");\n      onUnexpectedError(e);\n      return {\n        operations: [],\n        hadTrackedEditOperation: false\n      };\n    }\n\n    return {\n      operations: operations,\n      hadTrackedEditOperation: hadTrackedEditOperation\n    };\n  };\n\n  CommandExecutor._getLoserCursorMap = function (operations) {\n    // This is destructive on the array\n    operations = operations.slice(0); // Sort operations with last one first\n\n    operations.sort(function (a, b) {\n      // Note the minus!\n      return -Range.compareRangesUsingEnds(a.range, b.range);\n    }); // Operations can not overlap!\n\n    var loserCursorsMap = {};\n\n    for (var i = 1; i < operations.length; i++) {\n      var previousOp = operations[i - 1];\n      var currentOp = operations[i];\n\n      if (previousOp.range.getStartPosition().isBefore(currentOp.range.getEndPosition())) {\n        var loserMajor = void 0;\n\n        if (previousOp.identifier.major > currentOp.identifier.major) {\n          // previousOp loses the battle\n          loserMajor = previousOp.identifier.major;\n        } else {\n          loserMajor = currentOp.identifier.major;\n        }\n\n        loserCursorsMap[loserMajor.toString()] = true;\n\n        for (var j = 0; j < operations.length; j++) {\n          if (operations[j].identifier.major === loserMajor) {\n            operations.splice(j, 1);\n\n            if (j < i) {\n              i--;\n            }\n\n            j--;\n          }\n        }\n\n        if (i > 0) {\n          i--;\n        }\n      }\n    }\n\n    return loserCursorsMap;\n  };\n\n  return CommandExecutor;\n}();","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/controller/cursor.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","onUnexpectedError","Emitter","strings","CursorCollection","CursorColumns","CursorConfiguration","CursorContext","CursorState","EditOperationResult","DeleteOperations","TypeOperations","TypeWithAutoClosingCommand","Range","Selection","editorCommon","viewEvents","dispose","containsLineMappingChanged","events","i","len","length","type","CursorStateChangedEvent","selections","modelVersionId","oldSelections","oldModelVersionId","source","reason","CursorModelState","model","cursor","getVersionId","cursorState","getAll","equals","other","AutoClosedAction","autoClosedCharactersDecorations","autoClosedEnclosingDecorations","_model","_autoClosedCharactersDecorations","_autoClosedEnclosingDecorations","getAllAutoClosedCharacters","autoClosedActions","autoClosedCharacters","_i","autoClosedActions_1","autoClosedAction","concat","getAutoClosedCharactersRanges","deltaDecorations","result","decorationRange","getDecorationRange","push","isValid","enclosingRanges","startLineNumber","endLineNumber","sort","compareRangesUsingStarts","strictContainsRange","Cursor","_super","configuration","viewModel","_this","call","_onDidReachMaxCursorCount","_register","onDidReachMaxCursorCount","event","_onDidAttemptReadOnlyEdit","onDidAttemptReadOnlyEdit","_onDidChange","onDidChange","_configuration","_knownModelVersionId","_viewModel","context","_cursors","_isHandling","_isDoingComposition","_selectionsWhenCompositionStarted","_columnSelectData","_autoClosedActions","_prevEditOperationType","onDidChangeRawContent","e","versionId","hadFlushEvent","containsEvent","_onModelContentChanged","addEventListener","setStates","updateCursorContext","updateContext","onDidChangeLanguage","onDidChangeLanguageConfiguration","onDidChangeOptions","shouldRecreate","_validateAutoClosedActions","getSelections","splice","getPrimaryCursor","getLastAddedCursorIndex","states","MAX_CURSOR_COUNT","slice","fire","undefined","oldState","normalize","_emitStateChangedIfNecessary","setColumnSelectData","columnSelectData","reveal","horizontal","target","scrollType","_revealRange","revealRange","revealHorizontal","viewRange","verticalType","emitCursorRevealRange","scrollTo","desiredScrollTop","viewLayout","setScrollPositionSmooth","scrollTop","saveState","selection","inSelectionMode","isEmpty","selectionStart","lineNumber","selectionStartLineNumber","column","selectionStartColumn","position","positionLineNumber","positionColumn","restoreState","desiredSelections","state","fromModelSelections","selectionsFromMarkers","readSelectionFromMarkers","getSelection","modelState","getColumnSelectData","primaryCursor","primaryPos","viewState","getStartPosition","viewLineNumber","viewVisualColumn","visibleColumnFromColumn2","config","isReal","fromViewLineNumber","fromViewVisualColumn","toViewLineNumber","toViewVisualColumn","getViewSelections","getPosition","setSelections","getPrevEditOperationType","setPrevEditOperationType","_pushAutoClosedAction","autoClosedCharactersRanges","autoClosedEnclosingRanges","autoClosedCharactersDeltaDecorations","autoClosedEnclosingDeltaDecorations","range","options","inlineClassName","stickiness","_executeEditOperation","opResult","shouldPushStackElementBefore","pushStackElement","CommandExecutor","executeCommands","commands","_interpretCommandResult","command","enclosingRange","closeCharacterRange","shouldPushStackElementAfter","newState","viewSelections","eventsCollector","_beginEmit","emit","ViewCursorStateChangedEvent","_endEmit","some","newCursorState","map","s","revealTarget","viewPositions","getViewPositions","viewPosition","isBefore","isBeforeOrEqual","ViewRevealRangeRequestEvent","_findAutoClosingPairs","edits","indices","edit","text","indexOf","m","match","closeChar","autoClosingPairsCandidates","autoClosingPairsClose2","get","openChar","open","closeCharIndex","openCharIndex","lastIndexOf","executeEdits","cursorStateComputer","autoClosingIndices","_isTracked","pushEditOperations","undoEdits","_a","openCharInnerIndex","closeCharInnerIndex","undoEdit","startColumn","trigger","handlerId","payload","H","Handler","CompositionStart","CompositionEnd","cursorChangeReason","Undo","Redo","stopTrackingSelections","ensureValidState","Type","_type","ReplacePreviousChar","_replacePreviousChar","replaceCharCnt","Paste","_paste","pasteOnNewLine","multicursorText","Cut","_cut","undo","redo","ExecuteCommand","_externalExecuteCommand","ExecuteCommands","_externalExecuteCommands","_interpretCompositionEnd","err","startTrackingSelections","compositionEndWithInterceptors","offset","charLength","nextCharLength","chr","substr","typeWithInterceptors","typeWithoutInterceptors","replacePreviousChar","paste","cut","killSecondaryCursors","ViewEventEmitter","selectionsBefore","ctx","trackedRanges","trackedRangesDirection","_innerExecuteCommands","_setTrackedRange","_arrayIsEmpty","commandsData","_getEditOperations","operations","rawOperations","loserCursorsMap","_getLoserCursorMap","console","warn","filteredOperations","identifier","major","toString","hadTrackedEditOperation","selectionsAfter","inverseEditOperations","groupedInverseEditOperations","inverseEditOperations_1","op","minorBasedSorter","a","minor","cursorSelections","_loop_1","computeCursorState","getInverseEditOperations","getTrackedSelection","id","idx","parseInt","_getTrackedRange","endColumn","losingCursors","losingCursorIndex","losingCursors_1","losingCursor","r","_getEditOperationsFromCommand","majorIdentifier","operationMinor","addEditOperation","forceMoveMarkers","isAutoWhitespaceEdit","insertsAutoWhitespace","addTrackedEditOperation","trackSelection","trackPreviousOnEmpty","maxLineColumn","getLineMaxColumn","l","getDirection","editOperationBuilder","getEditOperations","compareRangesUsingEnds","previousOp","currentOp","getEndPosition","loserMajor","j"],"mappings":"AAAA;;;;AAIA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,SAASI,iBAAT,QAAkC,gCAAlC;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,iCAAzB;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,aAAT,EAAwBC,mBAAxB,EAA6CC,aAA7C,EAA4DC,WAA5D,EAAyEC,mBAAzE,QAAoG,mBAApG;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,cAAT,EAAyBC,0BAAzB,QAA2D,2BAA3D;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AACA,OAAO,KAAKC,UAAZ,MAA4B,uBAA5B;AACA,SAASC,OAAT,QAAwB,mCAAxB;;AACA,SAASC,0BAAT,CAAoCC,MAApC,EAA4C;AACxC,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGF,MAAM,CAACG,MAA7B,EAAqCF,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,EAA/C,EAAmD;AAC/C,QAAID,MAAM,CAACC,CAAD,CAAN,CAAUG,IAAV,KAAmB;AAAE;AAAzB,MAAuD;AACnD,eAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH;;AACD,IAAIC,uBAAuB;AAAG;AAAe,YAAY;AACrD,WAASA,uBAAT,CAAiCC,UAAjC,EAA6CC,cAA7C,EAA6DC,aAA7D,EAA4EC,iBAA5E,EAA+FC,MAA/F,EAAuGC,MAAvG,EAA+G;AAC3G,SAAKL,UAAL,GAAkBA,UAAlB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACD,SAAON,uBAAP;AACH,CAV4C,EAA7C;;AAWA,SAASA,uBAAT;AACA;;;;AAGA,IAAIO,gBAAgB;AAAG;AAAe,YAAY;AAC9C,WAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,MAAjC,EAAyC;AACrC,SAAKP,cAAL,GAAsBM,KAAK,CAACE,YAAN,EAAtB;AACA,SAAKC,WAAL,GAAmBF,MAAM,CAACG,MAAP,EAAnB;AACH;;AACDL,EAAAA,gBAAgB,CAAChC,SAAjB,CAA2BsC,MAA3B,GAAoC,UAAUC,KAAV,EAAiB;AACjD,QAAI,CAACA,KAAL,EAAY;AACR,aAAO,KAAP;AACH;;AACD,QAAI,KAAKZ,cAAL,KAAwBY,KAAK,CAACZ,cAAlC,EAAkD;AAC9C,aAAO,KAAP;AACH;;AACD,QAAI,KAAKS,WAAL,CAAiBb,MAAjB,KAA4BgB,KAAK,CAACH,WAAN,CAAkBb,MAAlD,EAA0D;AACtD,aAAO,KAAP;AACH;;AACD,SAAK,IAAIF,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG,KAAKc,WAAL,CAAiBb,MAAvC,EAA+CF,CAAC,GAAGC,GAAnD,EAAwDD,CAAC,EAAzD,EAA6D;AACzD,UAAI,CAAC,KAAKe,WAAL,CAAiBf,CAAjB,EAAoBiB,MAApB,CAA2BC,KAAK,CAACH,WAAN,CAAkBf,CAAlB,CAA3B,CAAL,EAAuD;AACnD,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GAhBD;;AAiBA,SAAOW,gBAAP;AACH,CAvBqC,EAAtC;;AAwBA,SAASA,gBAAT;;AACA,IAAIQ,gBAAgB;AAAG;AAAe,YAAY;AAC9C,WAASA,gBAAT,CAA0BP,KAA1B,EAAiCQ,+BAAjC,EAAkEC,8BAAlE,EAAkG;AAC9F,SAAKC,MAAL,GAAcV,KAAd;AACA,SAAKW,gCAAL,GAAwCH,+BAAxC;AACA,SAAKI,+BAAL,GAAuCH,8BAAvC;AACH;;AACDF,EAAAA,gBAAgB,CAACM,0BAAjB,GAA8C,UAAUC,iBAAV,EAA6B;AACvE,QAAIC,oBAAoB,GAAG,EAA3B;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,mBAAmB,GAAGH,iBAAvC,EAA0DE,EAAE,GAAGC,mBAAmB,CAAC3B,MAAnF,EAA2F0B,EAAE,EAA7F,EAAiG;AAC7F,UAAIE,gBAAgB,GAAGD,mBAAmB,CAACD,EAAD,CAA1C;AACAD,MAAAA,oBAAoB,GAAGA,oBAAoB,CAACI,MAArB,CAA4BD,gBAAgB,CAACE,6BAAjB,EAA5B,CAAvB;AACH;;AACD,WAAOL,oBAAP;AACH,GAPD;;AAQAR,EAAAA,gBAAgB,CAACxC,SAAjB,CAA2BkB,OAA3B,GAAqC,YAAY;AAC7C,SAAK0B,gCAAL,GAAwC,KAAKD,MAAL,CAAYW,gBAAZ,CAA6B,KAAKV,gCAAlC,EAAoE,EAApE,CAAxC;AACA,SAAKC,+BAAL,GAAuC,KAAKF,MAAL,CAAYW,gBAAZ,CAA6B,KAAKT,+BAAlC,EAAmE,EAAnE,CAAvC;AACH,GAHD;;AAIAL,EAAAA,gBAAgB,CAACxC,SAAjB,CAA2BqD,6BAA3B,GAA2D,YAAY;AACnE,QAAIE,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKuB,gCAAL,CAAsCrB,MAA1D,EAAkEF,CAAC,EAAnE,EAAuE;AACnE,UAAImC,eAAe,GAAG,KAAKb,MAAL,CAAYc,kBAAZ,CAA+B,KAAKb,gCAAL,CAAsCvB,CAAtC,CAA/B,CAAtB;;AACA,UAAImC,eAAJ,EAAqB;AACjBD,QAAAA,MAAM,CAACG,IAAP,CAAYF,eAAZ;AACH;AACJ;;AACD,WAAOD,MAAP;AACH,GATD;;AAUAf,EAAAA,gBAAgB,CAACxC,SAAjB,CAA2B2D,OAA3B,GAAqC,UAAUjC,UAAV,EAAsB;AACvD,QAAIkC,eAAe,GAAG,EAAtB;;AACA,SAAK,IAAIvC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwB,+BAAL,CAAqCtB,MAAzD,EAAiEF,CAAC,EAAlE,EAAsE;AAClE,UAAImC,eAAe,GAAG,KAAKb,MAAL,CAAYc,kBAAZ,CAA+B,KAAKZ,+BAAL,CAAqCxB,CAArC,CAA/B,CAAtB;;AACA,UAAImC,eAAJ,EAAqB;AACjBI,QAAAA,eAAe,CAACF,IAAhB,CAAqBF,eAArB;;AACA,YAAIA,eAAe,CAACK,eAAhB,KAAoCL,eAAe,CAACM,aAAxD,EAAuE;AACnE;AACA,iBAAO,KAAP;AACH;AACJ;AACJ;;AACDF,IAAAA,eAAe,CAACG,IAAhB,CAAqBjD,KAAK,CAACkD,wBAA3B;AACAtC,IAAAA,UAAU,CAACqC,IAAX,CAAgBjD,KAAK,CAACkD,wBAAtB;;AACA,SAAK,IAAI3C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,UAAU,CAACH,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AACxC,UAAIA,CAAC,IAAIuC,eAAe,CAACrC,MAAzB,EAAiC;AAC7B,eAAO,KAAP;AACH;;AACD,UAAI,CAACqC,eAAe,CAACvC,CAAD,CAAf,CAAmB4C,mBAAnB,CAAuCvC,UAAU,CAACL,CAAD,CAAjD,CAAL,EAA4D;AACxD,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GAvBD;;AAwBA,SAAOmB,gBAAP;AACH,CArDqC,EAAtC;;AAsDA,IAAI0B,MAAM;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAC1C/E,EAAAA,SAAS,CAAC8E,MAAD,EAASC,MAAT,CAAT;;AACA,WAASD,MAAT,CAAgBE,aAAhB,EAA+BnC,KAA/B,EAAsCoC,SAAtC,EAAiD;AAC7C,QAAIC,KAAK,GAAGH,MAAM,CAACI,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;AACAD,IAAAA,KAAK,CAACE,yBAAN,GAAkCF,KAAK,CAACG,SAAN,CAAgB,IAAItE,OAAJ,EAAhB,CAAlC;AACAmE,IAAAA,KAAK,CAACI,wBAAN,GAAiCJ,KAAK,CAACE,yBAAN,CAAgCG,KAAjE;AACAL,IAAAA,KAAK,CAACM,yBAAN,GAAkCN,KAAK,CAACG,SAAN,CAAgB,IAAItE,OAAJ,EAAhB,CAAlC;AACAmE,IAAAA,KAAK,CAACO,wBAAN,GAAiCP,KAAK,CAACM,yBAAN,CAAgCD,KAAjE;AACAL,IAAAA,KAAK,CAACQ,YAAN,GAAqBR,KAAK,CAACG,SAAN,CAAgB,IAAItE,OAAJ,EAAhB,CAArB;AACAmE,IAAAA,KAAK,CAACS,WAAN,GAAoBT,KAAK,CAACQ,YAAN,CAAmBH,KAAvC;AACAL,IAAAA,KAAK,CAACU,cAAN,GAAuBZ,aAAvB;AACAE,IAAAA,KAAK,CAAC3B,MAAN,GAAeV,KAAf;AACAqC,IAAAA,KAAK,CAACW,oBAAN,GAA6BX,KAAK,CAAC3B,MAAN,CAAaR,YAAb,EAA7B;AACAmC,IAAAA,KAAK,CAACY,UAAN,GAAmBb,SAAnB;AACAC,IAAAA,KAAK,CAACa,OAAN,GAAgB,IAAI3E,aAAJ,CAAkB8D,KAAK,CAACU,cAAxB,EAAwCV,KAAK,CAAC3B,MAA9C,EAAsD2B,KAAK,CAACY,UAA5D,CAAhB;AACAZ,IAAAA,KAAK,CAACc,QAAN,GAAiB,IAAI/E,gBAAJ,CAAqBiE,KAAK,CAACa,OAA3B,CAAjB;AACAb,IAAAA,KAAK,CAACe,WAAN,GAAoB,KAApB;AACAf,IAAAA,KAAK,CAACgB,mBAAN,GAA4B,KAA5B;AACAhB,IAAAA,KAAK,CAACiB,iCAAN,GAA0C,IAA1C;AACAjB,IAAAA,KAAK,CAACkB,iBAAN,GAA0B,IAA1B;AACAlB,IAAAA,KAAK,CAACmB,kBAAN,GAA2B,EAA3B;AACAnB,IAAAA,KAAK,CAACoB,sBAAN,GAA+B;AAAE;AAAjC;;AACApB,IAAAA,KAAK,CAACG,SAAN,CAAgBH,KAAK,CAAC3B,MAAN,CAAagD,qBAAb,CAAmC,UAAUC,CAAV,EAAa;AAC5DtB,MAAAA,KAAK,CAACW,oBAAN,GAA6BW,CAAC,CAACC,SAA/B;;AACA,UAAIvB,KAAK,CAACe,WAAV,EAAuB;AACnB;AACH;;AACD,UAAIS,aAAa,GAAGF,CAAC,CAACG,aAAF,CAAgB;AAAE;AAAlB,OAApB;;AACAzB,MAAAA,KAAK,CAAC0B,sBAAN,CAA6BF,aAA7B;AACH,KAPe,CAAhB;;AAQAxB,IAAAA,KAAK,CAACG,SAAN,CAAgBJ,SAAS,CAAC4B,gBAAV,CAA2B,UAAU7E,MAAV,EAAkB;AACzD,UAAI,CAACD,0BAA0B,CAACC,MAAD,CAA/B,EAAyC;AACrC;AACH;;AACD,UAAIkD,KAAK,CAACW,oBAAN,KAA+BX,KAAK,CAAC3B,MAAN,CAAaR,YAAb,EAAnC,EAAgE;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,OAbwD,CAczD;;;AACAmC,MAAAA,KAAK,CAAC4B,SAAN,CAAgB,WAAhB,EAA6B;AAAE;AAA/B,QAA6C5B,KAAK,CAACjC,MAAN,EAA7C;AACH,KAhBe,CAAhB;;AAiBA,QAAI8D,mBAAmB,GAAG,YAAY;AAClC7B,MAAAA,KAAK,CAACa,OAAN,GAAgB,IAAI3E,aAAJ,CAAkB8D,KAAK,CAACU,cAAxB,EAAwCV,KAAK,CAAC3B,MAA9C,EAAsD2B,KAAK,CAACY,UAA5D,CAAhB;;AACAZ,MAAAA,KAAK,CAACc,QAAN,CAAegB,aAAf,CAA6B9B,KAAK,CAACa,OAAnC;AACH,KAHD;;AAIAb,IAAAA,KAAK,CAACG,SAAN,CAAgBH,KAAK,CAAC3B,MAAN,CAAa0D,mBAAb,CAAiC,UAAUT,CAAV,EAAa;AAC1DO,MAAAA,mBAAmB;AACtB,KAFe,CAAhB;;AAGA7B,IAAAA,KAAK,CAACG,SAAN,CAAgBH,KAAK,CAAC3B,MAAN,CAAa2D,gCAAb,CAA8C,YAAY;AACtEH,MAAAA,mBAAmB;AACtB,KAFe,CAAhB;;AAGA7B,IAAAA,KAAK,CAACG,SAAN,CAAgBH,KAAK,CAAC3B,MAAN,CAAa4D,kBAAb,CAAgC,YAAY;AACxDJ,MAAAA,mBAAmB;AACtB,KAFe,CAAhB;;AAGA7B,IAAAA,KAAK,CAACG,SAAN,CAAgBH,KAAK,CAACU,cAAN,CAAqBD,WAArB,CAAiC,UAAUa,CAAV,EAAa;AAC1D,UAAIrF,mBAAmB,CAACiG,cAApB,CAAmCZ,CAAnC,CAAJ,EAA2C;AACvCO,QAAAA,mBAAmB;AACtB;AACJ,KAJe,CAAhB;;AAKA,WAAO7B,KAAP;AACH;;AACDJ,EAAAA,MAAM,CAAClE,SAAP,CAAiBkB,OAAjB,GAA2B,YAAY;AACnC,SAAKkE,QAAL,CAAclE,OAAd;;AACA,SAAKuE,kBAAL,GAA0BvE,OAAO,CAAC,KAAKuE,kBAAN,CAAjC;;AACAtB,IAAAA,MAAM,CAACnE,SAAP,CAAiBkB,OAAjB,CAAyBqD,IAAzB,CAA8B,IAA9B;AACH,GAJD;;AAKAL,EAAAA,MAAM,CAAClE,SAAP,CAAiByG,0BAAjB,GAA8C,YAAY;AACtD,QAAI,KAAKhB,kBAAL,CAAwBlE,MAAxB,GAAiC,CAArC,EAAwC;AACpC,UAAIG,UAAU,GAAG,KAAK0D,QAAL,CAAcsB,aAAd,EAAjB;;AACA,WAAK,IAAIrF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKoE,kBAAL,CAAwBlE,MAA5C,EAAoDF,CAAC,EAArD,EAAyD;AACrD,YAAI8B,gBAAgB,GAAG,KAAKsC,kBAAL,CAAwBpE,CAAxB,CAAvB;;AACA,YAAI,CAAC8B,gBAAgB,CAACQ,OAAjB,CAAyBjC,UAAzB,CAAL,EAA2C;AACvCyB,UAAAA,gBAAgB,CAACjC,OAAjB;;AACA,eAAKuE,kBAAL,CAAwBkB,MAAxB,CAA+BtF,CAA/B,EAAkC,CAAlC;;AACAA,UAAAA,CAAC;AACJ;AACJ;AACJ;AACJ,GAZD,CAxE0C,CAqF1C;;;AACA6C,EAAAA,MAAM,CAAClE,SAAP,CAAiB4G,gBAAjB,GAAoC,YAAY;AAC5C,WAAO,KAAKxB,QAAL,CAAcwB,gBAAd,EAAP;AACH,GAFD;;AAGA1C,EAAAA,MAAM,CAAClE,SAAP,CAAiB6G,uBAAjB,GAA2C,YAAY;AACnD,WAAO,KAAKzB,QAAL,CAAcyB,uBAAd,EAAP;AACH,GAFD;;AAGA3C,EAAAA,MAAM,CAAClE,SAAP,CAAiBqC,MAAjB,GAA0B,YAAY;AAClC,WAAO,KAAK+C,QAAL,CAAc/C,MAAd,EAAP;AACH,GAFD;;AAGA6B,EAAAA,MAAM,CAAClE,SAAP,CAAiBkG,SAAjB,GAA6B,UAAUpE,MAAV,EAAkBC,MAAlB,EAA0B+E,MAA1B,EAAkC;AAC3D,QAAIA,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACvF,MAAP,GAAgB2C,MAAM,CAAC6C,gBAA9C,EAAgE;AAC5DD,MAAAA,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAa,CAAb,EAAgB9C,MAAM,CAAC6C,gBAAvB,CAAT;;AACA,WAAKvC,yBAAL,CAA+ByC,IAA/B,CAAoCC,SAApC;AACH;;AACD,QAAIC,QAAQ,GAAG,IAAInF,gBAAJ,CAAqB,KAAKW,MAA1B,EAAkC,IAAlC,CAAf;;AACA,SAAKyC,QAAL,CAAcc,SAAd,CAAwBY,MAAxB;;AACA,SAAK1B,QAAL,CAAcgC,SAAd;;AACA,SAAK5B,iBAAL,GAAyB,IAAzB;;AACA,SAAKiB,0BAAL;;AACA,SAAKY,4BAAL,CAAkCvF,MAAlC,EAA0CC,MAA1C,EAAkDoF,QAAlD;AACH,GAXD;;AAYAjD,EAAAA,MAAM,CAAClE,SAAP,CAAiBsH,mBAAjB,GAAuC,UAAUC,gBAAV,EAA4B;AAC/D,SAAK/B,iBAAL,GAAyB+B,gBAAzB;AACH,GAFD;;AAGArD,EAAAA,MAAM,CAAClE,SAAP,CAAiBwH,MAAjB,GAA0B,UAAU1F,MAAV,EAAkB2F,UAAlB,EAA8BC,MAA9B,EAAsCC,UAAtC,EAAkD;AACxE,SAAKC,YAAL,CAAkB9F,MAAlB,EAA0B4F,MAA1B,EAAkC;AAAE;AAApC,MAAkDD,UAAlD,EAA8DE,UAA9D;AACH,GAFD;;AAGAzD,EAAAA,MAAM,CAAClE,SAAP,CAAiB6H,WAAjB,GAA+B,UAAU/F,MAAV,EAAkBgG,gBAAlB,EAAoCC,SAApC,EAA+CC,YAA/C,EAA6DL,UAA7D,EAAyE;AACpG,SAAKM,qBAAL,CAA2BnG,MAA3B,EAAmCiG,SAAnC,EAA8CC,YAA9C,EAA4DF,gBAA5D,EAA8EH,UAA9E;AACH,GAFD;;AAGAzD,EAAAA,MAAM,CAAClE,SAAP,CAAiBkI,QAAjB,GAA4B,UAAUC,gBAAV,EAA4B;AACpD,SAAKjD,UAAL,CAAgBkD,UAAhB,CAA2BC,uBAA3B,CAAmD;AAC/CC,MAAAA,SAAS,EAAEH;AADoC,KAAnD;AAGH,GAJD;;AAKAjE,EAAAA,MAAM,CAAClE,SAAP,CAAiBuI,SAAjB,GAA6B,YAAY;AACrC,QAAIhF,MAAM,GAAG,EAAb;;AACA,QAAI7B,UAAU,GAAG,KAAK0D,QAAL,CAAcsB,aAAd,EAAjB;;AACA,SAAK,IAAIrF,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGI,UAAU,CAACH,MAAjC,EAAyCF,CAAC,GAAGC,GAA7C,EAAkDD,CAAC,EAAnD,EAAuD;AACnD,UAAImH,SAAS,GAAG9G,UAAU,CAACL,CAAD,CAA1B;AACAkC,MAAAA,MAAM,CAACG,IAAP,CAAY;AACR+E,QAAAA,eAAe,EAAE,CAACD,SAAS,CAACE,OAAV,EADV;AAERC,QAAAA,cAAc,EAAE;AACZC,UAAAA,UAAU,EAAEJ,SAAS,CAACK,wBADV;AAEZC,UAAAA,MAAM,EAAEN,SAAS,CAACO;AAFN,SAFR;AAMRC,QAAAA,QAAQ,EAAE;AACNJ,UAAAA,UAAU,EAAEJ,SAAS,CAACS,kBADhB;AAENH,UAAAA,MAAM,EAAEN,SAAS,CAACU;AAFZ;AANF,OAAZ;AAWH;;AACD,WAAO3F,MAAP;AACH,GAlBD;;AAmBAW,EAAAA,MAAM,CAAClE,SAAP,CAAiBmJ,YAAjB,GAAgC,UAAUrC,MAAV,EAAkB;AAC9C,QAAIsC,iBAAiB,GAAG,EAAxB;;AACA,SAAK,IAAI/H,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGwF,MAAM,CAACvF,MAA7B,EAAqCF,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,EAA/C,EAAmD;AAC/C,UAAIgI,KAAK,GAAGvC,MAAM,CAACzF,CAAD,CAAlB;AACA,UAAI4H,kBAAkB,GAAG,CAAzB;AACA,UAAIC,cAAc,GAAG,CAArB,CAH+C,CAI/C;;AACA,UAAIG,KAAK,CAACL,QAAN,IAAkBK,KAAK,CAACL,QAAN,CAAeJ,UAArC,EAAiD;AAC7CK,QAAAA,kBAAkB,GAAGI,KAAK,CAACL,QAAN,CAAeJ,UAApC;AACH;;AACD,UAAIS,KAAK,CAACL,QAAN,IAAkBK,KAAK,CAACL,QAAN,CAAeF,MAArC,EAA6C;AACzCI,QAAAA,cAAc,GAAGG,KAAK,CAACL,QAAN,CAAeF,MAAhC;AACH;;AACD,UAAID,wBAAwB,GAAGI,kBAA/B;AACA,UAAIF,oBAAoB,GAAGG,cAA3B,CAZ+C,CAa/C;;AACA,UAAIG,KAAK,CAACV,cAAN,IAAwBU,KAAK,CAACV,cAAN,CAAqBC,UAAjD,EAA6D;AACzDC,QAAAA,wBAAwB,GAAGQ,KAAK,CAACV,cAAN,CAAqBC,UAAhD;AACH;;AACD,UAAIS,KAAK,CAACV,cAAN,IAAwBU,KAAK,CAACV,cAAN,CAAqBG,MAAjD,EAAyD;AACrDC,QAAAA,oBAAoB,GAAGM,KAAK,CAACV,cAAN,CAAqBG,MAA5C;AACH;;AACDM,MAAAA,iBAAiB,CAAC1F,IAAlB,CAAuB;AACnBmF,QAAAA,wBAAwB,EAAEA,wBADP;AAEnBE,QAAAA,oBAAoB,EAAEA,oBAFH;AAGnBE,QAAAA,kBAAkB,EAAEA,kBAHD;AAInBC,QAAAA,cAAc,EAAEA;AAJG,OAAvB;AAMH;;AACD,SAAKhD,SAAL,CAAe,cAAf,EAA+B;AAAE;AAAjC,MAA+CzF,WAAW,CAAC6I,mBAAZ,CAAgCF,iBAAhC,CAA/C;AACA,SAAK5B,MAAL,CAAY,cAAZ,EAA4B,IAA5B,EAAkC;AAAE;AAApC,MAAmD;AAAE;AAArD;AACH,GA/BD;;AAgCAtD,EAAAA,MAAM,CAAClE,SAAP,CAAiBgG,sBAAjB,GAA0C,UAAUF,aAAV,EAAyB;AAC/D,SAAKJ,sBAAL,GAA8B;AAAE;AAAhC;;AACA,QAAII,aAAJ,EAAmB;AACf;AACA,WAAKV,QAAL,CAAclE,OAAd;;AACA,WAAKkE,QAAL,GAAgB,IAAI/E,gBAAJ,CAAqB,KAAK8E,OAA1B,CAAhB;;AACA,WAAKsB,0BAAL;;AACA,WAAKY,4BAAL,CAAkC,OAAlC,EAA2C;AAAE;AAA7C,QAAiE,IAAjE;AACH,KAND,MAOK;AACD,UAAIkC,qBAAqB,GAAG,KAAKnE,QAAL,CAAcoE,wBAAd,EAA5B;;AACA,WAAKtD,SAAL,CAAe,aAAf,EAA8B;AAAE;AAAhC,QAA0DzF,WAAW,CAAC6I,mBAAZ,CAAgCC,qBAAhC,CAA1D;AACH;AACJ,GAbD;;AAcArF,EAAAA,MAAM,CAAClE,SAAP,CAAiByJ,YAAjB,GAAgC,YAAY;AACxC,WAAO,KAAKrE,QAAL,CAAcwB,gBAAd,GAAiC8C,UAAjC,CAA4ClB,SAAnD;AACH,GAFD;;AAGAtE,EAAAA,MAAM,CAAClE,SAAP,CAAiB2J,mBAAjB,GAAuC,YAAY;AAC/C,QAAI,KAAKnE,iBAAT,EAA4B;AACxB,aAAO,KAAKA,iBAAZ;AACH;;AACD,QAAIoE,aAAa,GAAG,KAAKxE,QAAL,CAAcwB,gBAAd,EAApB;;AACA,QAAIiD,UAAU,GAAGD,aAAa,CAACE,SAAd,CAAwBnB,cAAxB,CAAuCoB,gBAAvC,EAAjB;AACA,QAAIC,cAAc,GAAGH,UAAU,CAACjB,UAAhC;AACA,QAAIqB,gBAAgB,GAAG3J,aAAa,CAAC4J,wBAAd,CAAuC,KAAK/E,OAAL,CAAagF,MAApD,EAA4D,KAAKhF,OAAL,CAAad,SAAzE,EAAoFwF,UAApF,CAAvB;AACA,WAAO;AACHO,MAAAA,MAAM,EAAE,KADL;AAEHC,MAAAA,kBAAkB,EAAEL,cAFjB;AAGHM,MAAAA,oBAAoB,EAAEL,gBAHnB;AAIHM,MAAAA,gBAAgB,EAAEP,cAJf;AAKHQ,MAAAA,kBAAkB,EAAEP;AALjB,KAAP;AAOH,GAfD;;AAgBA/F,EAAAA,MAAM,CAAClE,SAAP,CAAiB0G,aAAjB,GAAiC,YAAY;AACzC,WAAO,KAAKtB,QAAL,CAAcsB,aAAd,EAAP;AACH,GAFD;;AAGAxC,EAAAA,MAAM,CAAClE,SAAP,CAAiByK,iBAAjB,GAAqC,YAAY;AAC7C,WAAO,KAAKrF,QAAL,CAAcqF,iBAAd,EAAP;AACH,GAFD;;AAGAvG,EAAAA,MAAM,CAAClE,SAAP,CAAiB0K,WAAjB,GAA+B,YAAY;AACvC,WAAO,KAAKtF,QAAL,CAAcwB,gBAAd,GAAiC8C,UAAjC,CAA4CV,QAAnD;AACH,GAFD;;AAGA9E,EAAAA,MAAM,CAAClE,SAAP,CAAiB2K,aAAjB,GAAiC,UAAU7I,MAAV,EAAkBJ,UAAlB,EAA8B;AAC3D,SAAKwE,SAAL,CAAepE,MAAf,EAAuB;AAAE;AAAzB,MAAuCrB,WAAW,CAAC6I,mBAAZ,CAAgC5H,UAAhC,CAAvC;AACH,GAFD;;AAGAwC,EAAAA,MAAM,CAAClE,SAAP,CAAiB4K,wBAAjB,GAA4C,YAAY;AACpD,WAAO,KAAKlF,sBAAZ;AACH,GAFD;;AAGAxB,EAAAA,MAAM,CAAClE,SAAP,CAAiB6K,wBAAjB,GAA4C,UAAUrJ,IAAV,EAAgB;AACxD,SAAKkE,sBAAL,GAA8BlE,IAA9B;AACH,GAFD,CA5N0C,CA+N1C;;;AACA0C,EAAAA,MAAM,CAAClE,SAAP,CAAiB8K,qBAAjB,GAAyC,UAAUC,0BAAV,EAAsCC,yBAAtC,EAAiE;AACtG,QAAIC,oCAAoC,GAAG,EAA3C;AACA,QAAIC,mCAAmC,GAAG,EAA1C;;AACA,SAAK,IAAI7J,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGyJ,0BAA0B,CAACxJ,MAAjD,EAAyDF,CAAC,GAAGC,GAA7D,EAAkED,CAAC,EAAnE,EAAuE;AACnE4J,MAAAA,oCAAoC,CAACvH,IAArC,CAA0C;AACtCyH,QAAAA,KAAK,EAAEJ,0BAA0B,CAAC1J,CAAD,CADK;AAEtC+J,QAAAA,OAAO,EAAE;AACLC,UAAAA,eAAe,EAAE,uBADZ;AAELC,UAAAA,UAAU,EAAE;AAAE;;AAFT;AAF6B,OAA1C;AAOAJ,MAAAA,mCAAmC,CAACxH,IAApC,CAAyC;AACrCyH,QAAAA,KAAK,EAAEH,yBAAyB,CAAC3J,CAAD,CADK;AAErC+J,QAAAA,OAAO,EAAE;AACLE,UAAAA,UAAU,EAAE;AAAE;;AADT;AAF4B,OAAzC;AAMH;;AACD,QAAI7I,+BAA+B,GAAG,KAAKE,MAAL,CAAYW,gBAAZ,CAA6B,EAA7B,EAAiC2H,oCAAjC,CAAtC;;AACA,QAAIvI,8BAA8B,GAAG,KAAKC,MAAL,CAAYW,gBAAZ,CAA6B,EAA7B,EAAiC4H,mCAAjC,CAArC;;AACA,SAAKzF,kBAAL,CAAwB/B,IAAxB,CAA6B,IAAIlB,gBAAJ,CAAqB,KAAKG,MAA1B,EAAkCF,+BAAlC,EAAmEC,8BAAnE,CAA7B;AACH,GArBD;;AAsBAwB,EAAAA,MAAM,CAAClE,SAAP,CAAiBuL,qBAAjB,GAAyC,UAAUC,QAAV,EAAoB;AACzD,QAAI,CAACA,QAAL,EAAe;AACX;AACA;AACH;;AACD,QAAIA,QAAQ,CAACC,4BAAb,EAA2C;AACvC,WAAK9I,MAAL,CAAY+I,gBAAZ;AACH;;AACD,QAAInI,MAAM,GAAGoI,eAAe,CAACC,eAAhB,CAAgC,KAAKjJ,MAArC,EAA6C,KAAKyC,QAAL,CAAcsB,aAAd,EAA7C,EAA4E8E,QAAQ,CAACK,QAArF,CAAb;;AACA,QAAItI,MAAJ,EAAY;AACR;AACA,WAAKuI,uBAAL,CAA6BvI,MAA7B,EAFQ,CAGR;;;AACA,UAAIwH,0BAA0B,GAAG,EAAjC;AACA,UAAIC,yBAAyB,GAAG,EAAhC;;AACA,WAAK,IAAI3J,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmK,QAAQ,CAACK,QAAT,CAAkBtK,MAAtC,EAA8CF,CAAC,EAA/C,EAAmD;AAC/C,YAAI0K,OAAO,GAAGP,QAAQ,CAACK,QAAT,CAAkBxK,CAAlB,CAAd;;AACA,YAAI0K,OAAO,YAAYlL,0BAAnB,IAAiDkL,OAAO,CAACC,cAAzD,IAA2ED,OAAO,CAACE,mBAAvF,EAA4G;AACxGlB,UAAAA,0BAA0B,CAACrH,IAA3B,CAAgCqI,OAAO,CAACE,mBAAxC;AACAjB,UAAAA,yBAAyB,CAACtH,IAA1B,CAA+BqI,OAAO,CAACC,cAAvC;AACH;AACJ;;AACD,UAAIjB,0BAA0B,CAACxJ,MAA3B,GAAoC,CAAxC,EAA2C;AACvC,aAAKuJ,qBAAL,CAA2BC,0BAA3B,EAAuDC,yBAAvD;AACH;;AACD,WAAKtF,sBAAL,GAA8B8F,QAAQ,CAAChK,IAAvC;AACH;;AACD,QAAIgK,QAAQ,CAACU,2BAAb,EAA0C;AACtC,WAAKvJ,MAAL,CAAY+I,gBAAZ;AACH;AACJ,GA9BD;;AA+BAxH,EAAAA,MAAM,CAAClE,SAAP,CAAiB8L,uBAAjB,GAA2C,UAAU1J,WAAV,EAAuB;AAC9D,QAAI,CAACA,WAAD,IAAgBA,WAAW,CAACb,MAAZ,KAAuB,CAA3C,EAA8C;AAC1Ca,MAAAA,WAAW,GAAG,KAAKgD,QAAL,CAAcoE,wBAAd,EAAd;AACH;;AACD,SAAKhE,iBAAL,GAAyB,IAAzB;;AACA,SAAKJ,QAAL,CAAcuF,aAAd,CAA4BvI,WAA5B;;AACA,SAAKgD,QAAL,CAAcgC,SAAd;AACH,GAPD,CArR0C,CA6R1C;AACA;;;AACAlD,EAAAA,MAAM,CAAClE,SAAP,CAAiBqH,4BAAjB,GAAgD,UAAUvF,MAAV,EAAkBC,MAAlB,EAA0BoF,QAA1B,EAAoC;AAChF,QAAIgF,QAAQ,GAAG,IAAInK,gBAAJ,CAAqB,KAAKW,MAA1B,EAAkC,IAAlC,CAAf;;AACA,QAAIwJ,QAAQ,CAAC7J,MAAT,CAAgB6E,QAAhB,CAAJ,EAA+B;AAC3B,aAAO,KAAP;AACH;;AACD,QAAIzF,UAAU,GAAG,KAAK0D,QAAL,CAAcsB,aAAd,EAAjB;;AACA,QAAI0F,cAAc,GAAG,KAAKhH,QAAL,CAAcqF,iBAAd,EAArB,CANgF,CAOhF;;;AACA,QAAI;AACA,UAAI4B,eAAe,GAAG,KAAKC,UAAL,EAAtB;;AACAD,MAAAA,eAAe,CAACE,IAAhB,CAAqB,IAAItL,UAAU,CAACuL,2BAAf,CAA2CJ,cAA3C,EAA2D1K,UAA3D,CAArB;AACH,KAHD,SAIQ;AACJ,WAAK+K,QAAL;AACH,KAd+E,CAehF;;;AACA,QAAI,CAACtF,QAAD,IACGA,QAAQ,CAAC/E,WAAT,CAAqBb,MAArB,KAAgC4K,QAAQ,CAAC/J,WAAT,CAAqBb,MADxD,IAEG4K,QAAQ,CAAC/J,WAAT,CAAqBsK,IAArB,CAA0B,UAAUC,cAAV,EAA0BtL,CAA1B,EAA6B;AAAE,aAAO,CAACsL,cAAc,CAACjD,UAAf,CAA0BpH,MAA1B,CAAiC6E,QAAQ,CAAC/E,WAAT,CAAqBf,CAArB,EAAwBqI,UAAzD,CAAR;AAA+E,KAAxI,CAFP,EAEkJ;AAC9I,UAAI9H,aAAa,GAAGuF,QAAQ,GAAGA,QAAQ,CAAC/E,WAAT,CAAqBwK,GAArB,CAAyB,UAAUC,CAAV,EAAa;AAAE,eAAOA,CAAC,CAACnD,UAAF,CAAalB,SAApB;AAAgC,OAAxE,CAAH,GAA+E,IAA3G;AACA,UAAI3G,iBAAiB,GAAGsF,QAAQ,GAAGA,QAAQ,CAACxF,cAAZ,GAA6B,CAA7D;;AACA,WAAKmD,YAAL,CAAkBmC,IAAlB,CAAuB,IAAIxF,uBAAJ,CAA4BC,UAA5B,EAAwCyK,QAAQ,CAACxK,cAAjD,EAAiEC,aAAjE,EAAgFC,iBAAhF,EAAmGC,MAAM,IAAI,UAA7G,EAAyHC,MAAzH,CAAvB;AACH;;AACD,WAAO,IAAP;AACH,GAxBD;;AAyBAmC,EAAAA,MAAM,CAAClE,SAAP,CAAiB4H,YAAjB,GAAgC,UAAU9F,MAAV,EAAkBgL,YAAlB,EAAgC9E,YAAhC,EAA8CF,gBAA9C,EAAgEH,UAAhE,EAA4E;AACxG,QAAIoF,aAAa,GAAG,KAAK3H,QAAL,CAAc4H,gBAAd,EAApB;;AACA,QAAIC,YAAY,GAAGF,aAAa,CAAC,CAAD,CAAhC;;AACA,QAAID,YAAY,KAAK;AAAE;AAAvB,MAAsC;AAClC,aAAK,IAAIzL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0L,aAAa,CAACxL,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC3C,cAAI0L,aAAa,CAAC1L,CAAD,CAAb,CAAiB6L,QAAjB,CAA0BD,YAA1B,CAAJ,EAA6C;AACzCA,YAAAA,YAAY,GAAGF,aAAa,CAAC1L,CAAD,CAA5B;AACH;AACJ;AACJ,OAND,MAOK,IAAIyL,YAAY,KAAK;AAAE;AAAvB,MAAyC;AAC1C,aAAK,IAAIzL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0L,aAAa,CAACxL,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC3C,cAAI4L,YAAY,CAACE,eAAb,CAA6BJ,aAAa,CAAC1L,CAAD,CAA1C,CAAJ,EAAoD;AAChD4L,YAAAA,YAAY,GAAGF,aAAa,CAAC1L,CAAD,CAA5B;AACH;AACJ;AACJ,OANI,MAOA;AACD,UAAI0L,aAAa,CAACxL,MAAd,GAAuB,CAA3B,EAA8B;AAC1B;AACA;AACH;AACJ;;AACD,QAAIwG,SAAS,GAAG,IAAIjH,KAAJ,CAAUmM,YAAY,CAACrE,UAAvB,EAAmCqE,YAAY,CAACnE,MAAhD,EAAwDmE,YAAY,CAACrE,UAArE,EAAiFqE,YAAY,CAACnE,MAA9F,CAAhB;AACA,SAAKb,qBAAL,CAA2BnG,MAA3B,EAAmCiG,SAAnC,EAA8CC,YAA9C,EAA4DF,gBAA5D,EAA8EH,UAA9E;AACH,GAzBD;;AA0BAzD,EAAAA,MAAM,CAAClE,SAAP,CAAiBiI,qBAAjB,GAAyC,UAAUnG,MAAV,EAAkBiG,SAAlB,EAA6BC,YAA7B,EAA2CF,gBAA3C,EAA6DH,UAA7D,EAAyE;AAC9G,QAAI;AACA,UAAI0E,eAAe,GAAG,KAAKC,UAAL,EAAtB;;AACAD,MAAAA,eAAe,CAACE,IAAhB,CAAqB,IAAItL,UAAU,CAACmM,2BAAf,CAA2CtL,MAA3C,EAAmDiG,SAAnD,EAA8DC,YAA9D,EAA4EF,gBAA5E,EAA8FH,UAA9F,CAArB;AACH,KAHD,SAIQ;AACJ,WAAK8E,QAAL;AACH;AACJ,GARD,CAlV0C,CA2V1C;AACA;;;AACAvI,EAAAA,MAAM,CAAClE,SAAP,CAAiBqN,qBAAjB,GAAyC,UAAUC,KAAV,EAAiB;AACtD,QAAI,CAACA,KAAK,CAAC/L,MAAX,EAAmB;AACf,aAAO,IAAP;AACH;;AACD,QAAIgM,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIlM,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGgM,KAAK,CAAC/L,MAA5B,EAAoCF,CAAC,GAAGC,GAAxC,EAA6CD,CAAC,EAA9C,EAAkD;AAC9C,UAAImM,IAAI,GAAGF,KAAK,CAACjM,CAAD,CAAhB;;AACA,UAAI,CAACmM,IAAI,CAACC,IAAN,IAAcD,IAAI,CAACC,IAAL,CAAUC,OAAV,CAAkB,IAAlB,KAA2B,CAA7C,EAAgD;AAC5C,eAAO,IAAP;AACH;;AACD,UAAIC,CAAC,GAAGH,IAAI,CAACC,IAAL,CAAUG,KAAV,CAAgB,6BAAhB,CAAR;;AACA,UAAI,CAACD,CAAL,EAAQ;AACJ,eAAO,IAAP;AACH;;AACD,UAAIE,SAAS,GAAGF,CAAC,CAAC,CAAD,CAAjB;AACA,UAAIG,0BAA0B,GAAG,KAAK3I,OAAL,CAAagF,MAAb,CAAoB4D,sBAApB,CAA2CC,GAA3C,CAA+CH,SAA/C,CAAjC;;AACA,UAAI,CAACC,0BAAD,IAA+BA,0BAA0B,CAACvM,MAA3B,KAAsC,CAAzE,EAA4E;AACxE,eAAO,IAAP;AACH;;AACD,UAAI0M,QAAQ,GAAGH,0BAA0B,CAAC,CAAD,CAA1B,CAA8BI,IAA7C;AACA,UAAIC,cAAc,GAAGX,IAAI,CAACC,IAAL,CAAUlM,MAAV,GAAmBoM,CAAC,CAAC,CAAD,CAAD,CAAKpM,MAAxB,GAAiC,CAAtD;AACA,UAAI6M,aAAa,GAAGZ,IAAI,CAACC,IAAL,CAAUY,WAAV,CAAsBJ,QAAtB,EAAgCE,cAAc,GAAG,CAAjD,CAApB;;AACA,UAAIC,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACtB,eAAO,IAAP;AACH;;AACDb,MAAAA,OAAO,CAAC7J,IAAR,CAAa,CAAC0K,aAAD,EAAgBD,cAAhB,CAAb;AACH;;AACD,WAAOZ,OAAP;AACH,GA5BD;;AA6BArJ,EAAAA,MAAM,CAAClE,SAAP,CAAiBsO,YAAjB,GAAgC,UAAUxM,MAAV,EAAkBwL,KAAlB,EAAyBiB,mBAAzB,EAA8C;AAC1E,QAAIjK,KAAK,GAAG,IAAZ;;AACA,QAAIkK,kBAAkB,GAAG,IAAzB;;AACA,QAAI1M,MAAM,KAAK,SAAf,EAA0B;AACtB0M,MAAAA,kBAAkB,GAAG,KAAKnB,qBAAL,CAA2BC,KAA3B,CAArB;AACH;;AACD,QAAIkB,kBAAJ,EAAwB;AACpBlB,MAAAA,KAAK,CAAC,CAAD,CAAL,CAASmB,UAAT,GAAsB,IAAtB;AACH;;AACD,QAAI1D,0BAA0B,GAAG,EAAjC;AACA,QAAIC,yBAAyB,GAAG,EAAhC;;AACA,QAAItJ,UAAU,GAAG,KAAKiB,MAAL,CAAY+L,kBAAZ,CAA+B,KAAKhI,aAAL,EAA/B,EAAqD4G,KAArD,EAA4D,UAAUqB,SAAV,EAAqB;AAC9F,UAAIH,kBAAJ,EAAwB;AACpB,aAAK,IAAInN,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGkN,kBAAkB,CAACjN,MAAzC,EAAiDF,CAAC,GAAGC,GAArD,EAA0DD,CAAC,EAA3D,EAA+D;AAC3D,cAAIuN,EAAE,GAAGJ,kBAAkB,CAACnN,CAAD,CAA3B;AAAA,cAAgCwN,kBAAkB,GAAGD,EAAE,CAAC,CAAD,CAAvD;AAAA,cAA4DE,mBAAmB,GAAGF,EAAE,CAAC,CAAD,CAApF;AACA,cAAIG,QAAQ,GAAGJ,SAAS,CAACtN,CAAD,CAAxB;AACA,cAAIuH,UAAU,GAAGmG,QAAQ,CAAC5D,KAAT,CAAetH,eAAhC;AACA,cAAIuK,aAAa,GAAGW,QAAQ,CAAC5D,KAAT,CAAe6D,WAAf,GAA6B,CAA7B,GAAiCH,kBAArD;AACA,cAAIV,cAAc,GAAGY,QAAQ,CAAC5D,KAAT,CAAe6D,WAAf,GAA6B,CAA7B,GAAiCF,mBAAtD;AACA/D,UAAAA,0BAA0B,CAACrH,IAA3B,CAAgC,IAAI5C,KAAJ,CAAU8H,UAAV,EAAsBuF,cAAc,GAAG,CAAvC,EAA0CvF,UAA1C,EAAsDuF,cAAc,GAAG,CAAvE,CAAhC;AACAnD,UAAAA,yBAAyB,CAACtH,IAA1B,CAA+B,IAAI5C,KAAJ,CAAU8H,UAAV,EAAsBwF,aAAa,GAAG,CAAtC,EAAyCxF,UAAzC,EAAqDuF,cAAc,GAAG,CAAtE,CAA/B;AACH;AACJ;;AACD,UAAIzM,UAAU,GAAG6M,mBAAmB,CAACI,SAAD,CAApC;;AACA,UAAIjN,UAAJ,EAAgB;AACZ;AACA;AACA4C,QAAAA,KAAK,CAACe,WAAN,GAAoB,IAApB;AACH;;AACD,aAAO3D,UAAP;AACH,KAnBgB,CAAjB;;AAoBA,QAAIA,UAAJ,EAAgB;AACZ,WAAK2D,WAAL,GAAmB,KAAnB;AACA,WAAKsF,aAAL,CAAmB7I,MAAnB,EAA2BJ,UAA3B;AACH;;AACD,QAAIqJ,0BAA0B,CAACxJ,MAA3B,GAAoC,CAAxC,EAA2C;AACvC,WAAKuJ,qBAAL,CAA2BC,0BAA3B,EAAuDC,yBAAvD;AACH;AACJ,GAtCD;;AAuCA9G,EAAAA,MAAM,CAAClE,SAAP,CAAiBiP,OAAjB,GAA2B,UAAUnN,MAAV,EAAkBoN,SAAlB,EAA6BC,OAA7B,EAAsC;AAC7D,QAAIC,CAAC,GAAGpO,YAAY,CAACqO,OAArB;;AACA,QAAIH,SAAS,KAAKE,CAAC,CAACE,gBAApB,EAAsC;AAClC,WAAKhK,mBAAL,GAA2B,IAA3B;AACA,WAAKC,iCAAL,GAAyC,KAAKmB,aAAL,GAAqBM,KAArB,CAA2B,CAA3B,CAAzC;AACA;AACH;;AACD,QAAIkI,SAAS,KAAKE,CAAC,CAACG,cAApB,EAAoC;AAChC,WAAKjK,mBAAL,GAA2B,KAA3B;AACH;;AACD,QAAI,KAAKN,cAAL,CAAoBoG,OAApB,CAA4B4C,GAA5B,CAAgC;AAAG;AAAnC,KAAJ,EAAwD;AACpD;AACA;AACA,WAAKpJ,yBAAL,CAA+BqC,IAA/B,CAAoCC,SAApC;;AACA;AACH;;AACD,QAAIC,QAAQ,GAAG,IAAInF,gBAAJ,CAAqB,KAAKW,MAA1B,EAAkC,IAAlC,CAAf;AACA,QAAI6M,kBAAkB,GAAG;AAAE;AAA3B;;AACA,QAAIN,SAAS,KAAKE,CAAC,CAACK,IAAhB,IAAwBP,SAAS,KAAKE,CAAC,CAACM,IAA5C,EAAkD;AAC9C;AACA;AACA,WAAKtK,QAAL,CAAcuK,sBAAd;AACH,KAtB4D,CAuB7D;;;AACA,SAAKvK,QAAL,CAAcwK,gBAAd;;AACA,SAAKvK,WAAL,GAAmB,IAAnB;;AACA,QAAI;AACA,cAAQ6J,SAAR;AACI,aAAKE,CAAC,CAACS,IAAP;AACI,eAAKC,KAAL,CAAWhO,MAAX,EAAmBqN,OAAO,CAAC1B,IAA3B;;AACA;;AACJ,aAAK2B,CAAC,CAACW,mBAAP;AACI,eAAKC,oBAAL,CAA0Bb,OAAO,CAAC1B,IAAlC,EAAwC0B,OAAO,CAACc,cAAhD;;AACA;;AACJ,aAAKb,CAAC,CAACc,KAAP;AACIV,UAAAA,kBAAkB,GAAG;AAAE;AAAvB;;AACA,eAAKW,MAAL,CAAYhB,OAAO,CAAC1B,IAApB,EAA0B0B,OAAO,CAACiB,cAAlC,EAAkDjB,OAAO,CAACkB,eAAR,IAA2B,EAA7E;;AACA;;AACJ,aAAKjB,CAAC,CAACkB,GAAP;AACI,eAAKC,IAAL;;AACA;;AACJ,aAAKnB,CAAC,CAACK,IAAP;AACID,UAAAA,kBAAkB,GAAG;AAAE;AAAvB;;AACA,eAAK1D,uBAAL,CAA6B,KAAKnJ,MAAL,CAAY6N,IAAZ,EAA7B;;AACA;;AACJ,aAAKpB,CAAC,CAACM,IAAP;AACIF,UAAAA,kBAAkB,GAAG;AAAE;AAAvB;;AACA,eAAK1D,uBAAL,CAA6B,KAAKnJ,MAAL,CAAY8N,IAAZ,EAA7B;;AACA;;AACJ,aAAKrB,CAAC,CAACsB,cAAP;AACI,eAAKC,uBAAL,CAA6BxB,OAA7B;;AACA;;AACJ,aAAKC,CAAC,CAACwB,eAAP;AACI,eAAKC,wBAAL,CAA8B1B,OAA9B;;AACA;;AACJ,aAAKC,CAAC,CAACG,cAAP;AACI,eAAKuB,wBAAL,CAA8BhP,MAA9B;;AACA;AA9BR;AAgCH,KAjCD,CAkCA,OAAOiP,GAAP,EAAY;AACR7Q,MAAAA,iBAAiB,CAAC6Q,GAAD,CAAjB;AACH;;AACD,SAAK1L,WAAL,GAAmB,KAAnB;;AACA,QAAI6J,SAAS,KAAKE,CAAC,CAACK,IAAhB,IAAwBP,SAAS,KAAKE,CAAC,CAACM,IAA5C,EAAkD;AAC9C,WAAKtK,QAAL,CAAc4L,uBAAd;AACH;;AACD,SAAKvK,0BAAL;;AACA,QAAI,KAAKY,4BAAL,CAAkCvF,MAAlC,EAA0C0N,kBAA1C,EAA8DrI,QAA9D,CAAJ,EAA6E;AACzE,WAAKS,YAAL,CAAkB9F,MAAlB,EAA0B;AAAE;AAA5B,QAA2C;AAAE;AAA7C,QAA2D,IAA3D,EAAiE;AAAE;AAAnE;AACH;AACJ,GAvED;;AAwEAoC,EAAAA,MAAM,CAAClE,SAAP,CAAiB8Q,wBAAjB,GAA4C,UAAUhP,MAAV,EAAkB;AAC1D,QAAI,CAAC,KAAKwD,mBAAN,IAA6BxD,MAAM,KAAK,UAA5C,EAAwD;AACpD;AACA,UAAIkB,oBAAoB,GAAGR,gBAAgB,CAACM,0BAAjB,CAA4C,KAAK2C,kBAAjD,CAA3B;;AACA,WAAK8F,qBAAL,CAA2B3K,cAAc,CAACqQ,8BAAf,CAA8C,KAAKvL,sBAAnD,EAA2E,KAAKP,OAAL,CAAagF,MAAxF,EAAgG,KAAKhF,OAAL,CAAalD,KAA7G,EAAoH,KAAKsD,iCAAzH,EAA4J,KAAKmB,aAAL,EAA5J,EAAkL1D,oBAAlL,CAA3B;;AACA,WAAKuC,iCAAL,GAAyC,IAAzC;AACH;AACJ,GAPD;;AAQArB,EAAAA,MAAM,CAAClE,SAAP,CAAiB8P,KAAjB,GAAyB,UAAUhO,MAAV,EAAkB2L,IAAlB,EAAwB;AAC7C,QAAI,CAAC,KAAKnI,mBAAN,IAA6BxD,MAAM,KAAK,UAA5C,EAAwD;AACpD;AACA,UAAIR,GAAG,GAAGmM,IAAI,CAAClM,MAAf;AACA,UAAI2P,MAAM,GAAG,CAAb;;AACA,aAAOA,MAAM,GAAG5P,GAAhB,EAAqB;AACjB,YAAI6P,UAAU,GAAG/Q,OAAO,CAACgR,cAAR,CAAuB3D,IAAvB,EAA6ByD,MAA7B,CAAjB;AACA,YAAIG,GAAG,GAAG5D,IAAI,CAAC6D,MAAL,CAAYJ,MAAZ,EAAoBC,UAApB,CAAV,CAFiB,CAGjB;;AACA,YAAInO,oBAAoB,GAAGR,gBAAgB,CAACM,0BAAjB,CAA4C,KAAK2C,kBAAjD,CAA3B;;AACA,aAAK8F,qBAAL,CAA2B3K,cAAc,CAAC2Q,oBAAf,CAAoC,KAAK7L,sBAAzC,EAAiE,KAAKP,OAAL,CAAagF,MAA9E,EAAsF,KAAKhF,OAAL,CAAalD,KAAnG,EAA0G,KAAKyE,aAAL,EAA1G,EAAgI1D,oBAAhI,EAAsJqO,GAAtJ,CAA3B;;AACAH,QAAAA,MAAM,IAAIC,UAAV;AACH;AACJ,KAZD,MAaK;AACD,WAAK5F,qBAAL,CAA2B3K,cAAc,CAAC4Q,uBAAf,CAAuC,KAAK9L,sBAA5C,EAAoE,KAAKP,OAAL,CAAagF,MAAjF,EAAyF,KAAKhF,OAAL,CAAalD,KAAtG,EAA6G,KAAKyE,aAAL,EAA7G,EAAmI+G,IAAnI,CAA3B;AACH;AACJ,GAjBD;;AAkBAvJ,EAAAA,MAAM,CAAClE,SAAP,CAAiBgQ,oBAAjB,GAAwC,UAAUvC,IAAV,EAAgBwC,cAAhB,EAAgC;AACpE,SAAK1E,qBAAL,CAA2B3K,cAAc,CAAC6Q,mBAAf,CAAmC,KAAK/L,sBAAxC,EAAgE,KAAKP,OAAL,CAAagF,MAA7E,EAAqF,KAAKhF,OAAL,CAAalD,KAAlG,EAAyG,KAAKyE,aAAL,EAAzG,EAA+H+G,IAA/H,EAAqIwC,cAArI,CAA3B;AACH,GAFD;;AAGA/L,EAAAA,MAAM,CAAClE,SAAP,CAAiBmQ,MAAjB,GAA0B,UAAU1C,IAAV,EAAgB2C,cAAhB,EAAgCC,eAAhC,EAAiD;AACvE,SAAK9E,qBAAL,CAA2B3K,cAAc,CAAC8Q,KAAf,CAAqB,KAAKvM,OAAL,CAAagF,MAAlC,EAA0C,KAAKhF,OAAL,CAAalD,KAAvD,EAA8D,KAAKyE,aAAL,EAA9D,EAAoF+G,IAApF,EAA0F2C,cAA1F,EAA0GC,eAA1G,CAA3B;AACH,GAFD;;AAGAnM,EAAAA,MAAM,CAAClE,SAAP,CAAiBuQ,IAAjB,GAAwB,YAAY;AAChC,SAAKhF,qBAAL,CAA2B5K,gBAAgB,CAACgR,GAAjB,CAAqB,KAAKxM,OAAL,CAAagF,MAAlC,EAA0C,KAAKhF,OAAL,CAAalD,KAAvD,EAA8D,KAAKyE,aAAL,EAA9D,CAA3B;AACH,GAFD;;AAGAxC,EAAAA,MAAM,CAAClE,SAAP,CAAiB2Q,uBAAjB,GAA2C,UAAU5E,OAAV,EAAmB;AAC1D,SAAK3G,QAAL,CAAcwM,oBAAd;;AACA,SAAKrG,qBAAL,CAA2B,IAAI7K,mBAAJ,CAAwB;AAAE;AAA1B,MAAuC,CAACqL,OAAD,CAAvC,EAAkD;AACzEN,MAAAA,4BAA4B,EAAE,KAD2C;AAEzES,MAAAA,2BAA2B,EAAE;AAF4C,KAAlD,CAA3B;AAIH,GAND;;AAOAhI,EAAAA,MAAM,CAAClE,SAAP,CAAiB6Q,wBAAjB,GAA4C,UAAUhF,QAAV,EAAoB;AAC5D,SAAKN,qBAAL,CAA2B,IAAI7K,mBAAJ,CAAwB;AAAE;AAA1B,MAAuCmL,QAAvC,EAAiD;AACxEJ,MAAAA,4BAA4B,EAAE,KAD0C;AAExES,MAAAA,2BAA2B,EAAE;AAF2C,KAAjD,CAA3B;AAIH,GALD;;AAMAhI,EAAAA,MAAM,CAAC6C,gBAAP,GAA0B,KAA1B;AACA,SAAO7C,MAAP;AACH,CA3hB2B,CA2hB1BjD,UAAU,CAAC4Q,gBA3hBe,CAA5B;;AA4hBA,SAAS3N,MAAT;;AACA,IAAIyH,eAAe;AAAG;AAAe,YAAY;AAC7C,WAASA,eAAT,GAA2B,CAC1B;;AACDA,EAAAA,eAAe,CAACC,eAAhB,GAAkC,UAAU3J,KAAV,EAAiB6P,gBAAjB,EAAmCjG,QAAnC,EAA6C;AAC3E,QAAIkG,GAAG,GAAG;AACN9P,MAAAA,KAAK,EAAEA,KADD;AAEN6P,MAAAA,gBAAgB,EAAEA,gBAFZ;AAGNE,MAAAA,aAAa,EAAE,EAHT;AAINC,MAAAA,sBAAsB,EAAE;AAJlB,KAAV;;AAMA,QAAI1O,MAAM,GAAG,KAAK2O,qBAAL,CAA2BH,GAA3B,EAAgClG,QAAhC,CAAb;;AACA,SAAK,IAAIxK,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGyQ,GAAG,CAACC,aAAJ,CAAkBzQ,MAAxC,EAAgDF,CAAC,GAAGC,GAApD,EAAyDD,CAAC,EAA1D,EAA8D;AAC1D0Q,MAAAA,GAAG,CAAC9P,KAAJ,CAAUkQ,gBAAV,CAA2BJ,GAAG,CAACC,aAAJ,CAAkB3Q,CAAlB,CAA3B,EAAiD,IAAjD,EAAuD;AAAE;AAAzD;AACH;;AACD,WAAOkC,MAAP;AACH,GAZD;;AAaAoI,EAAAA,eAAe,CAACuG,qBAAhB,GAAwC,UAAUH,GAAV,EAAelG,QAAf,EAAyB;AAC7D,QAAI,KAAKuG,aAAL,CAAmBvG,QAAnB,CAAJ,EAAkC;AAC9B,aAAO,IAAP;AACH;;AACD,QAAIwG,YAAY,GAAG,KAAKC,kBAAL,CAAwBP,GAAxB,EAA6BlG,QAA7B,CAAnB;;AACA,QAAIwG,YAAY,CAACE,UAAb,CAAwBhR,MAAxB,KAAmC,CAAvC,EAA0C;AACtC,aAAO,IAAP;AACH;;AACD,QAAIiR,aAAa,GAAGH,YAAY,CAACE,UAAjC;;AACA,QAAIE,eAAe,GAAG,KAAKC,kBAAL,CAAwBF,aAAxB,CAAtB;;AACA,QAAIC,eAAe,CAAC5S,cAAhB,CAA+B,GAA/B,CAAJ,EAAyC;AACrC;AACA8S,MAAAA,OAAO,CAACC,IAAR,CAAa,mBAAb;AACA,aAAO,IAAP;AACH,KAd4D,CAe7D;;;AACA,QAAIC,kBAAkB,GAAG,EAAzB;;AACA,SAAK,IAAIxR,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGkR,aAAa,CAACjR,MAApC,EAA4CF,CAAC,GAAGC,GAAhD,EAAqDD,CAAC,EAAtD,EAA0D;AACtD,UAAI,CAACoR,eAAe,CAAC5S,cAAhB,CAA+B2S,aAAa,CAACnR,CAAD,CAAb,CAAiByR,UAAjB,CAA4BC,KAA5B,CAAkCC,QAAlC,EAA/B,CAAL,EAAmF;AAC/EH,QAAAA,kBAAkB,CAACnP,IAAnB,CAAwB8O,aAAa,CAACnR,CAAD,CAArC;AACH;AACJ,KArB4D,CAsB7D;AACA;;;AACA,QAAIgR,YAAY,CAACY,uBAAb,IAAwCJ,kBAAkB,CAACtR,MAAnB,GAA4B,CAAxE,EAA2E;AACvEsR,MAAAA,kBAAkB,CAAC,CAAD,CAAlB,CAAsBpE,UAAtB,GAAmC,IAAnC;AACH;;AACD,QAAIyE,eAAe,GAAGnB,GAAG,CAAC9P,KAAJ,CAAUyM,kBAAV,CAA6BqD,GAAG,CAACD,gBAAjC,EAAmDe,kBAAnD,EAAuE,UAAUM,qBAAV,EAAiC;AAC1H,UAAIC,4BAA4B,GAAG,EAAnC;;AACA,WAAK,IAAI/R,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0Q,GAAG,CAACD,gBAAJ,CAAqBvQ,MAAzC,EAAiDF,CAAC,EAAlD,EAAsD;AAClD+R,QAAAA,4BAA4B,CAAC/R,CAAD,CAA5B,GAAkC,EAAlC;AACH;;AACD,WAAK,IAAI4B,EAAE,GAAG,CAAT,EAAYoQ,uBAAuB,GAAGF,qBAA3C,EAAkElQ,EAAE,GAAGoQ,uBAAuB,CAAC9R,MAA/F,EAAuG0B,EAAE,EAAzG,EAA6G;AACzG,YAAIqQ,EAAE,GAAGD,uBAAuB,CAACpQ,EAAD,CAAhC;;AACA,YAAI,CAACqQ,EAAE,CAACR,UAAR,EAAoB;AAChB;AACA;AACH;;AACDM,QAAAA,4BAA4B,CAACE,EAAE,CAACR,UAAH,CAAcC,KAAf,CAA5B,CAAkDrP,IAAlD,CAAuD4P,EAAvD;AACH;;AACD,UAAIC,gBAAgB,GAAG,UAAUC,CAAV,EAAajU,CAAb,EAAgB;AACnC,eAAOiU,CAAC,CAACV,UAAF,CAAaW,KAAb,GAAqBlU,CAAC,CAACuT,UAAF,CAAaW,KAAzC;AACH,OAFD;;AAGA,UAAIC,gBAAgB,GAAG,EAAvB;;AACA,UAAIC,OAAO,GAAG,UAAUtS,CAAV,EAAa;AACvB,YAAI+R,4BAA4B,CAAC/R,CAAD,CAA5B,CAAgCE,MAAhC,GAAyC,CAA7C,EAAgD;AAC5C6R,UAAAA,4BAA4B,CAAC/R,CAAD,CAA5B,CAAgC0C,IAAhC,CAAqCwP,gBAArC;AACAG,UAAAA,gBAAgB,CAACrS,CAAD,CAAhB,GAAsBwK,QAAQ,CAACxK,CAAD,CAAR,CAAYuS,kBAAZ,CAA+B7B,GAAG,CAAC9P,KAAnC,EAA0C;AAC5D4R,YAAAA,wBAAwB,EAAE,YAAY;AAClC,qBAAOT,4BAA4B,CAAC/R,CAAD,CAAnC;AACH,aAH2D;AAI5DyS,YAAAA,mBAAmB,EAAE,UAAUC,EAAV,EAAc;AAC/B,kBAAIC,GAAG,GAAGC,QAAQ,CAACF,EAAD,EAAK,EAAL,CAAlB;;AACA,kBAAI5I,KAAK,GAAG4G,GAAG,CAAC9P,KAAJ,CAAUiS,gBAAV,CAA2BnC,GAAG,CAACC,aAAJ,CAAkBgC,GAAlB,CAA3B,CAAZ;;AACA,kBAAIjC,GAAG,CAACE,sBAAJ,CAA2B+B,GAA3B,MAAoC;AAAE;AAA1C,gBAAqD;AACjD,yBAAO,IAAIjT,SAAJ,CAAcoK,KAAK,CAACtH,eAApB,EAAqCsH,KAAK,CAAC6D,WAA3C,EAAwD7D,KAAK,CAACrH,aAA9D,EAA6EqH,KAAK,CAACgJ,SAAnF,CAAP;AACH;;AACD,qBAAO,IAAIpT,SAAJ,CAAcoK,KAAK,CAACrH,aAApB,EAAmCqH,KAAK,CAACgJ,SAAzC,EAAoDhJ,KAAK,CAACtH,eAA1D,EAA2EsH,KAAK,CAAC6D,WAAjF,CAAP;AACH;AAX2D,WAA1C,CAAtB;AAaH,SAfD,MAgBK;AACD0E,UAAAA,gBAAgB,CAACrS,CAAD,CAAhB,GAAsB0Q,GAAG,CAACD,gBAAJ,CAAqBzQ,CAArB,CAAtB;AACH;AACJ,OApBD;;AAqBA,WAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0Q,GAAG,CAACD,gBAAJ,CAAqBvQ,MAAzC,EAAiDF,CAAC,EAAlD,EAAsD;AAClDsS,QAAAA,OAAO,CAACtS,CAAD,CAAP;AACH;;AACD,aAAOqS,gBAAP;AACH,KA1CqB,CAAtB;;AA2CA,QAAI,CAACR,eAAL,EAAsB;AAClBA,MAAAA,eAAe,GAAGnB,GAAG,CAACD,gBAAtB;AACH,KAxE4D,CAyE7D;;;AACA,QAAIsC,aAAa,GAAG,EAApB;;AACA,SAAK,IAAIC,iBAAT,IAA8B5B,eAA9B,EAA+C;AAC3C,UAAIA,eAAe,CAAC5S,cAAhB,CAA+BwU,iBAA/B,CAAJ,EAAuD;AACnDD,QAAAA,aAAa,CAAC1Q,IAAd,CAAmBuQ,QAAQ,CAACI,iBAAD,EAAoB,EAApB,CAA3B;AACH;AACJ,KA/E4D,CAgF7D;;;AACAD,IAAAA,aAAa,CAACrQ,IAAd,CAAmB,UAAUyP,CAAV,EAAajU,CAAb,EAAgB;AAC/B,aAAOA,CAAC,GAAGiU,CAAX;AACH,KAFD,EAjF6D,CAoF7D;;AACA,SAAK,IAAIvQ,EAAE,GAAG,CAAT,EAAYqR,eAAe,GAAGF,aAAnC,EAAkDnR,EAAE,GAAGqR,eAAe,CAAC/S,MAAvE,EAA+E0B,EAAE,EAAjF,EAAqF;AACjF,UAAIsR,YAAY,GAAGD,eAAe,CAACrR,EAAD,CAAlC;AACAiQ,MAAAA,eAAe,CAACvM,MAAhB,CAAuB4N,YAAvB,EAAqC,CAArC;AACH;;AACD,WAAOrB,eAAP;AACH,GA1FD;;AA2FAvH,EAAAA,eAAe,CAACyG,aAAhB,GAAgC,UAAUvG,QAAV,EAAoB;AAChD,SAAK,IAAIxK,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGuK,QAAQ,CAACtK,MAA/B,EAAuCF,CAAC,GAAGC,GAA3C,EAAgDD,CAAC,EAAjD,EAAqD;AACjD,UAAIwK,QAAQ,CAACxK,CAAD,CAAZ,EAAiB;AACb,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GAPD;;AAQAsK,EAAAA,eAAe,CAAC2G,kBAAhB,GAAqC,UAAUP,GAAV,EAAelG,QAAf,EAAyB;AAC1D,QAAI0G,UAAU,GAAG,EAAjB;AACA,QAAIU,uBAAuB,GAAG,KAA9B;;AACA,SAAK,IAAI5R,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGuK,QAAQ,CAACtK,MAA/B,EAAuCF,CAAC,GAAGC,GAA3C,EAAgDD,CAAC,EAAjD,EAAqD;AACjD,UAAI0K,OAAO,GAAGF,QAAQ,CAACxK,CAAD,CAAtB;;AACA,UAAI0K,OAAJ,EAAa;AACT,YAAIyI,CAAC,GAAG,KAAKC,6BAAL,CAAmC1C,GAAnC,EAAwC1Q,CAAxC,EAA2C0K,OAA3C,CAAR;;AACAwG,QAAAA,UAAU,GAAGA,UAAU,CAACnP,MAAX,CAAkBoR,CAAC,CAACjC,UAApB,CAAb;AACAU,QAAAA,uBAAuB,GAAGA,uBAAuB,IAAIuB,CAAC,CAACvB,uBAAvD;AACH;AACJ;;AACD,WAAO;AACHV,MAAAA,UAAU,EAAEA,UADT;AAEHU,MAAAA,uBAAuB,EAAEA;AAFtB,KAAP;AAIH,GAfD;;AAgBAtH,EAAAA,eAAe,CAAC8I,6BAAhB,GAAgD,UAAU1C,GAAV,EAAe2C,eAAf,EAAgC3I,OAAhC,EAAyC;AACrF;AACA;AACA,QAAIwG,UAAU,GAAG,EAAjB;AACA,QAAIoC,cAAc,GAAG,CAArB;;AACA,QAAIC,gBAAgB,GAAG,UAAUpM,SAAV,EAAqBiF,IAArB,EAA2BoH,gBAA3B,EAA6C;AAChE,UAAIA,gBAAgB,KAAK,KAAK,CAA9B,EAAiC;AAAEA,QAAAA,gBAAgB,GAAG,KAAnB;AAA2B;;AAC9D,UAAIrM,SAAS,CAACE,OAAV,MAAuB+E,IAAI,KAAK,EAApC,EAAwC;AACpC;AACA;AACH;;AACD8E,MAAAA,UAAU,CAAC7O,IAAX,CAAgB;AACZoP,QAAAA,UAAU,EAAE;AACRC,UAAAA,KAAK,EAAE2B,eADC;AAERjB,UAAAA,KAAK,EAAEkB,cAAc;AAFb,SADA;AAKZxJ,QAAAA,KAAK,EAAE3C,SALK;AAMZiF,QAAAA,IAAI,EAAEA,IANM;AAOZoH,QAAAA,gBAAgB,EAAEA,gBAPN;AAQZC,QAAAA,oBAAoB,EAAE/I,OAAO,CAACgJ;AARlB,OAAhB;AAUH,KAhBD;;AAiBA,QAAI9B,uBAAuB,GAAG,KAA9B;;AACA,QAAI+B,uBAAuB,GAAG,UAAUxM,SAAV,EAAqBiF,IAArB,EAA2BoH,gBAA3B,EAA6C;AACvE5B,MAAAA,uBAAuB,GAAG,IAA1B;AACA2B,MAAAA,gBAAgB,CAACpM,SAAD,EAAYiF,IAAZ,EAAkBoH,gBAAlB,CAAhB;AACH,KAHD;;AAIA,QAAII,cAAc,GAAG,UAAUzM,SAAV,EAAqB0M,oBAArB,EAA2C;AAC5D,UAAI5J,UAAJ;;AACA,UAAI9C,SAAS,CAACE,OAAV,EAAJ,EAAyB;AACrB,YAAI,OAAOwM,oBAAP,KAAgC,SAApC,EAA+C;AAC3C,cAAIA,oBAAJ,EAA0B;AACtB5J,YAAAA,UAAU,GAAG;AAAE;AAAf;AACH,WAFD,MAGK;AACDA,YAAAA,UAAU,GAAG;AAAE;AAAf;AACH;AACJ,SAPD,MAQK;AACD;AACA,cAAI6J,aAAa,GAAGpD,GAAG,CAAC9P,KAAJ,CAAUmT,gBAAV,CAA2B5M,SAAS,CAAC3E,eAArC,CAApB;;AACA,cAAI2E,SAAS,CAACwG,WAAV,KAA0BmG,aAA9B,EAA6C;AACzC7J,YAAAA,UAAU,GAAG;AAAE;AAAf;AACH,WAFD,MAGK;AACDA,YAAAA,UAAU,GAAG;AAAE;AAAf;AACH;AACJ;AACJ,OAnBD,MAoBK;AACDA,QAAAA,UAAU,GAAG;AAAE;AAAf;AACH;;AACD,UAAI+J,CAAC,GAAGtD,GAAG,CAACC,aAAJ,CAAkBzQ,MAA1B;;AACA,UAAIwS,EAAE,GAAGhC,GAAG,CAAC9P,KAAJ,CAAUkQ,gBAAV,CAA2B,IAA3B,EAAiC3J,SAAjC,EAA4C8C,UAA5C,CAAT;;AACAyG,MAAAA,GAAG,CAACC,aAAJ,CAAkBqD,CAAlB,IAAuBtB,EAAvB;AACAhC,MAAAA,GAAG,CAACE,sBAAJ,CAA2BoD,CAA3B,IAAgC7M,SAAS,CAAC8M,YAAV,EAAhC;AACA,aAAOD,CAAC,CAACrC,QAAF,EAAP;AACH,KA9BD;;AA+BA,QAAIuC,oBAAoB,GAAG;AACvBX,MAAAA,gBAAgB,EAAEA,gBADK;AAEvBI,MAAAA,uBAAuB,EAAEA,uBAFF;AAGvBC,MAAAA,cAAc,EAAEA;AAHO,KAA3B;;AAKA,QAAI;AACAlJ,MAAAA,OAAO,CAACyJ,iBAAR,CAA0BzD,GAAG,CAAC9P,KAA9B,EAAqCsT,oBAArC;AACH,KAFD,CAGA,OAAO3P,CAAP,EAAU;AACN;AACA;AACA1F,MAAAA,iBAAiB,CAAC0F,CAAD,CAAjB;AACA,aAAO;AACH2M,QAAAA,UAAU,EAAE,EADT;AAEHU,QAAAA,uBAAuB,EAAE;AAFtB,OAAP;AAIH;;AACD,WAAO;AACHV,MAAAA,UAAU,EAAEA,UADT;AAEHU,MAAAA,uBAAuB,EAAEA;AAFtB,KAAP;AAIH,GA/ED;;AAgFAtH,EAAAA,eAAe,CAAC+G,kBAAhB,GAAqC,UAAUH,UAAV,EAAsB;AACvD;AACAA,IAAAA,UAAU,GAAGA,UAAU,CAACvL,KAAX,CAAiB,CAAjB,CAAb,CAFuD,CAGvD;;AACAuL,IAAAA,UAAU,CAACxO,IAAX,CAAgB,UAAUyP,CAAV,EAAajU,CAAb,EAAgB;AAC5B;AACA,aAAO,CAAEuB,KAAK,CAAC2U,sBAAN,CAA6BjC,CAAC,CAACrI,KAA/B,EAAsC5L,CAAC,CAAC4L,KAAxC,CAAT;AACH,KAHD,EAJuD,CAQvD;;AACA,QAAIsH,eAAe,GAAG,EAAtB;;AACA,SAAK,IAAIpR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkR,UAAU,CAAChR,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AACxC,UAAIqU,UAAU,GAAGnD,UAAU,CAAClR,CAAC,GAAG,CAAL,CAA3B;AACA,UAAIsU,SAAS,GAAGpD,UAAU,CAAClR,CAAD,CAA1B;;AACA,UAAIqU,UAAU,CAACvK,KAAX,CAAiBpB,gBAAjB,GAAoCmD,QAApC,CAA6CyI,SAAS,CAACxK,KAAV,CAAgByK,cAAhB,EAA7C,CAAJ,EAAoF;AAChF,YAAIC,UAAU,GAAG,KAAK,CAAtB;;AACA,YAAIH,UAAU,CAAC5C,UAAX,CAAsBC,KAAtB,GAA8B4C,SAAS,CAAC7C,UAAV,CAAqBC,KAAvD,EAA8D;AAC1D;AACA8C,UAAAA,UAAU,GAAGH,UAAU,CAAC5C,UAAX,CAAsBC,KAAnC;AACH,SAHD,MAIK;AACD8C,UAAAA,UAAU,GAAGF,SAAS,CAAC7C,UAAV,CAAqBC,KAAlC;AACH;;AACDN,QAAAA,eAAe,CAACoD,UAAU,CAAC7C,QAAX,EAAD,CAAf,GAAyC,IAAzC;;AACA,aAAK,IAAI8C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvD,UAAU,CAAChR,MAA/B,EAAuCuU,CAAC,EAAxC,EAA4C;AACxC,cAAIvD,UAAU,CAACuD,CAAD,CAAV,CAAchD,UAAd,CAAyBC,KAAzB,KAAmC8C,UAAvC,EAAmD;AAC/CtD,YAAAA,UAAU,CAAC5L,MAAX,CAAkBmP,CAAlB,EAAqB,CAArB;;AACA,gBAAIA,CAAC,GAAGzU,CAAR,EAAW;AACPA,cAAAA,CAAC;AACJ;;AACDyU,YAAAA,CAAC;AACJ;AACJ;;AACD,YAAIzU,CAAC,GAAG,CAAR,EAAW;AACPA,UAAAA,CAAC;AACJ;AACJ;AACJ;;AACD,WAAOoR,eAAP;AACH,GAtCD;;AAuCA,SAAO9G,eAAP;AACH,CA3PoC,EAArC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { CursorCollection } from './cursorCollection.js';\r\nimport { CursorColumns, CursorConfiguration, CursorContext, CursorState, EditOperationResult } from './cursorCommon.js';\r\nimport { DeleteOperations } from './cursorDeleteOperations.js';\r\nimport { TypeOperations, TypeWithAutoClosingCommand } from './cursorTypeOperations.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport * as editorCommon from '../editorCommon.js';\r\nimport * as viewEvents from '../view/viewEvents.js';\r\nimport { dispose } from '../../../base/common/lifecycle.js';\r\nfunction containsLineMappingChanged(events) {\r\n    for (var i = 0, len = events.length; i < len; i++) {\r\n        if (events[i].type === 8 /* ViewLineMappingChanged */) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nvar CursorStateChangedEvent = /** @class */ (function () {\r\n    function CursorStateChangedEvent(selections, modelVersionId, oldSelections, oldModelVersionId, source, reason) {\r\n        this.selections = selections;\r\n        this.modelVersionId = modelVersionId;\r\n        this.oldSelections = oldSelections;\r\n        this.oldModelVersionId = oldModelVersionId;\r\n        this.source = source;\r\n        this.reason = reason;\r\n    }\r\n    return CursorStateChangedEvent;\r\n}());\r\nexport { CursorStateChangedEvent };\r\n/**\r\n * A snapshot of the cursor and the model state\r\n */\r\nvar CursorModelState = /** @class */ (function () {\r\n    function CursorModelState(model, cursor) {\r\n        this.modelVersionId = model.getVersionId();\r\n        this.cursorState = cursor.getAll();\r\n    }\r\n    CursorModelState.prototype.equals = function (other) {\r\n        if (!other) {\r\n            return false;\r\n        }\r\n        if (this.modelVersionId !== other.modelVersionId) {\r\n            return false;\r\n        }\r\n        if (this.cursorState.length !== other.cursorState.length) {\r\n            return false;\r\n        }\r\n        for (var i = 0, len = this.cursorState.length; i < len; i++) {\r\n            if (!this.cursorState[i].equals(other.cursorState[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    return CursorModelState;\r\n}());\r\nexport { CursorModelState };\r\nvar AutoClosedAction = /** @class */ (function () {\r\n    function AutoClosedAction(model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations) {\r\n        this._model = model;\r\n        this._autoClosedCharactersDecorations = autoClosedCharactersDecorations;\r\n        this._autoClosedEnclosingDecorations = autoClosedEnclosingDecorations;\r\n    }\r\n    AutoClosedAction.getAllAutoClosedCharacters = function (autoClosedActions) {\r\n        var autoClosedCharacters = [];\r\n        for (var _i = 0, autoClosedActions_1 = autoClosedActions; _i < autoClosedActions_1.length; _i++) {\r\n            var autoClosedAction = autoClosedActions_1[_i];\r\n            autoClosedCharacters = autoClosedCharacters.concat(autoClosedAction.getAutoClosedCharactersRanges());\r\n        }\r\n        return autoClosedCharacters;\r\n    };\r\n    AutoClosedAction.prototype.dispose = function () {\r\n        this._autoClosedCharactersDecorations = this._model.deltaDecorations(this._autoClosedCharactersDecorations, []);\r\n        this._autoClosedEnclosingDecorations = this._model.deltaDecorations(this._autoClosedEnclosingDecorations, []);\r\n    };\r\n    AutoClosedAction.prototype.getAutoClosedCharactersRanges = function () {\r\n        var result = [];\r\n        for (var i = 0; i < this._autoClosedCharactersDecorations.length; i++) {\r\n            var decorationRange = this._model.getDecorationRange(this._autoClosedCharactersDecorations[i]);\r\n            if (decorationRange) {\r\n                result.push(decorationRange);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    AutoClosedAction.prototype.isValid = function (selections) {\r\n        var enclosingRanges = [];\r\n        for (var i = 0; i < this._autoClosedEnclosingDecorations.length; i++) {\r\n            var decorationRange = this._model.getDecorationRange(this._autoClosedEnclosingDecorations[i]);\r\n            if (decorationRange) {\r\n                enclosingRanges.push(decorationRange);\r\n                if (decorationRange.startLineNumber !== decorationRange.endLineNumber) {\r\n                    // Stop tracking if the range becomes multiline...\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        enclosingRanges.sort(Range.compareRangesUsingStarts);\r\n        selections.sort(Range.compareRangesUsingStarts);\r\n        for (var i = 0; i < selections.length; i++) {\r\n            if (i >= enclosingRanges.length) {\r\n                return false;\r\n            }\r\n            if (!enclosingRanges[i].strictContainsRange(selections[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    return AutoClosedAction;\r\n}());\r\nvar Cursor = /** @class */ (function (_super) {\r\n    __extends(Cursor, _super);\r\n    function Cursor(configuration, model, viewModel) {\r\n        var _this = _super.call(this) || this;\r\n        _this._onDidReachMaxCursorCount = _this._register(new Emitter());\r\n        _this.onDidReachMaxCursorCount = _this._onDidReachMaxCursorCount.event;\r\n        _this._onDidAttemptReadOnlyEdit = _this._register(new Emitter());\r\n        _this.onDidAttemptReadOnlyEdit = _this._onDidAttemptReadOnlyEdit.event;\r\n        _this._onDidChange = _this._register(new Emitter());\r\n        _this.onDidChange = _this._onDidChange.event;\r\n        _this._configuration = configuration;\r\n        _this._model = model;\r\n        _this._knownModelVersionId = _this._model.getVersionId();\r\n        _this._viewModel = viewModel;\r\n        _this.context = new CursorContext(_this._configuration, _this._model, _this._viewModel);\r\n        _this._cursors = new CursorCollection(_this.context);\r\n        _this._isHandling = false;\r\n        _this._isDoingComposition = false;\r\n        _this._selectionsWhenCompositionStarted = null;\r\n        _this._columnSelectData = null;\r\n        _this._autoClosedActions = [];\r\n        _this._prevEditOperationType = 0 /* Other */;\r\n        _this._register(_this._model.onDidChangeRawContent(function (e) {\r\n            _this._knownModelVersionId = e.versionId;\r\n            if (_this._isHandling) {\r\n                return;\r\n            }\r\n            var hadFlushEvent = e.containsEvent(1 /* Flush */);\r\n            _this._onModelContentChanged(hadFlushEvent);\r\n        }));\r\n        _this._register(viewModel.addEventListener(function (events) {\r\n            if (!containsLineMappingChanged(events)) {\r\n                return;\r\n            }\r\n            if (_this._knownModelVersionId !== _this._model.getVersionId()) {\r\n                // There are model change events that I didn't yet receive.\r\n                //\r\n                // This can happen when editing the model, and the view model receives the change events first,\r\n                // and the view model emits line mapping changed events, all before the cursor gets a chance to\r\n                // recover from markers.\r\n                //\r\n                // The model change listener above will be called soon and we'll ensure a valid cursor state there.\r\n                return;\r\n            }\r\n            // Ensure valid state\r\n            _this.setStates('viewModel', 0 /* NotSet */, _this.getAll());\r\n        }));\r\n        var updateCursorContext = function () {\r\n            _this.context = new CursorContext(_this._configuration, _this._model, _this._viewModel);\r\n            _this._cursors.updateContext(_this.context);\r\n        };\r\n        _this._register(_this._model.onDidChangeLanguage(function (e) {\r\n            updateCursorContext();\r\n        }));\r\n        _this._register(_this._model.onDidChangeLanguageConfiguration(function () {\r\n            updateCursorContext();\r\n        }));\r\n        _this._register(_this._model.onDidChangeOptions(function () {\r\n            updateCursorContext();\r\n        }));\r\n        _this._register(_this._configuration.onDidChange(function (e) {\r\n            if (CursorConfiguration.shouldRecreate(e)) {\r\n                updateCursorContext();\r\n            }\r\n        }));\r\n        return _this;\r\n    }\r\n    Cursor.prototype.dispose = function () {\r\n        this._cursors.dispose();\r\n        this._autoClosedActions = dispose(this._autoClosedActions);\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Cursor.prototype._validateAutoClosedActions = function () {\r\n        if (this._autoClosedActions.length > 0) {\r\n            var selections = this._cursors.getSelections();\r\n            for (var i = 0; i < this._autoClosedActions.length; i++) {\r\n                var autoClosedAction = this._autoClosedActions[i];\r\n                if (!autoClosedAction.isValid(selections)) {\r\n                    autoClosedAction.dispose();\r\n                    this._autoClosedActions.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    // ------ some getters/setters\r\n    Cursor.prototype.getPrimaryCursor = function () {\r\n        return this._cursors.getPrimaryCursor();\r\n    };\r\n    Cursor.prototype.getLastAddedCursorIndex = function () {\r\n        return this._cursors.getLastAddedCursorIndex();\r\n    };\r\n    Cursor.prototype.getAll = function () {\r\n        return this._cursors.getAll();\r\n    };\r\n    Cursor.prototype.setStates = function (source, reason, states) {\r\n        if (states !== null && states.length > Cursor.MAX_CURSOR_COUNT) {\r\n            states = states.slice(0, Cursor.MAX_CURSOR_COUNT);\r\n            this._onDidReachMaxCursorCount.fire(undefined);\r\n        }\r\n        var oldState = new CursorModelState(this._model, this);\r\n        this._cursors.setStates(states);\r\n        this._cursors.normalize();\r\n        this._columnSelectData = null;\r\n        this._validateAutoClosedActions();\r\n        this._emitStateChangedIfNecessary(source, reason, oldState);\r\n    };\r\n    Cursor.prototype.setColumnSelectData = function (columnSelectData) {\r\n        this._columnSelectData = columnSelectData;\r\n    };\r\n    Cursor.prototype.reveal = function (source, horizontal, target, scrollType) {\r\n        this._revealRange(source, target, 0 /* Simple */, horizontal, scrollType);\r\n    };\r\n    Cursor.prototype.revealRange = function (source, revealHorizontal, viewRange, verticalType, scrollType) {\r\n        this.emitCursorRevealRange(source, viewRange, verticalType, revealHorizontal, scrollType);\r\n    };\r\n    Cursor.prototype.scrollTo = function (desiredScrollTop) {\r\n        this._viewModel.viewLayout.setScrollPositionSmooth({\r\n            scrollTop: desiredScrollTop\r\n        });\r\n    };\r\n    Cursor.prototype.saveState = function () {\r\n        var result = [];\r\n        var selections = this._cursors.getSelections();\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            result.push({\r\n                inSelectionMode: !selection.isEmpty(),\r\n                selectionStart: {\r\n                    lineNumber: selection.selectionStartLineNumber,\r\n                    column: selection.selectionStartColumn,\r\n                },\r\n                position: {\r\n                    lineNumber: selection.positionLineNumber,\r\n                    column: selection.positionColumn,\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    };\r\n    Cursor.prototype.restoreState = function (states) {\r\n        var desiredSelections = [];\r\n        for (var i = 0, len = states.length; i < len; i++) {\r\n            var state = states[i];\r\n            var positionLineNumber = 1;\r\n            var positionColumn = 1;\r\n            // Avoid missing properties on the literal\r\n            if (state.position && state.position.lineNumber) {\r\n                positionLineNumber = state.position.lineNumber;\r\n            }\r\n            if (state.position && state.position.column) {\r\n                positionColumn = state.position.column;\r\n            }\r\n            var selectionStartLineNumber = positionLineNumber;\r\n            var selectionStartColumn = positionColumn;\r\n            // Avoid missing properties on the literal\r\n            if (state.selectionStart && state.selectionStart.lineNumber) {\r\n                selectionStartLineNumber = state.selectionStart.lineNumber;\r\n            }\r\n            if (state.selectionStart && state.selectionStart.column) {\r\n                selectionStartColumn = state.selectionStart.column;\r\n            }\r\n            desiredSelections.push({\r\n                selectionStartLineNumber: selectionStartLineNumber,\r\n                selectionStartColumn: selectionStartColumn,\r\n                positionLineNumber: positionLineNumber,\r\n                positionColumn: positionColumn\r\n            });\r\n        }\r\n        this.setStates('restoreState', 0 /* NotSet */, CursorState.fromModelSelections(desiredSelections));\r\n        this.reveal('restoreState', true, 0 /* Primary */, 1 /* Immediate */);\r\n    };\r\n    Cursor.prototype._onModelContentChanged = function (hadFlushEvent) {\r\n        this._prevEditOperationType = 0 /* Other */;\r\n        if (hadFlushEvent) {\r\n            // a model.setValue() was called\r\n            this._cursors.dispose();\r\n            this._cursors = new CursorCollection(this.context);\r\n            this._validateAutoClosedActions();\r\n            this._emitStateChangedIfNecessary('model', 1 /* ContentFlush */, null);\r\n        }\r\n        else {\r\n            var selectionsFromMarkers = this._cursors.readSelectionFromMarkers();\r\n            this.setStates('modelChange', 2 /* RecoverFromMarkers */, CursorState.fromModelSelections(selectionsFromMarkers));\r\n        }\r\n    };\r\n    Cursor.prototype.getSelection = function () {\r\n        return this._cursors.getPrimaryCursor().modelState.selection;\r\n    };\r\n    Cursor.prototype.getColumnSelectData = function () {\r\n        if (this._columnSelectData) {\r\n            return this._columnSelectData;\r\n        }\r\n        var primaryCursor = this._cursors.getPrimaryCursor();\r\n        var primaryPos = primaryCursor.viewState.selectionStart.getStartPosition();\r\n        var viewLineNumber = primaryPos.lineNumber;\r\n        var viewVisualColumn = CursorColumns.visibleColumnFromColumn2(this.context.config, this.context.viewModel, primaryPos);\r\n        return {\r\n            isReal: false,\r\n            fromViewLineNumber: viewLineNumber,\r\n            fromViewVisualColumn: viewVisualColumn,\r\n            toViewLineNumber: viewLineNumber,\r\n            toViewVisualColumn: viewVisualColumn,\r\n        };\r\n    };\r\n    Cursor.prototype.getSelections = function () {\r\n        return this._cursors.getSelections();\r\n    };\r\n    Cursor.prototype.getViewSelections = function () {\r\n        return this._cursors.getViewSelections();\r\n    };\r\n    Cursor.prototype.getPosition = function () {\r\n        return this._cursors.getPrimaryCursor().modelState.position;\r\n    };\r\n    Cursor.prototype.setSelections = function (source, selections) {\r\n        this.setStates(source, 0 /* NotSet */, CursorState.fromModelSelections(selections));\r\n    };\r\n    Cursor.prototype.getPrevEditOperationType = function () {\r\n        return this._prevEditOperationType;\r\n    };\r\n    Cursor.prototype.setPrevEditOperationType = function (type) {\r\n        this._prevEditOperationType = type;\r\n    };\r\n    // ------ auxiliary handling logic\r\n    Cursor.prototype._pushAutoClosedAction = function (autoClosedCharactersRanges, autoClosedEnclosingRanges) {\r\n        var autoClosedCharactersDeltaDecorations = [];\r\n        var autoClosedEnclosingDeltaDecorations = [];\r\n        for (var i = 0, len = autoClosedCharactersRanges.length; i < len; i++) {\r\n            autoClosedCharactersDeltaDecorations.push({\r\n                range: autoClosedCharactersRanges[i],\r\n                options: {\r\n                    inlineClassName: 'auto-closed-character',\r\n                    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */\r\n                }\r\n            });\r\n            autoClosedEnclosingDeltaDecorations.push({\r\n                range: autoClosedEnclosingRanges[i],\r\n                options: {\r\n                    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */\r\n                }\r\n            });\r\n        }\r\n        var autoClosedCharactersDecorations = this._model.deltaDecorations([], autoClosedCharactersDeltaDecorations);\r\n        var autoClosedEnclosingDecorations = this._model.deltaDecorations([], autoClosedEnclosingDeltaDecorations);\r\n        this._autoClosedActions.push(new AutoClosedAction(this._model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations));\r\n    };\r\n    Cursor.prototype._executeEditOperation = function (opResult) {\r\n        if (!opResult) {\r\n            // Nothing to execute\r\n            return;\r\n        }\r\n        if (opResult.shouldPushStackElementBefore) {\r\n            this._model.pushStackElement();\r\n        }\r\n        var result = CommandExecutor.executeCommands(this._model, this._cursors.getSelections(), opResult.commands);\r\n        if (result) {\r\n            // The commands were applied correctly\r\n            this._interpretCommandResult(result);\r\n            // Check for auto-closing closed characters\r\n            var autoClosedCharactersRanges = [];\r\n            var autoClosedEnclosingRanges = [];\r\n            for (var i = 0; i < opResult.commands.length; i++) {\r\n                var command = opResult.commands[i];\r\n                if (command instanceof TypeWithAutoClosingCommand && command.enclosingRange && command.closeCharacterRange) {\r\n                    autoClosedCharactersRanges.push(command.closeCharacterRange);\r\n                    autoClosedEnclosingRanges.push(command.enclosingRange);\r\n                }\r\n            }\r\n            if (autoClosedCharactersRanges.length > 0) {\r\n                this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\r\n            }\r\n            this._prevEditOperationType = opResult.type;\r\n        }\r\n        if (opResult.shouldPushStackElementAfter) {\r\n            this._model.pushStackElement();\r\n        }\r\n    };\r\n    Cursor.prototype._interpretCommandResult = function (cursorState) {\r\n        if (!cursorState || cursorState.length === 0) {\r\n            cursorState = this._cursors.readSelectionFromMarkers();\r\n        }\r\n        this._columnSelectData = null;\r\n        this._cursors.setSelections(cursorState);\r\n        this._cursors.normalize();\r\n    };\r\n    // -----------------------------------------------------------------------------------------------------------\r\n    // ----- emitting events\r\n    Cursor.prototype._emitStateChangedIfNecessary = function (source, reason, oldState) {\r\n        var newState = new CursorModelState(this._model, this);\r\n        if (newState.equals(oldState)) {\r\n            return false;\r\n        }\r\n        var selections = this._cursors.getSelections();\r\n        var viewSelections = this._cursors.getViewSelections();\r\n        // Let the view get the event first.\r\n        try {\r\n            var eventsCollector = this._beginEmit();\r\n            eventsCollector.emit(new viewEvents.ViewCursorStateChangedEvent(viewSelections, selections));\r\n        }\r\n        finally {\r\n            this._endEmit();\r\n        }\r\n        // Only after the view has been notified, let the rest of the world know...\r\n        if (!oldState\r\n            || oldState.cursorState.length !== newState.cursorState.length\r\n            || newState.cursorState.some(function (newCursorState, i) { return !newCursorState.modelState.equals(oldState.cursorState[i].modelState); })) {\r\n            var oldSelections = oldState ? oldState.cursorState.map(function (s) { return s.modelState.selection; }) : null;\r\n            var oldModelVersionId = oldState ? oldState.modelVersionId : 0;\r\n            this._onDidChange.fire(new CursorStateChangedEvent(selections, newState.modelVersionId, oldSelections, oldModelVersionId, source || 'keyboard', reason));\r\n        }\r\n        return true;\r\n    };\r\n    Cursor.prototype._revealRange = function (source, revealTarget, verticalType, revealHorizontal, scrollType) {\r\n        var viewPositions = this._cursors.getViewPositions();\r\n        var viewPosition = viewPositions[0];\r\n        if (revealTarget === 1 /* TopMost */) {\r\n            for (var i = 1; i < viewPositions.length; i++) {\r\n                if (viewPositions[i].isBefore(viewPosition)) {\r\n                    viewPosition = viewPositions[i];\r\n                }\r\n            }\r\n        }\r\n        else if (revealTarget === 2 /* BottomMost */) {\r\n            for (var i = 1; i < viewPositions.length; i++) {\r\n                if (viewPosition.isBeforeOrEqual(viewPositions[i])) {\r\n                    viewPosition = viewPositions[i];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (viewPositions.length > 1) {\r\n                // no revealing!\r\n                return;\r\n            }\r\n        }\r\n        var viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\r\n        this.emitCursorRevealRange(source, viewRange, verticalType, revealHorizontal, scrollType);\r\n    };\r\n    Cursor.prototype.emitCursorRevealRange = function (source, viewRange, verticalType, revealHorizontal, scrollType) {\r\n        try {\r\n            var eventsCollector = this._beginEmit();\r\n            eventsCollector.emit(new viewEvents.ViewRevealRangeRequestEvent(source, viewRange, verticalType, revealHorizontal, scrollType));\r\n        }\r\n        finally {\r\n            this._endEmit();\r\n        }\r\n    };\r\n    // -----------------------------------------------------------------------------------------------------------\r\n    // ----- handlers beyond this point\r\n    Cursor.prototype._findAutoClosingPairs = function (edits) {\r\n        if (!edits.length) {\r\n            return null;\r\n        }\r\n        var indices = [];\r\n        for (var i = 0, len = edits.length; i < len; i++) {\r\n            var edit = edits[i];\r\n            if (!edit.text || edit.text.indexOf('\\n') >= 0) {\r\n                return null;\r\n            }\r\n            var m = edit.text.match(/([)\\]}>'\"`])([^)\\]}>'\"`]*)$/);\r\n            if (!m) {\r\n                return null;\r\n            }\r\n            var closeChar = m[1];\r\n            var autoClosingPairsCandidates = this.context.config.autoClosingPairsClose2.get(closeChar);\r\n            if (!autoClosingPairsCandidates || autoClosingPairsCandidates.length !== 1) {\r\n                return null;\r\n            }\r\n            var openChar = autoClosingPairsCandidates[0].open;\r\n            var closeCharIndex = edit.text.length - m[2].length - 1;\r\n            var openCharIndex = edit.text.lastIndexOf(openChar, closeCharIndex - 1);\r\n            if (openCharIndex === -1) {\r\n                return null;\r\n            }\r\n            indices.push([openCharIndex, closeCharIndex]);\r\n        }\r\n        return indices;\r\n    };\r\n    Cursor.prototype.executeEdits = function (source, edits, cursorStateComputer) {\r\n        var _this = this;\r\n        var autoClosingIndices = null;\r\n        if (source === 'snippet') {\r\n            autoClosingIndices = this._findAutoClosingPairs(edits);\r\n        }\r\n        if (autoClosingIndices) {\r\n            edits[0]._isTracked = true;\r\n        }\r\n        var autoClosedCharactersRanges = [];\r\n        var autoClosedEnclosingRanges = [];\r\n        var selections = this._model.pushEditOperations(this.getSelections(), edits, function (undoEdits) {\r\n            if (autoClosingIndices) {\r\n                for (var i = 0, len = autoClosingIndices.length; i < len; i++) {\r\n                    var _a = autoClosingIndices[i], openCharInnerIndex = _a[0], closeCharInnerIndex = _a[1];\r\n                    var undoEdit = undoEdits[i];\r\n                    var lineNumber = undoEdit.range.startLineNumber;\r\n                    var openCharIndex = undoEdit.range.startColumn - 1 + openCharInnerIndex;\r\n                    var closeCharIndex = undoEdit.range.startColumn - 1 + closeCharInnerIndex;\r\n                    autoClosedCharactersRanges.push(new Range(lineNumber, closeCharIndex + 1, lineNumber, closeCharIndex + 2));\r\n                    autoClosedEnclosingRanges.push(new Range(lineNumber, openCharIndex + 1, lineNumber, closeCharIndex + 2));\r\n                }\r\n            }\r\n            var selections = cursorStateComputer(undoEdits);\r\n            if (selections) {\r\n                // Don't recover the selection from markers because\r\n                // we know what it should be.\r\n                _this._isHandling = true;\r\n            }\r\n            return selections;\r\n        });\r\n        if (selections) {\r\n            this._isHandling = false;\r\n            this.setSelections(source, selections);\r\n        }\r\n        if (autoClosedCharactersRanges.length > 0) {\r\n            this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\r\n        }\r\n    };\r\n    Cursor.prototype.trigger = function (source, handlerId, payload) {\r\n        var H = editorCommon.Handler;\r\n        if (handlerId === H.CompositionStart) {\r\n            this._isDoingComposition = true;\r\n            this._selectionsWhenCompositionStarted = this.getSelections().slice(0);\r\n            return;\r\n        }\r\n        if (handlerId === H.CompositionEnd) {\r\n            this._isDoingComposition = false;\r\n        }\r\n        if (this._configuration.options.get(68 /* readOnly */)) {\r\n            // All the remaining handlers will try to edit the model,\r\n            // but we cannot edit when read only...\r\n            this._onDidAttemptReadOnlyEdit.fire(undefined);\r\n            return;\r\n        }\r\n        var oldState = new CursorModelState(this._model, this);\r\n        var cursorChangeReason = 0 /* NotSet */;\r\n        if (handlerId !== H.Undo && handlerId !== H.Redo) {\r\n            // TODO@Alex: if the undo/redo stack contains non-null selections\r\n            // it would also be OK to stop tracking selections here\r\n            this._cursors.stopTrackingSelections();\r\n        }\r\n        // ensure valid state on all cursors\r\n        this._cursors.ensureValidState();\r\n        this._isHandling = true;\r\n        try {\r\n            switch (handlerId) {\r\n                case H.Type:\r\n                    this._type(source, payload.text);\r\n                    break;\r\n                case H.ReplacePreviousChar:\r\n                    this._replacePreviousChar(payload.text, payload.replaceCharCnt);\r\n                    break;\r\n                case H.Paste:\r\n                    cursorChangeReason = 4 /* Paste */;\r\n                    this._paste(payload.text, payload.pasteOnNewLine, payload.multicursorText || []);\r\n                    break;\r\n                case H.Cut:\r\n                    this._cut();\r\n                    break;\r\n                case H.Undo:\r\n                    cursorChangeReason = 5 /* Undo */;\r\n                    this._interpretCommandResult(this._model.undo());\r\n                    break;\r\n                case H.Redo:\r\n                    cursorChangeReason = 6 /* Redo */;\r\n                    this._interpretCommandResult(this._model.redo());\r\n                    break;\r\n                case H.ExecuteCommand:\r\n                    this._externalExecuteCommand(payload);\r\n                    break;\r\n                case H.ExecuteCommands:\r\n                    this._externalExecuteCommands(payload);\r\n                    break;\r\n                case H.CompositionEnd:\r\n                    this._interpretCompositionEnd(source);\r\n                    break;\r\n            }\r\n        }\r\n        catch (err) {\r\n            onUnexpectedError(err);\r\n        }\r\n        this._isHandling = false;\r\n        if (handlerId !== H.Undo && handlerId !== H.Redo) {\r\n            this._cursors.startTrackingSelections();\r\n        }\r\n        this._validateAutoClosedActions();\r\n        if (this._emitStateChangedIfNecessary(source, cursorChangeReason, oldState)) {\r\n            this._revealRange(source, 0 /* Primary */, 0 /* Simple */, true, 0 /* Smooth */);\r\n        }\r\n    };\r\n    Cursor.prototype._interpretCompositionEnd = function (source) {\r\n        if (!this._isDoingComposition && source === 'keyboard') {\r\n            // composition finishes, let's check if we need to auto complete if necessary.\r\n            var autoClosedCharacters = AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\r\n            this._executeEditOperation(TypeOperations.compositionEndWithInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this._selectionsWhenCompositionStarted, this.getSelections(), autoClosedCharacters));\r\n            this._selectionsWhenCompositionStarted = null;\r\n        }\r\n    };\r\n    Cursor.prototype._type = function (source, text) {\r\n        if (!this._isDoingComposition && source === 'keyboard') {\r\n            // If this event is coming straight from the keyboard, look for electric characters and enter\r\n            var len = text.length;\r\n            var offset = 0;\r\n            while (offset < len) {\r\n                var charLength = strings.nextCharLength(text, offset);\r\n                var chr = text.substr(offset, charLength);\r\n                // Here we must interpret each typed character individually\r\n                var autoClosedCharacters = AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\r\n                this._executeEditOperation(TypeOperations.typeWithInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), autoClosedCharacters, chr));\r\n                offset += charLength;\r\n            }\r\n        }\r\n        else {\r\n            this._executeEditOperation(TypeOperations.typeWithoutInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), text));\r\n        }\r\n    };\r\n    Cursor.prototype._replacePreviousChar = function (text, replaceCharCnt) {\r\n        this._executeEditOperation(TypeOperations.replacePreviousChar(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), text, replaceCharCnt));\r\n    };\r\n    Cursor.prototype._paste = function (text, pasteOnNewLine, multicursorText) {\r\n        this._executeEditOperation(TypeOperations.paste(this.context.config, this.context.model, this.getSelections(), text, pasteOnNewLine, multicursorText));\r\n    };\r\n    Cursor.prototype._cut = function () {\r\n        this._executeEditOperation(DeleteOperations.cut(this.context.config, this.context.model, this.getSelections()));\r\n    };\r\n    Cursor.prototype._externalExecuteCommand = function (command) {\r\n        this._cursors.killSecondaryCursors();\r\n        this._executeEditOperation(new EditOperationResult(0 /* Other */, [command], {\r\n            shouldPushStackElementBefore: false,\r\n            shouldPushStackElementAfter: false\r\n        }));\r\n    };\r\n    Cursor.prototype._externalExecuteCommands = function (commands) {\r\n        this._executeEditOperation(new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: false,\r\n            shouldPushStackElementAfter: false\r\n        }));\r\n    };\r\n    Cursor.MAX_CURSOR_COUNT = 10000;\r\n    return Cursor;\r\n}(viewEvents.ViewEventEmitter));\r\nexport { Cursor };\r\nvar CommandExecutor = /** @class */ (function () {\r\n    function CommandExecutor() {\r\n    }\r\n    CommandExecutor.executeCommands = function (model, selectionsBefore, commands) {\r\n        var ctx = {\r\n            model: model,\r\n            selectionsBefore: selectionsBefore,\r\n            trackedRanges: [],\r\n            trackedRangesDirection: []\r\n        };\r\n        var result = this._innerExecuteCommands(ctx, commands);\r\n        for (var i = 0, len = ctx.trackedRanges.length; i < len; i++) {\r\n            ctx.model._setTrackedRange(ctx.trackedRanges[i], null, 0 /* AlwaysGrowsWhenTypingAtEdges */);\r\n        }\r\n        return result;\r\n    };\r\n    CommandExecutor._innerExecuteCommands = function (ctx, commands) {\r\n        if (this._arrayIsEmpty(commands)) {\r\n            return null;\r\n        }\r\n        var commandsData = this._getEditOperations(ctx, commands);\r\n        if (commandsData.operations.length === 0) {\r\n            return null;\r\n        }\r\n        var rawOperations = commandsData.operations;\r\n        var loserCursorsMap = this._getLoserCursorMap(rawOperations);\r\n        if (loserCursorsMap.hasOwnProperty('0')) {\r\n            // These commands are very messed up\r\n            console.warn('Ignoring commands');\r\n            return null;\r\n        }\r\n        // Remove operations belonging to losing cursors\r\n        var filteredOperations = [];\r\n        for (var i = 0, len = rawOperations.length; i < len; i++) {\r\n            if (!loserCursorsMap.hasOwnProperty(rawOperations[i].identifier.major.toString())) {\r\n                filteredOperations.push(rawOperations[i]);\r\n            }\r\n        }\r\n        // TODO@Alex: find a better way to do this.\r\n        // give the hint that edit operations are tracked to the model\r\n        if (commandsData.hadTrackedEditOperation && filteredOperations.length > 0) {\r\n            filteredOperations[0]._isTracked = true;\r\n        }\r\n        var selectionsAfter = ctx.model.pushEditOperations(ctx.selectionsBefore, filteredOperations, function (inverseEditOperations) {\r\n            var groupedInverseEditOperations = [];\r\n            for (var i = 0; i < ctx.selectionsBefore.length; i++) {\r\n                groupedInverseEditOperations[i] = [];\r\n            }\r\n            for (var _i = 0, inverseEditOperations_1 = inverseEditOperations; _i < inverseEditOperations_1.length; _i++) {\r\n                var op = inverseEditOperations_1[_i];\r\n                if (!op.identifier) {\r\n                    // perhaps auto whitespace trim edits\r\n                    continue;\r\n                }\r\n                groupedInverseEditOperations[op.identifier.major].push(op);\r\n            }\r\n            var minorBasedSorter = function (a, b) {\r\n                return a.identifier.minor - b.identifier.minor;\r\n            };\r\n            var cursorSelections = [];\r\n            var _loop_1 = function (i) {\r\n                if (groupedInverseEditOperations[i].length > 0) {\r\n                    groupedInverseEditOperations[i].sort(minorBasedSorter);\r\n                    cursorSelections[i] = commands[i].computeCursorState(ctx.model, {\r\n                        getInverseEditOperations: function () {\r\n                            return groupedInverseEditOperations[i];\r\n                        },\r\n                        getTrackedSelection: function (id) {\r\n                            var idx = parseInt(id, 10);\r\n                            var range = ctx.model._getTrackedRange(ctx.trackedRanges[idx]);\r\n                            if (ctx.trackedRangesDirection[idx] === 0 /* LTR */) {\r\n                                return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n                            }\r\n                            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    cursorSelections[i] = ctx.selectionsBefore[i];\r\n                }\r\n            };\r\n            for (var i = 0; i < ctx.selectionsBefore.length; i++) {\r\n                _loop_1(i);\r\n            }\r\n            return cursorSelections;\r\n        });\r\n        if (!selectionsAfter) {\r\n            selectionsAfter = ctx.selectionsBefore;\r\n        }\r\n        // Extract losing cursors\r\n        var losingCursors = [];\r\n        for (var losingCursorIndex in loserCursorsMap) {\r\n            if (loserCursorsMap.hasOwnProperty(losingCursorIndex)) {\r\n                losingCursors.push(parseInt(losingCursorIndex, 10));\r\n            }\r\n        }\r\n        // Sort losing cursors descending\r\n        losingCursors.sort(function (a, b) {\r\n            return b - a;\r\n        });\r\n        // Remove losing cursors\r\n        for (var _i = 0, losingCursors_1 = losingCursors; _i < losingCursors_1.length; _i++) {\r\n            var losingCursor = losingCursors_1[_i];\r\n            selectionsAfter.splice(losingCursor, 1);\r\n        }\r\n        return selectionsAfter;\r\n    };\r\n    CommandExecutor._arrayIsEmpty = function (commands) {\r\n        for (var i = 0, len = commands.length; i < len; i++) {\r\n            if (commands[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    CommandExecutor._getEditOperations = function (ctx, commands) {\r\n        var operations = [];\r\n        var hadTrackedEditOperation = false;\r\n        for (var i = 0, len = commands.length; i < len; i++) {\r\n            var command = commands[i];\r\n            if (command) {\r\n                var r = this._getEditOperationsFromCommand(ctx, i, command);\r\n                operations = operations.concat(r.operations);\r\n                hadTrackedEditOperation = hadTrackedEditOperation || r.hadTrackedEditOperation;\r\n            }\r\n        }\r\n        return {\r\n            operations: operations,\r\n            hadTrackedEditOperation: hadTrackedEditOperation\r\n        };\r\n    };\r\n    CommandExecutor._getEditOperationsFromCommand = function (ctx, majorIdentifier, command) {\r\n        // This method acts as a transaction, if the command fails\r\n        // everything it has done is ignored\r\n        var operations = [];\r\n        var operationMinor = 0;\r\n        var addEditOperation = function (selection, text, forceMoveMarkers) {\r\n            if (forceMoveMarkers === void 0) { forceMoveMarkers = false; }\r\n            if (selection.isEmpty() && text === '') {\r\n                // This command wants to add a no-op => no thank you\r\n                return;\r\n            }\r\n            operations.push({\r\n                identifier: {\r\n                    major: majorIdentifier,\r\n                    minor: operationMinor++\r\n                },\r\n                range: selection,\r\n                text: text,\r\n                forceMoveMarkers: forceMoveMarkers,\r\n                isAutoWhitespaceEdit: command.insertsAutoWhitespace\r\n            });\r\n        };\r\n        var hadTrackedEditOperation = false;\r\n        var addTrackedEditOperation = function (selection, text, forceMoveMarkers) {\r\n            hadTrackedEditOperation = true;\r\n            addEditOperation(selection, text, forceMoveMarkers);\r\n        };\r\n        var trackSelection = function (selection, trackPreviousOnEmpty) {\r\n            var stickiness;\r\n            if (selection.isEmpty()) {\r\n                if (typeof trackPreviousOnEmpty === 'boolean') {\r\n                    if (trackPreviousOnEmpty) {\r\n                        stickiness = 2 /* GrowsOnlyWhenTypingBefore */;\r\n                    }\r\n                    else {\r\n                        stickiness = 3 /* GrowsOnlyWhenTypingAfter */;\r\n                    }\r\n                }\r\n                else {\r\n                    // Try to lock it with surrounding text\r\n                    var maxLineColumn = ctx.model.getLineMaxColumn(selection.startLineNumber);\r\n                    if (selection.startColumn === maxLineColumn) {\r\n                        stickiness = 2 /* GrowsOnlyWhenTypingBefore */;\r\n                    }\r\n                    else {\r\n                        stickiness = 3 /* GrowsOnlyWhenTypingAfter */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                stickiness = 1 /* NeverGrowsWhenTypingAtEdges */;\r\n            }\r\n            var l = ctx.trackedRanges.length;\r\n            var id = ctx.model._setTrackedRange(null, selection, stickiness);\r\n            ctx.trackedRanges[l] = id;\r\n            ctx.trackedRangesDirection[l] = selection.getDirection();\r\n            return l.toString();\r\n        };\r\n        var editOperationBuilder = {\r\n            addEditOperation: addEditOperation,\r\n            addTrackedEditOperation: addTrackedEditOperation,\r\n            trackSelection: trackSelection\r\n        };\r\n        try {\r\n            command.getEditOperations(ctx.model, editOperationBuilder);\r\n        }\r\n        catch (e) {\r\n            // TODO@Alex use notification service if this should be user facing\r\n            // e.friendlyMessage = nls.localize('corrupt.commands', \"Unexpected exception while executing command.\");\r\n            onUnexpectedError(e);\r\n            return {\r\n                operations: [],\r\n                hadTrackedEditOperation: false\r\n            };\r\n        }\r\n        return {\r\n            operations: operations,\r\n            hadTrackedEditOperation: hadTrackedEditOperation\r\n        };\r\n    };\r\n    CommandExecutor._getLoserCursorMap = function (operations) {\r\n        // This is destructive on the array\r\n        operations = operations.slice(0);\r\n        // Sort operations with last one first\r\n        operations.sort(function (a, b) {\r\n            // Note the minus!\r\n            return -(Range.compareRangesUsingEnds(a.range, b.range));\r\n        });\r\n        // Operations can not overlap!\r\n        var loserCursorsMap = {};\r\n        for (var i = 1; i < operations.length; i++) {\r\n            var previousOp = operations[i - 1];\r\n            var currentOp = operations[i];\r\n            if (previousOp.range.getStartPosition().isBefore(currentOp.range.getEndPosition())) {\r\n                var loserMajor = void 0;\r\n                if (previousOp.identifier.major > currentOp.identifier.major) {\r\n                    // previousOp loses the battle\r\n                    loserMajor = previousOp.identifier.major;\r\n                }\r\n                else {\r\n                    loserMajor = currentOp.identifier.major;\r\n                }\r\n                loserCursorsMap[loserMajor.toString()] = true;\r\n                for (var j = 0; j < operations.length; j++) {\r\n                    if (operations[j].identifier.major === loserMajor) {\r\n                        operations.splice(j, 1);\r\n                        if (j < i) {\r\n                            i--;\r\n                        }\r\n                        j--;\r\n                    }\r\n                }\r\n                if (i > 0) {\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n        return loserCursorsMap;\r\n    };\r\n    return CommandExecutor;\r\n}());\r\n"]},"metadata":{},"sourceType":"module"}