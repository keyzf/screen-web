{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { EditOperation } from '../../common/core/editOperation.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\n\nvar BlockCommentCommand =\n/** @class */\nfunction () {\n  function BlockCommentCommand(selection, insertSpace) {\n    this._selection = selection;\n    this._insertSpace = insertSpace;\n    this._usedEndToken = null;\n  }\n\n  BlockCommentCommand._haystackHasNeedleAtOffset = function (haystack, needle, offset) {\n    if (offset < 0) {\n      return false;\n    }\n\n    var needleLength = needle.length;\n    var haystackLength = haystack.length;\n\n    if (offset + needleLength > haystackLength) {\n      return false;\n    }\n\n    for (var i = 0; i < needleLength; i++) {\n      var codeA = haystack.charCodeAt(offset + i);\n      var codeB = needle.charCodeAt(i);\n\n      if (codeA === codeB) {\n        continue;\n      }\n\n      if (codeA >= 65\n      /* A */\n      && codeA <= 90\n      /* Z */\n      && codeA + 32 === codeB) {\n        // codeA is upper-case variant of codeB\n        continue;\n      }\n\n      if (codeB >= 65\n      /* A */\n      && codeB <= 90\n      /* Z */\n      && codeB + 32 === codeA) {\n        // codeB is upper-case variant of codeA\n        continue;\n      }\n\n      return false;\n    }\n\n    return true;\n  };\n\n  BlockCommentCommand.prototype._createOperationsForBlockComment = function (selection, startToken, endToken, insertSpace, model, builder) {\n    var startLineNumber = selection.startLineNumber;\n    var startColumn = selection.startColumn;\n    var endLineNumber = selection.endLineNumber;\n    var endColumn = selection.endColumn;\n    var startLineText = model.getLineContent(startLineNumber);\n    var endLineText = model.getLineContent(endLineNumber);\n    var startTokenIndex = startLineText.lastIndexOf(startToken, startColumn - 1 + startToken.length);\n    var endTokenIndex = endLineText.indexOf(endToken, endColumn - 1 - endToken.length);\n\n    if (startTokenIndex !== -1 && endTokenIndex !== -1) {\n      if (startLineNumber === endLineNumber) {\n        var lineBetweenTokens = startLineText.substring(startTokenIndex + startToken.length, endTokenIndex);\n\n        if (lineBetweenTokens.indexOf(endToken) >= 0) {\n          // force to add a block comment\n          startTokenIndex = -1;\n          endTokenIndex = -1;\n        }\n      } else {\n        var startLineAfterStartToken = startLineText.substring(startTokenIndex + startToken.length);\n        var endLineBeforeEndToken = endLineText.substring(0, endTokenIndex);\n\n        if (startLineAfterStartToken.indexOf(endToken) >= 0 || endLineBeforeEndToken.indexOf(endToken) >= 0) {\n          // force to add a block comment\n          startTokenIndex = -1;\n          endTokenIndex = -1;\n        }\n      }\n    }\n\n    var ops;\n\n    if (startTokenIndex !== -1 && endTokenIndex !== -1) {\n      // Consider spaces as part of the comment tokens\n      if (insertSpace && startTokenIndex + startToken.length < startLineText.length && startLineText.charCodeAt(startTokenIndex + startToken.length) === 32\n      /* Space */\n      ) {\n          // Pretend the start token contains a trailing space\n          startToken = startToken + ' ';\n        }\n\n      if (insertSpace && endTokenIndex > 0 && endLineText.charCodeAt(endTokenIndex - 1) === 32\n      /* Space */\n      ) {\n          // Pretend the end token contains a leading space\n          endToken = ' ' + endToken;\n          endTokenIndex -= 1;\n        }\n\n      ops = BlockCommentCommand._createRemoveBlockCommentOperations(new Range(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken);\n    } else {\n      ops = BlockCommentCommand._createAddBlockCommentOperations(selection, startToken, endToken, this._insertSpace);\n      this._usedEndToken = ops.length === 1 ? endToken : null;\n    }\n\n    for (var _i = 0, ops_1 = ops; _i < ops_1.length; _i++) {\n      var op = ops_1[_i];\n      builder.addTrackedEditOperation(op.range, op.text);\n    }\n  };\n\n  BlockCommentCommand._createRemoveBlockCommentOperations = function (r, startToken, endToken) {\n    var res = [];\n\n    if (!Range.isEmpty(r)) {\n      // Remove block comment start\n      res.push(EditOperation.delete(new Range(r.startLineNumber, r.startColumn - startToken.length, r.startLineNumber, r.startColumn))); // Remove block comment end\n\n      res.push(EditOperation.delete(new Range(r.endLineNumber, r.endColumn, r.endLineNumber, r.endColumn + endToken.length)));\n    } else {\n      // Remove both continuously\n      res.push(EditOperation.delete(new Range(r.startLineNumber, r.startColumn - startToken.length, r.endLineNumber, r.endColumn + endToken.length)));\n    }\n\n    return res;\n  };\n\n  BlockCommentCommand._createAddBlockCommentOperations = function (r, startToken, endToken, insertSpace) {\n    var res = [];\n\n    if (!Range.isEmpty(r)) {\n      // Insert block comment start\n      res.push(EditOperation.insert(new Position(r.startLineNumber, r.startColumn), startToken + (insertSpace ? ' ' : ''))); // Insert block comment end\n\n      res.push(EditOperation.insert(new Position(r.endLineNumber, r.endColumn), (insertSpace ? ' ' : '') + endToken));\n    } else {\n      // Insert both continuously\n      res.push(EditOperation.replace(new Range(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn), startToken + '  ' + endToken));\n    }\n\n    return res;\n  };\n\n  BlockCommentCommand.prototype.getEditOperations = function (model, builder) {\n    var startLineNumber = this._selection.startLineNumber;\n    var startColumn = this._selection.startColumn;\n    model.tokenizeIfCheap(startLineNumber);\n    var languageId = model.getLanguageIdAtPosition(startLineNumber, startColumn);\n    var config = LanguageConfigurationRegistry.getComments(languageId);\n\n    if (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) {\n      // Mode does not support block comments\n      return;\n    }\n\n    this._createOperationsForBlockComment(this._selection, config.blockCommentStartToken, config.blockCommentEndToken, this._insertSpace, model, builder);\n  };\n\n  BlockCommentCommand.prototype.computeCursorState = function (model, helper) {\n    var inverseEditOperations = helper.getInverseEditOperations();\n\n    if (inverseEditOperations.length === 2) {\n      var startTokenEditOperation = inverseEditOperations[0];\n      var endTokenEditOperation = inverseEditOperations[1];\n      return new Selection(startTokenEditOperation.range.endLineNumber, startTokenEditOperation.range.endColumn, endTokenEditOperation.range.startLineNumber, endTokenEditOperation.range.startColumn);\n    } else {\n      var srcRange = inverseEditOperations[0].range;\n      var deltaColumn = this._usedEndToken ? -this._usedEndToken.length - 1 : 0; // minus 1 space before endToken\n\n      return new Selection(srcRange.endLineNumber, srcRange.endColumn + deltaColumn, srcRange.endLineNumber, srcRange.endColumn + deltaColumn);\n    }\n  };\n\n  return BlockCommentCommand;\n}();\n\nexport { BlockCommentCommand };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/contrib/comment/blockCommentCommand.js"],"names":["EditOperation","Position","Range","Selection","LanguageConfigurationRegistry","BlockCommentCommand","selection","insertSpace","_selection","_insertSpace","_usedEndToken","_haystackHasNeedleAtOffset","haystack","needle","offset","needleLength","length","haystackLength","i","codeA","charCodeAt","codeB","prototype","_createOperationsForBlockComment","startToken","endToken","model","builder","startLineNumber","startColumn","endLineNumber","endColumn","startLineText","getLineContent","endLineText","startTokenIndex","lastIndexOf","endTokenIndex","indexOf","lineBetweenTokens","substring","startLineAfterStartToken","endLineBeforeEndToken","ops","_createRemoveBlockCommentOperations","_createAddBlockCommentOperations","_i","ops_1","op","addTrackedEditOperation","range","text","r","res","isEmpty","push","delete","insert","replace","getEditOperations","tokenizeIfCheap","languageId","getLanguageIdAtPosition","config","getComments","blockCommentStartToken","blockCommentEndToken","computeCursorState","helper","inverseEditOperations","getInverseEditOperations","startTokenEditOperation","endTokenEditOperation","srcRange","deltaColumn"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { EditOperation } from '../../common/core/editOperation.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\r\nvar BlockCommentCommand = /** @class */ (function () {\r\n    function BlockCommentCommand(selection, insertSpace) {\r\n        this._selection = selection;\r\n        this._insertSpace = insertSpace;\r\n        this._usedEndToken = null;\r\n    }\r\n    BlockCommentCommand._haystackHasNeedleAtOffset = function (haystack, needle, offset) {\r\n        if (offset < 0) {\r\n            return false;\r\n        }\r\n        var needleLength = needle.length;\r\n        var haystackLength = haystack.length;\r\n        if (offset + needleLength > haystackLength) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < needleLength; i++) {\r\n            var codeA = haystack.charCodeAt(offset + i);\r\n            var codeB = needle.charCodeAt(i);\r\n            if (codeA === codeB) {\r\n                continue;\r\n            }\r\n            if (codeA >= 65 /* A */ && codeA <= 90 /* Z */ && codeA + 32 === codeB) {\r\n                // codeA is upper-case variant of codeB\r\n                continue;\r\n            }\r\n            if (codeB >= 65 /* A */ && codeB <= 90 /* Z */ && codeB + 32 === codeA) {\r\n                // codeB is upper-case variant of codeA\r\n                continue;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    BlockCommentCommand.prototype._createOperationsForBlockComment = function (selection, startToken, endToken, insertSpace, model, builder) {\r\n        var startLineNumber = selection.startLineNumber;\r\n        var startColumn = selection.startColumn;\r\n        var endLineNumber = selection.endLineNumber;\r\n        var endColumn = selection.endColumn;\r\n        var startLineText = model.getLineContent(startLineNumber);\r\n        var endLineText = model.getLineContent(endLineNumber);\r\n        var startTokenIndex = startLineText.lastIndexOf(startToken, startColumn - 1 + startToken.length);\r\n        var endTokenIndex = endLineText.indexOf(endToken, endColumn - 1 - endToken.length);\r\n        if (startTokenIndex !== -1 && endTokenIndex !== -1) {\r\n            if (startLineNumber === endLineNumber) {\r\n                var lineBetweenTokens = startLineText.substring(startTokenIndex + startToken.length, endTokenIndex);\r\n                if (lineBetweenTokens.indexOf(endToken) >= 0) {\r\n                    // force to add a block comment\r\n                    startTokenIndex = -1;\r\n                    endTokenIndex = -1;\r\n                }\r\n            }\r\n            else {\r\n                var startLineAfterStartToken = startLineText.substring(startTokenIndex + startToken.length);\r\n                var endLineBeforeEndToken = endLineText.substring(0, endTokenIndex);\r\n                if (startLineAfterStartToken.indexOf(endToken) >= 0 || endLineBeforeEndToken.indexOf(endToken) >= 0) {\r\n                    // force to add a block comment\r\n                    startTokenIndex = -1;\r\n                    endTokenIndex = -1;\r\n                }\r\n            }\r\n        }\r\n        var ops;\r\n        if (startTokenIndex !== -1 && endTokenIndex !== -1) {\r\n            // Consider spaces as part of the comment tokens\r\n            if (insertSpace && startTokenIndex + startToken.length < startLineText.length && startLineText.charCodeAt(startTokenIndex + startToken.length) === 32 /* Space */) {\r\n                // Pretend the start token contains a trailing space\r\n                startToken = startToken + ' ';\r\n            }\r\n            if (insertSpace && endTokenIndex > 0 && endLineText.charCodeAt(endTokenIndex - 1) === 32 /* Space */) {\r\n                // Pretend the end token contains a leading space\r\n                endToken = ' ' + endToken;\r\n                endTokenIndex -= 1;\r\n            }\r\n            ops = BlockCommentCommand._createRemoveBlockCommentOperations(new Range(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken);\r\n        }\r\n        else {\r\n            ops = BlockCommentCommand._createAddBlockCommentOperations(selection, startToken, endToken, this._insertSpace);\r\n            this._usedEndToken = ops.length === 1 ? endToken : null;\r\n        }\r\n        for (var _i = 0, ops_1 = ops; _i < ops_1.length; _i++) {\r\n            var op = ops_1[_i];\r\n            builder.addTrackedEditOperation(op.range, op.text);\r\n        }\r\n    };\r\n    BlockCommentCommand._createRemoveBlockCommentOperations = function (r, startToken, endToken) {\r\n        var res = [];\r\n        if (!Range.isEmpty(r)) {\r\n            // Remove block comment start\r\n            res.push(EditOperation.delete(new Range(r.startLineNumber, r.startColumn - startToken.length, r.startLineNumber, r.startColumn)));\r\n            // Remove block comment end\r\n            res.push(EditOperation.delete(new Range(r.endLineNumber, r.endColumn, r.endLineNumber, r.endColumn + endToken.length)));\r\n        }\r\n        else {\r\n            // Remove both continuously\r\n            res.push(EditOperation.delete(new Range(r.startLineNumber, r.startColumn - startToken.length, r.endLineNumber, r.endColumn + endToken.length)));\r\n        }\r\n        return res;\r\n    };\r\n    BlockCommentCommand._createAddBlockCommentOperations = function (r, startToken, endToken, insertSpace) {\r\n        var res = [];\r\n        if (!Range.isEmpty(r)) {\r\n            // Insert block comment start\r\n            res.push(EditOperation.insert(new Position(r.startLineNumber, r.startColumn), startToken + (insertSpace ? ' ' : '')));\r\n            // Insert block comment end\r\n            res.push(EditOperation.insert(new Position(r.endLineNumber, r.endColumn), (insertSpace ? ' ' : '') + endToken));\r\n        }\r\n        else {\r\n            // Insert both continuously\r\n            res.push(EditOperation.replace(new Range(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn), startToken + '  ' + endToken));\r\n        }\r\n        return res;\r\n    };\r\n    BlockCommentCommand.prototype.getEditOperations = function (model, builder) {\r\n        var startLineNumber = this._selection.startLineNumber;\r\n        var startColumn = this._selection.startColumn;\r\n        model.tokenizeIfCheap(startLineNumber);\r\n        var languageId = model.getLanguageIdAtPosition(startLineNumber, startColumn);\r\n        var config = LanguageConfigurationRegistry.getComments(languageId);\r\n        if (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) {\r\n            // Mode does not support block comments\r\n            return;\r\n        }\r\n        this._createOperationsForBlockComment(this._selection, config.blockCommentStartToken, config.blockCommentEndToken, this._insertSpace, model, builder);\r\n    };\r\n    BlockCommentCommand.prototype.computeCursorState = function (model, helper) {\r\n        var inverseEditOperations = helper.getInverseEditOperations();\r\n        if (inverseEditOperations.length === 2) {\r\n            var startTokenEditOperation = inverseEditOperations[0];\r\n            var endTokenEditOperation = inverseEditOperations[1];\r\n            return new Selection(startTokenEditOperation.range.endLineNumber, startTokenEditOperation.range.endColumn, endTokenEditOperation.range.startLineNumber, endTokenEditOperation.range.startColumn);\r\n        }\r\n        else {\r\n            var srcRange = inverseEditOperations[0].range;\r\n            var deltaColumn = this._usedEndToken ? -this._usedEndToken.length - 1 : 0; // minus 1 space before endToken\r\n            return new Selection(srcRange.endLineNumber, srcRange.endColumn + deltaColumn, srcRange.endLineNumber, srcRange.endColumn + deltaColumn);\r\n        }\r\n    };\r\n    return BlockCommentCommand;\r\n}());\r\nexport { BlockCommentCommand };\r\n"]},"metadata":{},"sourceType":"module"}