{"ast":null,"code":"/**\r\n * **!Do not construct directly!**\r\n *\r\n * **!Only static methods because it gets serialized!**\r\n *\r\n * This represents the \"canonical\" version for an extension identifier. Extension ids\r\n * have to be case-insensitive (due to the marketplace), but we must ensure case\r\n * preservation because the extension API is already public at this time.\r\n *\r\n * For example, given an extension with the publisher `\"Hello\"` and the name `\"World\"`,\r\n * its canonical extension identifier is `\"Hello.World\"`. This extension could be\r\n * referenced in some other extension's dependencies using the string `\"hello.world\"`.\r\n *\r\n * To make matters more complicated, an extension can optionally have an UUID. When two\r\n * extensions have the same UUID, they are considered equal even if their identifier is different.\r\n */\nvar ExtensionIdentifier =\n/** @class */\nfunction () {\n  function ExtensionIdentifier(value) {\n    this.value = value;\n    this._lower = value.toLowerCase();\n  }\n  /**\r\n   * Gives the value by which to index (for equality).\r\n   */\n\n\n  ExtensionIdentifier.toKey = function (id) {\n    if (typeof id === 'string') {\n      return id.toLowerCase();\n    }\n\n    return id._lower;\n  };\n\n  return ExtensionIdentifier;\n}();\n\nexport { ExtensionIdentifier };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/platform/extensions/common/extensions.js"],"names":["ExtensionIdentifier","value","_lower","toLowerCase","toKey","id"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,IAAIA,mBAAmB;AAAG;AAAe,YAAY;AACjD,WAASA,mBAAT,CAA6BC,KAA7B,EAAoC;AAChC,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcD,KAAK,CAACE,WAAN,EAAd;AACH;AACD;;;;;AAGAH,EAAAA,mBAAmB,CAACI,KAApB,GAA4B,UAAUC,EAAV,EAAc;AACtC,QAAI,OAAOA,EAAP,KAAc,QAAlB,EAA4B;AACxB,aAAOA,EAAE,CAACF,WAAH,EAAP;AACH;;AACD,WAAOE,EAAE,CAACH,MAAV;AACH,GALD;;AAMA,SAAOF,mBAAP;AACH,CAfwC,EAAzC;;AAgBA,SAASA,mBAAT","sourcesContent":["/**\r\n * **!Do not construct directly!**\r\n *\r\n * **!Only static methods because it gets serialized!**\r\n *\r\n * This represents the \"canonical\" version for an extension identifier. Extension ids\r\n * have to be case-insensitive (due to the marketplace), but we must ensure case\r\n * preservation because the extension API is already public at this time.\r\n *\r\n * For example, given an extension with the publisher `\"Hello\"` and the name `\"World\"`,\r\n * its canonical extension identifier is `\"Hello.World\"`. This extension could be\r\n * referenced in some other extension's dependencies using the string `\"hello.world\"`.\r\n *\r\n * To make matters more complicated, an extension can optionally have an UUID. When two\r\n * extensions have the same UUID, they are considered equal even if their identifier is different.\r\n */\r\nvar ExtensionIdentifier = /** @class */ (function () {\r\n    function ExtensionIdentifier(value) {\r\n        this.value = value;\r\n        this._lower = value.toLowerCase();\r\n    }\r\n    /**\r\n     * Gives the value by which to index (for equality).\r\n     */\r\n    ExtensionIdentifier.toKey = function (id) {\r\n        if (typeof id === 'string') {\r\n            return id.toLowerCase();\r\n        }\r\n        return id._lower;\r\n    };\r\n    return ExtensionIdentifier;\r\n}());\r\nexport { ExtensionIdentifier };\r\n"]},"metadata":{},"sourceType":"module"}