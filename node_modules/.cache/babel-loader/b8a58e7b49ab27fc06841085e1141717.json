{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\n\nvar CharacterPairSupport =\n/** @class */\nfunction () {\n  function CharacterPairSupport(config) {\n    if (config.autoClosingPairs) {\n      this._autoClosingPairs = config.autoClosingPairs.map(function (el) {\n        return new StandardAutoClosingPairConditional(el);\n      });\n    } else if (config.brackets) {\n      this._autoClosingPairs = config.brackets.map(function (b) {\n        return new StandardAutoClosingPairConditional({\n          open: b[0],\n          close: b[1]\n        });\n      });\n    } else {\n      this._autoClosingPairs = [];\n    }\n\n    if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n      var docComment = config.__electricCharacterSupport.docComment; // IDocComment is legacy, only partially supported\n\n      this._autoClosingPairs.push(new StandardAutoClosingPairConditional({\n        open: docComment.open,\n        close: docComment.close || ''\n      }));\n    }\n\n    this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n    this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n  }\n\n  CharacterPairSupport.prototype.getAutoClosingPairs = function () {\n    return this._autoClosingPairs;\n  };\n\n  CharacterPairSupport.prototype.getAutoCloseBeforeSet = function () {\n    return this._autoCloseBefore;\n  };\n\n  CharacterPairSupport.shouldAutoClosePair = function (autoClosingPair, context, column) {\n    // Always complete on empty line\n    if (context.getTokenCount() === 0) {\n      return true;\n    }\n\n    var tokenIndex = context.findTokenIndexAtOffset(column - 2);\n    var standardTokenType = context.getStandardTokenType(tokenIndex);\n    return autoClosingPair.isOK(standardTokenType);\n  };\n\n  CharacterPairSupport.prototype.getSurroundingPairs = function () {\n    return this._surroundingPairs;\n  };\n\n  CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';\n  return CharacterPairSupport;\n}();\n\nexport { CharacterPairSupport };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/modes/supports/characterPair.js"],"names":["StandardAutoClosingPairConditional","CharacterPairSupport","config","autoClosingPairs","_autoClosingPairs","map","el","brackets","b","open","close","__electricCharacterSupport","docComment","push","_autoCloseBefore","autoCloseBefore","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED","_surroundingPairs","surroundingPairs","prototype","getAutoClosingPairs","getAutoCloseBeforeSet","shouldAutoClosePair","autoClosingPair","context","column","getTokenCount","tokenIndex","findTokenIndexAtOffset","standardTokenType","getStandardTokenType","isOK","getSurroundingPairs"],"mappings":"AAAA;;;;AAIA,SAASA,kCAAT,QAAmD,6BAAnD;;AACA,IAAIC,oBAAoB;AAAG;AAAe,YAAY;AAClD,WAASA,oBAAT,CAA8BC,MAA9B,EAAsC;AAClC,QAAIA,MAAM,CAACC,gBAAX,EAA6B;AACzB,WAAKC,iBAAL,GAAyBF,MAAM,CAACC,gBAAP,CAAwBE,GAAxB,CAA4B,UAAUC,EAAV,EAAc;AAAE,eAAO,IAAIN,kCAAJ,CAAuCM,EAAvC,CAAP;AAAoD,OAAhG,CAAzB;AACH,KAFD,MAGK,IAAIJ,MAAM,CAACK,QAAX,EAAqB;AACtB,WAAKH,iBAAL,GAAyBF,MAAM,CAACK,QAAP,CAAgBF,GAAhB,CAAoB,UAAUG,CAAV,EAAa;AAAE,eAAO,IAAIR,kCAAJ,CAAuC;AAAES,UAAAA,IAAI,EAAED,CAAC,CAAC,CAAD,CAAT;AAAcE,UAAAA,KAAK,EAAEF,CAAC,CAAC,CAAD;AAAtB,SAAvC,CAAP;AAA6E,OAAhH,CAAzB;AACH,KAFI,MAGA;AACD,WAAKJ,iBAAL,GAAyB,EAAzB;AACH;;AACD,QAAIF,MAAM,CAACS,0BAAP,IAAqCT,MAAM,CAACS,0BAAP,CAAkCC,UAA3E,EAAuF;AACnF,UAAIA,UAAU,GAAGV,MAAM,CAACS,0BAAP,CAAkCC,UAAnD,CADmF,CAEnF;;AACA,WAAKR,iBAAL,CAAuBS,IAAvB,CAA4B,IAAIb,kCAAJ,CAAuC;AAAES,QAAAA,IAAI,EAAEG,UAAU,CAACH,IAAnB;AAAyBC,QAAAA,KAAK,EAAEE,UAAU,CAACF,KAAX,IAAoB;AAApD,OAAvC,CAA5B;AACH;;AACD,SAAKI,gBAAL,GAAwB,OAAOZ,MAAM,CAACa,eAAd,KAAkC,QAAlC,GAA6Cb,MAAM,CAACa,eAApD,GAAsEd,oBAAoB,CAACe,yCAAnH;AACA,SAAKC,iBAAL,GAAyBf,MAAM,CAACgB,gBAAP,IAA2B,KAAKd,iBAAzD;AACH;;AACDH,EAAAA,oBAAoB,CAACkB,SAArB,CAA+BC,mBAA/B,GAAqD,YAAY;AAC7D,WAAO,KAAKhB,iBAAZ;AACH,GAFD;;AAGAH,EAAAA,oBAAoB,CAACkB,SAArB,CAA+BE,qBAA/B,GAAuD,YAAY;AAC/D,WAAO,KAAKP,gBAAZ;AACH,GAFD;;AAGAb,EAAAA,oBAAoB,CAACqB,mBAArB,GAA2C,UAAUC,eAAV,EAA2BC,OAA3B,EAAoCC,MAApC,EAA4C;AACnF;AACA,QAAID,OAAO,CAACE,aAAR,OAA4B,CAAhC,EAAmC;AAC/B,aAAO,IAAP;AACH;;AACD,QAAIC,UAAU,GAAGH,OAAO,CAACI,sBAAR,CAA+BH,MAAM,GAAG,CAAxC,CAAjB;AACA,QAAII,iBAAiB,GAAGL,OAAO,CAACM,oBAAR,CAA6BH,UAA7B,CAAxB;AACA,WAAOJ,eAAe,CAACQ,IAAhB,CAAqBF,iBAArB,CAAP;AACH,GARD;;AASA5B,EAAAA,oBAAoB,CAACkB,SAArB,CAA+Ba,mBAA/B,GAAqD,YAAY;AAC7D,WAAO,KAAKf,iBAAZ;AACH,GAFD;;AAGAhB,EAAAA,oBAAoB,CAACe,yCAArB,GAAiE,gBAAjE;AACA,SAAOf,oBAAP;AACH,CAvCyC,EAA1C;;AAwCA,SAASA,oBAAT","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\r\nvar CharacterPairSupport = /** @class */ (function () {\r\n    function CharacterPairSupport(config) {\r\n        if (config.autoClosingPairs) {\r\n            this._autoClosingPairs = config.autoClosingPairs.map(function (el) { return new StandardAutoClosingPairConditional(el); });\r\n        }\r\n        else if (config.brackets) {\r\n            this._autoClosingPairs = config.brackets.map(function (b) { return new StandardAutoClosingPairConditional({ open: b[0], close: b[1] }); });\r\n        }\r\n        else {\r\n            this._autoClosingPairs = [];\r\n        }\r\n        if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\r\n            var docComment = config.__electricCharacterSupport.docComment;\r\n            // IDocComment is legacy, only partially supported\r\n            this._autoClosingPairs.push(new StandardAutoClosingPairConditional({ open: docComment.open, close: docComment.close || '' }));\r\n        }\r\n        this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\r\n        this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\r\n    }\r\n    CharacterPairSupport.prototype.getAutoClosingPairs = function () {\r\n        return this._autoClosingPairs;\r\n    };\r\n    CharacterPairSupport.prototype.getAutoCloseBeforeSet = function () {\r\n        return this._autoCloseBefore;\r\n    };\r\n    CharacterPairSupport.shouldAutoClosePair = function (autoClosingPair, context, column) {\r\n        // Always complete on empty line\r\n        if (context.getTokenCount() === 0) {\r\n            return true;\r\n        }\r\n        var tokenIndex = context.findTokenIndexAtOffset(column - 2);\r\n        var standardTokenType = context.getStandardTokenType(tokenIndex);\r\n        return autoClosingPair.isOK(standardTokenType);\r\n    };\r\n    CharacterPairSupport.prototype.getSurroundingPairs = function () {\r\n        return this._surroundingPairs;\r\n    };\r\n    CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';\r\n    return CharacterPairSupport;\r\n}());\r\nexport { CharacterPairSupport };\r\n"]},"metadata":{},"sourceType":"module"}