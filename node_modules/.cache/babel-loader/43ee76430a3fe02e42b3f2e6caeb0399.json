{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar Digit0 = 48;\nvar Digit9 = 57;\nvar A = 65;\nvar a = 97;\nvar f = 102;\nexport function hexDigit(charCode) {\n  if (charCode < Digit0) {\n    return 0;\n  }\n\n  if (charCode <= Digit9) {\n    return charCode - Digit0;\n  }\n\n  if (charCode < a) {\n    charCode += a - A;\n  }\n\n  if (charCode >= a && charCode <= f) {\n    return charCode - a + 10;\n  }\n\n  return 0;\n}\nexport function colorFromHex(text) {\n  if (text[0] !== '#') {\n    return null;\n  }\n\n  switch (text.length) {\n    case 4:\n      return {\n        red: hexDigit(text.charCodeAt(1)) * 0x11 / 255.0,\n        green: hexDigit(text.charCodeAt(2)) * 0x11 / 255.0,\n        blue: hexDigit(text.charCodeAt(3)) * 0x11 / 255.0,\n        alpha: 1\n      };\n\n    case 5:\n      return {\n        red: hexDigit(text.charCodeAt(1)) * 0x11 / 255.0,\n        green: hexDigit(text.charCodeAt(2)) * 0x11 / 255.0,\n        blue: hexDigit(text.charCodeAt(3)) * 0x11 / 255.0,\n        alpha: hexDigit(text.charCodeAt(4)) * 0x11 / 255.0\n      };\n\n    case 7:\n      return {\n        red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n        green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n        blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n        alpha: 1\n      };\n\n    case 9:\n      return {\n        red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n        green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n        blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n        alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0\n      };\n  }\n\n  return null;\n}\nexport function colorFrom256RGB(red, green, blue, alpha) {\n  if (alpha === void 0) {\n    alpha = 1.0;\n  }\n\n  return {\n    red: red / 255.0,\n    green: green / 255.0,\n    blue: blue / 255.0,\n    alpha: alpha\n  };\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/colors.js"],"names":["Digit0","Digit9","A","a","f","hexDigit","charCode","colorFromHex","text","length","red","charCodeAt","green","blue","alpha","colorFrom256RGB"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar Digit0 = 48;\nvar Digit9 = 57;\nvar A = 65;\nvar a = 97;\nvar f = 102;\nexport function hexDigit(charCode) {\n    if (charCode < Digit0) {\n        return 0;\n    }\n    if (charCode <= Digit9) {\n        return charCode - Digit0;\n    }\n    if (charCode < a) {\n        charCode += (a - A);\n    }\n    if (charCode >= a && charCode <= f) {\n        return charCode - a + 10;\n    }\n    return 0;\n}\nexport function colorFromHex(text) {\n    if (text[0] !== '#') {\n        return null;\n    }\n    switch (text.length) {\n        case 4:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,\n                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,\n                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,\n                alpha: 1\n            };\n        case 5:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,\n                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,\n                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,\n                alpha: (hexDigit(text.charCodeAt(4)) * 0x11) / 255.0,\n            };\n        case 7:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n                alpha: 1\n            };\n        case 9:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n                alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0\n            };\n    }\n    return null;\n}\nexport function colorFrom256RGB(red, green, blue, alpha) {\n    if (alpha === void 0) { alpha = 1.0; }\n    return {\n        red: red / 255.0,\n        green: green / 255.0,\n        blue: blue / 255.0,\n        alpha: alpha\n    };\n}\n"]},"metadata":{},"sourceType":"module"}