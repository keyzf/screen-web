{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport * as strings from './strings.js';\nvar Severity;\n\n(function (Severity) {\n  Severity[Severity[\"Ignore\"] = 0] = \"Ignore\";\n  Severity[Severity[\"Info\"] = 1] = \"Info\";\n  Severity[Severity[\"Warning\"] = 2] = \"Warning\";\n  Severity[Severity[\"Error\"] = 3] = \"Error\";\n})(Severity || (Severity = {}));\n\n(function (Severity) {\n  var _error = 'error';\n  var _warning = 'warning';\n  var _warn = 'warn';\n  var _info = 'info';\n\n  var _displayStrings = Object.create(null);\n\n  _displayStrings[Severity.Error] = nls.localize('sev.error', \"Error\");\n  _displayStrings[Severity.Warning] = nls.localize('sev.warning', \"Warning\");\n  _displayStrings[Severity.Info] = nls.localize('sev.info', \"Info\");\n  /**\r\n   * Parses 'error', 'warning', 'warn', 'info' in call casings\r\n   * and falls back to ignore.\r\n   */\n\n  function fromValue(value) {\n    if (!value) {\n      return Severity.Ignore;\n    }\n\n    if (strings.equalsIgnoreCase(_error, value)) {\n      return Severity.Error;\n    }\n\n    if (strings.equalsIgnoreCase(_warning, value) || strings.equalsIgnoreCase(_warn, value)) {\n      return Severity.Warning;\n    }\n\n    if (strings.equalsIgnoreCase(_info, value)) {\n      return Severity.Info;\n    }\n\n    return Severity.Ignore;\n  }\n\n  Severity.fromValue = fromValue;\n})(Severity || (Severity = {}));\n\nexport default Severity;","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/base/common/severity.js"],"names":["nls","strings","Severity","_error","_warning","_warn","_info","_displayStrings","Object","create","Error","localize","Warning","Info","fromValue","value","Ignore","equalsIgnoreCase"],"mappings":"AAAA;;;;AAIA,OAAO,KAAKA,GAAZ,MAAqB,cAArB;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AACA,IAAIC,QAAJ;;AACA,CAAC,UAAUA,QAAV,EAAoB;AACjBA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,QAAD,CAAR,GAAqB,CAAtB,CAAR,GAAmC,QAAnC;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,MAAD,CAAR,GAAmB,CAApB,CAAR,GAAiC,MAAjC;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,SAAD,CAAR,GAAsB,CAAvB,CAAR,GAAoC,SAApC;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,OAAD,CAAR,GAAoB,CAArB,CAAR,GAAkC,OAAlC;AACH,CALD,EAKGA,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CALX;;AAMA,CAAC,UAAUA,QAAV,EAAoB;AACjB,MAAIC,MAAM,GAAG,OAAb;AACA,MAAIC,QAAQ,GAAG,SAAf;AACA,MAAIC,KAAK,GAAG,MAAZ;AACA,MAAIC,KAAK,GAAG,MAAZ;;AACA,MAAIC,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB;;AACAF,EAAAA,eAAe,CAACL,QAAQ,CAACQ,KAAV,CAAf,GAAkCV,GAAG,CAACW,QAAJ,CAAa,WAAb,EAA0B,OAA1B,CAAlC;AACAJ,EAAAA,eAAe,CAACL,QAAQ,CAACU,OAAV,CAAf,GAAoCZ,GAAG,CAACW,QAAJ,CAAa,aAAb,EAA4B,SAA5B,CAApC;AACAJ,EAAAA,eAAe,CAACL,QAAQ,CAACW,IAAV,CAAf,GAAiCb,GAAG,CAACW,QAAJ,CAAa,UAAb,EAAyB,MAAzB,CAAjC;AACA;;;;;AAIA,WAASG,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,QAAI,CAACA,KAAL,EAAY;AACR,aAAOb,QAAQ,CAACc,MAAhB;AACH;;AACD,QAAIf,OAAO,CAACgB,gBAAR,CAAyBd,MAAzB,EAAiCY,KAAjC,CAAJ,EAA6C;AACzC,aAAOb,QAAQ,CAACQ,KAAhB;AACH;;AACD,QAAIT,OAAO,CAACgB,gBAAR,CAAyBb,QAAzB,EAAmCW,KAAnC,KAA6Cd,OAAO,CAACgB,gBAAR,CAAyBZ,KAAzB,EAAgCU,KAAhC,CAAjD,EAAyF;AACrF,aAAOb,QAAQ,CAACU,OAAhB;AACH;;AACD,QAAIX,OAAO,CAACgB,gBAAR,CAAyBX,KAAzB,EAAgCS,KAAhC,CAAJ,EAA4C;AACxC,aAAOb,QAAQ,CAACW,IAAhB;AACH;;AACD,WAAOX,QAAQ,CAACc,MAAhB;AACH;;AACDd,EAAAA,QAAQ,CAACY,SAAT,GAAqBA,SAArB;AACH,CA7BD,EA6BGZ,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CA7BX;;AA8BA,eAAeA,QAAf","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../nls.js';\r\nimport * as strings from './strings.js';\r\nvar Severity;\r\n(function (Severity) {\r\n    Severity[Severity[\"Ignore\"] = 0] = \"Ignore\";\r\n    Severity[Severity[\"Info\"] = 1] = \"Info\";\r\n    Severity[Severity[\"Warning\"] = 2] = \"Warning\";\r\n    Severity[Severity[\"Error\"] = 3] = \"Error\";\r\n})(Severity || (Severity = {}));\r\n(function (Severity) {\r\n    var _error = 'error';\r\n    var _warning = 'warning';\r\n    var _warn = 'warn';\r\n    var _info = 'info';\r\n    var _displayStrings = Object.create(null);\r\n    _displayStrings[Severity.Error] = nls.localize('sev.error', \"Error\");\r\n    _displayStrings[Severity.Warning] = nls.localize('sev.warning', \"Warning\");\r\n    _displayStrings[Severity.Info] = nls.localize('sev.info', \"Info\");\r\n    /**\r\n     * Parses 'error', 'warning', 'warn', 'info' in call casings\r\n     * and falls back to ignore.\r\n     */\r\n    function fromValue(value) {\r\n        if (!value) {\r\n            return Severity.Ignore;\r\n        }\r\n        if (strings.equalsIgnoreCase(_error, value)) {\r\n            return Severity.Error;\r\n        }\r\n        if (strings.equalsIgnoreCase(_warning, value) || strings.equalsIgnoreCase(_warn, value)) {\r\n            return Severity.Warning;\r\n        }\r\n        if (strings.equalsIgnoreCase(_info, value)) {\r\n            return Severity.Info;\r\n        }\r\n        return Severity.Ignore;\r\n    }\r\n    Severity.fromValue = fromValue;\r\n})(Severity || (Severity = {}));\r\nexport default Severity;\r\n"]},"metadata":{},"sourceType":"module"}