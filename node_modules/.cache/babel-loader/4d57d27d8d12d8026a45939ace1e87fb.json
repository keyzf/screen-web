{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\n\nvar ModifierLabelProvider =\n/** @class */\nfunction () {\n  function ModifierLabelProvider(mac, windows, linux) {\n    if (linux === void 0) {\n      linux = windows;\n    }\n\n    this.modifierLabels = [null]; // index 0 will never me accessed.\n\n    this.modifierLabels[2\n    /* Macintosh */\n    ] = mac;\n    this.modifierLabels[1\n    /* Windows */\n    ] = windows;\n    this.modifierLabels[3\n    /* Linux */\n    ] = linux;\n  }\n\n  ModifierLabelProvider.prototype.toLabel = function (OS, parts, keyLabelProvider) {\n    if (parts.length === 0) {\n      return null;\n    }\n\n    var result = [];\n\n    for (var i = 0, len = parts.length; i < len; i++) {\n      var part = parts[i];\n      var keyLabel = keyLabelProvider(part);\n\n      if (keyLabel === null) {\n        // this keybinding cannot be expressed...\n        return null;\n      }\n\n      result[i] = _simpleAsString(part, keyLabel, this.modifierLabels[OS]);\n    }\n\n    return result.join(' ');\n  };\n\n  return ModifierLabelProvider;\n}();\n\nexport { ModifierLabelProvider };\n/**\r\n * A label provider that prints modifiers in a suitable format for displaying in the UI.\r\n */\n\nexport var UILabelProvider = new ModifierLabelProvider({\n  ctrlKey: '⌃',\n  shiftKey: '⇧',\n  altKey: '⌥',\n  metaKey: '⌘',\n  separator: ''\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey',\n    comment: ['This is the short form for the Control key on the keyboard']\n  }, \"Ctrl\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey',\n    comment: ['This is the short form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey',\n    comment: ['This is the short form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'windowsKey',\n    comment: ['This is the short form for the Windows key on the keyboard']\n  }, \"Windows\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey',\n    comment: ['This is the short form for the Control key on the keyboard']\n  }, \"Ctrl\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey',\n    comment: ['This is the short form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey',\n    comment: ['This is the short form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'superKey',\n    comment: ['This is the short form for the Super key on the keyboard']\n  }, \"Super\"),\n  separator: '+'\n});\n/**\r\n * A label provider that prints modifiers in a suitable format for ARIA.\r\n */\n\nexport var AriaLabelProvider = new ModifierLabelProvider({\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'cmdKey.long',\n    comment: ['This is the long form for the Command key on the keyboard']\n  }, \"Command\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'windowsKey.long',\n    comment: ['This is the long form for the Windows key on the keyboard']\n  }, \"Windows\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'superKey.long',\n    comment: ['This is the long form for the Super key on the keyboard']\n  }, \"Super\"),\n  separator: '+'\n});\n\nfunction _simpleAsString(modifiers, key, labels) {\n  if (key === null) {\n    return '';\n  }\n\n  var result = []; // translate modifier keys: Ctrl-Shift-Alt-Meta\n\n  if (modifiers.ctrlKey) {\n    result.push(labels.ctrlKey);\n  }\n\n  if (modifiers.shiftKey) {\n    result.push(labels.shiftKey);\n  }\n\n  if (modifiers.altKey) {\n    result.push(labels.altKey);\n  }\n\n  if (modifiers.metaKey) {\n    result.push(labels.metaKey);\n  } // the actual key\n\n\n  result.push(key);\n  return result.join(labels.separator);\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/base/common/keybindingLabels.js"],"names":["nls","ModifierLabelProvider","mac","windows","linux","modifierLabels","prototype","toLabel","OS","parts","keyLabelProvider","length","result","i","len","part","keyLabel","_simpleAsString","join","UILabelProvider","ctrlKey","shiftKey","altKey","metaKey","separator","localize","key","comment","AriaLabelProvider","modifiers","labels","push"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../nls.js';\r\nvar ModifierLabelProvider = /** @class */ (function () {\r\n    function ModifierLabelProvider(mac, windows, linux) {\r\n        if (linux === void 0) { linux = windows; }\r\n        this.modifierLabels = [null]; // index 0 will never me accessed.\r\n        this.modifierLabels[2 /* Macintosh */] = mac;\r\n        this.modifierLabels[1 /* Windows */] = windows;\r\n        this.modifierLabels[3 /* Linux */] = linux;\r\n    }\r\n    ModifierLabelProvider.prototype.toLabel = function (OS, parts, keyLabelProvider) {\r\n        if (parts.length === 0) {\r\n            return null;\r\n        }\r\n        var result = [];\r\n        for (var i = 0, len = parts.length; i < len; i++) {\r\n            var part = parts[i];\r\n            var keyLabel = keyLabelProvider(part);\r\n            if (keyLabel === null) {\r\n                // this keybinding cannot be expressed...\r\n                return null;\r\n            }\r\n            result[i] = _simpleAsString(part, keyLabel, this.modifierLabels[OS]);\r\n        }\r\n        return result.join(' ');\r\n    };\r\n    return ModifierLabelProvider;\r\n}());\r\nexport { ModifierLabelProvider };\r\n/**\r\n * A label provider that prints modifiers in a suitable format for displaying in the UI.\r\n */\r\nexport var UILabelProvider = new ModifierLabelProvider({\r\n    ctrlKey: '⌃',\r\n    shiftKey: '⇧',\r\n    altKey: '⌥',\r\n    metaKey: '⌘',\r\n    separator: '',\r\n}, {\r\n    ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'windowsKey', comment: ['This is the short form for the Windows key on the keyboard'] }, \"Windows\"),\r\n    separator: '+',\r\n}, {\r\n    ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'superKey', comment: ['This is the short form for the Super key on the keyboard'] }, \"Super\"),\r\n    separator: '+',\r\n});\r\n/**\r\n * A label provider that prints modifiers in a suitable format for ARIA.\r\n */\r\nexport var AriaLabelProvider = new ModifierLabelProvider({\r\n    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'cmdKey.long', comment: ['This is the long form for the Command key on the keyboard'] }, \"Command\"),\r\n    separator: '+',\r\n}, {\r\n    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'windowsKey.long', comment: ['This is the long form for the Windows key on the keyboard'] }, \"Windows\"),\r\n    separator: '+',\r\n}, {\r\n    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'superKey.long', comment: ['This is the long form for the Super key on the keyboard'] }, \"Super\"),\r\n    separator: '+',\r\n});\r\nfunction _simpleAsString(modifiers, key, labels) {\r\n    if (key === null) {\r\n        return '';\r\n    }\r\n    var result = [];\r\n    // translate modifier keys: Ctrl-Shift-Alt-Meta\r\n    if (modifiers.ctrlKey) {\r\n        result.push(labels.ctrlKey);\r\n    }\r\n    if (modifiers.shiftKey) {\r\n        result.push(labels.shiftKey);\r\n    }\r\n    if (modifiers.altKey) {\r\n        result.push(labels.altKey);\r\n    }\r\n    if (modifiers.metaKey) {\r\n        result.push(labels.metaKey);\r\n    }\r\n    // the actual key\r\n    result.push(key);\r\n    return result.join(labels.separator);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}