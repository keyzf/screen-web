{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { TextModel } from '../model/textModel.js';\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\n\nvar autoCloseAlways = function () {\n  return true;\n};\n\nvar autoCloseNever = function () {\n  return false;\n};\n\nvar autoCloseBeforeWhitespace = function (chr) {\n  return chr === ' ' || chr === '\\t';\n};\n\nfunction appendEntry(target, key, value) {\n  if (target.has(key)) {\n    target.get(key).push(value);\n  } else {\n    target.set(key, [value]);\n  }\n}\n\nvar CursorConfiguration =\n/** @class */\nfunction () {\n  function CursorConfiguration(languageIdentifier, modelOptions, configuration) {\n    this._languageIdentifier = languageIdentifier;\n    var options = configuration.options;\n    var layoutInfo = options.get(107\n    /* layoutInfo */\n    );\n    this.readOnly = options.get(68\n    /* readOnly */\n    );\n    this.tabSize = modelOptions.tabSize;\n    this.indentSize = modelOptions.indentSize;\n    this.insertSpaces = modelOptions.insertSpaces;\n    this.lineHeight = options.get(49\n    /* lineHeight */\n    );\n    this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n    this.useTabStops = options.get(95\n    /* useTabStops */\n    );\n    this.wordSeparators = options.get(96\n    /* wordSeparators */\n    );\n    this.emptySelectionClipboard = options.get(25\n    /* emptySelectionClipboard */\n    );\n    this.copyWithSyntaxHighlighting = options.get(15\n    /* copyWithSyntaxHighlighting */\n    );\n    this.multiCursorMergeOverlapping = options.get(58\n    /* multiCursorMergeOverlapping */\n    );\n    this.multiCursorPaste = options.get(60\n    /* multiCursorPaste */\n    );\n    this.autoClosingBrackets = options.get(5\n    /* autoClosingBrackets */\n    );\n    this.autoClosingQuotes = options.get(7\n    /* autoClosingQuotes */\n    );\n    this.autoClosingOvertype = options.get(6\n    /* autoClosingOvertype */\n    );\n    this.autoSurround = options.get(10\n    /* autoSurround */\n    );\n    this.autoIndent = options.get(8\n    /* autoIndent */\n    );\n    this.autoClosingPairsOpen2 = new Map();\n    this.autoClosingPairsClose2 = new Map();\n    this.surroundingPairs = {};\n    this._electricChars = null;\n    this.shouldAutoCloseBefore = {\n      quote: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingQuotes),\n      bracket: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingBrackets)\n    };\n\n    var autoClosingPairs = CursorConfiguration._getAutoClosingPairs(languageIdentifier);\n\n    if (autoClosingPairs) {\n      for (var _i = 0, autoClosingPairs_1 = autoClosingPairs; _i < autoClosingPairs_1.length; _i++) {\n        var pair = autoClosingPairs_1[_i];\n        appendEntry(this.autoClosingPairsOpen2, pair.open.charAt(pair.open.length - 1), pair);\n\n        if (pair.close.length === 1) {\n          appendEntry(this.autoClosingPairsClose2, pair.close, pair);\n        }\n      }\n    }\n\n    var surroundingPairs = CursorConfiguration._getSurroundingPairs(languageIdentifier);\n\n    if (surroundingPairs) {\n      for (var _a = 0, surroundingPairs_1 = surroundingPairs; _a < surroundingPairs_1.length; _a++) {\n        var pair = surroundingPairs_1[_a];\n        this.surroundingPairs[pair.open] = pair.close;\n      }\n    }\n  }\n\n  CursorConfiguration.shouldRecreate = function (e) {\n    return e.hasChanged(107\n    /* layoutInfo */\n    ) || e.hasChanged(96\n    /* wordSeparators */\n    ) || e.hasChanged(25\n    /* emptySelectionClipboard */\n    ) || e.hasChanged(58\n    /* multiCursorMergeOverlapping */\n    ) || e.hasChanged(60\n    /* multiCursorPaste */\n    ) || e.hasChanged(5\n    /* autoClosingBrackets */\n    ) || e.hasChanged(7\n    /* autoClosingQuotes */\n    ) || e.hasChanged(6\n    /* autoClosingOvertype */\n    ) || e.hasChanged(10\n    /* autoSurround */\n    ) || e.hasChanged(95\n    /* useTabStops */\n    ) || e.hasChanged(49\n    /* lineHeight */\n    ) || e.hasChanged(68\n    /* readOnly */\n    );\n  };\n\n  Object.defineProperty(CursorConfiguration.prototype, \"electricChars\", {\n    get: function () {\n      if (!this._electricChars) {\n        this._electricChars = {};\n\n        var electricChars = CursorConfiguration._getElectricCharacters(this._languageIdentifier);\n\n        if (electricChars) {\n          for (var _i = 0, electricChars_1 = electricChars; _i < electricChars_1.length; _i++) {\n            var char = electricChars_1[_i];\n            this._electricChars[char] = true;\n          }\n        }\n      }\n\n      return this._electricChars;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CursorConfiguration.prototype.normalizeIndentation = function (str) {\n    return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\n  };\n\n  CursorConfiguration._getElectricCharacters = function (languageIdentifier) {\n    try {\n      return LanguageConfigurationRegistry.getElectricCharacters(languageIdentifier.id);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  };\n\n  CursorConfiguration._getAutoClosingPairs = function (languageIdentifier) {\n    try {\n      return LanguageConfigurationRegistry.getAutoClosingPairs(languageIdentifier.id);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  };\n\n  CursorConfiguration._getShouldAutoClose = function (languageIdentifier, autoCloseConfig) {\n    switch (autoCloseConfig) {\n      case 'beforeWhitespace':\n        return autoCloseBeforeWhitespace;\n\n      case 'languageDefined':\n        return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageIdentifier);\n\n      case 'always':\n        return autoCloseAlways;\n\n      case 'never':\n        return autoCloseNever;\n    }\n  };\n\n  CursorConfiguration._getLanguageDefinedShouldAutoClose = function (languageIdentifier) {\n    try {\n      var autoCloseBeforeSet_1 = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageIdentifier.id);\n      return function (c) {\n        return autoCloseBeforeSet_1.indexOf(c) !== -1;\n      };\n    } catch (e) {\n      onUnexpectedError(e);\n      return autoCloseNever;\n    }\n  };\n\n  CursorConfiguration._getSurroundingPairs = function (languageIdentifier) {\n    try {\n      return LanguageConfigurationRegistry.getSurroundingPairs(languageIdentifier.id);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  };\n\n  return CursorConfiguration;\n}();\n\nexport { CursorConfiguration };\n/**\r\n * Represents the cursor state on either the model or on the view model.\r\n */\n\nvar SingleCursorState =\n/** @class */\nfunction () {\n  function SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n    this.selectionStart = selectionStart;\n    this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n    this.position = position;\n    this.leftoverVisibleColumns = leftoverVisibleColumns;\n    this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n  }\n\n  SingleCursorState.prototype.equals = function (other) {\n    return this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns && this.leftoverVisibleColumns === other.leftoverVisibleColumns && this.position.equals(other.position) && this.selectionStart.equalsRange(other.selectionStart);\n  };\n\n  SingleCursorState.prototype.hasSelection = function () {\n    return !this.selection.isEmpty() || !this.selectionStart.isEmpty();\n  };\n\n  SingleCursorState.prototype.move = function (inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n    if (inSelectionMode) {\n      // move just position\n      return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    } else {\n      // move everything\n      return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    }\n  };\n\n  SingleCursorState._computeSelection = function (selectionStart, position) {\n    var startLineNumber, startColumn, endLineNumber, endColumn;\n\n    if (selectionStart.isEmpty()) {\n      startLineNumber = selectionStart.startLineNumber;\n      startColumn = selectionStart.startColumn;\n      endLineNumber = position.lineNumber;\n      endColumn = position.column;\n    } else {\n      if (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n        startLineNumber = selectionStart.endLineNumber;\n        startColumn = selectionStart.endColumn;\n        endLineNumber = position.lineNumber;\n        endColumn = position.column;\n      } else {\n        startLineNumber = selectionStart.startLineNumber;\n        startColumn = selectionStart.startColumn;\n        endLineNumber = position.lineNumber;\n        endColumn = position.column;\n      }\n    }\n\n    return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n  };\n\n  return SingleCursorState;\n}();\n\nexport { SingleCursorState };\n\nvar CursorContext =\n/** @class */\nfunction () {\n  function CursorContext(configuration, model, viewModel) {\n    this.model = model;\n    this.viewModel = viewModel;\n    this.config = new CursorConfiguration(this.model.getLanguageIdentifier(), this.model.getOptions(), configuration);\n  }\n\n  CursorContext.prototype.validateViewPosition = function (viewPosition, modelPosition) {\n    return this.viewModel.coordinatesConverter.validateViewPosition(viewPosition, modelPosition);\n  };\n\n  CursorContext.prototype.validateViewRange = function (viewRange, expectedModelRange) {\n    return this.viewModel.coordinatesConverter.validateViewRange(viewRange, expectedModelRange);\n  };\n\n  CursorContext.prototype.convertViewRangeToModelRange = function (viewRange) {\n    return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\n  };\n\n  CursorContext.prototype.convertViewPositionToModelPosition = function (lineNumber, column) {\n    return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, column));\n  };\n\n  CursorContext.prototype.convertModelPositionToViewPosition = function (modelPosition) {\n    return this.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n  };\n\n  CursorContext.prototype.convertModelRangeToViewRange = function (modelRange) {\n    return this.viewModel.coordinatesConverter.convertModelRangeToViewRange(modelRange);\n  };\n\n  CursorContext.prototype.getCurrentScrollTop = function () {\n    return this.viewModel.viewLayout.getCurrentScrollTop();\n  };\n\n  CursorContext.prototype.getCompletelyVisibleViewRange = function () {\n    return this.viewModel.getCompletelyVisibleViewRange();\n  };\n\n  CursorContext.prototype.getCompletelyVisibleModelRange = function () {\n    var viewRange = this.viewModel.getCompletelyVisibleViewRange();\n    return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\n  };\n\n  CursorContext.prototype.getCompletelyVisibleViewRangeAtScrollTop = function (scrollTop) {\n    return this.viewModel.getCompletelyVisibleViewRangeAtScrollTop(scrollTop);\n  };\n\n  CursorContext.prototype.getVerticalOffsetForViewLine = function (viewLineNumber) {\n    return this.viewModel.viewLayout.getVerticalOffsetForLineNumber(viewLineNumber);\n  };\n\n  return CursorContext;\n}();\n\nexport { CursorContext };\n\nvar PartialModelCursorState =\n/** @class */\nfunction () {\n  function PartialModelCursorState(modelState) {\n    this.modelState = modelState;\n    this.viewState = null;\n  }\n\n  return PartialModelCursorState;\n}();\n\nexport { PartialModelCursorState };\n\nvar PartialViewCursorState =\n/** @class */\nfunction () {\n  function PartialViewCursorState(viewState) {\n    this.modelState = null;\n    this.viewState = viewState;\n  }\n\n  return PartialViewCursorState;\n}();\n\nexport { PartialViewCursorState };\n\nvar CursorState =\n/** @class */\nfunction () {\n  function CursorState(modelState, viewState) {\n    this.modelState = modelState;\n    this.viewState = viewState;\n  }\n\n  CursorState.fromModelState = function (modelState) {\n    return new PartialModelCursorState(modelState);\n  };\n\n  CursorState.fromViewState = function (viewState) {\n    return new PartialViewCursorState(viewState);\n  };\n\n  CursorState.fromModelSelection = function (modelSelection) {\n    var selectionStartLineNumber = modelSelection.selectionStartLineNumber;\n    var selectionStartColumn = modelSelection.selectionStartColumn;\n    var positionLineNumber = modelSelection.positionLineNumber;\n    var positionColumn = modelSelection.positionColumn;\n    var modelState = new SingleCursorState(new Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0, new Position(positionLineNumber, positionColumn), 0);\n    return CursorState.fromModelState(modelState);\n  };\n\n  CursorState.fromModelSelections = function (modelSelections) {\n    var states = [];\n\n    for (var i = 0, len = modelSelections.length; i < len; i++) {\n      states[i] = this.fromModelSelection(modelSelections[i]);\n    }\n\n    return states;\n  };\n\n  CursorState.prototype.equals = function (other) {\n    return this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState);\n  };\n\n  return CursorState;\n}();\n\nexport { CursorState };\n\nvar EditOperationResult =\n/** @class */\nfunction () {\n  function EditOperationResult(type, commands, opts) {\n    this.type = type;\n    this.commands = commands;\n    this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n    this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n  }\n\n  return EditOperationResult;\n}();\n\nexport { EditOperationResult };\n/**\r\n * Common operations that work and make sense both on the model and on the view model.\r\n */\n\nvar CursorColumns =\n/** @class */\nfunction () {\n  function CursorColumns() {}\n\n  CursorColumns.visibleColumnFromColumn = function (lineContent, column, tabSize) {\n    var lineContentLength = lineContent.length;\n    var endOffset = column - 1 < lineContentLength ? column - 1 : lineContentLength;\n    var result = 0;\n    var i = 0;\n\n    while (i < endOffset) {\n      var codePoint = strings.getNextCodePoint(lineContent, endOffset, i);\n      i += codePoint >= 65536\n      /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */\n      ? 2 : 1;\n\n      if (codePoint === 9\n      /* Tab */\n      ) {\n          result = CursorColumns.nextRenderTabStop(result, tabSize);\n        } else {\n        var graphemeBreakType = strings.getGraphemeBreakType(codePoint);\n\n        while (i < endOffset) {\n          var nextCodePoint = strings.getNextCodePoint(lineContent, endOffset, i);\n          var nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\n\n          if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\n            break;\n          }\n\n          i += nextCodePoint >= 65536\n          /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */\n          ? 2 : 1;\n          graphemeBreakType = nextGraphemeBreakType;\n        }\n\n        if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n          result = result + 2;\n        } else {\n          result = result + 1;\n        }\n      }\n    }\n\n    return result;\n  };\n\n  CursorColumns.visibleColumnFromColumn2 = function (config, model, position) {\n    return this.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, config.tabSize);\n  };\n\n  CursorColumns.columnFromVisibleColumn = function (lineContent, visibleColumn, tabSize) {\n    if (visibleColumn <= 0) {\n      return 1;\n    }\n\n    var lineLength = lineContent.length;\n    var beforeVisibleColumn = 0;\n    var beforeColumn = 1;\n    var i = 0;\n\n    while (i < lineLength) {\n      var codePoint = strings.getNextCodePoint(lineContent, lineLength, i);\n      i += codePoint >= 65536\n      /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */\n      ? 2 : 1;\n      var afterVisibleColumn = void 0;\n\n      if (codePoint === 9\n      /* Tab */\n      ) {\n          afterVisibleColumn = CursorColumns.nextRenderTabStop(beforeVisibleColumn, tabSize);\n        } else {\n        var graphemeBreakType = strings.getGraphemeBreakType(codePoint);\n\n        while (i < lineLength) {\n          var nextCodePoint = strings.getNextCodePoint(lineContent, lineLength, i);\n          var nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\n\n          if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\n            break;\n          }\n\n          i += nextCodePoint >= 65536\n          /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */\n          ? 2 : 1;\n          graphemeBreakType = nextGraphemeBreakType;\n        }\n\n        if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n          afterVisibleColumn = beforeVisibleColumn + 2;\n        } else {\n          afterVisibleColumn = beforeVisibleColumn + 1;\n        }\n      }\n\n      var afterColumn = i + 1;\n\n      if (afterVisibleColumn >= visibleColumn) {\n        var beforeDelta = visibleColumn - beforeVisibleColumn;\n        var afterDelta = afterVisibleColumn - visibleColumn;\n\n        if (afterDelta < beforeDelta) {\n          return afterColumn;\n        } else {\n          return beforeColumn;\n        }\n      }\n\n      beforeVisibleColumn = afterVisibleColumn;\n      beforeColumn = afterColumn;\n    } // walked the entire string\n\n\n    return lineLength + 1;\n  };\n\n  CursorColumns.columnFromVisibleColumn2 = function (config, model, lineNumber, visibleColumn) {\n    var result = this.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, config.tabSize);\n    var minColumn = model.getLineMinColumn(lineNumber);\n\n    if (result < minColumn) {\n      return minColumn;\n    }\n\n    var maxColumn = model.getLineMaxColumn(lineNumber);\n\n    if (result > maxColumn) {\n      return maxColumn;\n    }\n\n    return result;\n  };\n  /**\r\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n   */\n\n\n  CursorColumns.nextRenderTabStop = function (visibleColumn, tabSize) {\n    return visibleColumn + tabSize - visibleColumn % tabSize;\n  };\n  /**\r\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n   */\n\n\n  CursorColumns.nextIndentTabStop = function (visibleColumn, indentSize) {\n    return visibleColumn + indentSize - visibleColumn % indentSize;\n  };\n  /**\r\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n   */\n\n\n  CursorColumns.prevRenderTabStop = function (column, tabSize) {\n    return column - 1 - (column - 1) % tabSize;\n  };\n  /**\r\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n   */\n\n\n  CursorColumns.prevIndentTabStop = function (column, indentSize) {\n    return column - 1 - (column - 1) % indentSize;\n  };\n\n  return CursorColumns;\n}();\n\nexport { CursorColumns };\nexport function isQuote(ch) {\n  return ch === '\\'' || ch === '\"' || ch === '`';\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorCommon.js"],"names":["onUnexpectedError","strings","Position","Range","Selection","TextModel","LanguageConfigurationRegistry","autoCloseAlways","autoCloseNever","autoCloseBeforeWhitespace","chr","appendEntry","target","key","value","has","get","push","set","CursorConfiguration","languageIdentifier","modelOptions","configuration","_languageIdentifier","options","layoutInfo","readOnly","tabSize","indentSize","insertSpaces","lineHeight","pageSize","Math","max","floor","height","useTabStops","wordSeparators","emptySelectionClipboard","copyWithSyntaxHighlighting","multiCursorMergeOverlapping","multiCursorPaste","autoClosingBrackets","autoClosingQuotes","autoClosingOvertype","autoSurround","autoIndent","autoClosingPairsOpen2","Map","autoClosingPairsClose2","surroundingPairs","_electricChars","shouldAutoCloseBefore","quote","_getShouldAutoClose","bracket","autoClosingPairs","_getAutoClosingPairs","_i","autoClosingPairs_1","length","pair","open","charAt","close","_getSurroundingPairs","_a","surroundingPairs_1","shouldRecreate","e","hasChanged","Object","defineProperty","prototype","electricChars","_getElectricCharacters","electricChars_1","char","enumerable","configurable","normalizeIndentation","str","getElectricCharacters","id","getAutoClosingPairs","autoCloseConfig","_getLanguageDefinedShouldAutoClose","autoCloseBeforeSet_1","getAutoCloseBeforeSet","c","indexOf","getSurroundingPairs","SingleCursorState","selectionStart","selectionStartLeftoverVisibleColumns","position","leftoverVisibleColumns","selection","_computeSelection","equals","other","equalsRange","hasSelection","isEmpty","move","inSelectionMode","lineNumber","column","startLineNumber","startColumn","endLineNumber","endColumn","isBeforeOrEqual","getStartPosition","CursorContext","model","viewModel","config","getLanguageIdentifier","getOptions","validateViewPosition","viewPosition","modelPosition","coordinatesConverter","validateViewRange","viewRange","expectedModelRange","convertViewRangeToModelRange","convertViewPositionToModelPosition","convertModelPositionToViewPosition","convertModelRangeToViewRange","modelRange","getCurrentScrollTop","viewLayout","getCompletelyVisibleViewRange","getCompletelyVisibleModelRange","getCompletelyVisibleViewRangeAtScrollTop","scrollTop","getVerticalOffsetForViewLine","viewLineNumber","getVerticalOffsetForLineNumber","PartialModelCursorState","modelState","viewState","PartialViewCursorState","CursorState","fromModelState","fromViewState","fromModelSelection","modelSelection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","fromModelSelections","modelSelections","states","i","len","EditOperationResult","type","commands","opts","shouldPushStackElementBefore","shouldPushStackElementAfter","CursorColumns","visibleColumnFromColumn","lineContent","lineContentLength","endOffset","result","codePoint","getNextCodePoint","nextRenderTabStop","graphemeBreakType","getGraphemeBreakType","nextCodePoint","nextGraphemeBreakType","breakBetweenGraphemeBreakType","isFullWidthCharacter","isEmojiImprecise","visibleColumnFromColumn2","getLineContent","columnFromVisibleColumn","visibleColumn","lineLength","beforeVisibleColumn","beforeColumn","afterVisibleColumn","afterColumn","beforeDelta","afterDelta","columnFromVisibleColumn2","minColumn","getLineMinColumn","maxColumn","getLineMaxColumn","nextIndentTabStop","prevRenderTabStop","prevIndentTabStop","isQuote","ch"],"mappings":"AAAA;;;;AAIA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,OAAO,KAAKC,OAAZ,MAAyB,iCAAzB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,6BAAT,QAA8C,2CAA9C;;AACA,IAAIC,eAAe,GAAG,YAAY;AAAE,SAAO,IAAP;AAAc,CAAlD;;AACA,IAAIC,cAAc,GAAG,YAAY;AAAE,SAAO,KAAP;AAAe,CAAlD;;AACA,IAAIC,yBAAyB,GAAG,UAAUC,GAAV,EAAe;AAAE,SAAQA,GAAG,KAAK,GAAR,IAAeA,GAAG,KAAK,IAA/B;AAAuC,CAAxF;;AACA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,GAA7B,EAAkCC,KAAlC,EAAyC;AACrC,MAAIF,MAAM,CAACG,GAAP,CAAWF,GAAX,CAAJ,EAAqB;AACjBD,IAAAA,MAAM,CAACI,GAAP,CAAWH,GAAX,EAAgBI,IAAhB,CAAqBH,KAArB;AACH,GAFD,MAGK;AACDF,IAAAA,MAAM,CAACM,GAAP,CAAWL,GAAX,EAAgB,CAACC,KAAD,CAAhB;AACH;AACJ;;AACD,IAAIK,mBAAmB;AAAG;AAAe,YAAY;AACjD,WAASA,mBAAT,CAA6BC,kBAA7B,EAAiDC,YAAjD,EAA+DC,aAA/D,EAA8E;AAC1E,SAAKC,mBAAL,GAA2BH,kBAA3B;AACA,QAAII,OAAO,GAAGF,aAAa,CAACE,OAA5B;AACA,QAAIC,UAAU,GAAGD,OAAO,CAACR,GAAR,CAAY;AAAI;AAAhB,KAAjB;AACA,SAAKU,QAAL,GAAgBF,OAAO,CAACR,GAAR,CAAY;AAAG;AAAf,KAAhB;AACA,SAAKW,OAAL,GAAeN,YAAY,CAACM,OAA5B;AACA,SAAKC,UAAL,GAAkBP,YAAY,CAACO,UAA/B;AACA,SAAKC,YAAL,GAAoBR,YAAY,CAACQ,YAAjC;AACA,SAAKC,UAAL,GAAkBN,OAAO,CAACR,GAAR,CAAY;AAAG;AAAf,KAAlB;AACA,SAAKe,QAAL,GAAgBC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,KAAL,CAAWT,UAAU,CAACU,MAAX,GAAoB,KAAKL,UAApC,IAAkD,CAA9D,CAAhB;AACA,SAAKM,WAAL,GAAmBZ,OAAO,CAACR,GAAR,CAAY;AAAG;AAAf,KAAnB;AACA,SAAKqB,cAAL,GAAsBb,OAAO,CAACR,GAAR,CAAY;AAAG;AAAf,KAAtB;AACA,SAAKsB,uBAAL,GAA+Bd,OAAO,CAACR,GAAR,CAAY;AAAG;AAAf,KAA/B;AACA,SAAKuB,0BAAL,GAAkCf,OAAO,CAACR,GAAR,CAAY;AAAG;AAAf,KAAlC;AACA,SAAKwB,2BAAL,GAAmChB,OAAO,CAACR,GAAR,CAAY;AAAG;AAAf,KAAnC;AACA,SAAKyB,gBAAL,GAAwBjB,OAAO,CAACR,GAAR,CAAY;AAAG;AAAf,KAAxB;AACA,SAAK0B,mBAAL,GAA2BlB,OAAO,CAACR,GAAR,CAAY;AAAE;AAAd,KAA3B;AACA,SAAK2B,iBAAL,GAAyBnB,OAAO,CAACR,GAAR,CAAY;AAAE;AAAd,KAAzB;AACA,SAAK4B,mBAAL,GAA2BpB,OAAO,CAACR,GAAR,CAAY;AAAE;AAAd,KAA3B;AACA,SAAK6B,YAAL,GAAoBrB,OAAO,CAACR,GAAR,CAAY;AAAG;AAAf,KAApB;AACA,SAAK8B,UAAL,GAAkBtB,OAAO,CAACR,GAAR,CAAY;AAAE;AAAd,KAAlB;AACA,SAAK+B,qBAAL,GAA6B,IAAIC,GAAJ,EAA7B;AACA,SAAKC,sBAAL,GAA8B,IAAID,GAAJ,EAA9B;AACA,SAAKE,gBAAL,GAAwB,EAAxB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,qBAAL,GAA6B;AACzBC,MAAAA,KAAK,EAAElC,mBAAmB,CAACmC,mBAApB,CAAwClC,kBAAxC,EAA4D,KAAKuB,iBAAjE,CADkB;AAEzBY,MAAAA,OAAO,EAAEpC,mBAAmB,CAACmC,mBAApB,CAAwClC,kBAAxC,EAA4D,KAAKsB,mBAAjE;AAFgB,KAA7B;;AAIA,QAAIc,gBAAgB,GAAGrC,mBAAmB,CAACsC,oBAApB,CAAyCrC,kBAAzC,CAAvB;;AACA,QAAIoC,gBAAJ,EAAsB;AAClB,WAAK,IAAIE,EAAE,GAAG,CAAT,EAAYC,kBAAkB,GAAGH,gBAAtC,EAAwDE,EAAE,GAAGC,kBAAkB,CAACC,MAAhF,EAAwFF,EAAE,EAA1F,EAA8F;AAC1F,YAAIG,IAAI,GAAGF,kBAAkB,CAACD,EAAD,CAA7B;AACA/C,QAAAA,WAAW,CAAC,KAAKoC,qBAAN,EAA6Bc,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBF,IAAI,CAACC,IAAL,CAAUF,MAAV,GAAmB,CAApC,CAA7B,EAAqEC,IAArE,CAAX;;AACA,YAAIA,IAAI,CAACG,KAAL,CAAWJ,MAAX,KAAsB,CAA1B,EAA6B;AACzBjD,UAAAA,WAAW,CAAC,KAAKsC,sBAAN,EAA8BY,IAAI,CAACG,KAAnC,EAA0CH,IAA1C,CAAX;AACH;AACJ;AACJ;;AACD,QAAIX,gBAAgB,GAAG/B,mBAAmB,CAAC8C,oBAApB,CAAyC7C,kBAAzC,CAAvB;;AACA,QAAI8B,gBAAJ,EAAsB;AAClB,WAAK,IAAIgB,EAAE,GAAG,CAAT,EAAYC,kBAAkB,GAAGjB,gBAAtC,EAAwDgB,EAAE,GAAGC,kBAAkB,CAACP,MAAhF,EAAwFM,EAAE,EAA1F,EAA8F;AAC1F,YAAIL,IAAI,GAAGM,kBAAkB,CAACD,EAAD,CAA7B;AACA,aAAKhB,gBAAL,CAAsBW,IAAI,CAACC,IAA3B,IAAmCD,IAAI,CAACG,KAAxC;AACH;AACJ;AACJ;;AACD7C,EAAAA,mBAAmB,CAACiD,cAApB,GAAqC,UAAUC,CAAV,EAAa;AAC9C,WAAQA,CAAC,CAACC,UAAF,CAAa;AAAI;AAAjB,SACDD,CAAC,CAACC,UAAF,CAAa;AAAG;AAAhB,KADC,IAEDD,CAAC,CAACC,UAAF,CAAa;AAAG;AAAhB,KAFC,IAGDD,CAAC,CAACC,UAAF,CAAa;AAAG;AAAhB,KAHC,IAIDD,CAAC,CAACC,UAAF,CAAa;AAAG;AAAhB,KAJC,IAKDD,CAAC,CAACC,UAAF,CAAa;AAAE;AAAf,KALC,IAMDD,CAAC,CAACC,UAAF,CAAa;AAAE;AAAf,KANC,IAODD,CAAC,CAACC,UAAF,CAAa;AAAE;AAAf,KAPC,IAQDD,CAAC,CAACC,UAAF,CAAa;AAAG;AAAhB,KARC,IASDD,CAAC,CAACC,UAAF,CAAa;AAAG;AAAhB,KATC,IAUDD,CAAC,CAACC,UAAF,CAAa;AAAG;AAAhB,KAVC,IAWDD,CAAC,CAACC,UAAF,CAAa;AAAG;AAAhB,KAXP;AAYH,GAbD;;AAcAC,EAAAA,MAAM,CAACC,cAAP,CAAsBrD,mBAAmB,CAACsD,SAA1C,EAAqD,eAArD,EAAsE;AAClEzD,IAAAA,GAAG,EAAE,YAAY;AACb,UAAI,CAAC,KAAKmC,cAAV,EAA0B;AACtB,aAAKA,cAAL,GAAsB,EAAtB;;AACA,YAAIuB,aAAa,GAAGvD,mBAAmB,CAACwD,sBAApB,CAA2C,KAAKpD,mBAAhD,CAApB;;AACA,YAAImD,aAAJ,EAAmB;AACf,eAAK,IAAIhB,EAAE,GAAG,CAAT,EAAYkB,eAAe,GAAGF,aAAnC,EAAkDhB,EAAE,GAAGkB,eAAe,CAAChB,MAAvE,EAA+EF,EAAE,EAAjF,EAAqF;AACjF,gBAAImB,IAAI,GAAGD,eAAe,CAAClB,EAAD,CAA1B;AACA,iBAAKP,cAAL,CAAoB0B,IAApB,IAA4B,IAA5B;AACH;AACJ;AACJ;;AACD,aAAO,KAAK1B,cAAZ;AACH,KAbiE;AAclE2B,IAAAA,UAAU,EAAE,IAdsD;AAelEC,IAAAA,YAAY,EAAE;AAfoD,GAAtE;;AAiBA5D,EAAAA,mBAAmB,CAACsD,SAApB,CAA8BO,oBAA9B,GAAqD,UAAUC,GAAV,EAAe;AAChE,WAAO5E,SAAS,CAAC2E,oBAAV,CAA+BC,GAA/B,EAAoC,KAAKrD,UAAzC,EAAqD,KAAKC,YAA1D,CAAP;AACH,GAFD;;AAGAV,EAAAA,mBAAmB,CAACwD,sBAApB,GAA6C,UAAUvD,kBAAV,EAA8B;AACvE,QAAI;AACA,aAAOd,6BAA6B,CAAC4E,qBAA9B,CAAoD9D,kBAAkB,CAAC+D,EAAvE,CAAP;AACH,KAFD,CAGA,OAAOd,CAAP,EAAU;AACNrE,MAAAA,iBAAiB,CAACqE,CAAD,CAAjB;AACA,aAAO,IAAP;AACH;AACJ,GARD;;AASAlD,EAAAA,mBAAmB,CAACsC,oBAApB,GAA2C,UAAUrC,kBAAV,EAA8B;AACrE,QAAI;AACA,aAAOd,6BAA6B,CAAC8E,mBAA9B,CAAkDhE,kBAAkB,CAAC+D,EAArE,CAAP;AACH,KAFD,CAGA,OAAOd,CAAP,EAAU;AACNrE,MAAAA,iBAAiB,CAACqE,CAAD,CAAjB;AACA,aAAO,IAAP;AACH;AACJ,GARD;;AASAlD,EAAAA,mBAAmB,CAACmC,mBAApB,GAA0C,UAAUlC,kBAAV,EAA8BiE,eAA9B,EAA+C;AACrF,YAAQA,eAAR;AACI,WAAK,kBAAL;AACI,eAAO5E,yBAAP;;AACJ,WAAK,iBAAL;AACI,eAAOU,mBAAmB,CAACmE,kCAApB,CAAuDlE,kBAAvD,CAAP;;AACJ,WAAK,QAAL;AACI,eAAOb,eAAP;;AACJ,WAAK,OAAL;AACI,eAAOC,cAAP;AARR;AAUH,GAXD;;AAYAW,EAAAA,mBAAmB,CAACmE,kCAApB,GAAyD,UAAUlE,kBAAV,EAA8B;AACnF,QAAI;AACA,UAAImE,oBAAoB,GAAGjF,6BAA6B,CAACkF,qBAA9B,CAAoDpE,kBAAkB,CAAC+D,EAAvE,CAA3B;AACA,aAAO,UAAUM,CAAV,EAAa;AAAE,eAAOF,oBAAoB,CAACG,OAArB,CAA6BD,CAA7B,MAAoC,CAAC,CAA5C;AAAgD,OAAtE;AACH,KAHD,CAIA,OAAOpB,CAAP,EAAU;AACNrE,MAAAA,iBAAiB,CAACqE,CAAD,CAAjB;AACA,aAAO7D,cAAP;AACH;AACJ,GATD;;AAUAW,EAAAA,mBAAmB,CAAC8C,oBAApB,GAA2C,UAAU7C,kBAAV,EAA8B;AACrE,QAAI;AACA,aAAOd,6BAA6B,CAACqF,mBAA9B,CAAkDvE,kBAAkB,CAAC+D,EAArE,CAAP;AACH,KAFD,CAGA,OAAOd,CAAP,EAAU;AACNrE,MAAAA,iBAAiB,CAACqE,CAAD,CAAjB;AACA,aAAO,IAAP;AACH;AACJ,GARD;;AASA,SAAOlD,mBAAP;AACH,CApIwC,EAAzC;;AAqIA,SAASA,mBAAT;AACA;;;;AAGA,IAAIyE,iBAAiB;AAAG;AAAe,YAAY;AAC/C,WAASA,iBAAT,CAA2BC,cAA3B,EAA2CC,oCAA3C,EAAiFC,QAAjF,EAA2FC,sBAA3F,EAAmH;AAC/G,SAAKH,cAAL,GAAsBA,cAAtB;AACA,SAAKC,oCAAL,GAA4CA,oCAA5C;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,sBAAL,GAA8BA,sBAA9B;AACA,SAAKC,SAAL,GAAiBL,iBAAiB,CAACM,iBAAlB,CAAoC,KAAKL,cAAzC,EAAyD,KAAKE,QAA9D,CAAjB;AACH;;AACDH,EAAAA,iBAAiB,CAACnB,SAAlB,CAA4B0B,MAA5B,GAAqC,UAAUC,KAAV,EAAiB;AAClD,WAAQ,KAAKN,oCAAL,KAA8CM,KAAK,CAACN,oCAApD,IACD,KAAKE,sBAAL,KAAgCI,KAAK,CAACJ,sBADrC,IAED,KAAKD,QAAL,CAAcI,MAAd,CAAqBC,KAAK,CAACL,QAA3B,CAFC,IAGD,KAAKF,cAAL,CAAoBQ,WAApB,CAAgCD,KAAK,CAACP,cAAtC,CAHP;AAIH,GALD;;AAMAD,EAAAA,iBAAiB,CAACnB,SAAlB,CAA4B6B,YAA5B,GAA2C,YAAY;AACnD,WAAQ,CAAC,KAAKL,SAAL,CAAeM,OAAf,EAAD,IAA6B,CAAC,KAAKV,cAAL,CAAoBU,OAApB,EAAtC;AACH,GAFD;;AAGAX,EAAAA,iBAAiB,CAACnB,SAAlB,CAA4B+B,IAA5B,GAAmC,UAAUC,eAAV,EAA2BC,UAA3B,EAAuCC,MAAvC,EAA+CX,sBAA/C,EAAuE;AACtG,QAAIS,eAAJ,EAAqB;AACjB;AACA,aAAO,IAAIb,iBAAJ,CAAsB,KAAKC,cAA3B,EAA2C,KAAKC,oCAAhD,EAAsF,IAAI5F,QAAJ,CAAawG,UAAb,EAAyBC,MAAzB,CAAtF,EAAwHX,sBAAxH,CAAP;AACH,KAHD,MAIK;AACD;AACA,aAAO,IAAIJ,iBAAJ,CAAsB,IAAIzF,KAAJ,CAAUuG,UAAV,EAAsBC,MAAtB,EAA8BD,UAA9B,EAA0CC,MAA1C,CAAtB,EAAyEX,sBAAzE,EAAiG,IAAI9F,QAAJ,CAAawG,UAAb,EAAyBC,MAAzB,CAAjG,EAAmIX,sBAAnI,CAAP;AACH;AACJ,GATD;;AAUAJ,EAAAA,iBAAiB,CAACM,iBAAlB,GAAsC,UAAUL,cAAV,EAA0BE,QAA1B,EAAoC;AACtE,QAAIa,eAAJ,EAAqBC,WAArB,EAAkCC,aAAlC,EAAiDC,SAAjD;;AACA,QAAIlB,cAAc,CAACU,OAAf,EAAJ,EAA8B;AAC1BK,MAAAA,eAAe,GAAGf,cAAc,CAACe,eAAjC;AACAC,MAAAA,WAAW,GAAGhB,cAAc,CAACgB,WAA7B;AACAC,MAAAA,aAAa,GAAGf,QAAQ,CAACW,UAAzB;AACAK,MAAAA,SAAS,GAAGhB,QAAQ,CAACY,MAArB;AACH,KALD,MAMK;AACD,UAAIZ,QAAQ,CAACiB,eAAT,CAAyBnB,cAAc,CAACoB,gBAAf,EAAzB,CAAJ,EAAiE;AAC7DL,QAAAA,eAAe,GAAGf,cAAc,CAACiB,aAAjC;AACAD,QAAAA,WAAW,GAAGhB,cAAc,CAACkB,SAA7B;AACAD,QAAAA,aAAa,GAAGf,QAAQ,CAACW,UAAzB;AACAK,QAAAA,SAAS,GAAGhB,QAAQ,CAACY,MAArB;AACH,OALD,MAMK;AACDC,QAAAA,eAAe,GAAGf,cAAc,CAACe,eAAjC;AACAC,QAAAA,WAAW,GAAGhB,cAAc,CAACgB,WAA7B;AACAC,QAAAA,aAAa,GAAGf,QAAQ,CAACW,UAAzB;AACAK,QAAAA,SAAS,GAAGhB,QAAQ,CAACY,MAArB;AACH;AACJ;;AACD,WAAO,IAAIvG,SAAJ,CAAcwG,eAAd,EAA+BC,WAA/B,EAA4CC,aAA5C,EAA2DC,SAA3D,CAAP;AACH,GAvBD;;AAwBA,SAAOnB,iBAAP;AACH,CApDsC,EAAvC;;AAqDA,SAASA,iBAAT;;AACA,IAAIsB,aAAa;AAAG;AAAe,YAAY;AAC3C,WAASA,aAAT,CAAuB5F,aAAvB,EAAsC6F,KAAtC,EAA6CC,SAA7C,EAAwD;AACpD,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAc,IAAIlG,mBAAJ,CAAwB,KAAKgG,KAAL,CAAWG,qBAAX,EAAxB,EAA4D,KAAKH,KAAL,CAAWI,UAAX,EAA5D,EAAqFjG,aAArF,CAAd;AACH;;AACD4F,EAAAA,aAAa,CAACzC,SAAd,CAAwB+C,oBAAxB,GAA+C,UAAUC,YAAV,EAAwBC,aAAxB,EAAuC;AAClF,WAAO,KAAKN,SAAL,CAAeO,oBAAf,CAAoCH,oBAApC,CAAyDC,YAAzD,EAAuEC,aAAvE,CAAP;AACH,GAFD;;AAGAR,EAAAA,aAAa,CAACzC,SAAd,CAAwBmD,iBAAxB,GAA4C,UAAUC,SAAV,EAAqBC,kBAArB,EAAyC;AACjF,WAAO,KAAKV,SAAL,CAAeO,oBAAf,CAAoCC,iBAApC,CAAsDC,SAAtD,EAAiEC,kBAAjE,CAAP;AACH,GAFD;;AAGAZ,EAAAA,aAAa,CAACzC,SAAd,CAAwBsD,4BAAxB,GAAuD,UAAUF,SAAV,EAAqB;AACxE,WAAO,KAAKT,SAAL,CAAeO,oBAAf,CAAoCI,4BAApC,CAAiEF,SAAjE,CAAP;AACH,GAFD;;AAGAX,EAAAA,aAAa,CAACzC,SAAd,CAAwBuD,kCAAxB,GAA6D,UAAUtB,UAAV,EAAsBC,MAAtB,EAA8B;AACvF,WAAO,KAAKS,SAAL,CAAeO,oBAAf,CAAoCK,kCAApC,CAAuE,IAAI9H,QAAJ,CAAawG,UAAb,EAAyBC,MAAzB,CAAvE,CAAP;AACH,GAFD;;AAGAO,EAAAA,aAAa,CAACzC,SAAd,CAAwBwD,kCAAxB,GAA6D,UAAUP,aAAV,EAAyB;AAClF,WAAO,KAAKN,SAAL,CAAeO,oBAAf,CAAoCM,kCAApC,CAAuEP,aAAvE,CAAP;AACH,GAFD;;AAGAR,EAAAA,aAAa,CAACzC,SAAd,CAAwByD,4BAAxB,GAAuD,UAAUC,UAAV,EAAsB;AACzE,WAAO,KAAKf,SAAL,CAAeO,oBAAf,CAAoCO,4BAApC,CAAiEC,UAAjE,CAAP;AACH,GAFD;;AAGAjB,EAAAA,aAAa,CAACzC,SAAd,CAAwB2D,mBAAxB,GAA8C,YAAY;AACtD,WAAO,KAAKhB,SAAL,CAAeiB,UAAf,CAA0BD,mBAA1B,EAAP;AACH,GAFD;;AAGAlB,EAAAA,aAAa,CAACzC,SAAd,CAAwB6D,6BAAxB,GAAwD,YAAY;AAChE,WAAO,KAAKlB,SAAL,CAAekB,6BAAf,EAAP;AACH,GAFD;;AAGApB,EAAAA,aAAa,CAACzC,SAAd,CAAwB8D,8BAAxB,GAAyD,YAAY;AACjE,QAAIV,SAAS,GAAG,KAAKT,SAAL,CAAekB,6BAAf,EAAhB;AACA,WAAO,KAAKlB,SAAL,CAAeO,oBAAf,CAAoCI,4BAApC,CAAiEF,SAAjE,CAAP;AACH,GAHD;;AAIAX,EAAAA,aAAa,CAACzC,SAAd,CAAwB+D,wCAAxB,GAAmE,UAAUC,SAAV,EAAqB;AACpF,WAAO,KAAKrB,SAAL,CAAeoB,wCAAf,CAAwDC,SAAxD,CAAP;AACH,GAFD;;AAGAvB,EAAAA,aAAa,CAACzC,SAAd,CAAwBiE,4BAAxB,GAAuD,UAAUC,cAAV,EAA0B;AAC7E,WAAO,KAAKvB,SAAL,CAAeiB,UAAf,CAA0BO,8BAA1B,CAAyDD,cAAzD,CAAP;AACH,GAFD;;AAGA,SAAOzB,aAAP;AACH,CAzCkC,EAAnC;;AA0CA,SAASA,aAAT;;AACA,IAAI2B,uBAAuB;AAAG;AAAe,YAAY;AACrD,WAASA,uBAAT,CAAiCC,UAAjC,EAA6C;AACzC,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACH;;AACD,SAAOF,uBAAP;AACH,CAN4C,EAA7C;;AAOA,SAASA,uBAAT;;AACA,IAAIG,sBAAsB;AAAG;AAAe,YAAY;AACpD,WAASA,sBAAT,CAAgCD,SAAhC,EAA2C;AACvC,SAAKD,UAAL,GAAkB,IAAlB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AACD,SAAOC,sBAAP;AACH,CAN2C,EAA5C;;AAOA,SAASA,sBAAT;;AACA,IAAIC,WAAW;AAAG;AAAe,YAAY;AACzC,WAASA,WAAT,CAAqBH,UAArB,EAAiCC,SAAjC,EAA4C;AACxC,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AACDE,EAAAA,WAAW,CAACC,cAAZ,GAA6B,UAAUJ,UAAV,EAAsB;AAC/C,WAAO,IAAID,uBAAJ,CAA4BC,UAA5B,CAAP;AACH,GAFD;;AAGAG,EAAAA,WAAW,CAACE,aAAZ,GAA4B,UAAUJ,SAAV,EAAqB;AAC7C,WAAO,IAAIC,sBAAJ,CAA2BD,SAA3B,CAAP;AACH,GAFD;;AAGAE,EAAAA,WAAW,CAACG,kBAAZ,GAAiC,UAAUC,cAAV,EAA0B;AACvD,QAAIC,wBAAwB,GAAGD,cAAc,CAACC,wBAA9C;AACA,QAAIC,oBAAoB,GAAGF,cAAc,CAACE,oBAA1C;AACA,QAAIC,kBAAkB,GAAGH,cAAc,CAACG,kBAAxC;AACA,QAAIC,cAAc,GAAGJ,cAAc,CAACI,cAApC;AACA,QAAIX,UAAU,GAAG,IAAIlD,iBAAJ,CAAsB,IAAIzF,KAAJ,CAAUmJ,wBAAV,EAAoCC,oBAApC,EAA0DD,wBAA1D,EAAoFC,oBAApF,CAAtB,EAAiI,CAAjI,EAAoI,IAAIrJ,QAAJ,CAAasJ,kBAAb,EAAiCC,cAAjC,CAApI,EAAsL,CAAtL,CAAjB;AACA,WAAOR,WAAW,CAACC,cAAZ,CAA2BJ,UAA3B,CAAP;AACH,GAPD;;AAQAG,EAAAA,WAAW,CAACS,mBAAZ,GAAkC,UAAUC,eAAV,EAA2B;AACzD,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,eAAe,CAAC/F,MAAtC,EAA8CiG,CAAC,GAAGC,GAAlD,EAAuDD,CAAC,EAAxD,EAA4D;AACxDD,MAAAA,MAAM,CAACC,CAAD,CAAN,GAAY,KAAKT,kBAAL,CAAwBO,eAAe,CAACE,CAAD,CAAvC,CAAZ;AACH;;AACD,WAAOD,MAAP;AACH,GAND;;AAOAX,EAAAA,WAAW,CAACxE,SAAZ,CAAsB0B,MAAtB,GAA+B,UAAUC,KAAV,EAAiB;AAC5C,WAAQ,KAAK2C,SAAL,CAAe5C,MAAf,CAAsBC,KAAK,CAAC2C,SAA5B,KAA0C,KAAKD,UAAL,CAAgB3C,MAAhB,CAAuBC,KAAK,CAAC0C,UAA7B,CAAlD;AACH,GAFD;;AAGA,SAAOG,WAAP;AACH,CA9BgC,EAAjC;;AA+BA,SAASA,WAAT;;AACA,IAAIc,mBAAmB;AAAG;AAAe,YAAY;AACjD,WAASA,mBAAT,CAA6BC,IAA7B,EAAmCC,QAAnC,EAA6CC,IAA7C,EAAmD;AAC/C,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKE,4BAAL,GAAoCD,IAAI,CAACC,4BAAzC;AACA,SAAKC,2BAAL,GAAmCF,IAAI,CAACE,2BAAxC;AACH;;AACD,SAAOL,mBAAP;AACH,CARwC,EAAzC;;AASA,SAASA,mBAAT;AACA;;;;AAGA,IAAIM,aAAa;AAAG;AAAe,YAAY;AAC3C,WAASA,aAAT,GAAyB,CACxB;;AACDA,EAAAA,aAAa,CAACC,uBAAd,GAAwC,UAAUC,WAAV,EAAuB5D,MAAvB,EAA+BhF,OAA/B,EAAwC;AAC5E,QAAI6I,iBAAiB,GAAGD,WAAW,CAAC3G,MAApC;AACA,QAAI6G,SAAS,GAAG9D,MAAM,GAAG,CAAT,GAAa6D,iBAAb,GAAiC7D,MAAM,GAAG,CAA1C,GAA8C6D,iBAA9D;AACA,QAAIE,MAAM,GAAG,CAAb;AACA,QAAIb,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAGY,SAAX,EAAsB;AAClB,UAAIE,SAAS,GAAG1K,OAAO,CAAC2K,gBAAR,CAAyBL,WAAzB,EAAsCE,SAAtC,EAAiDZ,CAAjD,CAAhB;AACAA,MAAAA,CAAC,IAAKc,SAAS,IAAI;AAAM;AAAnB,QAA6D,CAA7D,GAAiE,CAAvE;;AACA,UAAIA,SAAS,KAAK;AAAE;AAApB,QAA+B;AAC3BD,UAAAA,MAAM,GAAGL,aAAa,CAACQ,iBAAd,CAAgCH,MAAhC,EAAwC/I,OAAxC,CAAT;AACH,SAFD,MAGK;AACD,YAAImJ,iBAAiB,GAAG7K,OAAO,CAAC8K,oBAAR,CAA6BJ,SAA7B,CAAxB;;AACA,eAAOd,CAAC,GAAGY,SAAX,EAAsB;AAClB,cAAIO,aAAa,GAAG/K,OAAO,CAAC2K,gBAAR,CAAyBL,WAAzB,EAAsCE,SAAtC,EAAiDZ,CAAjD,CAApB;AACA,cAAIoB,qBAAqB,GAAGhL,OAAO,CAAC8K,oBAAR,CAA6BC,aAA7B,CAA5B;;AACA,cAAI/K,OAAO,CAACiL,6BAAR,CAAsCJ,iBAAtC,EAAyDG,qBAAzD,CAAJ,EAAqF;AACjF;AACH;;AACDpB,UAAAA,CAAC,IAAKmB,aAAa,IAAI;AAAM;AAAvB,YAAiE,CAAjE,GAAqE,CAA3E;AACAF,UAAAA,iBAAiB,GAAGG,qBAApB;AACH;;AACD,YAAIhL,OAAO,CAACkL,oBAAR,CAA6BR,SAA7B,KAA2C1K,OAAO,CAACmL,gBAAR,CAAyBT,SAAzB,CAA/C,EAAoF;AAChFD,UAAAA,MAAM,GAAGA,MAAM,GAAG,CAAlB;AACH,SAFD,MAGK;AACDA,UAAAA,MAAM,GAAGA,MAAM,GAAG,CAAlB;AACH;AACJ;AACJ;;AACD,WAAOA,MAAP;AACH,GA/BD;;AAgCAL,EAAAA,aAAa,CAACgB,wBAAd,GAAyC,UAAUhE,MAAV,EAAkBF,KAAlB,EAAyBpB,QAAzB,EAAmC;AACxE,WAAO,KAAKuE,uBAAL,CAA6BnD,KAAK,CAACmE,cAAN,CAAqBvF,QAAQ,CAACW,UAA9B,CAA7B,EAAwEX,QAAQ,CAACY,MAAjF,EAAyFU,MAAM,CAAC1F,OAAhG,CAAP;AACH,GAFD;;AAGA0I,EAAAA,aAAa,CAACkB,uBAAd,GAAwC,UAAUhB,WAAV,EAAuBiB,aAAvB,EAAsC7J,OAAtC,EAA+C;AACnF,QAAI6J,aAAa,IAAI,CAArB,EAAwB;AACpB,aAAO,CAAP;AACH;;AACD,QAAIC,UAAU,GAAGlB,WAAW,CAAC3G,MAA7B;AACA,QAAI8H,mBAAmB,GAAG,CAA1B;AACA,QAAIC,YAAY,GAAG,CAAnB;AACA,QAAI9B,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAG4B,UAAX,EAAuB;AACnB,UAAId,SAAS,GAAG1K,OAAO,CAAC2K,gBAAR,CAAyBL,WAAzB,EAAsCkB,UAAtC,EAAkD5B,CAAlD,CAAhB;AACAA,MAAAA,CAAC,IAAKc,SAAS,IAAI;AAAM;AAAnB,QAA6D,CAA7D,GAAiE,CAAvE;AACA,UAAIiB,kBAAkB,GAAG,KAAK,CAA9B;;AACA,UAAIjB,SAAS,KAAK;AAAE;AAApB,QAA+B;AAC3BiB,UAAAA,kBAAkB,GAAGvB,aAAa,CAACQ,iBAAd,CAAgCa,mBAAhC,EAAqD/J,OAArD,CAArB;AACH,SAFD,MAGK;AACD,YAAImJ,iBAAiB,GAAG7K,OAAO,CAAC8K,oBAAR,CAA6BJ,SAA7B,CAAxB;;AACA,eAAOd,CAAC,GAAG4B,UAAX,EAAuB;AACnB,cAAIT,aAAa,GAAG/K,OAAO,CAAC2K,gBAAR,CAAyBL,WAAzB,EAAsCkB,UAAtC,EAAkD5B,CAAlD,CAApB;AACA,cAAIoB,qBAAqB,GAAGhL,OAAO,CAAC8K,oBAAR,CAA6BC,aAA7B,CAA5B;;AACA,cAAI/K,OAAO,CAACiL,6BAAR,CAAsCJ,iBAAtC,EAAyDG,qBAAzD,CAAJ,EAAqF;AACjF;AACH;;AACDpB,UAAAA,CAAC,IAAKmB,aAAa,IAAI;AAAM;AAAvB,YAAiE,CAAjE,GAAqE,CAA3E;AACAF,UAAAA,iBAAiB,GAAGG,qBAApB;AACH;;AACD,YAAIhL,OAAO,CAACkL,oBAAR,CAA6BR,SAA7B,KAA2C1K,OAAO,CAACmL,gBAAR,CAAyBT,SAAzB,CAA/C,EAAoF;AAChFiB,UAAAA,kBAAkB,GAAGF,mBAAmB,GAAG,CAA3C;AACH,SAFD,MAGK;AACDE,UAAAA,kBAAkB,GAAGF,mBAAmB,GAAG,CAA3C;AACH;AACJ;;AACD,UAAIG,WAAW,GAAGhC,CAAC,GAAG,CAAtB;;AACA,UAAI+B,kBAAkB,IAAIJ,aAA1B,EAAyC;AACrC,YAAIM,WAAW,GAAGN,aAAa,GAAGE,mBAAlC;AACA,YAAIK,UAAU,GAAGH,kBAAkB,GAAGJ,aAAtC;;AACA,YAAIO,UAAU,GAAGD,WAAjB,EAA8B;AAC1B,iBAAOD,WAAP;AACH,SAFD,MAGK;AACD,iBAAOF,YAAP;AACH;AACJ;;AACDD,MAAAA,mBAAmB,GAAGE,kBAAtB;AACAD,MAAAA,YAAY,GAAGE,WAAf;AACH,KA9CkF,CA+CnF;;;AACA,WAAOJ,UAAU,GAAG,CAApB;AACH,GAjDD;;AAkDApB,EAAAA,aAAa,CAAC2B,wBAAd,GAAyC,UAAU3E,MAAV,EAAkBF,KAAlB,EAAyBT,UAAzB,EAAqC8E,aAArC,EAAoD;AACzF,QAAId,MAAM,GAAG,KAAKa,uBAAL,CAA6BpE,KAAK,CAACmE,cAAN,CAAqB5E,UAArB,CAA7B,EAA+D8E,aAA/D,EAA8EnE,MAAM,CAAC1F,OAArF,CAAb;AACA,QAAIsK,SAAS,GAAG9E,KAAK,CAAC+E,gBAAN,CAAuBxF,UAAvB,CAAhB;;AACA,QAAIgE,MAAM,GAAGuB,SAAb,EAAwB;AACpB,aAAOA,SAAP;AACH;;AACD,QAAIE,SAAS,GAAGhF,KAAK,CAACiF,gBAAN,CAAuB1F,UAAvB,CAAhB;;AACA,QAAIgE,MAAM,GAAGyB,SAAb,EAAwB;AACpB,aAAOA,SAAP;AACH;;AACD,WAAOzB,MAAP;AACH,GAXD;AAYA;;;;;AAGAL,EAAAA,aAAa,CAACQ,iBAAd,GAAkC,UAAUW,aAAV,EAAyB7J,OAAzB,EAAkC;AAChE,WAAO6J,aAAa,GAAG7J,OAAhB,GAA0B6J,aAAa,GAAG7J,OAAjD;AACH,GAFD;AAGA;;;;;AAGA0I,EAAAA,aAAa,CAACgC,iBAAd,GAAkC,UAAUb,aAAV,EAAyB5J,UAAzB,EAAqC;AACnE,WAAO4J,aAAa,GAAG5J,UAAhB,GAA6B4J,aAAa,GAAG5J,UAApD;AACH,GAFD;AAGA;;;;;AAGAyI,EAAAA,aAAa,CAACiC,iBAAd,GAAkC,UAAU3F,MAAV,EAAkBhF,OAAlB,EAA2B;AACzD,WAAOgF,MAAM,GAAG,CAAT,GAAa,CAACA,MAAM,GAAG,CAAV,IAAehF,OAAnC;AACH,GAFD;AAGA;;;;;AAGA0I,EAAAA,aAAa,CAACkC,iBAAd,GAAkC,UAAU5F,MAAV,EAAkB/E,UAAlB,EAA8B;AAC5D,WAAO+E,MAAM,GAAG,CAAT,GAAa,CAACA,MAAM,GAAG,CAAV,IAAe/E,UAAnC;AACH,GAFD;;AAGA,SAAOyI,aAAP;AACH,CA7HkC,EAAnC;;AA8HA,SAASA,aAAT;AACA,OAAO,SAASmC,OAAT,CAAiBC,EAAjB,EAAqB;AACxB,SAAQA,EAAE,KAAK,IAAP,IAAeA,EAAE,KAAK,GAAtB,IAA6BA,EAAE,KAAK,GAA5C;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport { TextModel } from '../model/textModel.js';\r\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\r\nvar autoCloseAlways = function () { return true; };\r\nvar autoCloseNever = function () { return false; };\r\nvar autoCloseBeforeWhitespace = function (chr) { return (chr === ' ' || chr === '\\t'); };\r\nfunction appendEntry(target, key, value) {\r\n    if (target.has(key)) {\r\n        target.get(key).push(value);\r\n    }\r\n    else {\r\n        target.set(key, [value]);\r\n    }\r\n}\r\nvar CursorConfiguration = /** @class */ (function () {\r\n    function CursorConfiguration(languageIdentifier, modelOptions, configuration) {\r\n        this._languageIdentifier = languageIdentifier;\r\n        var options = configuration.options;\r\n        var layoutInfo = options.get(107 /* layoutInfo */);\r\n        this.readOnly = options.get(68 /* readOnly */);\r\n        this.tabSize = modelOptions.tabSize;\r\n        this.indentSize = modelOptions.indentSize;\r\n        this.insertSpaces = modelOptions.insertSpaces;\r\n        this.lineHeight = options.get(49 /* lineHeight */);\r\n        this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\r\n        this.useTabStops = options.get(95 /* useTabStops */);\r\n        this.wordSeparators = options.get(96 /* wordSeparators */);\r\n        this.emptySelectionClipboard = options.get(25 /* emptySelectionClipboard */);\r\n        this.copyWithSyntaxHighlighting = options.get(15 /* copyWithSyntaxHighlighting */);\r\n        this.multiCursorMergeOverlapping = options.get(58 /* multiCursorMergeOverlapping */);\r\n        this.multiCursorPaste = options.get(60 /* multiCursorPaste */);\r\n        this.autoClosingBrackets = options.get(5 /* autoClosingBrackets */);\r\n        this.autoClosingQuotes = options.get(7 /* autoClosingQuotes */);\r\n        this.autoClosingOvertype = options.get(6 /* autoClosingOvertype */);\r\n        this.autoSurround = options.get(10 /* autoSurround */);\r\n        this.autoIndent = options.get(8 /* autoIndent */);\r\n        this.autoClosingPairsOpen2 = new Map();\r\n        this.autoClosingPairsClose2 = new Map();\r\n        this.surroundingPairs = {};\r\n        this._electricChars = null;\r\n        this.shouldAutoCloseBefore = {\r\n            quote: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingQuotes),\r\n            bracket: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingBrackets)\r\n        };\r\n        var autoClosingPairs = CursorConfiguration._getAutoClosingPairs(languageIdentifier);\r\n        if (autoClosingPairs) {\r\n            for (var _i = 0, autoClosingPairs_1 = autoClosingPairs; _i < autoClosingPairs_1.length; _i++) {\r\n                var pair = autoClosingPairs_1[_i];\r\n                appendEntry(this.autoClosingPairsOpen2, pair.open.charAt(pair.open.length - 1), pair);\r\n                if (pair.close.length === 1) {\r\n                    appendEntry(this.autoClosingPairsClose2, pair.close, pair);\r\n                }\r\n            }\r\n        }\r\n        var surroundingPairs = CursorConfiguration._getSurroundingPairs(languageIdentifier);\r\n        if (surroundingPairs) {\r\n            for (var _a = 0, surroundingPairs_1 = surroundingPairs; _a < surroundingPairs_1.length; _a++) {\r\n                var pair = surroundingPairs_1[_a];\r\n                this.surroundingPairs[pair.open] = pair.close;\r\n            }\r\n        }\r\n    }\r\n    CursorConfiguration.shouldRecreate = function (e) {\r\n        return (e.hasChanged(107 /* layoutInfo */)\r\n            || e.hasChanged(96 /* wordSeparators */)\r\n            || e.hasChanged(25 /* emptySelectionClipboard */)\r\n            || e.hasChanged(58 /* multiCursorMergeOverlapping */)\r\n            || e.hasChanged(60 /* multiCursorPaste */)\r\n            || e.hasChanged(5 /* autoClosingBrackets */)\r\n            || e.hasChanged(7 /* autoClosingQuotes */)\r\n            || e.hasChanged(6 /* autoClosingOvertype */)\r\n            || e.hasChanged(10 /* autoSurround */)\r\n            || e.hasChanged(95 /* useTabStops */)\r\n            || e.hasChanged(49 /* lineHeight */)\r\n            || e.hasChanged(68 /* readOnly */));\r\n    };\r\n    Object.defineProperty(CursorConfiguration.prototype, \"electricChars\", {\r\n        get: function () {\r\n            if (!this._electricChars) {\r\n                this._electricChars = {};\r\n                var electricChars = CursorConfiguration._getElectricCharacters(this._languageIdentifier);\r\n                if (electricChars) {\r\n                    for (var _i = 0, electricChars_1 = electricChars; _i < electricChars_1.length; _i++) {\r\n                        var char = electricChars_1[_i];\r\n                        this._electricChars[char] = true;\r\n                    }\r\n                }\r\n            }\r\n            return this._electricChars;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CursorConfiguration.prototype.normalizeIndentation = function (str) {\r\n        return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\r\n    };\r\n    CursorConfiguration._getElectricCharacters = function (languageIdentifier) {\r\n        try {\r\n            return LanguageConfigurationRegistry.getElectricCharacters(languageIdentifier.id);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    };\r\n    CursorConfiguration._getAutoClosingPairs = function (languageIdentifier) {\r\n        try {\r\n            return LanguageConfigurationRegistry.getAutoClosingPairs(languageIdentifier.id);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    };\r\n    CursorConfiguration._getShouldAutoClose = function (languageIdentifier, autoCloseConfig) {\r\n        switch (autoCloseConfig) {\r\n            case 'beforeWhitespace':\r\n                return autoCloseBeforeWhitespace;\r\n            case 'languageDefined':\r\n                return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageIdentifier);\r\n            case 'always':\r\n                return autoCloseAlways;\r\n            case 'never':\r\n                return autoCloseNever;\r\n        }\r\n    };\r\n    CursorConfiguration._getLanguageDefinedShouldAutoClose = function (languageIdentifier) {\r\n        try {\r\n            var autoCloseBeforeSet_1 = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageIdentifier.id);\r\n            return function (c) { return autoCloseBeforeSet_1.indexOf(c) !== -1; };\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return autoCloseNever;\r\n        }\r\n    };\r\n    CursorConfiguration._getSurroundingPairs = function (languageIdentifier) {\r\n        try {\r\n            return LanguageConfigurationRegistry.getSurroundingPairs(languageIdentifier.id);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    };\r\n    return CursorConfiguration;\r\n}());\r\nexport { CursorConfiguration };\r\n/**\r\n * Represents the cursor state on either the model or on the view model.\r\n */\r\nvar SingleCursorState = /** @class */ (function () {\r\n    function SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\r\n        this.selectionStart = selectionStart;\r\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\r\n        this.position = position;\r\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\r\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\r\n    }\r\n    SingleCursorState.prototype.equals = function (other) {\r\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\r\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\r\n            && this.position.equals(other.position)\r\n            && this.selectionStart.equalsRange(other.selectionStart));\r\n    };\r\n    SingleCursorState.prototype.hasSelection = function () {\r\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\r\n    };\r\n    SingleCursorState.prototype.move = function (inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\r\n        if (inSelectionMode) {\r\n            // move just position\r\n            return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\r\n        }\r\n        else {\r\n            // move everything\r\n            return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\r\n        }\r\n    };\r\n    SingleCursorState._computeSelection = function (selectionStart, position) {\r\n        var startLineNumber, startColumn, endLineNumber, endColumn;\r\n        if (selectionStart.isEmpty()) {\r\n            startLineNumber = selectionStart.startLineNumber;\r\n            startColumn = selectionStart.startColumn;\r\n            endLineNumber = position.lineNumber;\r\n            endColumn = position.column;\r\n        }\r\n        else {\r\n            if (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\r\n                startLineNumber = selectionStart.endLineNumber;\r\n                startColumn = selectionStart.endColumn;\r\n                endLineNumber = position.lineNumber;\r\n                endColumn = position.column;\r\n            }\r\n            else {\r\n                startLineNumber = selectionStart.startLineNumber;\r\n                startColumn = selectionStart.startColumn;\r\n                endLineNumber = position.lineNumber;\r\n                endColumn = position.column;\r\n            }\r\n        }\r\n        return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\r\n    };\r\n    return SingleCursorState;\r\n}());\r\nexport { SingleCursorState };\r\nvar CursorContext = /** @class */ (function () {\r\n    function CursorContext(configuration, model, viewModel) {\r\n        this.model = model;\r\n        this.viewModel = viewModel;\r\n        this.config = new CursorConfiguration(this.model.getLanguageIdentifier(), this.model.getOptions(), configuration);\r\n    }\r\n    CursorContext.prototype.validateViewPosition = function (viewPosition, modelPosition) {\r\n        return this.viewModel.coordinatesConverter.validateViewPosition(viewPosition, modelPosition);\r\n    };\r\n    CursorContext.prototype.validateViewRange = function (viewRange, expectedModelRange) {\r\n        return this.viewModel.coordinatesConverter.validateViewRange(viewRange, expectedModelRange);\r\n    };\r\n    CursorContext.prototype.convertViewRangeToModelRange = function (viewRange) {\r\n        return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\r\n    };\r\n    CursorContext.prototype.convertViewPositionToModelPosition = function (lineNumber, column) {\r\n        return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, column));\r\n    };\r\n    CursorContext.prototype.convertModelPositionToViewPosition = function (modelPosition) {\r\n        return this.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\r\n    };\r\n    CursorContext.prototype.convertModelRangeToViewRange = function (modelRange) {\r\n        return this.viewModel.coordinatesConverter.convertModelRangeToViewRange(modelRange);\r\n    };\r\n    CursorContext.prototype.getCurrentScrollTop = function () {\r\n        return this.viewModel.viewLayout.getCurrentScrollTop();\r\n    };\r\n    CursorContext.prototype.getCompletelyVisibleViewRange = function () {\r\n        return this.viewModel.getCompletelyVisibleViewRange();\r\n    };\r\n    CursorContext.prototype.getCompletelyVisibleModelRange = function () {\r\n        var viewRange = this.viewModel.getCompletelyVisibleViewRange();\r\n        return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\r\n    };\r\n    CursorContext.prototype.getCompletelyVisibleViewRangeAtScrollTop = function (scrollTop) {\r\n        return this.viewModel.getCompletelyVisibleViewRangeAtScrollTop(scrollTop);\r\n    };\r\n    CursorContext.prototype.getVerticalOffsetForViewLine = function (viewLineNumber) {\r\n        return this.viewModel.viewLayout.getVerticalOffsetForLineNumber(viewLineNumber);\r\n    };\r\n    return CursorContext;\r\n}());\r\nexport { CursorContext };\r\nvar PartialModelCursorState = /** @class */ (function () {\r\n    function PartialModelCursorState(modelState) {\r\n        this.modelState = modelState;\r\n        this.viewState = null;\r\n    }\r\n    return PartialModelCursorState;\r\n}());\r\nexport { PartialModelCursorState };\r\nvar PartialViewCursorState = /** @class */ (function () {\r\n    function PartialViewCursorState(viewState) {\r\n        this.modelState = null;\r\n        this.viewState = viewState;\r\n    }\r\n    return PartialViewCursorState;\r\n}());\r\nexport { PartialViewCursorState };\r\nvar CursorState = /** @class */ (function () {\r\n    function CursorState(modelState, viewState) {\r\n        this.modelState = modelState;\r\n        this.viewState = viewState;\r\n    }\r\n    CursorState.fromModelState = function (modelState) {\r\n        return new PartialModelCursorState(modelState);\r\n    };\r\n    CursorState.fromViewState = function (viewState) {\r\n        return new PartialViewCursorState(viewState);\r\n    };\r\n    CursorState.fromModelSelection = function (modelSelection) {\r\n        var selectionStartLineNumber = modelSelection.selectionStartLineNumber;\r\n        var selectionStartColumn = modelSelection.selectionStartColumn;\r\n        var positionLineNumber = modelSelection.positionLineNumber;\r\n        var positionColumn = modelSelection.positionColumn;\r\n        var modelState = new SingleCursorState(new Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0, new Position(positionLineNumber, positionColumn), 0);\r\n        return CursorState.fromModelState(modelState);\r\n    };\r\n    CursorState.fromModelSelections = function (modelSelections) {\r\n        var states = [];\r\n        for (var i = 0, len = modelSelections.length; i < len; i++) {\r\n            states[i] = this.fromModelSelection(modelSelections[i]);\r\n        }\r\n        return states;\r\n    };\r\n    CursorState.prototype.equals = function (other) {\r\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\r\n    };\r\n    return CursorState;\r\n}());\r\nexport { CursorState };\r\nvar EditOperationResult = /** @class */ (function () {\r\n    function EditOperationResult(type, commands, opts) {\r\n        this.type = type;\r\n        this.commands = commands;\r\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\r\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\r\n    }\r\n    return EditOperationResult;\r\n}());\r\nexport { EditOperationResult };\r\n/**\r\n * Common operations that work and make sense both on the model and on the view model.\r\n */\r\nvar CursorColumns = /** @class */ (function () {\r\n    function CursorColumns() {\r\n    }\r\n    CursorColumns.visibleColumnFromColumn = function (lineContent, column, tabSize) {\r\n        var lineContentLength = lineContent.length;\r\n        var endOffset = column - 1 < lineContentLength ? column - 1 : lineContentLength;\r\n        var result = 0;\r\n        var i = 0;\r\n        while (i < endOffset) {\r\n            var codePoint = strings.getNextCodePoint(lineContent, endOffset, i);\r\n            i += (codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n            if (codePoint === 9 /* Tab */) {\r\n                result = CursorColumns.nextRenderTabStop(result, tabSize);\r\n            }\r\n            else {\r\n                var graphemeBreakType = strings.getGraphemeBreakType(codePoint);\r\n                while (i < endOffset) {\r\n                    var nextCodePoint = strings.getNextCodePoint(lineContent, endOffset, i);\r\n                    var nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\r\n                    if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\r\n                        break;\r\n                    }\r\n                    i += (nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n                    graphemeBreakType = nextGraphemeBreakType;\r\n                }\r\n                if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\r\n                    result = result + 2;\r\n                }\r\n                else {\r\n                    result = result + 1;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    CursorColumns.visibleColumnFromColumn2 = function (config, model, position) {\r\n        return this.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, config.tabSize);\r\n    };\r\n    CursorColumns.columnFromVisibleColumn = function (lineContent, visibleColumn, tabSize) {\r\n        if (visibleColumn <= 0) {\r\n            return 1;\r\n        }\r\n        var lineLength = lineContent.length;\r\n        var beforeVisibleColumn = 0;\r\n        var beforeColumn = 1;\r\n        var i = 0;\r\n        while (i < lineLength) {\r\n            var codePoint = strings.getNextCodePoint(lineContent, lineLength, i);\r\n            i += (codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n            var afterVisibleColumn = void 0;\r\n            if (codePoint === 9 /* Tab */) {\r\n                afterVisibleColumn = CursorColumns.nextRenderTabStop(beforeVisibleColumn, tabSize);\r\n            }\r\n            else {\r\n                var graphemeBreakType = strings.getGraphemeBreakType(codePoint);\r\n                while (i < lineLength) {\r\n                    var nextCodePoint = strings.getNextCodePoint(lineContent, lineLength, i);\r\n                    var nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\r\n                    if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\r\n                        break;\r\n                    }\r\n                    i += (nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n                    graphemeBreakType = nextGraphemeBreakType;\r\n                }\r\n                if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\r\n                    afterVisibleColumn = beforeVisibleColumn + 2;\r\n                }\r\n                else {\r\n                    afterVisibleColumn = beforeVisibleColumn + 1;\r\n                }\r\n            }\r\n            var afterColumn = i + 1;\r\n            if (afterVisibleColumn >= visibleColumn) {\r\n                var beforeDelta = visibleColumn - beforeVisibleColumn;\r\n                var afterDelta = afterVisibleColumn - visibleColumn;\r\n                if (afterDelta < beforeDelta) {\r\n                    return afterColumn;\r\n                }\r\n                else {\r\n                    return beforeColumn;\r\n                }\r\n            }\r\n            beforeVisibleColumn = afterVisibleColumn;\r\n            beforeColumn = afterColumn;\r\n        }\r\n        // walked the entire string\r\n        return lineLength + 1;\r\n    };\r\n    CursorColumns.columnFromVisibleColumn2 = function (config, model, lineNumber, visibleColumn) {\r\n        var result = this.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, config.tabSize);\r\n        var minColumn = model.getLineMinColumn(lineNumber);\r\n        if (result < minColumn) {\r\n            return minColumn;\r\n        }\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (result > maxColumn) {\r\n            return maxColumn;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    CursorColumns.nextRenderTabStop = function (visibleColumn, tabSize) {\r\n        return visibleColumn + tabSize - visibleColumn % tabSize;\r\n    };\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    CursorColumns.nextIndentTabStop = function (visibleColumn, indentSize) {\r\n        return visibleColumn + indentSize - visibleColumn % indentSize;\r\n    };\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    CursorColumns.prevRenderTabStop = function (column, tabSize) {\r\n        return column - 1 - (column - 1) % tabSize;\r\n    };\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    CursorColumns.prevIndentTabStop = function (column, indentSize) {\r\n        return column - 1 - (column - 1) % indentSize;\r\n    };\r\n    return CursorColumns;\r\n}());\r\nexport { CursorColumns };\r\nexport function isQuote(ch) {\r\n    return (ch === '\\'' || ch === '\"' || ch === '`');\r\n}\r\n"]},"metadata":{},"sourceType":"module"}