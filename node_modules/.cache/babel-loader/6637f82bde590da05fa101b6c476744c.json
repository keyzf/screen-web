{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { ReplaceCommand, ReplaceCommandWithOffsetCursorState, ReplaceCommandWithoutChangingPosition, ReplaceCommandThatPreservesSelection } from '../commands/replaceCommand.js';\nimport { ShiftCommand } from '../commands/shiftCommand.js';\nimport { SurroundSelectionCommand } from '../commands/surroundSelectionCommand.js';\nimport { CursorColumns, EditOperationResult, isQuote } from './cursorCommon.js';\nimport { getMapForWordSeparators } from './wordCharacterClassifier.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { IndentAction } from '../modes/languageConfiguration.js';\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\n\nvar TypeOperations =\n/** @class */\nfunction () {\n  function TypeOperations() {}\n\n  TypeOperations.indent = function (config, model, selections) {\n    if (model === null || selections === null) {\n      return [];\n    }\n\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new ShiftCommand(selections[i], {\n        isUnshift: false,\n        tabSize: config.tabSize,\n        indentSize: config.indentSize,\n        insertSpaces: config.insertSpaces,\n        useTabStops: config.useTabStops,\n        autoIndent: config.autoIndent\n      });\n    }\n\n    return commands;\n  };\n\n  TypeOperations.outdent = function (config, model, selections) {\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new ShiftCommand(selections[i], {\n        isUnshift: true,\n        tabSize: config.tabSize,\n        indentSize: config.indentSize,\n        insertSpaces: config.insertSpaces,\n        useTabStops: config.useTabStops,\n        autoIndent: config.autoIndent\n      });\n    }\n\n    return commands;\n  };\n\n  TypeOperations.shiftIndent = function (config, indentation, count) {\n    count = count || 1;\n    return ShiftCommand.shiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\n  };\n\n  TypeOperations.unshiftIndent = function (config, indentation, count) {\n    count = count || 1;\n    return ShiftCommand.unshiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\n  };\n\n  TypeOperations._distributedPaste = function (config, model, selections, text) {\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new ReplaceCommand(selections[i], text[i]);\n    }\n\n    return new EditOperationResult(0\n    /* Other */\n    , commands, {\n      shouldPushStackElementBefore: true,\n      shouldPushStackElementAfter: true\n    });\n  };\n\n  TypeOperations._simplePaste = function (config, model, selections, text, pasteOnNewLine) {\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      var position = selection.getPosition();\n\n      if (pasteOnNewLine && !selection.isEmpty()) {\n        pasteOnNewLine = false;\n      }\n\n      if (pasteOnNewLine && text.indexOf('\\n') !== text.length - 1) {\n        pasteOnNewLine = false;\n      }\n\n      if (pasteOnNewLine) {\n        // Paste entire line at the beginning of line\n        var typeSelection = new Range(position.lineNumber, 1, position.lineNumber, 1);\n        commands[i] = new ReplaceCommandThatPreservesSelection(typeSelection, text, selection, true);\n      } else {\n        commands[i] = new ReplaceCommand(selection, text);\n      }\n    }\n\n    return new EditOperationResult(0\n    /* Other */\n    , commands, {\n      shouldPushStackElementBefore: true,\n      shouldPushStackElementAfter: true\n    });\n  };\n\n  TypeOperations._distributePasteToCursors = function (config, selections, text, pasteOnNewLine, multicursorText) {\n    if (pasteOnNewLine) {\n      return null;\n    }\n\n    if (selections.length === 1) {\n      return null;\n    }\n\n    if (multicursorText && multicursorText.length === selections.length) {\n      return multicursorText;\n    }\n\n    if (config.multiCursorPaste === 'spread') {\n      // Try to spread the pasted text in case the line count matches the cursor count\n      // Remove trailing \\n if present\n      if (text.charCodeAt(text.length - 1) === 10\n      /* LineFeed */\n      ) {\n          text = text.substr(0, text.length - 1);\n        } // Remove trailing \\r if present\n\n\n      if (text.charCodeAt(text.length - 1) === 13\n      /* CarriageReturn */\n      ) {\n          text = text.substr(0, text.length - 1);\n        }\n\n      var lines = text.split(/\\r\\n|\\r|\\n/);\n\n      if (lines.length === selections.length) {\n        return lines;\n      }\n    }\n\n    return null;\n  };\n\n  TypeOperations.paste = function (config, model, selections, text, pasteOnNewLine, multicursorText) {\n    var distributedPaste = this._distributePasteToCursors(config, selections, text, pasteOnNewLine, multicursorText);\n\n    if (distributedPaste) {\n      selections = selections.sort(Range.compareRangesUsingStarts);\n      return this._distributedPaste(config, model, selections, distributedPaste);\n    } else {\n      return this._simplePaste(config, model, selections, text, pasteOnNewLine);\n    }\n  };\n\n  TypeOperations._goodIndentForLine = function (config, model, lineNumber) {\n    var action = null;\n    var indentation = '';\n    var expectedIndentAction = LanguageConfigurationRegistry.getInheritIndentForLine(config.autoIndent, model, lineNumber, false);\n\n    if (expectedIndentAction) {\n      action = expectedIndentAction.action;\n      indentation = expectedIndentAction.indentation;\n    } else if (lineNumber > 1) {\n      var lastLineNumber = void 0;\n\n      for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n        var lineText = model.getLineContent(lastLineNumber);\n        var nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineText);\n\n        if (nonWhitespaceIdx >= 0) {\n          break;\n        }\n      }\n\n      if (lastLineNumber < 1) {\n        // No previous line with content found\n        return null;\n      }\n\n      var maxColumn = model.getLineMaxColumn(lastLineNumber);\n      var expectedEnterAction = LanguageConfigurationRegistry.getEnterAction(config.autoIndent, model, new Range(lastLineNumber, maxColumn, lastLineNumber, maxColumn));\n\n      if (expectedEnterAction) {\n        indentation = expectedEnterAction.indentation + expectedEnterAction.appendText;\n      }\n    }\n\n    if (action) {\n      if (action === IndentAction.Indent) {\n        indentation = TypeOperations.shiftIndent(config, indentation);\n      }\n\n      if (action === IndentAction.Outdent) {\n        indentation = TypeOperations.unshiftIndent(config, indentation);\n      }\n\n      indentation = config.normalizeIndentation(indentation);\n    }\n\n    if (!indentation) {\n      return null;\n    }\n\n    return indentation;\n  };\n\n  TypeOperations._replaceJumpToNextIndent = function (config, model, selection, insertsAutoWhitespace) {\n    var typeText = '';\n    var position = selection.getStartPosition();\n\n    if (config.insertSpaces) {\n      var visibleColumnFromColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\n      var indentSize = config.indentSize;\n      var spacesCnt = indentSize - visibleColumnFromColumn % indentSize;\n\n      for (var i = 0; i < spacesCnt; i++) {\n        typeText += ' ';\n      }\n    } else {\n      typeText = '\\t';\n    }\n\n    return new ReplaceCommand(selection, typeText, insertsAutoWhitespace);\n  };\n\n  TypeOperations.tab = function (config, model, selections) {\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n\n      if (selection.isEmpty()) {\n        var lineText = model.getLineContent(selection.startLineNumber);\n\n        if (/^\\s*$/.test(lineText) && model.isCheapToTokenize(selection.startLineNumber)) {\n          var goodIndent = this._goodIndentForLine(config, model, selection.startLineNumber);\n\n          goodIndent = goodIndent || '\\t';\n          var possibleTypeText = config.normalizeIndentation(goodIndent);\n\n          if (!strings.startsWith(lineText, possibleTypeText)) {\n            commands[i] = new ReplaceCommand(new Range(selection.startLineNumber, 1, selection.startLineNumber, lineText.length + 1), possibleTypeText, true);\n            continue;\n          }\n        }\n\n        commands[i] = this._replaceJumpToNextIndent(config, model, selection, true);\n      } else {\n        if (selection.startLineNumber === selection.endLineNumber) {\n          var lineMaxColumn = model.getLineMaxColumn(selection.startLineNumber);\n\n          if (selection.startColumn !== 1 || selection.endColumn !== lineMaxColumn) {\n            // This is a single line selection that is not the entire line\n            commands[i] = this._replaceJumpToNextIndent(config, model, selection, false);\n            continue;\n          }\n        }\n\n        commands[i] = new ShiftCommand(selection, {\n          isUnshift: false,\n          tabSize: config.tabSize,\n          indentSize: config.indentSize,\n          insertSpaces: config.insertSpaces,\n          useTabStops: config.useTabStops,\n          autoIndent: config.autoIndent\n        });\n      }\n    }\n\n    return commands;\n  };\n\n  TypeOperations.replacePreviousChar = function (prevEditOperationType, config, model, selections, txt, replaceCharCnt) {\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n\n      if (!selection.isEmpty()) {\n        // looks like https://github.com/Microsoft/vscode/issues/2773\n        // where a cursor operation occurred before a canceled composition\n        // => ignore composition\n        commands[i] = null;\n        continue;\n      }\n\n      var pos = selection.getPosition();\n      var startColumn = Math.max(1, pos.column - replaceCharCnt);\n      var range = new Range(pos.lineNumber, startColumn, pos.lineNumber, pos.column);\n      commands[i] = new ReplaceCommand(range, txt);\n    }\n\n    return new EditOperationResult(1\n    /* Typing */\n    , commands, {\n      shouldPushStackElementBefore: prevEditOperationType !== 1\n      /* Typing */\n      ,\n      shouldPushStackElementAfter: false\n    });\n  };\n\n  TypeOperations._typeCommand = function (range, text, keepPosition) {\n    if (keepPosition) {\n      return new ReplaceCommandWithoutChangingPosition(range, text, true);\n    } else {\n      return new ReplaceCommand(range, text, true);\n    }\n  };\n\n  TypeOperations._enter = function (config, model, keepPosition, range) {\n    if (config.autoIndent === 0\n    /* None */\n    ) {\n        return TypeOperations._typeCommand(range, '\\n', keepPosition);\n      }\n\n    if (!model.isCheapToTokenize(range.getStartPosition().lineNumber) || config.autoIndent === 1\n    /* Keep */\n    ) {\n        var lineText_1 = model.getLineContent(range.startLineNumber);\n        var indentation_1 = strings.getLeadingWhitespace(lineText_1).substring(0, range.startColumn - 1);\n        return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation_1), keepPosition);\n      }\n\n    var r = LanguageConfigurationRegistry.getEnterAction(config.autoIndent, model, range);\n\n    if (r) {\n      if (r.indentAction === IndentAction.None) {\n        // Nothing special\n        return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\n      } else if (r.indentAction === IndentAction.Indent) {\n        // Indent once\n        return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\n      } else if (r.indentAction === IndentAction.IndentOutdent) {\n        // Ultra special\n        var normalIndent = config.normalizeIndentation(r.indentation);\n        var increasedIndent = config.normalizeIndentation(r.indentation + r.appendText);\n        var typeText = '\\n' + increasedIndent + '\\n' + normalIndent;\n\n        if (keepPosition) {\n          return new ReplaceCommandWithoutChangingPosition(range, typeText, true);\n        } else {\n          return new ReplaceCommandWithOffsetCursorState(range, typeText, -1, increasedIndent.length - normalIndent.length, true);\n        }\n      } else if (r.indentAction === IndentAction.Outdent) {\n        var actualIndentation = TypeOperations.unshiftIndent(config, r.indentation);\n        return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(actualIndentation + r.appendText), keepPosition);\n      }\n    }\n\n    var lineText = model.getLineContent(range.startLineNumber);\n    var indentation = strings.getLeadingWhitespace(lineText).substring(0, range.startColumn - 1);\n\n    if (config.autoIndent >= 4\n    /* Full */\n    ) {\n        var ir = LanguageConfigurationRegistry.getIndentForEnter(config.autoIndent, model, range, {\n          unshiftIndent: function (indent) {\n            return TypeOperations.unshiftIndent(config, indent);\n          },\n          shiftIndent: function (indent) {\n            return TypeOperations.shiftIndent(config, indent);\n          },\n          normalizeIndentation: function (indent) {\n            return config.normalizeIndentation(indent);\n          }\n        });\n\n        if (ir) {\n          var oldEndViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, range.getEndPosition());\n          var oldEndColumn = range.endColumn;\n          var beforeText = '\\n';\n\n          if (indentation !== config.normalizeIndentation(ir.beforeEnter)) {\n            beforeText = config.normalizeIndentation(ir.beforeEnter) + lineText.substring(indentation.length, range.startColumn - 1) + '\\n';\n            range = new Range(range.startLineNumber, 1, range.endLineNumber, range.endColumn);\n          }\n\n          var newLineContent = model.getLineContent(range.endLineNumber);\n          var firstNonWhitespace = strings.firstNonWhitespaceIndex(newLineContent);\n\n          if (firstNonWhitespace >= 0) {\n            range = range.setEndPosition(range.endLineNumber, Math.max(range.endColumn, firstNonWhitespace + 1));\n          } else {\n            range = range.setEndPosition(range.endLineNumber, model.getLineMaxColumn(range.endLineNumber));\n          }\n\n          if (keepPosition) {\n            return new ReplaceCommandWithoutChangingPosition(range, beforeText + config.normalizeIndentation(ir.afterEnter), true);\n          } else {\n            var offset = 0;\n\n            if (oldEndColumn <= firstNonWhitespace + 1) {\n              if (!config.insertSpaces) {\n                oldEndViewColumn = Math.ceil(oldEndViewColumn / config.indentSize);\n              }\n\n              offset = Math.min(oldEndViewColumn + 1 - config.normalizeIndentation(ir.afterEnter).length - 1, 0);\n            }\n\n            return new ReplaceCommandWithOffsetCursorState(range, beforeText + config.normalizeIndentation(ir.afterEnter), 0, offset, true);\n          }\n        }\n      }\n\n    return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation), keepPosition);\n  };\n\n  TypeOperations._isAutoIndentType = function (config, model, selections) {\n    if (config.autoIndent < 4\n    /* Full */\n    ) {\n        return false;\n      }\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      if (!model.isCheapToTokenize(selections[i].getEndPosition().lineNumber)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  TypeOperations._runAutoIndentType = function (config, model, range, ch) {\n    var currentIndentation = LanguageConfigurationRegistry.getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n    var actualIndentation = LanguageConfigurationRegistry.getIndentActionForType(config.autoIndent, model, range, ch, {\n      shiftIndent: function (indentation) {\n        return TypeOperations.shiftIndent(config, indentation);\n      },\n      unshiftIndent: function (indentation) {\n        return TypeOperations.unshiftIndent(config, indentation);\n      }\n    });\n\n    if (actualIndentation === null) {\n      return null;\n    }\n\n    if (actualIndentation !== config.normalizeIndentation(currentIndentation)) {\n      var firstNonWhitespace = model.getLineFirstNonWhitespaceColumn(range.startLineNumber);\n\n      if (firstNonWhitespace === 0) {\n        return TypeOperations._typeCommand(new Range(range.startLineNumber, 0, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) + ch, false);\n      } else {\n        return TypeOperations._typeCommand(new Range(range.startLineNumber, 0, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) + model.getLineContent(range.startLineNumber).substring(firstNonWhitespace - 1, range.startColumn - 1) + ch, false);\n      }\n    }\n\n    return null;\n  };\n\n  TypeOperations._isAutoClosingOvertype = function (config, model, selections, autoClosedCharacters, ch) {\n    if (config.autoClosingOvertype === 'never') {\n      return false;\n    }\n\n    if (!config.autoClosingPairsClose2.has(ch)) {\n      return false;\n    }\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n\n      if (!selection.isEmpty()) {\n        return false;\n      }\n\n      var position = selection.getPosition();\n      var lineText = model.getLineContent(position.lineNumber);\n      var afterCharacter = lineText.charAt(position.column - 1);\n\n      if (afterCharacter !== ch) {\n        return false;\n      } // Do not over-type quotes after a backslash\n\n\n      var chIsQuote = isQuote(ch);\n      var beforeCharacter = position.column > 2 ? lineText.charCodeAt(position.column - 2) : 0\n      /* Null */\n      ;\n\n      if (beforeCharacter === 92\n      /* Backslash */\n      && chIsQuote) {\n        return false;\n      } // Must over-type a closing character typed by the editor\n\n\n      if (config.autoClosingOvertype === 'auto') {\n        var found = false;\n\n        for (var j = 0, lenJ = autoClosedCharacters.length; j < lenJ; j++) {\n          var autoClosedCharacter = autoClosedCharacters[j];\n\n          if (position.lineNumber === autoClosedCharacter.startLineNumber && position.column === autoClosedCharacter.startColumn) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  TypeOperations._runAutoClosingOvertype = function (prevEditOperationType, config, model, selections, ch) {\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      var position = selection.getPosition();\n      var typeSelection = new Range(position.lineNumber, position.column, position.lineNumber, position.column + 1);\n      commands[i] = new ReplaceCommand(typeSelection, ch);\n    }\n\n    return new EditOperationResult(1\n    /* Typing */\n    , commands, {\n      shouldPushStackElementBefore: prevEditOperationType !== 1\n      /* Typing */\n      ,\n      shouldPushStackElementAfter: false\n    });\n  };\n\n  TypeOperations._autoClosingPairIsSymmetric = function (autoClosingPair) {\n    var open = autoClosingPair.open,\n        close = autoClosingPair.close;\n    return open.indexOf(close) >= 0 || close.indexOf(open) >= 0;\n  };\n\n  TypeOperations._isBeforeClosingBrace = function (config, autoClosingPair, characterAfter) {\n    var otherAutoClosingPairs = config.autoClosingPairsClose2.get(characterAfter);\n\n    if (!otherAutoClosingPairs) {\n      return false;\n    }\n\n    var thisBraceIsSymmetric = TypeOperations._autoClosingPairIsSymmetric(autoClosingPair);\n\n    for (var _i = 0, otherAutoClosingPairs_1 = otherAutoClosingPairs; _i < otherAutoClosingPairs_1.length; _i++) {\n      var otherAutoClosingPair = otherAutoClosingPairs_1[_i];\n\n      var otherBraceIsSymmetric = TypeOperations._autoClosingPairIsSymmetric(otherAutoClosingPair);\n\n      if (!thisBraceIsSymmetric && otherBraceIsSymmetric) {\n        continue;\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  TypeOperations._findAutoClosingPairOpen = function (config, model, positions, ch) {\n    var autoClosingPairCandidates = config.autoClosingPairsOpen2.get(ch);\n\n    if (!autoClosingPairCandidates) {\n      return null;\n    } // Determine which auto-closing pair it is\n\n\n    var autoClosingPair = null;\n\n    for (var _i = 0, autoClosingPairCandidates_1 = autoClosingPairCandidates; _i < autoClosingPairCandidates_1.length; _i++) {\n      var autoClosingPairCandidate = autoClosingPairCandidates_1[_i];\n\n      if (autoClosingPair === null || autoClosingPairCandidate.open.length > autoClosingPair.open.length) {\n        var candidateIsMatch = true;\n\n        for (var _a = 0, positions_1 = positions; _a < positions_1.length; _a++) {\n          var position = positions_1[_a];\n          var relevantText = model.getValueInRange(new Range(position.lineNumber, position.column - autoClosingPairCandidate.open.length + 1, position.lineNumber, position.column));\n\n          if (relevantText + ch !== autoClosingPairCandidate.open) {\n            candidateIsMatch = false;\n            break;\n          }\n        }\n\n        if (candidateIsMatch) {\n          autoClosingPair = autoClosingPairCandidate;\n        }\n      }\n    }\n\n    return autoClosingPair;\n  };\n\n  TypeOperations._isAutoClosingOpenCharType = function (config, model, selections, ch, insertOpenCharacter) {\n    var chIsQuote = isQuote(ch);\n    var autoCloseConfig = chIsQuote ? config.autoClosingQuotes : config.autoClosingBrackets;\n\n    if (autoCloseConfig === 'never') {\n      return null;\n    }\n\n    var autoClosingPair = this._findAutoClosingPairOpen(config, model, selections.map(function (s) {\n      return s.getPosition();\n    }), ch);\n\n    if (!autoClosingPair) {\n      return null;\n    }\n\n    var shouldAutoCloseBefore = chIsQuote ? config.shouldAutoCloseBefore.quote : config.shouldAutoCloseBefore.bracket;\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n\n      if (!selection.isEmpty()) {\n        return null;\n      }\n\n      var position = selection.getPosition();\n      var lineText = model.getLineContent(position.lineNumber); // Only consider auto closing the pair if a space follows or if another autoclosed pair follows\n\n      if (lineText.length > position.column - 1) {\n        var characterAfter = lineText.charAt(position.column - 1);\n\n        var isBeforeCloseBrace = TypeOperations._isBeforeClosingBrace(config, autoClosingPair, characterAfter);\n\n        if (!isBeforeCloseBrace && !shouldAutoCloseBefore(characterAfter)) {\n          return null;\n        }\n      }\n\n      if (!model.isCheapToTokenize(position.lineNumber)) {\n        // Do not force tokenization\n        return null;\n      } // Do not auto-close ' or \" after a word character\n\n\n      if (autoClosingPair.open.length === 1 && chIsQuote && autoCloseConfig !== 'always') {\n        var wordSeparators = getMapForWordSeparators(config.wordSeparators);\n\n        if (insertOpenCharacter && position.column > 1 && wordSeparators.get(lineText.charCodeAt(position.column - 2)) === 0\n        /* Regular */\n        ) {\n            return null;\n          }\n\n        if (!insertOpenCharacter && position.column > 2 && wordSeparators.get(lineText.charCodeAt(position.column - 3)) === 0\n        /* Regular */\n        ) {\n            return null;\n          }\n      }\n\n      model.forceTokenization(position.lineNumber);\n      var lineTokens = model.getLineTokens(position.lineNumber);\n      var shouldAutoClosePair = false;\n\n      try {\n        shouldAutoClosePair = LanguageConfigurationRegistry.shouldAutoClosePair(autoClosingPair, lineTokens, insertOpenCharacter ? position.column : position.column - 1);\n      } catch (e) {\n        onUnexpectedError(e);\n      }\n\n      if (!shouldAutoClosePair) {\n        return null;\n      }\n    }\n\n    return autoClosingPair;\n  };\n\n  TypeOperations._runAutoClosingOpenCharType = function (prevEditOperationType, config, model, selections, ch, insertOpenCharacter, autoClosingPair) {\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      commands[i] = new TypeWithAutoClosingCommand(selection, ch, insertOpenCharacter, autoClosingPair.close);\n    }\n\n    return new EditOperationResult(1\n    /* Typing */\n    , commands, {\n      shouldPushStackElementBefore: true,\n      shouldPushStackElementAfter: false\n    });\n  };\n\n  TypeOperations._shouldSurroundChar = function (config, ch) {\n    if (isQuote(ch)) {\n      return config.autoSurround === 'quotes' || config.autoSurround === 'languageDefined';\n    } else {\n      // Character is a bracket\n      return config.autoSurround === 'brackets' || config.autoSurround === 'languageDefined';\n    }\n  };\n\n  TypeOperations._isSurroundSelectionType = function (config, model, selections, ch) {\n    if (!TypeOperations._shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\n      return false;\n    }\n\n    var isTypingAQuoteCharacter = isQuote(ch);\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n\n      if (selection.isEmpty()) {\n        return false;\n      }\n\n      var selectionContainsOnlyWhitespace = true;\n\n      for (var lineNumber = selection.startLineNumber; lineNumber <= selection.endLineNumber; lineNumber++) {\n        var lineText = model.getLineContent(lineNumber);\n        var startIndex = lineNumber === selection.startLineNumber ? selection.startColumn - 1 : 0;\n        var endIndex = lineNumber === selection.endLineNumber ? selection.endColumn - 1 : lineText.length;\n        var selectedText = lineText.substring(startIndex, endIndex);\n\n        if (/[^ \\t]/.test(selectedText)) {\n          // this selected text contains something other than whitespace\n          selectionContainsOnlyWhitespace = false;\n          break;\n        }\n      }\n\n      if (selectionContainsOnlyWhitespace) {\n        return false;\n      }\n\n      if (isTypingAQuoteCharacter && selection.startLineNumber === selection.endLineNumber && selection.startColumn + 1 === selection.endColumn) {\n        var selectionText = model.getValueInRange(selection);\n\n        if (isQuote(selectionText)) {\n          // Typing a quote character on top of another quote character\n          // => disable surround selection type\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  TypeOperations._runSurroundSelectionType = function (prevEditOperationType, config, model, selections, ch) {\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      var closeCharacter = config.surroundingPairs[ch];\n      commands[i] = new SurroundSelectionCommand(selection, ch, closeCharacter);\n    }\n\n    return new EditOperationResult(0\n    /* Other */\n    , commands, {\n      shouldPushStackElementBefore: true,\n      shouldPushStackElementAfter: true\n    });\n  };\n\n  TypeOperations._isTypeInterceptorElectricChar = function (config, model, selections) {\n    if (selections.length === 1 && model.isCheapToTokenize(selections[0].getEndPosition().lineNumber)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  TypeOperations._typeInterceptorElectricChar = function (prevEditOperationType, config, model, selection, ch) {\n    if (!config.electricChars.hasOwnProperty(ch) || !selection.isEmpty()) {\n      return null;\n    }\n\n    var position = selection.getPosition();\n    model.forceTokenization(position.lineNumber);\n    var lineTokens = model.getLineTokens(position.lineNumber);\n    var electricAction;\n\n    try {\n      electricAction = LanguageConfigurationRegistry.onElectricCharacter(ch, lineTokens, position.column);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n\n    if (!electricAction) {\n      return null;\n    }\n\n    if (electricAction.matchOpenBracket) {\n      var endColumn = (lineTokens.getLineContent() + ch).lastIndexOf(electricAction.matchOpenBracket) + 1;\n      var match = model.findMatchingBracketUp(electricAction.matchOpenBracket, {\n        lineNumber: position.lineNumber,\n        column: endColumn\n      });\n\n      if (match) {\n        if (match.startLineNumber === position.lineNumber) {\n          // matched something on the same line => no change in indentation\n          return null;\n        }\n\n        var matchLine = model.getLineContent(match.startLineNumber);\n        var matchLineIndentation = strings.getLeadingWhitespace(matchLine);\n        var newIndentation = config.normalizeIndentation(matchLineIndentation);\n        var lineText = model.getLineContent(position.lineNumber);\n        var lineFirstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(position.lineNumber) || position.column;\n        var prefix = lineText.substring(lineFirstNonBlankColumn - 1, position.column - 1);\n        var typeText = newIndentation + prefix + ch;\n        var typeSelection = new Range(position.lineNumber, 1, position.lineNumber, position.column);\n        var command = new ReplaceCommand(typeSelection, typeText);\n        return new EditOperationResult(1\n        /* Typing */\n        , [command], {\n          shouldPushStackElementBefore: false,\n          shouldPushStackElementAfter: true\n        });\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * This is very similar with typing, but the character is already in the text buffer!\r\n   */\n\n\n  TypeOperations.compositionEndWithInterceptors = function (prevEditOperationType, config, model, selectionsWhenCompositionStarted, selections, autoClosedCharacters) {\n    if (!selectionsWhenCompositionStarted || Selection.selectionsArrEqual(selectionsWhenCompositionStarted, selections)) {\n      // no content was typed\n      return null;\n    }\n\n    var ch = null; // extract last typed character\n\n    for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n      var selection = selections_1[_i];\n\n      if (!selection.isEmpty()) {\n        return null;\n      }\n\n      var position = selection.getPosition();\n      var currentChar = model.getValueInRange(new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column));\n\n      if (ch === null) {\n        ch = currentChar;\n      } else if (ch !== currentChar) {\n        return null;\n      }\n    }\n\n    if (!ch) {\n      return null;\n    }\n\n    if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\n      // Unfortunately, the close character is at this point \"doubled\", so we need to delete it...\n      var commands = selections.map(function (s) {\n        return new ReplaceCommand(new Range(s.positionLineNumber, s.positionColumn, s.positionLineNumber, s.positionColumn + 1), '', false);\n      });\n      return new EditOperationResult(1\n      /* Typing */\n      , commands, {\n        shouldPushStackElementBefore: true,\n        shouldPushStackElementAfter: false\n      });\n    }\n\n    var autoClosingPairOpenCharType = this._isAutoClosingOpenCharType(config, model, selections, ch, false);\n\n    if (autoClosingPairOpenCharType) {\n      return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, false, autoClosingPairOpenCharType);\n    }\n\n    return null;\n  };\n\n  TypeOperations.typeWithInterceptors = function (prevEditOperationType, config, model, selections, autoClosedCharacters, ch) {\n    if (ch === '\\n') {\n      var commands_1 = [];\n\n      for (var i = 0, len = selections.length; i < len; i++) {\n        commands_1[i] = TypeOperations._enter(config, model, false, selections[i]);\n      }\n\n      return new EditOperationResult(1\n      /* Typing */\n      , commands_1, {\n        shouldPushStackElementBefore: true,\n        shouldPushStackElementAfter: false\n      });\n    }\n\n    if (this._isAutoIndentType(config, model, selections)) {\n      var commands_2 = [];\n      var autoIndentFails = false;\n\n      for (var i = 0, len = selections.length; i < len; i++) {\n        commands_2[i] = this._runAutoIndentType(config, model, selections[i], ch);\n\n        if (!commands_2[i]) {\n          autoIndentFails = true;\n          break;\n        }\n      }\n\n      if (!autoIndentFails) {\n        return new EditOperationResult(1\n        /* Typing */\n        , commands_2, {\n          shouldPushStackElementBefore: true,\n          shouldPushStackElementAfter: false\n        });\n      }\n    }\n\n    if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\n      return this._runAutoClosingOvertype(prevEditOperationType, config, model, selections, ch);\n    }\n\n    var autoClosingPairOpenCharType = this._isAutoClosingOpenCharType(config, model, selections, ch, true);\n\n    if (autoClosingPairOpenCharType) {\n      return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, true, autoClosingPairOpenCharType);\n    }\n\n    if (this._isSurroundSelectionType(config, model, selections, ch)) {\n      return this._runSurroundSelectionType(prevEditOperationType, config, model, selections, ch);\n    } // Electric characters make sense only when dealing with a single cursor,\n    // as multiple cursors typing brackets for example would interfer with bracket matching\n\n\n    if (this._isTypeInterceptorElectricChar(config, model, selections)) {\n      var r = this._typeInterceptorElectricChar(prevEditOperationType, config, model, selections[0], ch);\n\n      if (r) {\n        return r;\n      }\n    } // A simple character type\n\n\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new ReplaceCommand(selections[i], ch);\n    }\n\n    var shouldPushStackElementBefore = prevEditOperationType !== 1\n    /* Typing */\n    ;\n\n    if (ch === ' ') {\n      shouldPushStackElementBefore = true;\n    }\n\n    return new EditOperationResult(1\n    /* Typing */\n    , commands, {\n      shouldPushStackElementBefore: shouldPushStackElementBefore,\n      shouldPushStackElementAfter: false\n    });\n  };\n\n  TypeOperations.typeWithoutInterceptors = function (prevEditOperationType, config, model, selections, str) {\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new ReplaceCommand(selections[i], str);\n    }\n\n    return new EditOperationResult(1\n    /* Typing */\n    , commands, {\n      shouldPushStackElementBefore: prevEditOperationType !== 1\n      /* Typing */\n      ,\n      shouldPushStackElementAfter: false\n    });\n  };\n\n  TypeOperations.lineInsertBefore = function (config, model, selections) {\n    if (model === null || selections === null) {\n      return [];\n    }\n\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var lineNumber = selections[i].positionLineNumber;\n\n      if (lineNumber === 1) {\n        commands[i] = new ReplaceCommandWithoutChangingPosition(new Range(1, 1, 1, 1), '\\n');\n      } else {\n        lineNumber--;\n        var column = model.getLineMaxColumn(lineNumber);\n        commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\n      }\n    }\n\n    return commands;\n  };\n\n  TypeOperations.lineInsertAfter = function (config, model, selections) {\n    if (model === null || selections === null) {\n      return [];\n    }\n\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var lineNumber = selections[i].positionLineNumber;\n      var column = model.getLineMaxColumn(lineNumber);\n      commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\n    }\n\n    return commands;\n  };\n\n  TypeOperations.lineBreakInsert = function (config, model, selections) {\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      commands[i] = this._enter(config, model, true, selections[i]);\n    }\n\n    return commands;\n  };\n\n  return TypeOperations;\n}();\n\nexport { TypeOperations };\n\nvar TypeWithAutoClosingCommand =\n/** @class */\nfunction (_super) {\n  __extends(TypeWithAutoClosingCommand, _super);\n\n  function TypeWithAutoClosingCommand(selection, openCharacter, insertOpenCharacter, closeCharacter) {\n    var _this = _super.call(this, selection, (insertOpenCharacter ? openCharacter : '') + closeCharacter, 0, -closeCharacter.length) || this;\n\n    _this._openCharacter = openCharacter;\n    _this._closeCharacter = closeCharacter;\n    _this.closeCharacterRange = null;\n    _this.enclosingRange = null;\n    return _this;\n  }\n\n  TypeWithAutoClosingCommand.prototype.computeCursorState = function (model, helper) {\n    var inverseEditOperations = helper.getInverseEditOperations();\n    var range = inverseEditOperations[0].range;\n    this.closeCharacterRange = new Range(range.startLineNumber, range.endColumn - this._closeCharacter.length, range.endLineNumber, range.endColumn);\n    this.enclosingRange = new Range(range.startLineNumber, range.endColumn - this._openCharacter.length - this._closeCharacter.length, range.endLineNumber, range.endColumn);\n    return _super.prototype.computeCursorState.call(this, model, helper);\n  };\n\n  return TypeWithAutoClosingCommand;\n}(ReplaceCommandWithOffsetCursorState);\n\nexport { TypeWithAutoClosingCommand };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorTypeOperations.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","onUnexpectedError","strings","ReplaceCommand","ReplaceCommandWithOffsetCursorState","ReplaceCommandWithoutChangingPosition","ReplaceCommandThatPreservesSelection","ShiftCommand","SurroundSelectionCommand","CursorColumns","EditOperationResult","isQuote","getMapForWordSeparators","Range","Selection","IndentAction","LanguageConfigurationRegistry","TypeOperations","indent","config","model","selections","commands","i","len","length","isUnshift","tabSize","indentSize","insertSpaces","useTabStops","autoIndent","outdent","shiftIndent","indentation","count","unshiftIndent","_distributedPaste","text","shouldPushStackElementBefore","shouldPushStackElementAfter","_simplePaste","pasteOnNewLine","selection","position","getPosition","isEmpty","indexOf","typeSelection","lineNumber","_distributePasteToCursors","multicursorText","multiCursorPaste","charCodeAt","substr","lines","split","paste","distributedPaste","sort","compareRangesUsingStarts","_goodIndentForLine","action","expectedIndentAction","getInheritIndentForLine","lastLineNumber","lineText","getLineContent","nonWhitespaceIdx","lastNonWhitespaceIndex","maxColumn","getLineMaxColumn","expectedEnterAction","getEnterAction","appendText","Indent","Outdent","normalizeIndentation","_replaceJumpToNextIndent","insertsAutoWhitespace","typeText","getStartPosition","visibleColumnFromColumn","visibleColumnFromColumn2","spacesCnt","tab","startLineNumber","test","isCheapToTokenize","goodIndent","possibleTypeText","startsWith","endLineNumber","lineMaxColumn","startColumn","endColumn","replacePreviousChar","prevEditOperationType","txt","replaceCharCnt","pos","Math","max","column","range","_typeCommand","keepPosition","_enter","lineText_1","indentation_1","getLeadingWhitespace","substring","r","indentAction","None","IndentOutdent","normalIndent","increasedIndent","actualIndentation","ir","getIndentForEnter","oldEndViewColumn","getEndPosition","oldEndColumn","beforeText","beforeEnter","newLineContent","firstNonWhitespace","firstNonWhitespaceIndex","setEndPosition","afterEnter","offset","ceil","min","_isAutoIndentType","_runAutoIndentType","ch","currentIndentation","getIndentationAtPosition","getIndentActionForType","getLineFirstNonWhitespaceColumn","_isAutoClosingOvertype","autoClosedCharacters","autoClosingOvertype","autoClosingPairsClose2","has","afterCharacter","charAt","chIsQuote","beforeCharacter","found","j","lenJ","autoClosedCharacter","_runAutoClosingOvertype","_autoClosingPairIsSymmetric","autoClosingPair","open","close","_isBeforeClosingBrace","characterAfter","otherAutoClosingPairs","get","thisBraceIsSymmetric","_i","otherAutoClosingPairs_1","otherAutoClosingPair","otherBraceIsSymmetric","_findAutoClosingPairOpen","positions","autoClosingPairCandidates","autoClosingPairsOpen2","autoClosingPairCandidates_1","autoClosingPairCandidate","candidateIsMatch","_a","positions_1","relevantText","getValueInRange","_isAutoClosingOpenCharType","insertOpenCharacter","autoCloseConfig","autoClosingQuotes","autoClosingBrackets","map","s","shouldAutoCloseBefore","quote","bracket","isBeforeCloseBrace","wordSeparators","forceTokenization","lineTokens","getLineTokens","shouldAutoClosePair","e","_runAutoClosingOpenCharType","TypeWithAutoClosingCommand","_shouldSurroundChar","autoSurround","_isSurroundSelectionType","surroundingPairs","isTypingAQuoteCharacter","selectionContainsOnlyWhitespace","startIndex","endIndex","selectedText","selectionText","_runSurroundSelectionType","closeCharacter","_isTypeInterceptorElectricChar","_typeInterceptorElectricChar","electricChars","electricAction","onElectricCharacter","matchOpenBracket","lastIndexOf","match","findMatchingBracketUp","matchLine","matchLineIndentation","newIndentation","lineFirstNonBlankColumn","prefix","command","compositionEndWithInterceptors","selectionsWhenCompositionStarted","selectionsArrEqual","selections_1","currentChar","positionLineNumber","positionColumn","autoClosingPairOpenCharType","typeWithInterceptors","commands_1","commands_2","autoIndentFails","typeWithoutInterceptors","str","lineInsertBefore","lineInsertAfter","lineBreakInsert","_super","openCharacter","_this","call","_openCharacter","_closeCharacter","closeCharacterRange","enclosingRange","computeCursorState","helper","inverseEditOperations","getInverseEditOperations"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { ReplaceCommand, ReplaceCommandWithOffsetCursorState, ReplaceCommandWithoutChangingPosition, ReplaceCommandThatPreservesSelection } from '../commands/replaceCommand.js';\r\nimport { ShiftCommand } from '../commands/shiftCommand.js';\r\nimport { SurroundSelectionCommand } from '../commands/surroundSelectionCommand.js';\r\nimport { CursorColumns, EditOperationResult, isQuote } from './cursorCommon.js';\r\nimport { getMapForWordSeparators } from './wordCharacterClassifier.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport { IndentAction } from '../modes/languageConfiguration.js';\r\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\r\nvar TypeOperations = /** @class */ (function () {\r\n    function TypeOperations() {\r\n    }\r\n    TypeOperations.indent = function (config, model, selections) {\r\n        if (model === null || selections === null) {\r\n            return [];\r\n        }\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ShiftCommand(selections[i], {\r\n                isUnshift: false,\r\n                tabSize: config.tabSize,\r\n                indentSize: config.indentSize,\r\n                insertSpaces: config.insertSpaces,\r\n                useTabStops: config.useTabStops,\r\n                autoIndent: config.autoIndent\r\n            });\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.outdent = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ShiftCommand(selections[i], {\r\n                isUnshift: true,\r\n                tabSize: config.tabSize,\r\n                indentSize: config.indentSize,\r\n                insertSpaces: config.insertSpaces,\r\n                useTabStops: config.useTabStops,\r\n                autoIndent: config.autoIndent\r\n            });\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.shiftIndent = function (config, indentation, count) {\r\n        count = count || 1;\r\n        return ShiftCommand.shiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\r\n    };\r\n    TypeOperations.unshiftIndent = function (config, indentation, count) {\r\n        count = count || 1;\r\n        return ShiftCommand.unshiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\r\n    };\r\n    TypeOperations._distributedPaste = function (config, model, selections, text) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ReplaceCommand(selections[i], text[i]);\r\n        }\r\n        return new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: true\r\n        });\r\n    };\r\n    TypeOperations._simplePaste = function (config, model, selections, text, pasteOnNewLine) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var position = selection.getPosition();\r\n            if (pasteOnNewLine && !selection.isEmpty()) {\r\n                pasteOnNewLine = false;\r\n            }\r\n            if (pasteOnNewLine && text.indexOf('\\n') !== text.length - 1) {\r\n                pasteOnNewLine = false;\r\n            }\r\n            if (pasteOnNewLine) {\r\n                // Paste entire line at the beginning of line\r\n                var typeSelection = new Range(position.lineNumber, 1, position.lineNumber, 1);\r\n                commands[i] = new ReplaceCommandThatPreservesSelection(typeSelection, text, selection, true);\r\n            }\r\n            else {\r\n                commands[i] = new ReplaceCommand(selection, text);\r\n            }\r\n        }\r\n        return new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: true\r\n        });\r\n    };\r\n    TypeOperations._distributePasteToCursors = function (config, selections, text, pasteOnNewLine, multicursorText) {\r\n        if (pasteOnNewLine) {\r\n            return null;\r\n        }\r\n        if (selections.length === 1) {\r\n            return null;\r\n        }\r\n        if (multicursorText && multicursorText.length === selections.length) {\r\n            return multicursorText;\r\n        }\r\n        if (config.multiCursorPaste === 'spread') {\r\n            // Try to spread the pasted text in case the line count matches the cursor count\r\n            // Remove trailing \\n if present\r\n            if (text.charCodeAt(text.length - 1) === 10 /* LineFeed */) {\r\n                text = text.substr(0, text.length - 1);\r\n            }\r\n            // Remove trailing \\r if present\r\n            if (text.charCodeAt(text.length - 1) === 13 /* CarriageReturn */) {\r\n                text = text.substr(0, text.length - 1);\r\n            }\r\n            var lines = text.split(/\\r\\n|\\r|\\n/);\r\n            if (lines.length === selections.length) {\r\n                return lines;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TypeOperations.paste = function (config, model, selections, text, pasteOnNewLine, multicursorText) {\r\n        var distributedPaste = this._distributePasteToCursors(config, selections, text, pasteOnNewLine, multicursorText);\r\n        if (distributedPaste) {\r\n            selections = selections.sort(Range.compareRangesUsingStarts);\r\n            return this._distributedPaste(config, model, selections, distributedPaste);\r\n        }\r\n        else {\r\n            return this._simplePaste(config, model, selections, text, pasteOnNewLine);\r\n        }\r\n    };\r\n    TypeOperations._goodIndentForLine = function (config, model, lineNumber) {\r\n        var action = null;\r\n        var indentation = '';\r\n        var expectedIndentAction = LanguageConfigurationRegistry.getInheritIndentForLine(config.autoIndent, model, lineNumber, false);\r\n        if (expectedIndentAction) {\r\n            action = expectedIndentAction.action;\r\n            indentation = expectedIndentAction.indentation;\r\n        }\r\n        else if (lineNumber > 1) {\r\n            var lastLineNumber = void 0;\r\n            for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\r\n                var lineText = model.getLineContent(lastLineNumber);\r\n                var nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineText);\r\n                if (nonWhitespaceIdx >= 0) {\r\n                    break;\r\n                }\r\n            }\r\n            if (lastLineNumber < 1) {\r\n                // No previous line with content found\r\n                return null;\r\n            }\r\n            var maxColumn = model.getLineMaxColumn(lastLineNumber);\r\n            var expectedEnterAction = LanguageConfigurationRegistry.getEnterAction(config.autoIndent, model, new Range(lastLineNumber, maxColumn, lastLineNumber, maxColumn));\r\n            if (expectedEnterAction) {\r\n                indentation = expectedEnterAction.indentation + expectedEnterAction.appendText;\r\n            }\r\n        }\r\n        if (action) {\r\n            if (action === IndentAction.Indent) {\r\n                indentation = TypeOperations.shiftIndent(config, indentation);\r\n            }\r\n            if (action === IndentAction.Outdent) {\r\n                indentation = TypeOperations.unshiftIndent(config, indentation);\r\n            }\r\n            indentation = config.normalizeIndentation(indentation);\r\n        }\r\n        if (!indentation) {\r\n            return null;\r\n        }\r\n        return indentation;\r\n    };\r\n    TypeOperations._replaceJumpToNextIndent = function (config, model, selection, insertsAutoWhitespace) {\r\n        var typeText = '';\r\n        var position = selection.getStartPosition();\r\n        if (config.insertSpaces) {\r\n            var visibleColumnFromColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\r\n            var indentSize = config.indentSize;\r\n            var spacesCnt = indentSize - (visibleColumnFromColumn % indentSize);\r\n            for (var i = 0; i < spacesCnt; i++) {\r\n                typeText += ' ';\r\n            }\r\n        }\r\n        else {\r\n            typeText = '\\t';\r\n        }\r\n        return new ReplaceCommand(selection, typeText, insertsAutoWhitespace);\r\n    };\r\n    TypeOperations.tab = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (selection.isEmpty()) {\r\n                var lineText = model.getLineContent(selection.startLineNumber);\r\n                if (/^\\s*$/.test(lineText) && model.isCheapToTokenize(selection.startLineNumber)) {\r\n                    var goodIndent = this._goodIndentForLine(config, model, selection.startLineNumber);\r\n                    goodIndent = goodIndent || '\\t';\r\n                    var possibleTypeText = config.normalizeIndentation(goodIndent);\r\n                    if (!strings.startsWith(lineText, possibleTypeText)) {\r\n                        commands[i] = new ReplaceCommand(new Range(selection.startLineNumber, 1, selection.startLineNumber, lineText.length + 1), possibleTypeText, true);\r\n                        continue;\r\n                    }\r\n                }\r\n                commands[i] = this._replaceJumpToNextIndent(config, model, selection, true);\r\n            }\r\n            else {\r\n                if (selection.startLineNumber === selection.endLineNumber) {\r\n                    var lineMaxColumn = model.getLineMaxColumn(selection.startLineNumber);\r\n                    if (selection.startColumn !== 1 || selection.endColumn !== lineMaxColumn) {\r\n                        // This is a single line selection that is not the entire line\r\n                        commands[i] = this._replaceJumpToNextIndent(config, model, selection, false);\r\n                        continue;\r\n                    }\r\n                }\r\n                commands[i] = new ShiftCommand(selection, {\r\n                    isUnshift: false,\r\n                    tabSize: config.tabSize,\r\n                    indentSize: config.indentSize,\r\n                    insertSpaces: config.insertSpaces,\r\n                    useTabStops: config.useTabStops,\r\n                    autoIndent: config.autoIndent\r\n                });\r\n            }\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.replacePreviousChar = function (prevEditOperationType, config, model, selections, txt, replaceCharCnt) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (!selection.isEmpty()) {\r\n                // looks like https://github.com/Microsoft/vscode/issues/2773\r\n                // where a cursor operation occurred before a canceled composition\r\n                // => ignore composition\r\n                commands[i] = null;\r\n                continue;\r\n            }\r\n            var pos = selection.getPosition();\r\n            var startColumn = Math.max(1, pos.column - replaceCharCnt);\r\n            var range = new Range(pos.lineNumber, startColumn, pos.lineNumber, pos.column);\r\n            commands[i] = new ReplaceCommand(range, txt);\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: (prevEditOperationType !== 1 /* Typing */),\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations._typeCommand = function (range, text, keepPosition) {\r\n        if (keepPosition) {\r\n            return new ReplaceCommandWithoutChangingPosition(range, text, true);\r\n        }\r\n        else {\r\n            return new ReplaceCommand(range, text, true);\r\n        }\r\n    };\r\n    TypeOperations._enter = function (config, model, keepPosition, range) {\r\n        if (config.autoIndent === 0 /* None */) {\r\n            return TypeOperations._typeCommand(range, '\\n', keepPosition);\r\n        }\r\n        if (!model.isCheapToTokenize(range.getStartPosition().lineNumber) || config.autoIndent === 1 /* Keep */) {\r\n            var lineText_1 = model.getLineContent(range.startLineNumber);\r\n            var indentation_1 = strings.getLeadingWhitespace(lineText_1).substring(0, range.startColumn - 1);\r\n            return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation_1), keepPosition);\r\n        }\r\n        var r = LanguageConfigurationRegistry.getEnterAction(config.autoIndent, model, range);\r\n        if (r) {\r\n            if (r.indentAction === IndentAction.None) {\r\n                // Nothing special\r\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\r\n            }\r\n            else if (r.indentAction === IndentAction.Indent) {\r\n                // Indent once\r\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\r\n            }\r\n            else if (r.indentAction === IndentAction.IndentOutdent) {\r\n                // Ultra special\r\n                var normalIndent = config.normalizeIndentation(r.indentation);\r\n                var increasedIndent = config.normalizeIndentation(r.indentation + r.appendText);\r\n                var typeText = '\\n' + increasedIndent + '\\n' + normalIndent;\r\n                if (keepPosition) {\r\n                    return new ReplaceCommandWithoutChangingPosition(range, typeText, true);\r\n                }\r\n                else {\r\n                    return new ReplaceCommandWithOffsetCursorState(range, typeText, -1, increasedIndent.length - normalIndent.length, true);\r\n                }\r\n            }\r\n            else if (r.indentAction === IndentAction.Outdent) {\r\n                var actualIndentation = TypeOperations.unshiftIndent(config, r.indentation);\r\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(actualIndentation + r.appendText), keepPosition);\r\n            }\r\n        }\r\n        var lineText = model.getLineContent(range.startLineNumber);\r\n        var indentation = strings.getLeadingWhitespace(lineText).substring(0, range.startColumn - 1);\r\n        if (config.autoIndent >= 4 /* Full */) {\r\n            var ir = LanguageConfigurationRegistry.getIndentForEnter(config.autoIndent, model, range, {\r\n                unshiftIndent: function (indent) {\r\n                    return TypeOperations.unshiftIndent(config, indent);\r\n                },\r\n                shiftIndent: function (indent) {\r\n                    return TypeOperations.shiftIndent(config, indent);\r\n                },\r\n                normalizeIndentation: function (indent) {\r\n                    return config.normalizeIndentation(indent);\r\n                }\r\n            });\r\n            if (ir) {\r\n                var oldEndViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, range.getEndPosition());\r\n                var oldEndColumn = range.endColumn;\r\n                var beforeText = '\\n';\r\n                if (indentation !== config.normalizeIndentation(ir.beforeEnter)) {\r\n                    beforeText = config.normalizeIndentation(ir.beforeEnter) + lineText.substring(indentation.length, range.startColumn - 1) + '\\n';\r\n                    range = new Range(range.startLineNumber, 1, range.endLineNumber, range.endColumn);\r\n                }\r\n                var newLineContent = model.getLineContent(range.endLineNumber);\r\n                var firstNonWhitespace = strings.firstNonWhitespaceIndex(newLineContent);\r\n                if (firstNonWhitespace >= 0) {\r\n                    range = range.setEndPosition(range.endLineNumber, Math.max(range.endColumn, firstNonWhitespace + 1));\r\n                }\r\n                else {\r\n                    range = range.setEndPosition(range.endLineNumber, model.getLineMaxColumn(range.endLineNumber));\r\n                }\r\n                if (keepPosition) {\r\n                    return new ReplaceCommandWithoutChangingPosition(range, beforeText + config.normalizeIndentation(ir.afterEnter), true);\r\n                }\r\n                else {\r\n                    var offset = 0;\r\n                    if (oldEndColumn <= firstNonWhitespace + 1) {\r\n                        if (!config.insertSpaces) {\r\n                            oldEndViewColumn = Math.ceil(oldEndViewColumn / config.indentSize);\r\n                        }\r\n                        offset = Math.min(oldEndViewColumn + 1 - config.normalizeIndentation(ir.afterEnter).length - 1, 0);\r\n                    }\r\n                    return new ReplaceCommandWithOffsetCursorState(range, beforeText + config.normalizeIndentation(ir.afterEnter), 0, offset, true);\r\n                }\r\n            }\r\n        }\r\n        return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation), keepPosition);\r\n    };\r\n    TypeOperations._isAutoIndentType = function (config, model, selections) {\r\n        if (config.autoIndent < 4 /* Full */) {\r\n            return false;\r\n        }\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            if (!model.isCheapToTokenize(selections[i].getEndPosition().lineNumber)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    TypeOperations._runAutoIndentType = function (config, model, range, ch) {\r\n        var currentIndentation = LanguageConfigurationRegistry.getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\r\n        var actualIndentation = LanguageConfigurationRegistry.getIndentActionForType(config.autoIndent, model, range, ch, {\r\n            shiftIndent: function (indentation) {\r\n                return TypeOperations.shiftIndent(config, indentation);\r\n            },\r\n            unshiftIndent: function (indentation) {\r\n                return TypeOperations.unshiftIndent(config, indentation);\r\n            },\r\n        });\r\n        if (actualIndentation === null) {\r\n            return null;\r\n        }\r\n        if (actualIndentation !== config.normalizeIndentation(currentIndentation)) {\r\n            var firstNonWhitespace = model.getLineFirstNonWhitespaceColumn(range.startLineNumber);\r\n            if (firstNonWhitespace === 0) {\r\n                return TypeOperations._typeCommand(new Range(range.startLineNumber, 0, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) + ch, false);\r\n            }\r\n            else {\r\n                return TypeOperations._typeCommand(new Range(range.startLineNumber, 0, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) +\r\n                    model.getLineContent(range.startLineNumber).substring(firstNonWhitespace - 1, range.startColumn - 1) + ch, false);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TypeOperations._isAutoClosingOvertype = function (config, model, selections, autoClosedCharacters, ch) {\r\n        if (config.autoClosingOvertype === 'never') {\r\n            return false;\r\n        }\r\n        if (!config.autoClosingPairsClose2.has(ch)) {\r\n            return false;\r\n        }\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (!selection.isEmpty()) {\r\n                return false;\r\n            }\r\n            var position = selection.getPosition();\r\n            var lineText = model.getLineContent(position.lineNumber);\r\n            var afterCharacter = lineText.charAt(position.column - 1);\r\n            if (afterCharacter !== ch) {\r\n                return false;\r\n            }\r\n            // Do not over-type quotes after a backslash\r\n            var chIsQuote = isQuote(ch);\r\n            var beforeCharacter = position.column > 2 ? lineText.charCodeAt(position.column - 2) : 0 /* Null */;\r\n            if (beforeCharacter === 92 /* Backslash */ && chIsQuote) {\r\n                return false;\r\n            }\r\n            // Must over-type a closing character typed by the editor\r\n            if (config.autoClosingOvertype === 'auto') {\r\n                var found = false;\r\n                for (var j = 0, lenJ = autoClosedCharacters.length; j < lenJ; j++) {\r\n                    var autoClosedCharacter = autoClosedCharacters[j];\r\n                    if (position.lineNumber === autoClosedCharacter.startLineNumber && position.column === autoClosedCharacter.startColumn) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    TypeOperations._runAutoClosingOvertype = function (prevEditOperationType, config, model, selections, ch) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var position = selection.getPosition();\r\n            var typeSelection = new Range(position.lineNumber, position.column, position.lineNumber, position.column + 1);\r\n            commands[i] = new ReplaceCommand(typeSelection, ch);\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: (prevEditOperationType !== 1 /* Typing */),\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations._autoClosingPairIsSymmetric = function (autoClosingPair) {\r\n        var open = autoClosingPair.open, close = autoClosingPair.close;\r\n        return (open.indexOf(close) >= 0 || close.indexOf(open) >= 0);\r\n    };\r\n    TypeOperations._isBeforeClosingBrace = function (config, autoClosingPair, characterAfter) {\r\n        var otherAutoClosingPairs = config.autoClosingPairsClose2.get(characterAfter);\r\n        if (!otherAutoClosingPairs) {\r\n            return false;\r\n        }\r\n        var thisBraceIsSymmetric = TypeOperations._autoClosingPairIsSymmetric(autoClosingPair);\r\n        for (var _i = 0, otherAutoClosingPairs_1 = otherAutoClosingPairs; _i < otherAutoClosingPairs_1.length; _i++) {\r\n            var otherAutoClosingPair = otherAutoClosingPairs_1[_i];\r\n            var otherBraceIsSymmetric = TypeOperations._autoClosingPairIsSymmetric(otherAutoClosingPair);\r\n            if (!thisBraceIsSymmetric && otherBraceIsSymmetric) {\r\n                continue;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    TypeOperations._findAutoClosingPairOpen = function (config, model, positions, ch) {\r\n        var autoClosingPairCandidates = config.autoClosingPairsOpen2.get(ch);\r\n        if (!autoClosingPairCandidates) {\r\n            return null;\r\n        }\r\n        // Determine which auto-closing pair it is\r\n        var autoClosingPair = null;\r\n        for (var _i = 0, autoClosingPairCandidates_1 = autoClosingPairCandidates; _i < autoClosingPairCandidates_1.length; _i++) {\r\n            var autoClosingPairCandidate = autoClosingPairCandidates_1[_i];\r\n            if (autoClosingPair === null || autoClosingPairCandidate.open.length > autoClosingPair.open.length) {\r\n                var candidateIsMatch = true;\r\n                for (var _a = 0, positions_1 = positions; _a < positions_1.length; _a++) {\r\n                    var position = positions_1[_a];\r\n                    var relevantText = model.getValueInRange(new Range(position.lineNumber, position.column - autoClosingPairCandidate.open.length + 1, position.lineNumber, position.column));\r\n                    if (relevantText + ch !== autoClosingPairCandidate.open) {\r\n                        candidateIsMatch = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (candidateIsMatch) {\r\n                    autoClosingPair = autoClosingPairCandidate;\r\n                }\r\n            }\r\n        }\r\n        return autoClosingPair;\r\n    };\r\n    TypeOperations._isAutoClosingOpenCharType = function (config, model, selections, ch, insertOpenCharacter) {\r\n        var chIsQuote = isQuote(ch);\r\n        var autoCloseConfig = chIsQuote ? config.autoClosingQuotes : config.autoClosingBrackets;\r\n        if (autoCloseConfig === 'never') {\r\n            return null;\r\n        }\r\n        var autoClosingPair = this._findAutoClosingPairOpen(config, model, selections.map(function (s) { return s.getPosition(); }), ch);\r\n        if (!autoClosingPair) {\r\n            return null;\r\n        }\r\n        var shouldAutoCloseBefore = chIsQuote ? config.shouldAutoCloseBefore.quote : config.shouldAutoCloseBefore.bracket;\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (!selection.isEmpty()) {\r\n                return null;\r\n            }\r\n            var position = selection.getPosition();\r\n            var lineText = model.getLineContent(position.lineNumber);\r\n            // Only consider auto closing the pair if a space follows or if another autoclosed pair follows\r\n            if (lineText.length > position.column - 1) {\r\n                var characterAfter = lineText.charAt(position.column - 1);\r\n                var isBeforeCloseBrace = TypeOperations._isBeforeClosingBrace(config, autoClosingPair, characterAfter);\r\n                if (!isBeforeCloseBrace && !shouldAutoCloseBefore(characterAfter)) {\r\n                    return null;\r\n                }\r\n            }\r\n            if (!model.isCheapToTokenize(position.lineNumber)) {\r\n                // Do not force tokenization\r\n                return null;\r\n            }\r\n            // Do not auto-close ' or \" after a word character\r\n            if (autoClosingPair.open.length === 1 && chIsQuote && autoCloseConfig !== 'always') {\r\n                var wordSeparators = getMapForWordSeparators(config.wordSeparators);\r\n                if (insertOpenCharacter && position.column > 1 && wordSeparators.get(lineText.charCodeAt(position.column - 2)) === 0 /* Regular */) {\r\n                    return null;\r\n                }\r\n                if (!insertOpenCharacter && position.column > 2 && wordSeparators.get(lineText.charCodeAt(position.column - 3)) === 0 /* Regular */) {\r\n                    return null;\r\n                }\r\n            }\r\n            model.forceTokenization(position.lineNumber);\r\n            var lineTokens = model.getLineTokens(position.lineNumber);\r\n            var shouldAutoClosePair = false;\r\n            try {\r\n                shouldAutoClosePair = LanguageConfigurationRegistry.shouldAutoClosePair(autoClosingPair, lineTokens, insertOpenCharacter ? position.column : position.column - 1);\r\n            }\r\n            catch (e) {\r\n                onUnexpectedError(e);\r\n            }\r\n            if (!shouldAutoClosePair) {\r\n                return null;\r\n            }\r\n        }\r\n        return autoClosingPair;\r\n    };\r\n    TypeOperations._runAutoClosingOpenCharType = function (prevEditOperationType, config, model, selections, ch, insertOpenCharacter, autoClosingPair) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            commands[i] = new TypeWithAutoClosingCommand(selection, ch, insertOpenCharacter, autoClosingPair.close);\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations._shouldSurroundChar = function (config, ch) {\r\n        if (isQuote(ch)) {\r\n            return (config.autoSurround === 'quotes' || config.autoSurround === 'languageDefined');\r\n        }\r\n        else {\r\n            // Character is a bracket\r\n            return (config.autoSurround === 'brackets' || config.autoSurround === 'languageDefined');\r\n        }\r\n    };\r\n    TypeOperations._isSurroundSelectionType = function (config, model, selections, ch) {\r\n        if (!TypeOperations._shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\r\n            return false;\r\n        }\r\n        var isTypingAQuoteCharacter = isQuote(ch);\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (selection.isEmpty()) {\r\n                return false;\r\n            }\r\n            var selectionContainsOnlyWhitespace = true;\r\n            for (var lineNumber = selection.startLineNumber; lineNumber <= selection.endLineNumber; lineNumber++) {\r\n                var lineText = model.getLineContent(lineNumber);\r\n                var startIndex = (lineNumber === selection.startLineNumber ? selection.startColumn - 1 : 0);\r\n                var endIndex = (lineNumber === selection.endLineNumber ? selection.endColumn - 1 : lineText.length);\r\n                var selectedText = lineText.substring(startIndex, endIndex);\r\n                if (/[^ \\t]/.test(selectedText)) {\r\n                    // this selected text contains something other than whitespace\r\n                    selectionContainsOnlyWhitespace = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (selectionContainsOnlyWhitespace) {\r\n                return false;\r\n            }\r\n            if (isTypingAQuoteCharacter && selection.startLineNumber === selection.endLineNumber && selection.startColumn + 1 === selection.endColumn) {\r\n                var selectionText = model.getValueInRange(selection);\r\n                if (isQuote(selectionText)) {\r\n                    // Typing a quote character on top of another quote character\r\n                    // => disable surround selection type\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    TypeOperations._runSurroundSelectionType = function (prevEditOperationType, config, model, selections, ch) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var closeCharacter = config.surroundingPairs[ch];\r\n            commands[i] = new SurroundSelectionCommand(selection, ch, closeCharacter);\r\n        }\r\n        return new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: true\r\n        });\r\n    };\r\n    TypeOperations._isTypeInterceptorElectricChar = function (config, model, selections) {\r\n        if (selections.length === 1 && model.isCheapToTokenize(selections[0].getEndPosition().lineNumber)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    TypeOperations._typeInterceptorElectricChar = function (prevEditOperationType, config, model, selection, ch) {\r\n        if (!config.electricChars.hasOwnProperty(ch) || !selection.isEmpty()) {\r\n            return null;\r\n        }\r\n        var position = selection.getPosition();\r\n        model.forceTokenization(position.lineNumber);\r\n        var lineTokens = model.getLineTokens(position.lineNumber);\r\n        var electricAction;\r\n        try {\r\n            electricAction = LanguageConfigurationRegistry.onElectricCharacter(ch, lineTokens, position.column);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n        if (!electricAction) {\r\n            return null;\r\n        }\r\n        if (electricAction.matchOpenBracket) {\r\n            var endColumn = (lineTokens.getLineContent() + ch).lastIndexOf(electricAction.matchOpenBracket) + 1;\r\n            var match = model.findMatchingBracketUp(electricAction.matchOpenBracket, {\r\n                lineNumber: position.lineNumber,\r\n                column: endColumn\r\n            });\r\n            if (match) {\r\n                if (match.startLineNumber === position.lineNumber) {\r\n                    // matched something on the same line => no change in indentation\r\n                    return null;\r\n                }\r\n                var matchLine = model.getLineContent(match.startLineNumber);\r\n                var matchLineIndentation = strings.getLeadingWhitespace(matchLine);\r\n                var newIndentation = config.normalizeIndentation(matchLineIndentation);\r\n                var lineText = model.getLineContent(position.lineNumber);\r\n                var lineFirstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(position.lineNumber) || position.column;\r\n                var prefix = lineText.substring(lineFirstNonBlankColumn - 1, position.column - 1);\r\n                var typeText = newIndentation + prefix + ch;\r\n                var typeSelection = new Range(position.lineNumber, 1, position.lineNumber, position.column);\r\n                var command = new ReplaceCommand(typeSelection, typeText);\r\n                return new EditOperationResult(1 /* Typing */, [command], {\r\n                    shouldPushStackElementBefore: false,\r\n                    shouldPushStackElementAfter: true\r\n                });\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * This is very similar with typing, but the character is already in the text buffer!\r\n     */\r\n    TypeOperations.compositionEndWithInterceptors = function (prevEditOperationType, config, model, selectionsWhenCompositionStarted, selections, autoClosedCharacters) {\r\n        if (!selectionsWhenCompositionStarted || Selection.selectionsArrEqual(selectionsWhenCompositionStarted, selections)) {\r\n            // no content was typed\r\n            return null;\r\n        }\r\n        var ch = null;\r\n        // extract last typed character\r\n        for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\r\n            var selection = selections_1[_i];\r\n            if (!selection.isEmpty()) {\r\n                return null;\r\n            }\r\n            var position = selection.getPosition();\r\n            var currentChar = model.getValueInRange(new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column));\r\n            if (ch === null) {\r\n                ch = currentChar;\r\n            }\r\n            else if (ch !== currentChar) {\r\n                return null;\r\n            }\r\n        }\r\n        if (!ch) {\r\n            return null;\r\n        }\r\n        if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\r\n            // Unfortunately, the close character is at this point \"doubled\", so we need to delete it...\r\n            var commands = selections.map(function (s) { return new ReplaceCommand(new Range(s.positionLineNumber, s.positionColumn, s.positionLineNumber, s.positionColumn + 1), '', false); });\r\n            return new EditOperationResult(1 /* Typing */, commands, {\r\n                shouldPushStackElementBefore: true,\r\n                shouldPushStackElementAfter: false\r\n            });\r\n        }\r\n        var autoClosingPairOpenCharType = this._isAutoClosingOpenCharType(config, model, selections, ch, false);\r\n        if (autoClosingPairOpenCharType) {\r\n            return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, false, autoClosingPairOpenCharType);\r\n        }\r\n        return null;\r\n    };\r\n    TypeOperations.typeWithInterceptors = function (prevEditOperationType, config, model, selections, autoClosedCharacters, ch) {\r\n        if (ch === '\\n') {\r\n            var commands_1 = [];\r\n            for (var i = 0, len = selections.length; i < len; i++) {\r\n                commands_1[i] = TypeOperations._enter(config, model, false, selections[i]);\r\n            }\r\n            return new EditOperationResult(1 /* Typing */, commands_1, {\r\n                shouldPushStackElementBefore: true,\r\n                shouldPushStackElementAfter: false,\r\n            });\r\n        }\r\n        if (this._isAutoIndentType(config, model, selections)) {\r\n            var commands_2 = [];\r\n            var autoIndentFails = false;\r\n            for (var i = 0, len = selections.length; i < len; i++) {\r\n                commands_2[i] = this._runAutoIndentType(config, model, selections[i], ch);\r\n                if (!commands_2[i]) {\r\n                    autoIndentFails = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!autoIndentFails) {\r\n                return new EditOperationResult(1 /* Typing */, commands_2, {\r\n                    shouldPushStackElementBefore: true,\r\n                    shouldPushStackElementAfter: false,\r\n                });\r\n            }\r\n        }\r\n        if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\r\n            return this._runAutoClosingOvertype(prevEditOperationType, config, model, selections, ch);\r\n        }\r\n        var autoClosingPairOpenCharType = this._isAutoClosingOpenCharType(config, model, selections, ch, true);\r\n        if (autoClosingPairOpenCharType) {\r\n            return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, true, autoClosingPairOpenCharType);\r\n        }\r\n        if (this._isSurroundSelectionType(config, model, selections, ch)) {\r\n            return this._runSurroundSelectionType(prevEditOperationType, config, model, selections, ch);\r\n        }\r\n        // Electric characters make sense only when dealing with a single cursor,\r\n        // as multiple cursors typing brackets for example would interfer with bracket matching\r\n        if (this._isTypeInterceptorElectricChar(config, model, selections)) {\r\n            var r = this._typeInterceptorElectricChar(prevEditOperationType, config, model, selections[0], ch);\r\n            if (r) {\r\n                return r;\r\n            }\r\n        }\r\n        // A simple character type\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ReplaceCommand(selections[i], ch);\r\n        }\r\n        var shouldPushStackElementBefore = (prevEditOperationType !== 1 /* Typing */);\r\n        if (ch === ' ') {\r\n            shouldPushStackElementBefore = true;\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: shouldPushStackElementBefore,\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations.typeWithoutInterceptors = function (prevEditOperationType, config, model, selections, str) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ReplaceCommand(selections[i], str);\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: (prevEditOperationType !== 1 /* Typing */),\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations.lineInsertBefore = function (config, model, selections) {\r\n        if (model === null || selections === null) {\r\n            return [];\r\n        }\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var lineNumber = selections[i].positionLineNumber;\r\n            if (lineNumber === 1) {\r\n                commands[i] = new ReplaceCommandWithoutChangingPosition(new Range(1, 1, 1, 1), '\\n');\r\n            }\r\n            else {\r\n                lineNumber--;\r\n                var column = model.getLineMaxColumn(lineNumber);\r\n                commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\r\n            }\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.lineInsertAfter = function (config, model, selections) {\r\n        if (model === null || selections === null) {\r\n            return [];\r\n        }\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var lineNumber = selections[i].positionLineNumber;\r\n            var column = model.getLineMaxColumn(lineNumber);\r\n            commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.lineBreakInsert = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = this._enter(config, model, true, selections[i]);\r\n        }\r\n        return commands;\r\n    };\r\n    return TypeOperations;\r\n}());\r\nexport { TypeOperations };\r\nvar TypeWithAutoClosingCommand = /** @class */ (function (_super) {\r\n    __extends(TypeWithAutoClosingCommand, _super);\r\n    function TypeWithAutoClosingCommand(selection, openCharacter, insertOpenCharacter, closeCharacter) {\r\n        var _this = _super.call(this, selection, (insertOpenCharacter ? openCharacter : '') + closeCharacter, 0, -closeCharacter.length) || this;\r\n        _this._openCharacter = openCharacter;\r\n        _this._closeCharacter = closeCharacter;\r\n        _this.closeCharacterRange = null;\r\n        _this.enclosingRange = null;\r\n        return _this;\r\n    }\r\n    TypeWithAutoClosingCommand.prototype.computeCursorState = function (model, helper) {\r\n        var inverseEditOperations = helper.getInverseEditOperations();\r\n        var range = inverseEditOperations[0].range;\r\n        this.closeCharacterRange = new Range(range.startLineNumber, range.endColumn - this._closeCharacter.length, range.endLineNumber, range.endColumn);\r\n        this.enclosingRange = new Range(range.startLineNumber, range.endColumn - this._openCharacter.length - this._closeCharacter.length, range.endLineNumber, range.endColumn);\r\n        return _super.prototype.computeCursorState.call(this, model, helper);\r\n    };\r\n    return TypeWithAutoClosingCommand;\r\n}(ReplaceCommandWithOffsetCursorState));\r\nexport { TypeWithAutoClosingCommand };\r\n"]},"metadata":{},"sourceType":"module"}