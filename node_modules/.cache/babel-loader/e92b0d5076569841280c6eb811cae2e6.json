{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../core/lineTokens.js';\nimport { NULL_STATE, nullTokenize2 } from './nullMode.js';\nvar fallback = {\n  getInitialState: function () {\n    return NULL_STATE;\n  },\n  tokenize2: function (buffer, state, deltaOffset) {\n    return nullTokenize2(0\n    /* Null */\n    , buffer, state, deltaOffset);\n  }\n};\nexport function tokenizeToString(text, tokenizationSupport) {\n  if (tokenizationSupport === void 0) {\n    tokenizationSupport = fallback;\n  }\n\n  return _tokenizeToString(text, tokenizationSupport || fallback);\n}\nexport function tokenizeLineToHTML(text, viewLineTokens, colorMap, startOffset, endOffset, tabSize, useNbsp) {\n  var result = \"<div>\";\n  var charIndex = startOffset;\n  var tabsCharDelta = 0;\n\n  for (var tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\n    var tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\n\n    if (tokenEndIndex <= startOffset) {\n      continue;\n    }\n\n    var partContent = '';\n\n    for (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\n      var charCode = text.charCodeAt(charIndex);\n\n      switch (charCode) {\n        case 9\n        /* Tab */\n        :\n          var insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n          tabsCharDelta += insertSpacesCount - 1;\n\n          while (insertSpacesCount > 0) {\n            partContent += useNbsp ? '&#160;' : ' ';\n            insertSpacesCount--;\n          }\n\n          break;\n\n        case 60\n        /* LessThan */\n        :\n          partContent += '&lt;';\n          break;\n\n        case 62\n        /* GreaterThan */\n        :\n          partContent += '&gt;';\n          break;\n\n        case 38\n        /* Ampersand */\n        :\n          partContent += '&amp;';\n          break;\n\n        case 0\n        /* Null */\n        :\n          partContent += '&#00;';\n          break;\n\n        case 65279\n        /* UTF8_BOM */\n        :\n        case 8232\n        /* LINE_SEPARATOR_2028 */\n        :\n          partContent += '\\ufffd';\n          break;\n\n        case 13\n        /* CarriageReturn */\n        :\n          // zero width space, because carriage return would introduce a line break\n          partContent += '&#8203';\n          break;\n\n        case 32\n        /* Space */\n        :\n          partContent += useNbsp ? '&#160;' : ' ';\n          break;\n\n        default:\n          partContent += String.fromCharCode(charCode);\n      }\n    }\n\n    result += \"<span style=\\\"\" + viewLineTokens.getInlineStyle(tokenIndex, colorMap) + \"\\\">\" + partContent + \"</span>\";\n\n    if (tokenEndIndex > endOffset || charIndex >= endOffset) {\n      break;\n    }\n  }\n\n  result += \"</div>\";\n  return result;\n}\n\nfunction _tokenizeToString(text, tokenizationSupport) {\n  var result = \"<div class=\\\"monaco-tokenized-source\\\">\";\n  var lines = text.split(/\\r\\n|\\r|\\n/);\n  var currentState = tokenizationSupport.getInitialState();\n\n  for (var i = 0, len = lines.length; i < len; i++) {\n    var line = lines[i];\n\n    if (i > 0) {\n      result += \"<br/>\";\n    }\n\n    var tokenizationResult = tokenizationSupport.tokenize2(line, currentState, 0);\n    LineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\n    var lineTokens = new LineTokens(tokenizationResult.tokens, line);\n    var viewLineTokens = lineTokens.inflate();\n    var startOffset = 0;\n\n    for (var j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\n      var type = viewLineTokens.getClassName(j);\n      var endIndex = viewLineTokens.getEndOffset(j);\n      result += \"<span class=\\\"\" + type + \"\\\">\" + strings.escape(line.substring(startOffset, endIndex)) + \"</span>\";\n      startOffset = endIndex;\n    }\n\n    currentState = tokenizationResult.endState;\n  }\n\n  result += \"</div>\";\n  return result;\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/modes/textToHtmlTokenizer.js"],"names":["strings","LineTokens","NULL_STATE","nullTokenize2","fallback","getInitialState","tokenize2","buffer","state","deltaOffset","tokenizeToString","text","tokenizationSupport","_tokenizeToString","tokenizeLineToHTML","viewLineTokens","colorMap","startOffset","endOffset","tabSize","useNbsp","result","charIndex","tabsCharDelta","tokenIndex","tokenCount","getCount","tokenEndIndex","getEndOffset","partContent","charCode","charCodeAt","insertSpacesCount","String","fromCharCode","getInlineStyle","lines","split","currentState","i","len","length","line","tokenizationResult","convertToEndOffset","tokens","lineTokens","inflate","j","lenJ","type","getClassName","endIndex","escape","substring","endState"],"mappings":"AAAA;;;;AAIA,OAAO,KAAKA,OAAZ,MAAyB,iCAAzB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,eAA1C;AACA,IAAIC,QAAQ,GAAG;AACXC,EAAAA,eAAe,EAAE,YAAY;AAAE,WAAOH,UAAP;AAAoB,GADxC;AAEXI,EAAAA,SAAS,EAAE,UAAUC,MAAV,EAAkBC,KAAlB,EAAyBC,WAAzB,EAAsC;AAAE,WAAON,aAAa,CAAC;AAAE;AAAH,MAAeI,MAAf,EAAuBC,KAAvB,EAA8BC,WAA9B,CAApB;AAAiE;AAFzG,CAAf;AAIA,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,mBAAhC,EAAqD;AACxD,MAAIA,mBAAmB,KAAK,KAAK,CAAjC,EAAoC;AAAEA,IAAAA,mBAAmB,GAAGR,QAAtB;AAAiC;;AACvE,SAAOS,iBAAiB,CAACF,IAAD,EAAOC,mBAAmB,IAAIR,QAA9B,CAAxB;AACH;AACD,OAAO,SAASU,kBAAT,CAA4BH,IAA5B,EAAkCI,cAAlC,EAAkDC,QAAlD,EAA4DC,WAA5D,EAAyEC,SAAzE,EAAoFC,OAApF,EAA6FC,OAA7F,EAAsG;AACzG,MAAIC,MAAM,GAAG,OAAb;AACA,MAAIC,SAAS,GAAGL,WAAhB;AACA,MAAIM,aAAa,GAAG,CAApB;;AACA,OAAK,IAAIC,UAAU,GAAG,CAAjB,EAAoBC,UAAU,GAAGV,cAAc,CAACW,QAAf,EAAtC,EAAiEF,UAAU,GAAGC,UAA9E,EAA0FD,UAAU,EAApG,EAAwG;AACpG,QAAIG,aAAa,GAAGZ,cAAc,CAACa,YAAf,CAA4BJ,UAA5B,CAApB;;AACA,QAAIG,aAAa,IAAIV,WAArB,EAAkC;AAC9B;AACH;;AACD,QAAIY,WAAW,GAAG,EAAlB;;AACA,WAAOP,SAAS,GAAGK,aAAZ,IAA6BL,SAAS,GAAGJ,SAAhD,EAA2DI,SAAS,EAApE,EAAwE;AACpE,UAAIQ,QAAQ,GAAGnB,IAAI,CAACoB,UAAL,CAAgBT,SAAhB,CAAf;;AACA,cAAQQ,QAAR;AACI,aAAK;AAAE;AAAP;AACI,cAAIE,iBAAiB,GAAGb,OAAO,GAAG,CAACG,SAAS,GAAGC,aAAb,IAA8BJ,OAAhE;AACAI,UAAAA,aAAa,IAAIS,iBAAiB,GAAG,CAArC;;AACA,iBAAOA,iBAAiB,GAAG,CAA3B,EAA8B;AAC1BH,YAAAA,WAAW,IAAIT,OAAO,GAAG,QAAH,GAAc,GAApC;AACAY,YAAAA,iBAAiB;AACpB;;AACD;;AACJ,aAAK;AAAG;AAAR;AACIH,UAAAA,WAAW,IAAI,MAAf;AACA;;AACJ,aAAK;AAAG;AAAR;AACIA,UAAAA,WAAW,IAAI,MAAf;AACA;;AACJ,aAAK;AAAG;AAAR;AACIA,UAAAA,WAAW,IAAI,OAAf;AACA;;AACJ,aAAK;AAAE;AAAP;AACIA,UAAAA,WAAW,IAAI,OAAf;AACA;;AACJ,aAAK;AAAM;AAAX;AACA,aAAK;AAAK;AAAV;AACIA,UAAAA,WAAW,IAAI,QAAf;AACA;;AACJ,aAAK;AAAG;AAAR;AACI;AACAA,UAAAA,WAAW,IAAI,QAAf;AACA;;AACJ,aAAK;AAAG;AAAR;AACIA,UAAAA,WAAW,IAAIT,OAAO,GAAG,QAAH,GAAc,GAApC;AACA;;AACJ;AACIS,UAAAA,WAAW,IAAII,MAAM,CAACC,YAAP,CAAoBJ,QAApB,CAAf;AAjCR;AAmCH;;AACDT,IAAAA,MAAM,IAAI,mBAAmBN,cAAc,CAACoB,cAAf,CAA8BX,UAA9B,EAA0CR,QAA1C,CAAnB,GAAyE,KAAzE,GAAiFa,WAAjF,GAA+F,SAAzG;;AACA,QAAIF,aAAa,GAAGT,SAAhB,IAA6BI,SAAS,IAAIJ,SAA9C,EAAyD;AACrD;AACH;AACJ;;AACDG,EAAAA,MAAM,IAAI,QAAV;AACA,SAAOA,MAAP;AACH;;AACD,SAASR,iBAAT,CAA2BF,IAA3B,EAAiCC,mBAAjC,EAAsD;AAClD,MAAIS,MAAM,GAAG,yCAAb;AACA,MAAIe,KAAK,GAAGzB,IAAI,CAAC0B,KAAL,CAAW,YAAX,CAAZ;AACA,MAAIC,YAAY,GAAG1B,mBAAmB,CAACP,eAApB,EAAnB;;AACA,OAAK,IAAIkC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGJ,KAAK,CAACK,MAA5B,EAAoCF,CAAC,GAAGC,GAAxC,EAA6CD,CAAC,EAA9C,EAAkD;AAC9C,QAAIG,IAAI,GAAGN,KAAK,CAACG,CAAD,CAAhB;;AACA,QAAIA,CAAC,GAAG,CAAR,EAAW;AACPlB,MAAAA,MAAM,IAAI,OAAV;AACH;;AACD,QAAIsB,kBAAkB,GAAG/B,mBAAmB,CAACN,SAApB,CAA8BoC,IAA9B,EAAoCJ,YAApC,EAAkD,CAAlD,CAAzB;AACArC,IAAAA,UAAU,CAAC2C,kBAAX,CAA8BD,kBAAkB,CAACE,MAAjD,EAAyDH,IAAI,CAACD,MAA9D;AACA,QAAIK,UAAU,GAAG,IAAI7C,UAAJ,CAAe0C,kBAAkB,CAACE,MAAlC,EAA0CH,IAA1C,CAAjB;AACA,QAAI3B,cAAc,GAAG+B,UAAU,CAACC,OAAX,EAArB;AACA,QAAI9B,WAAW,GAAG,CAAlB;;AACA,SAAK,IAAI+B,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAGlC,cAAc,CAACW,QAAf,EAAvB,EAAkDsB,CAAC,GAAGC,IAAtD,EAA4DD,CAAC,EAA7D,EAAiE;AAC7D,UAAIE,IAAI,GAAGnC,cAAc,CAACoC,YAAf,CAA4BH,CAA5B,CAAX;AACA,UAAII,QAAQ,GAAGrC,cAAc,CAACa,YAAf,CAA4BoB,CAA5B,CAAf;AACA3B,MAAAA,MAAM,IAAI,mBAAmB6B,IAAnB,GAA0B,KAA1B,GAAkClD,OAAO,CAACqD,MAAR,CAAeX,IAAI,CAACY,SAAL,CAAerC,WAAf,EAA4BmC,QAA5B,CAAf,CAAlC,GAA0F,SAApG;AACAnC,MAAAA,WAAW,GAAGmC,QAAd;AACH;;AACDd,IAAAA,YAAY,GAAGK,kBAAkB,CAACY,QAAlC;AACH;;AACDlC,EAAAA,MAAM,IAAI,QAAV;AACA,SAAOA,MAAP;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { LineTokens } from '../core/lineTokens.js';\r\nimport { NULL_STATE, nullTokenize2 } from './nullMode.js';\r\nvar fallback = {\r\n    getInitialState: function () { return NULL_STATE; },\r\n    tokenize2: function (buffer, state, deltaOffset) { return nullTokenize2(0 /* Null */, buffer, state, deltaOffset); }\r\n};\r\nexport function tokenizeToString(text, tokenizationSupport) {\r\n    if (tokenizationSupport === void 0) { tokenizationSupport = fallback; }\r\n    return _tokenizeToString(text, tokenizationSupport || fallback);\r\n}\r\nexport function tokenizeLineToHTML(text, viewLineTokens, colorMap, startOffset, endOffset, tabSize, useNbsp) {\r\n    var result = \"<div>\";\r\n    var charIndex = startOffset;\r\n    var tabsCharDelta = 0;\r\n    for (var tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\r\n        var tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\r\n        if (tokenEndIndex <= startOffset) {\r\n            continue;\r\n        }\r\n        var partContent = '';\r\n        for (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\r\n            var charCode = text.charCodeAt(charIndex);\r\n            switch (charCode) {\r\n                case 9 /* Tab */:\r\n                    var insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\r\n                    tabsCharDelta += insertSpacesCount - 1;\r\n                    while (insertSpacesCount > 0) {\r\n                        partContent += useNbsp ? '&#160;' : ' ';\r\n                        insertSpacesCount--;\r\n                    }\r\n                    break;\r\n                case 60 /* LessThan */:\r\n                    partContent += '&lt;';\r\n                    break;\r\n                case 62 /* GreaterThan */:\r\n                    partContent += '&gt;';\r\n                    break;\r\n                case 38 /* Ampersand */:\r\n                    partContent += '&amp;';\r\n                    break;\r\n                case 0 /* Null */:\r\n                    partContent += '&#00;';\r\n                    break;\r\n                case 65279 /* UTF8_BOM */:\r\n                case 8232 /* LINE_SEPARATOR_2028 */:\r\n                    partContent += '\\ufffd';\r\n                    break;\r\n                case 13 /* CarriageReturn */:\r\n                    // zero width space, because carriage return would introduce a line break\r\n                    partContent += '&#8203';\r\n                    break;\r\n                case 32 /* Space */:\r\n                    partContent += useNbsp ? '&#160;' : ' ';\r\n                    break;\r\n                default:\r\n                    partContent += String.fromCharCode(charCode);\r\n            }\r\n        }\r\n        result += \"<span style=\\\"\" + viewLineTokens.getInlineStyle(tokenIndex, colorMap) + \"\\\">\" + partContent + \"</span>\";\r\n        if (tokenEndIndex > endOffset || charIndex >= endOffset) {\r\n            break;\r\n        }\r\n    }\r\n    result += \"</div>\";\r\n    return result;\r\n}\r\nfunction _tokenizeToString(text, tokenizationSupport) {\r\n    var result = \"<div class=\\\"monaco-tokenized-source\\\">\";\r\n    var lines = text.split(/\\r\\n|\\r|\\n/);\r\n    var currentState = tokenizationSupport.getInitialState();\r\n    for (var i = 0, len = lines.length; i < len; i++) {\r\n        var line = lines[i];\r\n        if (i > 0) {\r\n            result += \"<br/>\";\r\n        }\r\n        var tokenizationResult = tokenizationSupport.tokenize2(line, currentState, 0);\r\n        LineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\r\n        var lineTokens = new LineTokens(tokenizationResult.tokens, line);\r\n        var viewLineTokens = lineTokens.inflate();\r\n        var startOffset = 0;\r\n        for (var j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\r\n            var type = viewLineTokens.getClassName(j);\r\n            var endIndex = viewLineTokens.getEndOffset(j);\r\n            result += \"<span class=\\\"\" + type + \"\\\">\" + strings.escape(line.substring(startOffset, endIndex)) + \"</span>\";\r\n            startOffset = endIndex;\r\n        }\r\n        currentState = tokenizationResult.endState;\r\n    }\r\n    result += \"</div>\";\r\n    return result;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}