{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\n\nvar CopyLinesCommand =\n/** @class */\nfunction () {\n  function CopyLinesCommand(selection, isCopyingDown) {\n    this._selection = selection;\n    this._isCopyingDown = isCopyingDown;\n    this._selectionDirection = 0\n    /* LTR */\n    ;\n    this._selectionId = null;\n    this._startLineNumberDelta = 0;\n    this._endLineNumberDelta = 0;\n  }\n\n  CopyLinesCommand.prototype.getEditOperations = function (model, builder) {\n    var s = this._selection;\n    this._startLineNumberDelta = 0;\n    this._endLineNumberDelta = 0;\n\n    if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n      this._endLineNumberDelta = 1;\n      s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n    }\n\n    var sourceLines = [];\n\n    for (var i = s.startLineNumber; i <= s.endLineNumber; i++) {\n      sourceLines.push(model.getLineContent(i));\n    }\n\n    var sourceText = sourceLines.join('\\n');\n\n    if (sourceText === '') {\n      // Duplicating empty line\n      if (this._isCopyingDown) {\n        this._startLineNumberDelta++;\n        this._endLineNumberDelta++;\n      }\n    }\n\n    if (!this._isCopyingDown) {\n      builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + sourceText);\n    } else {\n      builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), sourceText + '\\n');\n    }\n\n    this._selectionId = builder.trackSelection(s);\n    this._selectionDirection = this._selection.getDirection();\n  };\n\n  CopyLinesCommand.prototype.computeCursorState = function (model, helper) {\n    var result = helper.getTrackedSelection(this._selectionId);\n\n    if (this._startLineNumberDelta !== 0 || this._endLineNumberDelta !== 0) {\n      var startLineNumber = result.startLineNumber;\n      var startColumn = result.startColumn;\n      var endLineNumber = result.endLineNumber;\n      var endColumn = result.endColumn;\n\n      if (this._startLineNumberDelta !== 0) {\n        startLineNumber = startLineNumber + this._startLineNumberDelta;\n        startColumn = 1;\n      }\n\n      if (this._endLineNumberDelta !== 0) {\n        endLineNumber = endLineNumber + this._endLineNumberDelta;\n        endColumn = 1;\n      }\n\n      result = Selection.createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, this._selectionDirection);\n    }\n\n    return result;\n  };\n\n  return CopyLinesCommand;\n}();\n\nexport { CopyLinesCommand };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/copyLinesCommand.js"],"names":["Range","Selection","CopyLinesCommand","selection","isCopyingDown","_selection","_isCopyingDown","_selectionDirection","_selectionId","_startLineNumberDelta","_endLineNumberDelta","prototype","getEditOperations","model","builder","s","startLineNumber","endLineNumber","endColumn","setEndPosition","getLineMaxColumn","sourceLines","i","push","getLineContent","sourceText","join","addEditOperation","trackSelection","getDirection","computeCursorState","helper","result","getTrackedSelection","startColumn","createWithDirection"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nvar CopyLinesCommand = /** @class */ (function () {\r\n    function CopyLinesCommand(selection, isCopyingDown) {\r\n        this._selection = selection;\r\n        this._isCopyingDown = isCopyingDown;\r\n        this._selectionDirection = 0 /* LTR */;\r\n        this._selectionId = null;\r\n        this._startLineNumberDelta = 0;\r\n        this._endLineNumberDelta = 0;\r\n    }\r\n    CopyLinesCommand.prototype.getEditOperations = function (model, builder) {\r\n        var s = this._selection;\r\n        this._startLineNumberDelta = 0;\r\n        this._endLineNumberDelta = 0;\r\n        if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\r\n            this._endLineNumberDelta = 1;\r\n            s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\r\n        }\r\n        var sourceLines = [];\r\n        for (var i = s.startLineNumber; i <= s.endLineNumber; i++) {\r\n            sourceLines.push(model.getLineContent(i));\r\n        }\r\n        var sourceText = sourceLines.join('\\n');\r\n        if (sourceText === '') {\r\n            // Duplicating empty line\r\n            if (this._isCopyingDown) {\r\n                this._startLineNumberDelta++;\r\n                this._endLineNumberDelta++;\r\n            }\r\n        }\r\n        if (!this._isCopyingDown) {\r\n            builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + sourceText);\r\n        }\r\n        else {\r\n            builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), sourceText + '\\n');\r\n        }\r\n        this._selectionId = builder.trackSelection(s);\r\n        this._selectionDirection = this._selection.getDirection();\r\n    };\r\n    CopyLinesCommand.prototype.computeCursorState = function (model, helper) {\r\n        var result = helper.getTrackedSelection(this._selectionId);\r\n        if (this._startLineNumberDelta !== 0 || this._endLineNumberDelta !== 0) {\r\n            var startLineNumber = result.startLineNumber;\r\n            var startColumn = result.startColumn;\r\n            var endLineNumber = result.endLineNumber;\r\n            var endColumn = result.endColumn;\r\n            if (this._startLineNumberDelta !== 0) {\r\n                startLineNumber = startLineNumber + this._startLineNumberDelta;\r\n                startColumn = 1;\r\n            }\r\n            if (this._endLineNumberDelta !== 0) {\r\n                endLineNumber = endLineNumber + this._endLineNumberDelta;\r\n                endColumn = 1;\r\n            }\r\n            result = Selection.createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, this._selectionDirection);\r\n        }\r\n        return result;\r\n    };\r\n    return CopyLinesCommand;\r\n}());\r\nexport { CopyLinesCommand };\r\n"]},"metadata":{},"sourceType":"module"}