{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { basename, posix } from './path.js';\nimport { endsWith, startsWithUTF8BOM } from './strings.js';\nimport { match } from './glob.js';\nimport { Schemas } from './network.js';\nimport { DataUri } from './resources.js';\nexport var MIME_TEXT = 'text/plain';\nexport var MIME_UNKNOWN = 'application/unknown';\nvar registeredAssociations = [];\nvar nonUserRegisteredAssociations = [];\nvar userRegisteredAssociations = [];\n/**\r\n * Associate a text mime to the registry.\r\n */\n\nexport function registerTextMime(association, warnOnOverwrite) {\n  if (warnOnOverwrite === void 0) {\n    warnOnOverwrite = false;\n  } // Register\n\n\n  var associationItem = toTextMimeAssociationItem(association);\n  registeredAssociations.push(associationItem);\n\n  if (!associationItem.userConfigured) {\n    nonUserRegisteredAssociations.push(associationItem);\n  } else {\n    userRegisteredAssociations.push(associationItem);\n  } // Check for conflicts unless this is a user configured association\n\n\n  if (warnOnOverwrite && !associationItem.userConfigured) {\n    registeredAssociations.forEach(function (a) {\n      if (a.mime === associationItem.mime || a.userConfigured) {\n        return; // same mime or userConfigured is ok\n      }\n\n      if (associationItem.extension && a.extension === associationItem.extension) {\n        console.warn(\"Overwriting extension <<\" + associationItem.extension + \">> to now point to mime <<\" + associationItem.mime + \">>\");\n      }\n\n      if (associationItem.filename && a.filename === associationItem.filename) {\n        console.warn(\"Overwriting filename <<\" + associationItem.filename + \">> to now point to mime <<\" + associationItem.mime + \">>\");\n      }\n\n      if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n        console.warn(\"Overwriting filepattern <<\" + associationItem.filepattern + \">> to now point to mime <<\" + associationItem.mime + \">>\");\n      }\n\n      if (associationItem.firstline && a.firstline === associationItem.firstline) {\n        console.warn(\"Overwriting firstline <<\" + associationItem.firstline + \">> to now point to mime <<\" + associationItem.mime + \">>\");\n      }\n    });\n  }\n}\n\nfunction toTextMimeAssociationItem(association) {\n  return {\n    id: association.id,\n    mime: association.mime,\n    filename: association.filename,\n    extension: association.extension,\n    filepattern: association.filepattern,\n    firstline: association.firstline,\n    userConfigured: association.userConfigured,\n    filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n    extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n    filepatternLowercase: association.filepattern ? association.filepattern.toLowerCase() : undefined,\n    filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n  };\n}\n/**\r\n * Given a file, return the best matching mime type for it\r\n */\n\n\nexport function guessMimeTypes(resource, firstLine) {\n  var path;\n\n  if (resource) {\n    switch (resource.scheme) {\n      case Schemas.file:\n        path = resource.fsPath;\n        break;\n\n      case Schemas.data:\n        var metadata = DataUri.parseMetaData(resource);\n        path = metadata.get(DataUri.META_DATA_LABEL);\n        break;\n\n      default:\n        path = resource.path;\n    }\n  }\n\n  if (!path) {\n    return [MIME_UNKNOWN];\n  }\n\n  path = path.toLowerCase();\n  var filename = basename(path); // 1.) User configured mappings have highest priority\n\n  var configuredMime = guessMimeTypeByPath(path, filename, userRegisteredAssociations);\n\n  if (configuredMime) {\n    return [configuredMime, MIME_TEXT];\n  } // 2.) Registered mappings have middle priority\n\n\n  var registeredMime = guessMimeTypeByPath(path, filename, nonUserRegisteredAssociations);\n\n  if (registeredMime) {\n    return [registeredMime, MIME_TEXT];\n  } // 3.) Firstline has lowest priority\n\n\n  if (firstLine) {\n    var firstlineMime = guessMimeTypeByFirstline(firstLine);\n\n    if (firstlineMime) {\n      return [firstlineMime, MIME_TEXT];\n    }\n  }\n\n  return [MIME_UNKNOWN];\n}\n\nfunction guessMimeTypeByPath(path, filename, associations) {\n  var filenameMatch = null;\n  var patternMatch = null;\n  var extensionMatch = null; // We want to prioritize associations based on the order they are registered so that the last registered\n  // association wins over all other. This is for https://github.com/Microsoft/vscode/issues/20074\n\n  for (var i = associations.length - 1; i >= 0; i--) {\n    var association = associations[i]; // First exact name match\n\n    if (filename === association.filenameLowercase) {\n      filenameMatch = association;\n      break; // take it!\n    } // Longest pattern match\n\n\n    if (association.filepattern) {\n      if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n        var target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n\n        if (match(association.filepatternLowercase, target)) {\n          patternMatch = association;\n        }\n      }\n    } // Longest extension match\n\n\n    if (association.extension) {\n      if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n        if (endsWith(filename, association.extensionLowercase)) {\n          extensionMatch = association;\n        }\n      }\n    }\n  } // 1.) Exact name match has second highest prio\n\n\n  if (filenameMatch) {\n    return filenameMatch.mime;\n  } // 2.) Match on pattern\n\n\n  if (patternMatch) {\n    return patternMatch.mime;\n  } // 3.) Match on extension comes next\n\n\n  if (extensionMatch) {\n    return extensionMatch.mime;\n  }\n\n  return null;\n}\n\nfunction guessMimeTypeByFirstline(firstLine) {\n  if (startsWithUTF8BOM(firstLine)) {\n    firstLine = firstLine.substr(1);\n  }\n\n  if (firstLine.length > 0) {\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/Microsoft/vscode/issues/20074\n    for (var i = registeredAssociations.length - 1; i >= 0; i--) {\n      var association = registeredAssociations[i];\n\n      if (!association.firstline) {\n        continue;\n      }\n\n      var matches = firstLine.match(association.firstline);\n\n      if (matches && matches.length > 0) {\n        return association.mime;\n      }\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/base/common/mime.js"],"names":["basename","posix","endsWith","startsWithUTF8BOM","match","Schemas","DataUri","MIME_TEXT","MIME_UNKNOWN","registeredAssociations","nonUserRegisteredAssociations","userRegisteredAssociations","registerTextMime","association","warnOnOverwrite","associationItem","toTextMimeAssociationItem","push","userConfigured","forEach","a","mime","extension","console","warn","filename","filepattern","firstline","id","filenameLowercase","toLowerCase","undefined","extensionLowercase","filepatternLowercase","filepatternOnPath","indexOf","sep","guessMimeTypes","resource","firstLine","path","scheme","file","fsPath","data","metadata","parseMetaData","get","META_DATA_LABEL","configuredMime","guessMimeTypeByPath","registeredMime","firstlineMime","guessMimeTypeByFirstline","associations","filenameMatch","patternMatch","extensionMatch","i","length","target","substr","matches"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { basename, posix } from './path.js';\r\nimport { endsWith, startsWithUTF8BOM } from './strings.js';\r\nimport { match } from './glob.js';\r\nimport { Schemas } from './network.js';\r\nimport { DataUri } from './resources.js';\r\nexport var MIME_TEXT = 'text/plain';\r\nexport var MIME_UNKNOWN = 'application/unknown';\r\nvar registeredAssociations = [];\r\nvar nonUserRegisteredAssociations = [];\r\nvar userRegisteredAssociations = [];\r\n/**\r\n * Associate a text mime to the registry.\r\n */\r\nexport function registerTextMime(association, warnOnOverwrite) {\r\n    if (warnOnOverwrite === void 0) { warnOnOverwrite = false; }\r\n    // Register\r\n    var associationItem = toTextMimeAssociationItem(association);\r\n    registeredAssociations.push(associationItem);\r\n    if (!associationItem.userConfigured) {\r\n        nonUserRegisteredAssociations.push(associationItem);\r\n    }\r\n    else {\r\n        userRegisteredAssociations.push(associationItem);\r\n    }\r\n    // Check for conflicts unless this is a user configured association\r\n    if (warnOnOverwrite && !associationItem.userConfigured) {\r\n        registeredAssociations.forEach(function (a) {\r\n            if (a.mime === associationItem.mime || a.userConfigured) {\r\n                return; // same mime or userConfigured is ok\r\n            }\r\n            if (associationItem.extension && a.extension === associationItem.extension) {\r\n                console.warn(\"Overwriting extension <<\" + associationItem.extension + \">> to now point to mime <<\" + associationItem.mime + \">>\");\r\n            }\r\n            if (associationItem.filename && a.filename === associationItem.filename) {\r\n                console.warn(\"Overwriting filename <<\" + associationItem.filename + \">> to now point to mime <<\" + associationItem.mime + \">>\");\r\n            }\r\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\r\n                console.warn(\"Overwriting filepattern <<\" + associationItem.filepattern + \">> to now point to mime <<\" + associationItem.mime + \">>\");\r\n            }\r\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\r\n                console.warn(\"Overwriting firstline <<\" + associationItem.firstline + \">> to now point to mime <<\" + associationItem.mime + \">>\");\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction toTextMimeAssociationItem(association) {\r\n    return {\r\n        id: association.id,\r\n        mime: association.mime,\r\n        filename: association.filename,\r\n        extension: association.extension,\r\n        filepattern: association.filepattern,\r\n        firstline: association.firstline,\r\n        userConfigured: association.userConfigured,\r\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\r\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\r\n        filepatternLowercase: association.filepattern ? association.filepattern.toLowerCase() : undefined,\r\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\r\n    };\r\n}\r\n/**\r\n * Given a file, return the best matching mime type for it\r\n */\r\nexport function guessMimeTypes(resource, firstLine) {\r\n    var path;\r\n    if (resource) {\r\n        switch (resource.scheme) {\r\n            case Schemas.file:\r\n                path = resource.fsPath;\r\n                break;\r\n            case Schemas.data:\r\n                var metadata = DataUri.parseMetaData(resource);\r\n                path = metadata.get(DataUri.META_DATA_LABEL);\r\n                break;\r\n            default:\r\n                path = resource.path;\r\n        }\r\n    }\r\n    if (!path) {\r\n        return [MIME_UNKNOWN];\r\n    }\r\n    path = path.toLowerCase();\r\n    var filename = basename(path);\r\n    // 1.) User configured mappings have highest priority\r\n    var configuredMime = guessMimeTypeByPath(path, filename, userRegisteredAssociations);\r\n    if (configuredMime) {\r\n        return [configuredMime, MIME_TEXT];\r\n    }\r\n    // 2.) Registered mappings have middle priority\r\n    var registeredMime = guessMimeTypeByPath(path, filename, nonUserRegisteredAssociations);\r\n    if (registeredMime) {\r\n        return [registeredMime, MIME_TEXT];\r\n    }\r\n    // 3.) Firstline has lowest priority\r\n    if (firstLine) {\r\n        var firstlineMime = guessMimeTypeByFirstline(firstLine);\r\n        if (firstlineMime) {\r\n            return [firstlineMime, MIME_TEXT];\r\n        }\r\n    }\r\n    return [MIME_UNKNOWN];\r\n}\r\nfunction guessMimeTypeByPath(path, filename, associations) {\r\n    var filenameMatch = null;\r\n    var patternMatch = null;\r\n    var extensionMatch = null;\r\n    // We want to prioritize associations based on the order they are registered so that the last registered\r\n    // association wins over all other. This is for https://github.com/Microsoft/vscode/issues/20074\r\n    for (var i = associations.length - 1; i >= 0; i--) {\r\n        var association = associations[i];\r\n        // First exact name match\r\n        if (filename === association.filenameLowercase) {\r\n            filenameMatch = association;\r\n            break; // take it!\r\n        }\r\n        // Longest pattern match\r\n        if (association.filepattern) {\r\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\r\n                var target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\r\n                if (match(association.filepatternLowercase, target)) {\r\n                    patternMatch = association;\r\n                }\r\n            }\r\n        }\r\n        // Longest extension match\r\n        if (association.extension) {\r\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\r\n                if (endsWith(filename, association.extensionLowercase)) {\r\n                    extensionMatch = association;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 1.) Exact name match has second highest prio\r\n    if (filenameMatch) {\r\n        return filenameMatch.mime;\r\n    }\r\n    // 2.) Match on pattern\r\n    if (patternMatch) {\r\n        return patternMatch.mime;\r\n    }\r\n    // 3.) Match on extension comes next\r\n    if (extensionMatch) {\r\n        return extensionMatch.mime;\r\n    }\r\n    return null;\r\n}\r\nfunction guessMimeTypeByFirstline(firstLine) {\r\n    if (startsWithUTF8BOM(firstLine)) {\r\n        firstLine = firstLine.substr(1);\r\n    }\r\n    if (firstLine.length > 0) {\r\n        // We want to prioritize associations based on the order they are registered so that the last registered\r\n        // association wins over all other. This is for https://github.com/Microsoft/vscode/issues/20074\r\n        for (var i = registeredAssociations.length - 1; i >= 0; i--) {\r\n            var association = registeredAssociations[i];\r\n            if (!association.firstline) {\r\n                continue;\r\n            }\r\n            var matches = firstLine.match(association.firstline);\r\n            if (matches && matches.length > 0) {\r\n                return association.mime;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}