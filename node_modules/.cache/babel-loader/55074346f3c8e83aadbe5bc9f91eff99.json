{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as strings from '../../../base/common/strings.js';\nimport { SingleCursorState } from './cursorCommon.js';\nimport { getMapForWordSeparators } from './wordCharacterClassifier.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\n\nvar WordOperations =\n/** @class */\nfunction () {\n  function WordOperations() {}\n\n  WordOperations._createWord = function (lineContent, wordType, nextCharClass, start, end) {\n    // console.log('WORD ==> ' + start + ' => ' + end + ':::: <<<' + lineContent.substring(start, end) + '>>>');\n    return {\n      start: start,\n      end: end,\n      wordType: wordType,\n      nextCharClass: nextCharClass\n    };\n  };\n\n  WordOperations._findPreviousWordOnLine = function (wordSeparators, model, position) {\n    var lineContent = model.getLineContent(position.lineNumber);\n    return this._doFindPreviousWordOnLine(lineContent, wordSeparators, position);\n  };\n\n  WordOperations._doFindPreviousWordOnLine = function (lineContent, wordSeparators, position) {\n    var wordType = 0\n    /* None */\n    ;\n\n    for (var chIndex = position.column - 2; chIndex >= 0; chIndex--) {\n      var chCode = lineContent.charCodeAt(chIndex);\n      var chClass = wordSeparators.get(chCode);\n\n      if (chClass === 0\n      /* Regular */\n      ) {\n          if (wordType === 2\n          /* Separator */\n          ) {\n              return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n            }\n\n          wordType = 1\n          /* Regular */\n          ;\n        } else if (chClass === 2\n      /* WordSeparator */\n      ) {\n          if (wordType === 1\n          /* Regular */\n          ) {\n              return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n            }\n\n          wordType = 2\n          /* Separator */\n          ;\n        } else if (chClass === 1\n      /* Whitespace */\n      ) {\n          if (wordType !== 0\n          /* None */\n          ) {\n              return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n            }\n        }\n    }\n\n    if (wordType !== 0\n    /* None */\n    ) {\n        return this._createWord(lineContent, wordType, 1\n        /* Whitespace */\n        , 0, this._findEndOfWord(lineContent, wordSeparators, wordType, 0));\n      }\n\n    return null;\n  };\n\n  WordOperations._findEndOfWord = function (lineContent, wordSeparators, wordType, startIndex) {\n    var len = lineContent.length;\n\n    for (var chIndex = startIndex; chIndex < len; chIndex++) {\n      var chCode = lineContent.charCodeAt(chIndex);\n      var chClass = wordSeparators.get(chCode);\n\n      if (chClass === 1\n      /* Whitespace */\n      ) {\n          return chIndex;\n        }\n\n      if (wordType === 1\n      /* Regular */\n      && chClass === 2\n      /* WordSeparator */\n      ) {\n          return chIndex;\n        }\n\n      if (wordType === 2\n      /* Separator */\n      && chClass === 0\n      /* Regular */\n      ) {\n          return chIndex;\n        }\n    }\n\n    return len;\n  };\n\n  WordOperations._findNextWordOnLine = function (wordSeparators, model, position) {\n    var lineContent = model.getLineContent(position.lineNumber);\n    return this._doFindNextWordOnLine(lineContent, wordSeparators, position);\n  };\n\n  WordOperations._doFindNextWordOnLine = function (lineContent, wordSeparators, position) {\n    var wordType = 0\n    /* None */\n    ;\n    var len = lineContent.length;\n\n    for (var chIndex = position.column - 1; chIndex < len; chIndex++) {\n      var chCode = lineContent.charCodeAt(chIndex);\n      var chClass = wordSeparators.get(chCode);\n\n      if (chClass === 0\n      /* Regular */\n      ) {\n          if (wordType === 2\n          /* Separator */\n          ) {\n              return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n            }\n\n          wordType = 1\n          /* Regular */\n          ;\n        } else if (chClass === 2\n      /* WordSeparator */\n      ) {\n          if (wordType === 1\n          /* Regular */\n          ) {\n              return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n            }\n\n          wordType = 2\n          /* Separator */\n          ;\n        } else if (chClass === 1\n      /* Whitespace */\n      ) {\n          if (wordType !== 0\n          /* None */\n          ) {\n              return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n            }\n        }\n    }\n\n    if (wordType !== 0\n    /* None */\n    ) {\n        return this._createWord(lineContent, wordType, 1\n        /* Whitespace */\n        , this._findStartOfWord(lineContent, wordSeparators, wordType, len - 1), len);\n      }\n\n    return null;\n  };\n\n  WordOperations._findStartOfWord = function (lineContent, wordSeparators, wordType, startIndex) {\n    for (var chIndex = startIndex; chIndex >= 0; chIndex--) {\n      var chCode = lineContent.charCodeAt(chIndex);\n      var chClass = wordSeparators.get(chCode);\n\n      if (chClass === 1\n      /* Whitespace */\n      ) {\n          return chIndex + 1;\n        }\n\n      if (wordType === 1\n      /* Regular */\n      && chClass === 2\n      /* WordSeparator */\n      ) {\n          return chIndex + 1;\n        }\n\n      if (wordType === 2\n      /* Separator */\n      && chClass === 0\n      /* Regular */\n      ) {\n          return chIndex + 1;\n        }\n    }\n\n    return 0;\n  };\n\n  WordOperations.moveWordLeft = function (wordSeparators, model, position, wordNavigationType) {\n    var lineNumber = position.lineNumber;\n    var column = position.column;\n    var movedToPreviousLine = false;\n\n    if (column === 1) {\n      if (lineNumber > 1) {\n        movedToPreviousLine = true;\n        lineNumber = lineNumber - 1;\n        column = model.getLineMaxColumn(lineNumber);\n      }\n    }\n\n    var prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, column));\n\n    if (wordNavigationType === 0\n    /* WordStart */\n    ) {\n        if (prevWordOnLine && !movedToPreviousLine) {\n          // Special case for Visual Studio compatibility:\n          // when starting in the trim whitespace at the end of a line,\n          // go to the end of the last word\n          var lastWhitespaceColumn = model.getLineLastNonWhitespaceColumn(lineNumber);\n\n          if (lastWhitespaceColumn < column) {\n            return new Position(lineNumber, prevWordOnLine.end + 1);\n          }\n        }\n\n        return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n      }\n\n    if (wordNavigationType === 1\n    /* WordStartFast */\n    ) {\n        if (prevWordOnLine && prevWordOnLine.wordType === 2\n        /* Separator */\n        && prevWordOnLine.end - prevWordOnLine.start === 1 && prevWordOnLine.nextCharClass === 0\n        /* Regular */\n        ) {\n            // Skip over a word made up of one single separator and followed by a regular character\n            prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n          }\n\n        return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n      }\n\n    if (wordNavigationType === 3\n    /* WordAccessibility */\n    ) {\n        while (prevWordOnLine && prevWordOnLine.wordType === 2\n        /* Separator */\n        ) {\n          // Skip over words made up of only separators\n          prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n        }\n\n        return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n      } // We are stopping at the ending of words\n\n\n    if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\n      prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n    }\n\n    return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.end + 1 : 1);\n  };\n\n  WordOperations._moveWordPartLeft = function (model, position) {\n    var lineNumber = position.lineNumber;\n    var maxColumn = model.getLineMaxColumn(lineNumber);\n\n    if (position.column === 1) {\n      return lineNumber > 1 ? new Position(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)) : position;\n    }\n\n    var lineContent = model.getLineContent(lineNumber);\n\n    for (var column = position.column - 1; column > 1; column--) {\n      var left = lineContent.charCodeAt(column - 2);\n      var right = lineContent.charCodeAt(column - 1);\n\n      if (left !== 95\n      /* Underline */\n      && right === 95\n      /* Underline */\n      ) {\n          // snake_case_variables\n          return new Position(lineNumber, column);\n        }\n\n      if (strings.isLowerAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n        // camelCaseVariables\n        return new Position(lineNumber, column);\n      }\n\n      if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n        // thisIsACamelCaseWithOneLetterWords\n        if (column + 1 < maxColumn) {\n          var rightRight = lineContent.charCodeAt(column);\n\n          if (strings.isLowerAsciiLetter(rightRight)) {\n            return new Position(lineNumber, column);\n          }\n        }\n      }\n    }\n\n    return new Position(lineNumber, 1);\n  };\n\n  WordOperations.moveWordRight = function (wordSeparators, model, position, wordNavigationType) {\n    var lineNumber = position.lineNumber;\n    var column = position.column;\n    var movedDown = false;\n\n    if (column === model.getLineMaxColumn(lineNumber)) {\n      if (lineNumber < model.getLineCount()) {\n        movedDown = true;\n        lineNumber = lineNumber + 1;\n        column = 1;\n      }\n    }\n\n    var nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, column));\n\n    if (wordNavigationType === 2\n    /* WordEnd */\n    ) {\n        if (nextWordOnLine && nextWordOnLine.wordType === 2\n        /* Separator */\n        ) {\n            if (nextWordOnLine.end - nextWordOnLine.start === 1 && nextWordOnLine.nextCharClass === 0\n            /* Regular */\n            ) {\n                // Skip over a word made up of one single separator and followed by a regular character\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n              }\n          }\n\n        if (nextWordOnLine) {\n          column = nextWordOnLine.end + 1;\n        } else {\n          column = model.getLineMaxColumn(lineNumber);\n        }\n      } else if (wordNavigationType === 3\n    /* WordAccessibility */\n    ) {\n        if (movedDown) {\n          // If we move to the next line, pretend that the cursor is right before the first character.\n          // This is needed when the first word starts right at the first character - and in order not to miss it,\n          // we need to start before.\n          column = 0;\n        }\n\n        while (nextWordOnLine && (nextWordOnLine.wordType === 2\n        /* Separator */\n        || nextWordOnLine.start + 1 <= column)) {\n          // Skip over a word made up of one single separator\n          // Also skip over word if it begins before current cursor position to ascertain we're moving forward at least 1 character.\n          nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n        }\n\n        if (nextWordOnLine) {\n          column = nextWordOnLine.start + 1;\n        } else {\n          column = model.getLineMaxColumn(lineNumber);\n        }\n      } else {\n      if (nextWordOnLine && !movedDown && column >= nextWordOnLine.start + 1) {\n        nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n      }\n\n      if (nextWordOnLine) {\n        column = nextWordOnLine.start + 1;\n      } else {\n        column = model.getLineMaxColumn(lineNumber);\n      }\n    }\n\n    return new Position(lineNumber, column);\n  };\n\n  WordOperations._moveWordPartRight = function (model, position) {\n    var lineNumber = position.lineNumber;\n    var maxColumn = model.getLineMaxColumn(lineNumber);\n\n    if (position.column === maxColumn) {\n      return lineNumber < model.getLineCount() ? new Position(lineNumber + 1, 1) : position;\n    }\n\n    var lineContent = model.getLineContent(lineNumber);\n\n    for (var column = position.column + 1; column < maxColumn; column++) {\n      var left = lineContent.charCodeAt(column - 2);\n      var right = lineContent.charCodeAt(column - 1);\n\n      if (left === 95\n      /* Underline */\n      && right !== 95\n      /* Underline */\n      ) {\n          // snake_case_variables\n          return new Position(lineNumber, column);\n        }\n\n      if (strings.isLowerAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n        // camelCaseVariables\n        return new Position(lineNumber, column);\n      }\n\n      if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n        // thisIsACamelCaseWithOneLetterWords\n        if (column + 1 < maxColumn) {\n          var rightRight = lineContent.charCodeAt(column);\n\n          if (strings.isLowerAsciiLetter(rightRight)) {\n            return new Position(lineNumber, column);\n          }\n        }\n      }\n    }\n\n    return new Position(lineNumber, maxColumn);\n  };\n\n  WordOperations._deleteWordLeftWhitespace = function (model, position) {\n    var lineContent = model.getLineContent(position.lineNumber);\n    var startIndex = position.column - 2;\n    var lastNonWhitespace = strings.lastNonWhitespaceIndex(lineContent, startIndex);\n\n    if (lastNonWhitespace + 1 < startIndex) {\n      return new Range(position.lineNumber, lastNonWhitespace + 2, position.lineNumber, position.column);\n    }\n\n    return null;\n  };\n\n  WordOperations.deleteWordLeft = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n    if (!selection.isEmpty()) {\n      return selection;\n    }\n\n    var position = new Position(selection.positionLineNumber, selection.positionColumn);\n    var lineNumber = position.lineNumber;\n    var column = position.column;\n\n    if (lineNumber === 1 && column === 1) {\n      // Ignore deleting at beginning of file\n      return null;\n    }\n\n    if (whitespaceHeuristics) {\n      var r = this._deleteWordLeftWhitespace(model, position);\n\n      if (r) {\n        return r;\n      }\n    }\n\n    var prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n\n    if (wordNavigationType === 0\n    /* WordStart */\n    ) {\n        if (prevWordOnLine) {\n          column = prevWordOnLine.start + 1;\n        } else {\n          if (column > 1) {\n            column = 1;\n          } else {\n            lineNumber--;\n            column = model.getLineMaxColumn(lineNumber);\n          }\n        }\n      } else {\n      if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\n        prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n      }\n\n      if (prevWordOnLine) {\n        column = prevWordOnLine.end + 1;\n      } else {\n        if (column > 1) {\n          column = 1;\n        } else {\n          lineNumber--;\n          column = model.getLineMaxColumn(lineNumber);\n        }\n      }\n    }\n\n    return new Range(lineNumber, column, position.lineNumber, position.column);\n  };\n\n  WordOperations._deleteWordPartLeft = function (model, selection) {\n    if (!selection.isEmpty()) {\n      return selection;\n    }\n\n    var pos = selection.getPosition();\n\n    var toPosition = WordOperations._moveWordPartLeft(model, pos);\n\n    return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\n  };\n\n  WordOperations._findFirstNonWhitespaceChar = function (str, startIndex) {\n    var len = str.length;\n\n    for (var chIndex = startIndex; chIndex < len; chIndex++) {\n      var ch = str.charAt(chIndex);\n\n      if (ch !== ' ' && ch !== '\\t') {\n        return chIndex;\n      }\n    }\n\n    return len;\n  };\n\n  WordOperations._deleteWordRightWhitespace = function (model, position) {\n    var lineContent = model.getLineContent(position.lineNumber);\n    var startIndex = position.column - 1;\n\n    var firstNonWhitespace = this._findFirstNonWhitespaceChar(lineContent, startIndex);\n\n    if (startIndex + 1 < firstNonWhitespace) {\n      // bingo\n      return new Range(position.lineNumber, position.column, position.lineNumber, firstNonWhitespace + 1);\n    }\n\n    return null;\n  };\n\n  WordOperations.deleteWordRight = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n    if (!selection.isEmpty()) {\n      return selection;\n    }\n\n    var position = new Position(selection.positionLineNumber, selection.positionColumn);\n    var lineNumber = position.lineNumber;\n    var column = position.column;\n    var lineCount = model.getLineCount();\n    var maxColumn = model.getLineMaxColumn(lineNumber);\n\n    if (lineNumber === lineCount && column === maxColumn) {\n      // Ignore deleting at end of file\n      return null;\n    }\n\n    if (whitespaceHeuristics) {\n      var r = this._deleteWordRightWhitespace(model, position);\n\n      if (r) {\n        return r;\n      }\n    }\n\n    var nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n\n    if (wordNavigationType === 2\n    /* WordEnd */\n    ) {\n        if (nextWordOnLine) {\n          column = nextWordOnLine.end + 1;\n        } else {\n          if (column < maxColumn || lineNumber === lineCount) {\n            column = maxColumn;\n          } else {\n            lineNumber++;\n            nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\n\n            if (nextWordOnLine) {\n              column = nextWordOnLine.start + 1;\n            } else {\n              column = model.getLineMaxColumn(lineNumber);\n            }\n          }\n        }\n      } else {\n      if (nextWordOnLine && column >= nextWordOnLine.start + 1) {\n        nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n      }\n\n      if (nextWordOnLine) {\n        column = nextWordOnLine.start + 1;\n      } else {\n        if (column < maxColumn || lineNumber === lineCount) {\n          column = maxColumn;\n        } else {\n          lineNumber++;\n          nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\n\n          if (nextWordOnLine) {\n            column = nextWordOnLine.start + 1;\n          } else {\n            column = model.getLineMaxColumn(lineNumber);\n          }\n        }\n      }\n    }\n\n    return new Range(lineNumber, column, position.lineNumber, position.column);\n  };\n\n  WordOperations._deleteWordPartRight = function (model, selection) {\n    if (!selection.isEmpty()) {\n      return selection;\n    }\n\n    var pos = selection.getPosition();\n\n    var toPosition = WordOperations._moveWordPartRight(model, pos);\n\n    return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\n  };\n\n  WordOperations.word = function (config, model, cursor, inSelectionMode, position) {\n    var wordSeparators = getMapForWordSeparators(config.wordSeparators);\n\n    var prevWord = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n\n    var nextWord = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n\n    if (!inSelectionMode) {\n      // Entering word selection for the first time\n      var startColumn_1;\n      var endColumn_1;\n\n      if (prevWord && prevWord.wordType === 1\n      /* Regular */\n      && prevWord.start <= position.column - 1 && position.column - 1 <= prevWord.end) {\n        // isTouchingPrevWord\n        startColumn_1 = prevWord.start + 1;\n        endColumn_1 = prevWord.end + 1;\n      } else if (nextWord && nextWord.wordType === 1\n      /* Regular */\n      && nextWord.start <= position.column - 1 && position.column - 1 <= nextWord.end) {\n        // isTouchingNextWord\n        startColumn_1 = nextWord.start + 1;\n        endColumn_1 = nextWord.end + 1;\n      } else {\n        if (prevWord) {\n          startColumn_1 = prevWord.end + 1;\n        } else {\n          startColumn_1 = 1;\n        }\n\n        if (nextWord) {\n          endColumn_1 = nextWord.start + 1;\n        } else {\n          endColumn_1 = model.getLineMaxColumn(position.lineNumber);\n        }\n      }\n\n      return new SingleCursorState(new Range(position.lineNumber, startColumn_1, position.lineNumber, endColumn_1), 0, new Position(position.lineNumber, endColumn_1), 0);\n    }\n\n    var startColumn;\n    var endColumn;\n\n    if (prevWord && prevWord.wordType === 1\n    /* Regular */\n    && prevWord.start < position.column - 1 && position.column - 1 < prevWord.end) {\n      // isInsidePrevWord\n      startColumn = prevWord.start + 1;\n      endColumn = prevWord.end + 1;\n    } else if (nextWord && nextWord.wordType === 1\n    /* Regular */\n    && nextWord.start < position.column - 1 && position.column - 1 < nextWord.end) {\n      // isInsideNextWord\n      startColumn = nextWord.start + 1;\n      endColumn = nextWord.end + 1;\n    } else {\n      startColumn = position.column;\n      endColumn = position.column;\n    }\n\n    var lineNumber = position.lineNumber;\n    var column;\n\n    if (cursor.selectionStart.containsPosition(position)) {\n      column = cursor.selectionStart.endColumn;\n    } else if (position.isBeforeOrEqual(cursor.selectionStart.getStartPosition())) {\n      column = startColumn;\n      var possiblePosition = new Position(lineNumber, column);\n\n      if (cursor.selectionStart.containsPosition(possiblePosition)) {\n        column = cursor.selectionStart.endColumn;\n      }\n    } else {\n      column = endColumn;\n      var possiblePosition = new Position(lineNumber, column);\n\n      if (cursor.selectionStart.containsPosition(possiblePosition)) {\n        column = cursor.selectionStart.startColumn;\n      }\n    }\n\n    return cursor.move(true, lineNumber, column, 0);\n  };\n\n  return WordOperations;\n}();\n\nexport { WordOperations };\n\nvar WordPartOperations =\n/** @class */\nfunction (_super) {\n  __extends(WordPartOperations, _super);\n\n  function WordPartOperations() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  WordPartOperations.deleteWordPartLeft = function (wordSeparators, model, selection, whitespaceHeuristics) {\n    var candidates = enforceDefined([WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, 0\n    /* WordStart */\n    ), WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, 2\n    /* WordEnd */\n    ), WordOperations._deleteWordPartLeft(model, selection)]);\n    candidates.sort(Range.compareRangesUsingEnds);\n    return candidates[2];\n  };\n\n  WordPartOperations.deleteWordPartRight = function (wordSeparators, model, selection, whitespaceHeuristics) {\n    var candidates = enforceDefined([WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, 0\n    /* WordStart */\n    ), WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, 2\n    /* WordEnd */\n    ), WordOperations._deleteWordPartRight(model, selection)]);\n    candidates.sort(Range.compareRangesUsingStarts);\n    return candidates[0];\n  };\n\n  WordPartOperations.moveWordPartLeft = function (wordSeparators, model, position) {\n    var candidates = enforceDefined([WordOperations.moveWordLeft(wordSeparators, model, position, 0\n    /* WordStart */\n    ), WordOperations.moveWordLeft(wordSeparators, model, position, 2\n    /* WordEnd */\n    ), WordOperations._moveWordPartLeft(model, position)]);\n    candidates.sort(Position.compare);\n    return candidates[2];\n  };\n\n  WordPartOperations.moveWordPartRight = function (wordSeparators, model, position) {\n    var candidates = enforceDefined([WordOperations.moveWordRight(wordSeparators, model, position, 0\n    /* WordStart */\n    ), WordOperations.moveWordRight(wordSeparators, model, position, 2\n    /* WordEnd */\n    ), WordOperations._moveWordPartRight(model, position)]);\n    candidates.sort(Position.compare);\n    return candidates[0];\n  };\n\n  return WordPartOperations;\n}(WordOperations);\n\nexport { WordPartOperations };\n\nfunction enforceDefined(arr) {\n  return arr.filter(function (el) {\n    return Boolean(el);\n  });\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorWordOperations.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","strings","SingleCursorState","getMapForWordSeparators","Position","Range","WordOperations","_createWord","lineContent","wordType","nextCharClass","start","end","_findPreviousWordOnLine","wordSeparators","model","position","getLineContent","lineNumber","_doFindPreviousWordOnLine","chIndex","column","chCode","charCodeAt","chClass","get","_findEndOfWord","startIndex","len","length","_findNextWordOnLine","_doFindNextWordOnLine","_findStartOfWord","moveWordLeft","wordNavigationType","movedToPreviousLine","getLineMaxColumn","prevWordOnLine","lastWhitespaceColumn","getLineLastNonWhitespaceColumn","_moveWordPartLeft","maxColumn","left","right","isLowerAsciiLetter","isUpperAsciiLetter","rightRight","moveWordRight","movedDown","getLineCount","nextWordOnLine","_moveWordPartRight","_deleteWordLeftWhitespace","lastNonWhitespace","lastNonWhitespaceIndex","deleteWordLeft","selection","whitespaceHeuristics","isEmpty","positionLineNumber","positionColumn","r","_deleteWordPartLeft","pos","getPosition","toPosition","_findFirstNonWhitespaceChar","str","ch","charAt","_deleteWordRightWhitespace","firstNonWhitespace","deleteWordRight","lineCount","_deleteWordPartRight","word","config","cursor","inSelectionMode","prevWord","nextWord","startColumn_1","endColumn_1","startColumn","endColumn","selectionStart","containsPosition","isBeforeOrEqual","getStartPosition","possiblePosition","move","WordPartOperations","_super","apply","arguments","deleteWordPartLeft","candidates","enforceDefined","sort","compareRangesUsingEnds","deleteWordPartRight","compareRangesUsingStarts","moveWordPartLeft","compare","moveWordPartRight","arr","filter","el","Boolean"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { SingleCursorState } from './cursorCommon.js';\r\nimport { getMapForWordSeparators } from './wordCharacterClassifier.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nvar WordOperations = /** @class */ (function () {\r\n    function WordOperations() {\r\n    }\r\n    WordOperations._createWord = function (lineContent, wordType, nextCharClass, start, end) {\r\n        // console.log('WORD ==> ' + start + ' => ' + end + ':::: <<<' + lineContent.substring(start, end) + '>>>');\r\n        return { start: start, end: end, wordType: wordType, nextCharClass: nextCharClass };\r\n    };\r\n    WordOperations._findPreviousWordOnLine = function (wordSeparators, model, position) {\r\n        var lineContent = model.getLineContent(position.lineNumber);\r\n        return this._doFindPreviousWordOnLine(lineContent, wordSeparators, position);\r\n    };\r\n    WordOperations._doFindPreviousWordOnLine = function (lineContent, wordSeparators, position) {\r\n        var wordType = 0 /* None */;\r\n        for (var chIndex = position.column - 2; chIndex >= 0; chIndex--) {\r\n            var chCode = lineContent.charCodeAt(chIndex);\r\n            var chClass = wordSeparators.get(chCode);\r\n            if (chClass === 0 /* Regular */) {\r\n                if (wordType === 2 /* Separator */) {\r\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\r\n                }\r\n                wordType = 1 /* Regular */;\r\n            }\r\n            else if (chClass === 2 /* WordSeparator */) {\r\n                if (wordType === 1 /* Regular */) {\r\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\r\n                }\r\n                wordType = 2 /* Separator */;\r\n            }\r\n            else if (chClass === 1 /* Whitespace */) {\r\n                if (wordType !== 0 /* None */) {\r\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\r\n                }\r\n            }\r\n        }\r\n        if (wordType !== 0 /* None */) {\r\n            return this._createWord(lineContent, wordType, 1 /* Whitespace */, 0, this._findEndOfWord(lineContent, wordSeparators, wordType, 0));\r\n        }\r\n        return null;\r\n    };\r\n    WordOperations._findEndOfWord = function (lineContent, wordSeparators, wordType, startIndex) {\r\n        var len = lineContent.length;\r\n        for (var chIndex = startIndex; chIndex < len; chIndex++) {\r\n            var chCode = lineContent.charCodeAt(chIndex);\r\n            var chClass = wordSeparators.get(chCode);\r\n            if (chClass === 1 /* Whitespace */) {\r\n                return chIndex;\r\n            }\r\n            if (wordType === 1 /* Regular */ && chClass === 2 /* WordSeparator */) {\r\n                return chIndex;\r\n            }\r\n            if (wordType === 2 /* Separator */ && chClass === 0 /* Regular */) {\r\n                return chIndex;\r\n            }\r\n        }\r\n        return len;\r\n    };\r\n    WordOperations._findNextWordOnLine = function (wordSeparators, model, position) {\r\n        var lineContent = model.getLineContent(position.lineNumber);\r\n        return this._doFindNextWordOnLine(lineContent, wordSeparators, position);\r\n    };\r\n    WordOperations._doFindNextWordOnLine = function (lineContent, wordSeparators, position) {\r\n        var wordType = 0 /* None */;\r\n        var len = lineContent.length;\r\n        for (var chIndex = position.column - 1; chIndex < len; chIndex++) {\r\n            var chCode = lineContent.charCodeAt(chIndex);\r\n            var chClass = wordSeparators.get(chCode);\r\n            if (chClass === 0 /* Regular */) {\r\n                if (wordType === 2 /* Separator */) {\r\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\r\n                }\r\n                wordType = 1 /* Regular */;\r\n            }\r\n            else if (chClass === 2 /* WordSeparator */) {\r\n                if (wordType === 1 /* Regular */) {\r\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\r\n                }\r\n                wordType = 2 /* Separator */;\r\n            }\r\n            else if (chClass === 1 /* Whitespace */) {\r\n                if (wordType !== 0 /* None */) {\r\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\r\n                }\r\n            }\r\n        }\r\n        if (wordType !== 0 /* None */) {\r\n            return this._createWord(lineContent, wordType, 1 /* Whitespace */, this._findStartOfWord(lineContent, wordSeparators, wordType, len - 1), len);\r\n        }\r\n        return null;\r\n    };\r\n    WordOperations._findStartOfWord = function (lineContent, wordSeparators, wordType, startIndex) {\r\n        for (var chIndex = startIndex; chIndex >= 0; chIndex--) {\r\n            var chCode = lineContent.charCodeAt(chIndex);\r\n            var chClass = wordSeparators.get(chCode);\r\n            if (chClass === 1 /* Whitespace */) {\r\n                return chIndex + 1;\r\n            }\r\n            if (wordType === 1 /* Regular */ && chClass === 2 /* WordSeparator */) {\r\n                return chIndex + 1;\r\n            }\r\n            if (wordType === 2 /* Separator */ && chClass === 0 /* Regular */) {\r\n                return chIndex + 1;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    WordOperations.moveWordLeft = function (wordSeparators, model, position, wordNavigationType) {\r\n        var lineNumber = position.lineNumber;\r\n        var column = position.column;\r\n        var movedToPreviousLine = false;\r\n        if (column === 1) {\r\n            if (lineNumber > 1) {\r\n                movedToPreviousLine = true;\r\n                lineNumber = lineNumber - 1;\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n        }\r\n        var prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, column));\r\n        if (wordNavigationType === 0 /* WordStart */) {\r\n            if (prevWordOnLine && !movedToPreviousLine) {\r\n                // Special case for Visual Studio compatibility:\r\n                // when starting in the trim whitespace at the end of a line,\r\n                // go to the end of the last word\r\n                var lastWhitespaceColumn = model.getLineLastNonWhitespaceColumn(lineNumber);\r\n                if (lastWhitespaceColumn < column) {\r\n                    return new Position(lineNumber, prevWordOnLine.end + 1);\r\n                }\r\n            }\r\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\r\n        }\r\n        if (wordNavigationType === 1 /* WordStartFast */) {\r\n            if (prevWordOnLine\r\n                && prevWordOnLine.wordType === 2 /* Separator */\r\n                && prevWordOnLine.end - prevWordOnLine.start === 1\r\n                && prevWordOnLine.nextCharClass === 0 /* Regular */) {\r\n                // Skip over a word made up of one single separator and followed by a regular character\r\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\r\n            }\r\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\r\n        }\r\n        if (wordNavigationType === 3 /* WordAccessibility */) {\r\n            while (prevWordOnLine\r\n                && prevWordOnLine.wordType === 2 /* Separator */) {\r\n                // Skip over words made up of only separators\r\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\r\n            }\r\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\r\n        }\r\n        // We are stopping at the ending of words\r\n        if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\r\n            prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\r\n        }\r\n        return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.end + 1 : 1);\r\n    };\r\n    WordOperations._moveWordPartLeft = function (model, position) {\r\n        var lineNumber = position.lineNumber;\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (position.column === 1) {\r\n            return (lineNumber > 1 ? new Position(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)) : position);\r\n        }\r\n        var lineContent = model.getLineContent(lineNumber);\r\n        for (var column = position.column - 1; column > 1; column--) {\r\n            var left = lineContent.charCodeAt(column - 2);\r\n            var right = lineContent.charCodeAt(column - 1);\r\n            if (left !== 95 /* Underline */ && right === 95 /* Underline */) {\r\n                // snake_case_variables\r\n                return new Position(lineNumber, column);\r\n            }\r\n            if (strings.isLowerAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\r\n                // camelCaseVariables\r\n                return new Position(lineNumber, column);\r\n            }\r\n            if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\r\n                // thisIsACamelCaseWithOneLetterWords\r\n                if (column + 1 < maxColumn) {\r\n                    var rightRight = lineContent.charCodeAt(column);\r\n                    if (strings.isLowerAsciiLetter(rightRight)) {\r\n                        return new Position(lineNumber, column);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new Position(lineNumber, 1);\r\n    };\r\n    WordOperations.moveWordRight = function (wordSeparators, model, position, wordNavigationType) {\r\n        var lineNumber = position.lineNumber;\r\n        var column = position.column;\r\n        var movedDown = false;\r\n        if (column === model.getLineMaxColumn(lineNumber)) {\r\n            if (lineNumber < model.getLineCount()) {\r\n                movedDown = true;\r\n                lineNumber = lineNumber + 1;\r\n                column = 1;\r\n            }\r\n        }\r\n        var nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, column));\r\n        if (wordNavigationType === 2 /* WordEnd */) {\r\n            if (nextWordOnLine && nextWordOnLine.wordType === 2 /* Separator */) {\r\n                if (nextWordOnLine.end - nextWordOnLine.start === 1 && nextWordOnLine.nextCharClass === 0 /* Regular */) {\r\n                    // Skip over a word made up of one single separator and followed by a regular character\r\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\r\n                }\r\n            }\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.end + 1;\r\n            }\r\n            else {\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n        }\r\n        else if (wordNavigationType === 3 /* WordAccessibility */) {\r\n            if (movedDown) {\r\n                // If we move to the next line, pretend that the cursor is right before the first character.\r\n                // This is needed when the first word starts right at the first character - and in order not to miss it,\r\n                // we need to start before.\r\n                column = 0;\r\n            }\r\n            while (nextWordOnLine\r\n                && (nextWordOnLine.wordType === 2 /* Separator */\r\n                    || nextWordOnLine.start + 1 <= column)) {\r\n                // Skip over a word made up of one single separator\r\n                // Also skip over word if it begins before current cursor position to ascertain we're moving forward at least 1 character.\r\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\r\n            }\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.start + 1;\r\n            }\r\n            else {\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n        }\r\n        else {\r\n            if (nextWordOnLine && !movedDown && column >= nextWordOnLine.start + 1) {\r\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\r\n            }\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.start + 1;\r\n            }\r\n            else {\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n        }\r\n        return new Position(lineNumber, column);\r\n    };\r\n    WordOperations._moveWordPartRight = function (model, position) {\r\n        var lineNumber = position.lineNumber;\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (position.column === maxColumn) {\r\n            return (lineNumber < model.getLineCount() ? new Position(lineNumber + 1, 1) : position);\r\n        }\r\n        var lineContent = model.getLineContent(lineNumber);\r\n        for (var column = position.column + 1; column < maxColumn; column++) {\r\n            var left = lineContent.charCodeAt(column - 2);\r\n            var right = lineContent.charCodeAt(column - 1);\r\n            if (left === 95 /* Underline */ && right !== 95 /* Underline */) {\r\n                // snake_case_variables\r\n                return new Position(lineNumber, column);\r\n            }\r\n            if (strings.isLowerAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\r\n                // camelCaseVariables\r\n                return new Position(lineNumber, column);\r\n            }\r\n            if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\r\n                // thisIsACamelCaseWithOneLetterWords\r\n                if (column + 1 < maxColumn) {\r\n                    var rightRight = lineContent.charCodeAt(column);\r\n                    if (strings.isLowerAsciiLetter(rightRight)) {\r\n                        return new Position(lineNumber, column);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new Position(lineNumber, maxColumn);\r\n    };\r\n    WordOperations._deleteWordLeftWhitespace = function (model, position) {\r\n        var lineContent = model.getLineContent(position.lineNumber);\r\n        var startIndex = position.column - 2;\r\n        var lastNonWhitespace = strings.lastNonWhitespaceIndex(lineContent, startIndex);\r\n        if (lastNonWhitespace + 1 < startIndex) {\r\n            return new Range(position.lineNumber, lastNonWhitespace + 2, position.lineNumber, position.column);\r\n        }\r\n        return null;\r\n    };\r\n    WordOperations.deleteWordLeft = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\r\n        if (!selection.isEmpty()) {\r\n            return selection;\r\n        }\r\n        var position = new Position(selection.positionLineNumber, selection.positionColumn);\r\n        var lineNumber = position.lineNumber;\r\n        var column = position.column;\r\n        if (lineNumber === 1 && column === 1) {\r\n            // Ignore deleting at beginning of file\r\n            return null;\r\n        }\r\n        if (whitespaceHeuristics) {\r\n            var r = this._deleteWordLeftWhitespace(model, position);\r\n            if (r) {\r\n                return r;\r\n            }\r\n        }\r\n        var prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\r\n        if (wordNavigationType === 0 /* WordStart */) {\r\n            if (prevWordOnLine) {\r\n                column = prevWordOnLine.start + 1;\r\n            }\r\n            else {\r\n                if (column > 1) {\r\n                    column = 1;\r\n                }\r\n                else {\r\n                    lineNumber--;\r\n                    column = model.getLineMaxColumn(lineNumber);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\r\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\r\n            }\r\n            if (prevWordOnLine) {\r\n                column = prevWordOnLine.end + 1;\r\n            }\r\n            else {\r\n                if (column > 1) {\r\n                    column = 1;\r\n                }\r\n                else {\r\n                    lineNumber--;\r\n                    column = model.getLineMaxColumn(lineNumber);\r\n                }\r\n            }\r\n        }\r\n        return new Range(lineNumber, column, position.lineNumber, position.column);\r\n    };\r\n    WordOperations._deleteWordPartLeft = function (model, selection) {\r\n        if (!selection.isEmpty()) {\r\n            return selection;\r\n        }\r\n        var pos = selection.getPosition();\r\n        var toPosition = WordOperations._moveWordPartLeft(model, pos);\r\n        return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\r\n    };\r\n    WordOperations._findFirstNonWhitespaceChar = function (str, startIndex) {\r\n        var len = str.length;\r\n        for (var chIndex = startIndex; chIndex < len; chIndex++) {\r\n            var ch = str.charAt(chIndex);\r\n            if (ch !== ' ' && ch !== '\\t') {\r\n                return chIndex;\r\n            }\r\n        }\r\n        return len;\r\n    };\r\n    WordOperations._deleteWordRightWhitespace = function (model, position) {\r\n        var lineContent = model.getLineContent(position.lineNumber);\r\n        var startIndex = position.column - 1;\r\n        var firstNonWhitespace = this._findFirstNonWhitespaceChar(lineContent, startIndex);\r\n        if (startIndex + 1 < firstNonWhitespace) {\r\n            // bingo\r\n            return new Range(position.lineNumber, position.column, position.lineNumber, firstNonWhitespace + 1);\r\n        }\r\n        return null;\r\n    };\r\n    WordOperations.deleteWordRight = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\r\n        if (!selection.isEmpty()) {\r\n            return selection;\r\n        }\r\n        var position = new Position(selection.positionLineNumber, selection.positionColumn);\r\n        var lineNumber = position.lineNumber;\r\n        var column = position.column;\r\n        var lineCount = model.getLineCount();\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (lineNumber === lineCount && column === maxColumn) {\r\n            // Ignore deleting at end of file\r\n            return null;\r\n        }\r\n        if (whitespaceHeuristics) {\r\n            var r = this._deleteWordRightWhitespace(model, position);\r\n            if (r) {\r\n                return r;\r\n            }\r\n        }\r\n        var nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, position);\r\n        if (wordNavigationType === 2 /* WordEnd */) {\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.end + 1;\r\n            }\r\n            else {\r\n                if (column < maxColumn || lineNumber === lineCount) {\r\n                    column = maxColumn;\r\n                }\r\n                else {\r\n                    lineNumber++;\r\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\r\n                    if (nextWordOnLine) {\r\n                        column = nextWordOnLine.start + 1;\r\n                    }\r\n                    else {\r\n                        column = model.getLineMaxColumn(lineNumber);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (nextWordOnLine && column >= nextWordOnLine.start + 1) {\r\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\r\n            }\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.start + 1;\r\n            }\r\n            else {\r\n                if (column < maxColumn || lineNumber === lineCount) {\r\n                    column = maxColumn;\r\n                }\r\n                else {\r\n                    lineNumber++;\r\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\r\n                    if (nextWordOnLine) {\r\n                        column = nextWordOnLine.start + 1;\r\n                    }\r\n                    else {\r\n                        column = model.getLineMaxColumn(lineNumber);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new Range(lineNumber, column, position.lineNumber, position.column);\r\n    };\r\n    WordOperations._deleteWordPartRight = function (model, selection) {\r\n        if (!selection.isEmpty()) {\r\n            return selection;\r\n        }\r\n        var pos = selection.getPosition();\r\n        var toPosition = WordOperations._moveWordPartRight(model, pos);\r\n        return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\r\n    };\r\n    WordOperations.word = function (config, model, cursor, inSelectionMode, position) {\r\n        var wordSeparators = getMapForWordSeparators(config.wordSeparators);\r\n        var prevWord = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\r\n        var nextWord = WordOperations._findNextWordOnLine(wordSeparators, model, position);\r\n        if (!inSelectionMode) {\r\n            // Entering word selection for the first time\r\n            var startColumn_1;\r\n            var endColumn_1;\r\n            if (prevWord && prevWord.wordType === 1 /* Regular */ && prevWord.start <= position.column - 1 && position.column - 1 <= prevWord.end) {\r\n                // isTouchingPrevWord\r\n                startColumn_1 = prevWord.start + 1;\r\n                endColumn_1 = prevWord.end + 1;\r\n            }\r\n            else if (nextWord && nextWord.wordType === 1 /* Regular */ && nextWord.start <= position.column - 1 && position.column - 1 <= nextWord.end) {\r\n                // isTouchingNextWord\r\n                startColumn_1 = nextWord.start + 1;\r\n                endColumn_1 = nextWord.end + 1;\r\n            }\r\n            else {\r\n                if (prevWord) {\r\n                    startColumn_1 = prevWord.end + 1;\r\n                }\r\n                else {\r\n                    startColumn_1 = 1;\r\n                }\r\n                if (nextWord) {\r\n                    endColumn_1 = nextWord.start + 1;\r\n                }\r\n                else {\r\n                    endColumn_1 = model.getLineMaxColumn(position.lineNumber);\r\n                }\r\n            }\r\n            return new SingleCursorState(new Range(position.lineNumber, startColumn_1, position.lineNumber, endColumn_1), 0, new Position(position.lineNumber, endColumn_1), 0);\r\n        }\r\n        var startColumn;\r\n        var endColumn;\r\n        if (prevWord && prevWord.wordType === 1 /* Regular */ && prevWord.start < position.column - 1 && position.column - 1 < prevWord.end) {\r\n            // isInsidePrevWord\r\n            startColumn = prevWord.start + 1;\r\n            endColumn = prevWord.end + 1;\r\n        }\r\n        else if (nextWord && nextWord.wordType === 1 /* Regular */ && nextWord.start < position.column - 1 && position.column - 1 < nextWord.end) {\r\n            // isInsideNextWord\r\n            startColumn = nextWord.start + 1;\r\n            endColumn = nextWord.end + 1;\r\n        }\r\n        else {\r\n            startColumn = position.column;\r\n            endColumn = position.column;\r\n        }\r\n        var lineNumber = position.lineNumber;\r\n        var column;\r\n        if (cursor.selectionStart.containsPosition(position)) {\r\n            column = cursor.selectionStart.endColumn;\r\n        }\r\n        else if (position.isBeforeOrEqual(cursor.selectionStart.getStartPosition())) {\r\n            column = startColumn;\r\n            var possiblePosition = new Position(lineNumber, column);\r\n            if (cursor.selectionStart.containsPosition(possiblePosition)) {\r\n                column = cursor.selectionStart.endColumn;\r\n            }\r\n        }\r\n        else {\r\n            column = endColumn;\r\n            var possiblePosition = new Position(lineNumber, column);\r\n            if (cursor.selectionStart.containsPosition(possiblePosition)) {\r\n                column = cursor.selectionStart.startColumn;\r\n            }\r\n        }\r\n        return cursor.move(true, lineNumber, column, 0);\r\n    };\r\n    return WordOperations;\r\n}());\r\nexport { WordOperations };\r\nvar WordPartOperations = /** @class */ (function (_super) {\r\n    __extends(WordPartOperations, _super);\r\n    function WordPartOperations() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    WordPartOperations.deleteWordPartLeft = function (wordSeparators, model, selection, whitespaceHeuristics) {\r\n        var candidates = enforceDefined([\r\n            WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, 0 /* WordStart */),\r\n            WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, 2 /* WordEnd */),\r\n            WordOperations._deleteWordPartLeft(model, selection)\r\n        ]);\r\n        candidates.sort(Range.compareRangesUsingEnds);\r\n        return candidates[2];\r\n    };\r\n    WordPartOperations.deleteWordPartRight = function (wordSeparators, model, selection, whitespaceHeuristics) {\r\n        var candidates = enforceDefined([\r\n            WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, 0 /* WordStart */),\r\n            WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, 2 /* WordEnd */),\r\n            WordOperations._deleteWordPartRight(model, selection)\r\n        ]);\r\n        candidates.sort(Range.compareRangesUsingStarts);\r\n        return candidates[0];\r\n    };\r\n    WordPartOperations.moveWordPartLeft = function (wordSeparators, model, position) {\r\n        var candidates = enforceDefined([\r\n            WordOperations.moveWordLeft(wordSeparators, model, position, 0 /* WordStart */),\r\n            WordOperations.moveWordLeft(wordSeparators, model, position, 2 /* WordEnd */),\r\n            WordOperations._moveWordPartLeft(model, position)\r\n        ]);\r\n        candidates.sort(Position.compare);\r\n        return candidates[2];\r\n    };\r\n    WordPartOperations.moveWordPartRight = function (wordSeparators, model, position) {\r\n        var candidates = enforceDefined([\r\n            WordOperations.moveWordRight(wordSeparators, model, position, 0 /* WordStart */),\r\n            WordOperations.moveWordRight(wordSeparators, model, position, 2 /* WordEnd */),\r\n            WordOperations._moveWordPartRight(model, position)\r\n        ]);\r\n        candidates.sort(Position.compare);\r\n        return candidates[0];\r\n    };\r\n    return WordPartOperations;\r\n}(WordOperations));\r\nexport { WordPartOperations };\r\nfunction enforceDefined(arr) {\r\n    return arr.filter(function (el) { return Boolean(el); });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}