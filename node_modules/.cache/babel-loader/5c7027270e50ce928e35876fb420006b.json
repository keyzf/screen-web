{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CoreNavigationCommands } from '../controller/coreCommands.js';\nimport { Position } from '../../common/core/position.js';\nimport * as platform from '../../../base/common/platform.js';\n\nvar ViewController =\n/** @class */\nfunction () {\n  function ViewController(configuration, viewModel, outgoingEvents, commandDelegate) {\n    this.configuration = configuration;\n    this.viewModel = viewModel;\n    this.outgoingEvents = outgoingEvents;\n    this.commandDelegate = commandDelegate;\n  }\n\n  ViewController.prototype._execMouseCommand = function (editorCommand, args) {\n    args.source = 'mouse';\n    this.commandDelegate.executeEditorCommand(editorCommand, args);\n  };\n\n  ViewController.prototype.paste = function (source, text, pasteOnNewLine, multicursorText, mode) {\n    this.commandDelegate.paste(source, text, pasteOnNewLine, multicursorText, mode);\n  };\n\n  ViewController.prototype.type = function (source, text) {\n    this.commandDelegate.type(source, text);\n  };\n\n  ViewController.prototype.replacePreviousChar = function (source, text, replaceCharCnt) {\n    this.commandDelegate.replacePreviousChar(source, text, replaceCharCnt);\n  };\n\n  ViewController.prototype.compositionStart = function (source) {\n    this.commandDelegate.compositionStart(source);\n  };\n\n  ViewController.prototype.compositionEnd = function (source) {\n    this.commandDelegate.compositionEnd(source);\n  };\n\n  ViewController.prototype.cut = function (source) {\n    this.commandDelegate.cut(source);\n  };\n\n  ViewController.prototype.setSelection = function (source, modelSelection) {\n    this.commandDelegate.executeEditorCommand(CoreNavigationCommands.SetSelection, {\n      source: source,\n      selection: modelSelection\n    });\n  };\n\n  ViewController.prototype._validateViewColumn = function (viewPosition) {\n    var minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n\n    if (viewPosition.column < minColumn) {\n      return new Position(viewPosition.lineNumber, minColumn);\n    }\n\n    return viewPosition;\n  };\n\n  ViewController.prototype._hasMulticursorModifier = function (data) {\n    switch (this.configuration.options.get(59\n    /* multiCursorModifier */\n    )) {\n      case 'altKey':\n        return data.altKey;\n\n      case 'ctrlKey':\n        return data.ctrlKey;\n\n      case 'metaKey':\n        return data.metaKey;\n    }\n\n    return false;\n  };\n\n  ViewController.prototype._hasNonMulticursorModifier = function (data) {\n    switch (this.configuration.options.get(59\n    /* multiCursorModifier */\n    )) {\n      case 'altKey':\n        return data.ctrlKey || data.metaKey;\n\n      case 'ctrlKey':\n        return data.altKey || data.metaKey;\n\n      case 'metaKey':\n        return data.ctrlKey || data.altKey;\n    }\n\n    return false;\n  };\n\n  ViewController.prototype.dispatchMouse = function (data) {\n    var selectionClipboardIsOn = platform.isLinux && this.configuration.options.get(81\n    /* selectionClipboard */\n    );\n\n    if (data.middleButton && !selectionClipboardIsOn) {\n      this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\n    } else if (data.startedOnLineNumbers) {\n      // If the dragging started on the gutter, then have operations work on the entire line\n      if (this._hasMulticursorModifier(data)) {\n        if (data.inSelectionMode) {\n          this._lastCursorLineSelect(data.position);\n        } else {\n          this._createCursor(data.position, true);\n        }\n      } else {\n        if (data.inSelectionMode) {\n          this._lineSelectDrag(data.position);\n        } else {\n          this._lineSelect(data.position);\n        }\n      }\n    } else if (data.mouseDownCount >= 4) {\n      this._selectAll();\n    } else if (data.mouseDownCount === 3) {\n      if (this._hasMulticursorModifier(data)) {\n        if (data.inSelectionMode) {\n          this._lastCursorLineSelectDrag(data.position);\n        } else {\n          this._lastCursorLineSelect(data.position);\n        }\n      } else {\n        if (data.inSelectionMode) {\n          this._lineSelectDrag(data.position);\n        } else {\n          this._lineSelect(data.position);\n        }\n      }\n    } else if (data.mouseDownCount === 2) {\n      if (this._hasMulticursorModifier(data)) {\n        this._lastCursorWordSelect(data.position);\n      } else {\n        if (data.inSelectionMode) {\n          this._wordSelectDrag(data.position);\n        } else {\n          this._wordSelect(data.position);\n        }\n      }\n    } else {\n      if (this._hasMulticursorModifier(data)) {\n        if (!this._hasNonMulticursorModifier(data)) {\n          if (data.shiftKey) {\n            this._columnSelect(data.position, data.mouseColumn, true);\n          } else {\n            // Do multi-cursor operations only when purely alt is pressed\n            if (data.inSelectionMode) {\n              this._lastCursorMoveToSelect(data.position);\n            } else {\n              this._createCursor(data.position, false);\n            }\n          }\n        }\n      } else {\n        if (data.inSelectionMode) {\n          if (data.altKey) {\n            this._columnSelect(data.position, data.mouseColumn, true);\n          } else {\n            this._moveToSelect(data.position);\n          }\n        } else {\n          this.moveTo(data.position);\n        }\n      }\n    }\n  };\n\n  ViewController.prototype._usualArgs = function (viewPosition) {\n    viewPosition = this._validateViewColumn(viewPosition);\n    return {\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition\n    };\n  };\n\n  ViewController.prototype.moveTo = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.MoveTo, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._moveToSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.MoveToSelect, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._columnSelect = function (viewPosition, mouseColumn, doColumnSelect) {\n    viewPosition = this._validateViewColumn(viewPosition);\n\n    this._execMouseCommand(CoreNavigationCommands.ColumnSelect, {\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition,\n      mouseColumn: mouseColumn,\n      doColumnSelect: doColumnSelect\n    });\n  };\n\n  ViewController.prototype._createCursor = function (viewPosition, wholeLine) {\n    viewPosition = this._validateViewColumn(viewPosition);\n\n    this._execMouseCommand(CoreNavigationCommands.CreateCursor, {\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition,\n      wholeLine: wholeLine\n    });\n  };\n\n  ViewController.prototype._lastCursorMoveToSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LastCursorMoveToSelect, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._wordSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.WordSelect, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._wordSelectDrag = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.WordSelectDrag, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._lastCursorWordSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LastCursorWordSelect, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._lineSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LineSelect, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._lineSelectDrag = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LineSelectDrag, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._lastCursorLineSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LastCursorLineSelect, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._lastCursorLineSelectDrag = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LastCursorLineSelectDrag, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._selectAll = function () {\n    this._execMouseCommand(CoreNavigationCommands.SelectAll, {});\n  }; // ----------------------\n\n\n  ViewController.prototype._convertViewToModelPosition = function (viewPosition) {\n    return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n  };\n\n  ViewController.prototype.emitKeyDown = function (e) {\n    this.outgoingEvents.emitKeyDown(e);\n  };\n\n  ViewController.prototype.emitKeyUp = function (e) {\n    this.outgoingEvents.emitKeyUp(e);\n  };\n\n  ViewController.prototype.emitContextMenu = function (e) {\n    this.outgoingEvents.emitContextMenu(e);\n  };\n\n  ViewController.prototype.emitMouseMove = function (e) {\n    this.outgoingEvents.emitMouseMove(e);\n  };\n\n  ViewController.prototype.emitMouseLeave = function (e) {\n    this.outgoingEvents.emitMouseLeave(e);\n  };\n\n  ViewController.prototype.emitMouseUp = function (e) {\n    this.outgoingEvents.emitMouseUp(e);\n  };\n\n  ViewController.prototype.emitMouseDown = function (e) {\n    this.outgoingEvents.emitMouseDown(e);\n  };\n\n  ViewController.prototype.emitMouseDrag = function (e) {\n    this.outgoingEvents.emitMouseDrag(e);\n  };\n\n  ViewController.prototype.emitMouseDrop = function (e) {\n    this.outgoingEvents.emitMouseDrop(e);\n  };\n\n  ViewController.prototype.emitMouseWheel = function (e) {\n    this.outgoingEvents.emitMouseWheel(e);\n  };\n\n  return ViewController;\n}();\n\nexport { ViewController };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/browser/view/viewController.js"],"names":["CoreNavigationCommands","Position","platform","ViewController","configuration","viewModel","outgoingEvents","commandDelegate","prototype","_execMouseCommand","editorCommand","args","source","executeEditorCommand","paste","text","pasteOnNewLine","multicursorText","mode","type","replacePreviousChar","replaceCharCnt","compositionStart","compositionEnd","cut","setSelection","modelSelection","SetSelection","selection","_validateViewColumn","viewPosition","minColumn","getLineMinColumn","lineNumber","column","_hasMulticursorModifier","data","options","get","altKey","ctrlKey","metaKey","_hasNonMulticursorModifier","dispatchMouse","selectionClipboardIsOn","isLinux","middleButton","_columnSelect","position","mouseColumn","inSelectionMode","startedOnLineNumbers","_lastCursorLineSelect","_createCursor","_lineSelectDrag","_lineSelect","mouseDownCount","_selectAll","_lastCursorLineSelectDrag","_lastCursorWordSelect","_wordSelectDrag","_wordSelect","shiftKey","_lastCursorMoveToSelect","_moveToSelect","moveTo","_usualArgs","_convertViewToModelPosition","MoveTo","MoveToSelect","doColumnSelect","ColumnSelect","wholeLine","CreateCursor","LastCursorMoveToSelect","WordSelect","WordSelectDrag","LastCursorWordSelect","LineSelect","LineSelectDrag","LastCursorLineSelect","LastCursorLineSelectDrag","SelectAll","coordinatesConverter","convertViewPositionToModelPosition","emitKeyDown","e","emitKeyUp","emitContextMenu","emitMouseMove","emitMouseLeave","emitMouseUp","emitMouseDown","emitMouseDrag","emitMouseDrop","emitMouseWheel"],"mappings":"AAAA;;;;AAIA,SAASA,sBAAT,QAAuC,+BAAvC;AACA,SAASC,QAAT,QAAyB,+BAAzB;AACA,OAAO,KAAKC,QAAZ,MAA0B,kCAA1B;;AACA,IAAIC,cAAc;AAAG;AAAe,YAAY;AAC5C,WAASA,cAAT,CAAwBC,aAAxB,EAAuCC,SAAvC,EAAkDC,cAAlD,EAAkEC,eAAlE,EAAmF;AAC/E,SAAKH,aAAL,GAAqBA,aAArB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACH;;AACDJ,EAAAA,cAAc,CAACK,SAAf,CAAyBC,iBAAzB,GAA6C,UAAUC,aAAV,EAAyBC,IAAzB,EAA+B;AACxEA,IAAAA,IAAI,CAACC,MAAL,GAAc,OAAd;AACA,SAAKL,eAAL,CAAqBM,oBAArB,CAA0CH,aAA1C,EAAyDC,IAAzD;AACH,GAHD;;AAIAR,EAAAA,cAAc,CAACK,SAAf,CAAyBM,KAAzB,GAAiC,UAAUF,MAAV,EAAkBG,IAAlB,EAAwBC,cAAxB,EAAwCC,eAAxC,EAAyDC,IAAzD,EAA+D;AAC5F,SAAKX,eAAL,CAAqBO,KAArB,CAA2BF,MAA3B,EAAmCG,IAAnC,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,IAA1E;AACH,GAFD;;AAGAf,EAAAA,cAAc,CAACK,SAAf,CAAyBW,IAAzB,GAAgC,UAAUP,MAAV,EAAkBG,IAAlB,EAAwB;AACpD,SAAKR,eAAL,CAAqBY,IAArB,CAA0BP,MAA1B,EAAkCG,IAAlC;AACH,GAFD;;AAGAZ,EAAAA,cAAc,CAACK,SAAf,CAAyBY,mBAAzB,GAA+C,UAAUR,MAAV,EAAkBG,IAAlB,EAAwBM,cAAxB,EAAwC;AACnF,SAAKd,eAAL,CAAqBa,mBAArB,CAAyCR,MAAzC,EAAiDG,IAAjD,EAAuDM,cAAvD;AACH,GAFD;;AAGAlB,EAAAA,cAAc,CAACK,SAAf,CAAyBc,gBAAzB,GAA4C,UAAUV,MAAV,EAAkB;AAC1D,SAAKL,eAAL,CAAqBe,gBAArB,CAAsCV,MAAtC;AACH,GAFD;;AAGAT,EAAAA,cAAc,CAACK,SAAf,CAAyBe,cAAzB,GAA0C,UAAUX,MAAV,EAAkB;AACxD,SAAKL,eAAL,CAAqBgB,cAArB,CAAoCX,MAApC;AACH,GAFD;;AAGAT,EAAAA,cAAc,CAACK,SAAf,CAAyBgB,GAAzB,GAA+B,UAAUZ,MAAV,EAAkB;AAC7C,SAAKL,eAAL,CAAqBiB,GAArB,CAAyBZ,MAAzB;AACH,GAFD;;AAGAT,EAAAA,cAAc,CAACK,SAAf,CAAyBiB,YAAzB,GAAwC,UAAUb,MAAV,EAAkBc,cAAlB,EAAkC;AACtE,SAAKnB,eAAL,CAAqBM,oBAArB,CAA0Cb,sBAAsB,CAAC2B,YAAjE,EAA+E;AAC3Ef,MAAAA,MAAM,EAAEA,MADmE;AAE3EgB,MAAAA,SAAS,EAAEF;AAFgE,KAA/E;AAIH,GALD;;AAMAvB,EAAAA,cAAc,CAACK,SAAf,CAAyBqB,mBAAzB,GAA+C,UAAUC,YAAV,EAAwB;AACnE,QAAIC,SAAS,GAAG,KAAK1B,SAAL,CAAe2B,gBAAf,CAAgCF,YAAY,CAACG,UAA7C,CAAhB;;AACA,QAAIH,YAAY,CAACI,MAAb,GAAsBH,SAA1B,EAAqC;AACjC,aAAO,IAAI9B,QAAJ,CAAa6B,YAAY,CAACG,UAA1B,EAAsCF,SAAtC,CAAP;AACH;;AACD,WAAOD,YAAP;AACH,GAND;;AAOA3B,EAAAA,cAAc,CAACK,SAAf,CAAyB2B,uBAAzB,GAAmD,UAAUC,IAAV,EAAgB;AAC/D,YAAQ,KAAKhC,aAAL,CAAmBiC,OAAnB,CAA2BC,GAA3B,CAA+B;AAAG;AAAlC,KAAR;AACI,WAAK,QAAL;AACI,eAAOF,IAAI,CAACG,MAAZ;;AACJ,WAAK,SAAL;AACI,eAAOH,IAAI,CAACI,OAAZ;;AACJ,WAAK,SAAL;AACI,eAAOJ,IAAI,CAACK,OAAZ;AANR;;AAQA,WAAO,KAAP;AACH,GAVD;;AAWAtC,EAAAA,cAAc,CAACK,SAAf,CAAyBkC,0BAAzB,GAAsD,UAAUN,IAAV,EAAgB;AAClE,YAAQ,KAAKhC,aAAL,CAAmBiC,OAAnB,CAA2BC,GAA3B,CAA+B;AAAG;AAAlC,KAAR;AACI,WAAK,QAAL;AACI,eAAOF,IAAI,CAACI,OAAL,IAAgBJ,IAAI,CAACK,OAA5B;;AACJ,WAAK,SAAL;AACI,eAAOL,IAAI,CAACG,MAAL,IAAeH,IAAI,CAACK,OAA3B;;AACJ,WAAK,SAAL;AACI,eAAOL,IAAI,CAACI,OAAL,IAAgBJ,IAAI,CAACG,MAA5B;AANR;;AAQA,WAAO,KAAP;AACH,GAVD;;AAWApC,EAAAA,cAAc,CAACK,SAAf,CAAyBmC,aAAzB,GAAyC,UAAUP,IAAV,EAAgB;AACrD,QAAIQ,sBAAsB,GAAI1C,QAAQ,CAAC2C,OAAT,IAAoB,KAAKzC,aAAL,CAAmBiC,OAAnB,CAA2BC,GAA3B,CAA+B;AAAG;AAAlC,KAAlD;;AACA,QAAIF,IAAI,CAACU,YAAL,IAAqB,CAACF,sBAA1B,EAAkD;AAC9C,WAAKG,aAAL,CAAmBX,IAAI,CAACY,QAAxB,EAAkCZ,IAAI,CAACa,WAAvC,EAAoDb,IAAI,CAACc,eAAzD;AACH,KAFD,MAGK,IAAId,IAAI,CAACe,oBAAT,EAA+B;AAChC;AACA,UAAI,KAAKhB,uBAAL,CAA6BC,IAA7B,CAAJ,EAAwC;AACpC,YAAIA,IAAI,CAACc,eAAT,EAA0B;AACtB,eAAKE,qBAAL,CAA2BhB,IAAI,CAACY,QAAhC;AACH,SAFD,MAGK;AACD,eAAKK,aAAL,CAAmBjB,IAAI,CAACY,QAAxB,EAAkC,IAAlC;AACH;AACJ,OAPD,MAQK;AACD,YAAIZ,IAAI,CAACc,eAAT,EAA0B;AACtB,eAAKI,eAAL,CAAqBlB,IAAI,CAACY,QAA1B;AACH,SAFD,MAGK;AACD,eAAKO,WAAL,CAAiBnB,IAAI,CAACY,QAAtB;AACH;AACJ;AACJ,KAlBI,MAmBA,IAAIZ,IAAI,CAACoB,cAAL,IAAuB,CAA3B,EAA8B;AAC/B,WAAKC,UAAL;AACH,KAFI,MAGA,IAAIrB,IAAI,CAACoB,cAAL,KAAwB,CAA5B,EAA+B;AAChC,UAAI,KAAKrB,uBAAL,CAA6BC,IAA7B,CAAJ,EAAwC;AACpC,YAAIA,IAAI,CAACc,eAAT,EAA0B;AACtB,eAAKQ,yBAAL,CAA+BtB,IAAI,CAACY,QAApC;AACH,SAFD,MAGK;AACD,eAAKI,qBAAL,CAA2BhB,IAAI,CAACY,QAAhC;AACH;AACJ,OAPD,MAQK;AACD,YAAIZ,IAAI,CAACc,eAAT,EAA0B;AACtB,eAAKI,eAAL,CAAqBlB,IAAI,CAACY,QAA1B;AACH,SAFD,MAGK;AACD,eAAKO,WAAL,CAAiBnB,IAAI,CAACY,QAAtB;AACH;AACJ;AACJ,KAjBI,MAkBA,IAAIZ,IAAI,CAACoB,cAAL,KAAwB,CAA5B,EAA+B;AAChC,UAAI,KAAKrB,uBAAL,CAA6BC,IAA7B,CAAJ,EAAwC;AACpC,aAAKuB,qBAAL,CAA2BvB,IAAI,CAACY,QAAhC;AACH,OAFD,MAGK;AACD,YAAIZ,IAAI,CAACc,eAAT,EAA0B;AACtB,eAAKU,eAAL,CAAqBxB,IAAI,CAACY,QAA1B;AACH,SAFD,MAGK;AACD,eAAKa,WAAL,CAAiBzB,IAAI,CAACY,QAAtB;AACH;AACJ;AACJ,KAZI,MAaA;AACD,UAAI,KAAKb,uBAAL,CAA6BC,IAA7B,CAAJ,EAAwC;AACpC,YAAI,CAAC,KAAKM,0BAAL,CAAgCN,IAAhC,CAAL,EAA4C;AACxC,cAAIA,IAAI,CAAC0B,QAAT,EAAmB;AACf,iBAAKf,aAAL,CAAmBX,IAAI,CAACY,QAAxB,EAAkCZ,IAAI,CAACa,WAAvC,EAAoD,IAApD;AACH,WAFD,MAGK;AACD;AACA,gBAAIb,IAAI,CAACc,eAAT,EAA0B;AACtB,mBAAKa,uBAAL,CAA6B3B,IAAI,CAACY,QAAlC;AACH,aAFD,MAGK;AACD,mBAAKK,aAAL,CAAmBjB,IAAI,CAACY,QAAxB,EAAkC,KAAlC;AACH;AACJ;AACJ;AACJ,OAfD,MAgBK;AACD,YAAIZ,IAAI,CAACc,eAAT,EAA0B;AACtB,cAAId,IAAI,CAACG,MAAT,EAAiB;AACb,iBAAKQ,aAAL,CAAmBX,IAAI,CAACY,QAAxB,EAAkCZ,IAAI,CAACa,WAAvC,EAAoD,IAApD;AACH,WAFD,MAGK;AACD,iBAAKe,aAAL,CAAmB5B,IAAI,CAACY,QAAxB;AACH;AACJ,SAPD,MAQK;AACD,eAAKiB,MAAL,CAAY7B,IAAI,CAACY,QAAjB;AACH;AACJ;AACJ;AACJ,GAzFD;;AA0FA7C,EAAAA,cAAc,CAACK,SAAf,CAAyB0D,UAAzB,GAAsC,UAAUpC,YAAV,EAAwB;AAC1DA,IAAAA,YAAY,GAAG,KAAKD,mBAAL,CAAyBC,YAAzB,CAAf;AACA,WAAO;AACHkB,MAAAA,QAAQ,EAAE,KAAKmB,2BAAL,CAAiCrC,YAAjC,CADP;AAEHA,MAAAA,YAAY,EAAEA;AAFX,KAAP;AAIH,GAND;;AAOA3B,EAAAA,cAAc,CAACK,SAAf,CAAyByD,MAAzB,GAAkC,UAAUnC,YAAV,EAAwB;AACtD,SAAKrB,iBAAL,CAAuBT,sBAAsB,CAACoE,MAA9C,EAAsD,KAAKF,UAAL,CAAgBpC,YAAhB,CAAtD;AACH,GAFD;;AAGA3B,EAAAA,cAAc,CAACK,SAAf,CAAyBwD,aAAzB,GAAyC,UAAUlC,YAAV,EAAwB;AAC7D,SAAKrB,iBAAL,CAAuBT,sBAAsB,CAACqE,YAA9C,EAA4D,KAAKH,UAAL,CAAgBpC,YAAhB,CAA5D;AACH,GAFD;;AAGA3B,EAAAA,cAAc,CAACK,SAAf,CAAyBuC,aAAzB,GAAyC,UAAUjB,YAAV,EAAwBmB,WAAxB,EAAqCqB,cAArC,EAAqD;AAC1FxC,IAAAA,YAAY,GAAG,KAAKD,mBAAL,CAAyBC,YAAzB,CAAf;;AACA,SAAKrB,iBAAL,CAAuBT,sBAAsB,CAACuE,YAA9C,EAA4D;AACxDvB,MAAAA,QAAQ,EAAE,KAAKmB,2BAAL,CAAiCrC,YAAjC,CAD8C;AAExDA,MAAAA,YAAY,EAAEA,YAF0C;AAGxDmB,MAAAA,WAAW,EAAEA,WAH2C;AAIxDqB,MAAAA,cAAc,EAAEA;AAJwC,KAA5D;AAMH,GARD;;AASAnE,EAAAA,cAAc,CAACK,SAAf,CAAyB6C,aAAzB,GAAyC,UAAUvB,YAAV,EAAwB0C,SAAxB,EAAmC;AACxE1C,IAAAA,YAAY,GAAG,KAAKD,mBAAL,CAAyBC,YAAzB,CAAf;;AACA,SAAKrB,iBAAL,CAAuBT,sBAAsB,CAACyE,YAA9C,EAA4D;AACxDzB,MAAAA,QAAQ,EAAE,KAAKmB,2BAAL,CAAiCrC,YAAjC,CAD8C;AAExDA,MAAAA,YAAY,EAAEA,YAF0C;AAGxD0C,MAAAA,SAAS,EAAEA;AAH6C,KAA5D;AAKH,GAPD;;AAQArE,EAAAA,cAAc,CAACK,SAAf,CAAyBuD,uBAAzB,GAAmD,UAAUjC,YAAV,EAAwB;AACvE,SAAKrB,iBAAL,CAAuBT,sBAAsB,CAAC0E,sBAA9C,EAAsE,KAAKR,UAAL,CAAgBpC,YAAhB,CAAtE;AACH,GAFD;;AAGA3B,EAAAA,cAAc,CAACK,SAAf,CAAyBqD,WAAzB,GAAuC,UAAU/B,YAAV,EAAwB;AAC3D,SAAKrB,iBAAL,CAAuBT,sBAAsB,CAAC2E,UAA9C,EAA0D,KAAKT,UAAL,CAAgBpC,YAAhB,CAA1D;AACH,GAFD;;AAGA3B,EAAAA,cAAc,CAACK,SAAf,CAAyBoD,eAAzB,GAA2C,UAAU9B,YAAV,EAAwB;AAC/D,SAAKrB,iBAAL,CAAuBT,sBAAsB,CAAC4E,cAA9C,EAA8D,KAAKV,UAAL,CAAgBpC,YAAhB,CAA9D;AACH,GAFD;;AAGA3B,EAAAA,cAAc,CAACK,SAAf,CAAyBmD,qBAAzB,GAAiD,UAAU7B,YAAV,EAAwB;AACrE,SAAKrB,iBAAL,CAAuBT,sBAAsB,CAAC6E,oBAA9C,EAAoE,KAAKX,UAAL,CAAgBpC,YAAhB,CAApE;AACH,GAFD;;AAGA3B,EAAAA,cAAc,CAACK,SAAf,CAAyB+C,WAAzB,GAAuC,UAAUzB,YAAV,EAAwB;AAC3D,SAAKrB,iBAAL,CAAuBT,sBAAsB,CAAC8E,UAA9C,EAA0D,KAAKZ,UAAL,CAAgBpC,YAAhB,CAA1D;AACH,GAFD;;AAGA3B,EAAAA,cAAc,CAACK,SAAf,CAAyB8C,eAAzB,GAA2C,UAAUxB,YAAV,EAAwB;AAC/D,SAAKrB,iBAAL,CAAuBT,sBAAsB,CAAC+E,cAA9C,EAA8D,KAAKb,UAAL,CAAgBpC,YAAhB,CAA9D;AACH,GAFD;;AAGA3B,EAAAA,cAAc,CAACK,SAAf,CAAyB4C,qBAAzB,GAAiD,UAAUtB,YAAV,EAAwB;AACrE,SAAKrB,iBAAL,CAAuBT,sBAAsB,CAACgF,oBAA9C,EAAoE,KAAKd,UAAL,CAAgBpC,YAAhB,CAApE;AACH,GAFD;;AAGA3B,EAAAA,cAAc,CAACK,SAAf,CAAyBkD,yBAAzB,GAAqD,UAAU5B,YAAV,EAAwB;AACzE,SAAKrB,iBAAL,CAAuBT,sBAAsB,CAACiF,wBAA9C,EAAwE,KAAKf,UAAL,CAAgBpC,YAAhB,CAAxE;AACH,GAFD;;AAGA3B,EAAAA,cAAc,CAACK,SAAf,CAAyBiD,UAAzB,GAAsC,YAAY;AAC9C,SAAKhD,iBAAL,CAAuBT,sBAAsB,CAACkF,SAA9C,EAAyD,EAAzD;AACH,GAFD,CAhN4C,CAmN5C;;;AACA/E,EAAAA,cAAc,CAACK,SAAf,CAAyB2D,2BAAzB,GAAuD,UAAUrC,YAAV,EAAwB;AAC3E,WAAO,KAAKzB,SAAL,CAAe8E,oBAAf,CAAoCC,kCAApC,CAAuEtD,YAAvE,CAAP;AACH,GAFD;;AAGA3B,EAAAA,cAAc,CAACK,SAAf,CAAyB6E,WAAzB,GAAuC,UAAUC,CAAV,EAAa;AAChD,SAAKhF,cAAL,CAAoB+E,WAApB,CAAgCC,CAAhC;AACH,GAFD;;AAGAnF,EAAAA,cAAc,CAACK,SAAf,CAAyB+E,SAAzB,GAAqC,UAAUD,CAAV,EAAa;AAC9C,SAAKhF,cAAL,CAAoBiF,SAApB,CAA8BD,CAA9B;AACH,GAFD;;AAGAnF,EAAAA,cAAc,CAACK,SAAf,CAAyBgF,eAAzB,GAA2C,UAAUF,CAAV,EAAa;AACpD,SAAKhF,cAAL,CAAoBkF,eAApB,CAAoCF,CAApC;AACH,GAFD;;AAGAnF,EAAAA,cAAc,CAACK,SAAf,CAAyBiF,aAAzB,GAAyC,UAAUH,CAAV,EAAa;AAClD,SAAKhF,cAAL,CAAoBmF,aAApB,CAAkCH,CAAlC;AACH,GAFD;;AAGAnF,EAAAA,cAAc,CAACK,SAAf,CAAyBkF,cAAzB,GAA0C,UAAUJ,CAAV,EAAa;AACnD,SAAKhF,cAAL,CAAoBoF,cAApB,CAAmCJ,CAAnC;AACH,GAFD;;AAGAnF,EAAAA,cAAc,CAACK,SAAf,CAAyBmF,WAAzB,GAAuC,UAAUL,CAAV,EAAa;AAChD,SAAKhF,cAAL,CAAoBqF,WAApB,CAAgCL,CAAhC;AACH,GAFD;;AAGAnF,EAAAA,cAAc,CAACK,SAAf,CAAyBoF,aAAzB,GAAyC,UAAUN,CAAV,EAAa;AAClD,SAAKhF,cAAL,CAAoBsF,aAApB,CAAkCN,CAAlC;AACH,GAFD;;AAGAnF,EAAAA,cAAc,CAACK,SAAf,CAAyBqF,aAAzB,GAAyC,UAAUP,CAAV,EAAa;AAClD,SAAKhF,cAAL,CAAoBuF,aAApB,CAAkCP,CAAlC;AACH,GAFD;;AAGAnF,EAAAA,cAAc,CAACK,SAAf,CAAyBsF,aAAzB,GAAyC,UAAUR,CAAV,EAAa;AAClD,SAAKhF,cAAL,CAAoBwF,aAApB,CAAkCR,CAAlC;AACH,GAFD;;AAGAnF,EAAAA,cAAc,CAACK,SAAf,CAAyBuF,cAAzB,GAA0C,UAAUT,CAAV,EAAa;AACnD,SAAKhF,cAAL,CAAoByF,cAApB,CAAmCT,CAAnC;AACH,GAFD;;AAGA,SAAOnF,cAAP;AACH,CAtPmC,EAApC;;AAuPA,SAASA,cAAT","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CoreNavigationCommands } from '../controller/coreCommands.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nvar ViewController = /** @class */ (function () {\r\n    function ViewController(configuration, viewModel, outgoingEvents, commandDelegate) {\r\n        this.configuration = configuration;\r\n        this.viewModel = viewModel;\r\n        this.outgoingEvents = outgoingEvents;\r\n        this.commandDelegate = commandDelegate;\r\n    }\r\n    ViewController.prototype._execMouseCommand = function (editorCommand, args) {\r\n        args.source = 'mouse';\r\n        this.commandDelegate.executeEditorCommand(editorCommand, args);\r\n    };\r\n    ViewController.prototype.paste = function (source, text, pasteOnNewLine, multicursorText, mode) {\r\n        this.commandDelegate.paste(source, text, pasteOnNewLine, multicursorText, mode);\r\n    };\r\n    ViewController.prototype.type = function (source, text) {\r\n        this.commandDelegate.type(source, text);\r\n    };\r\n    ViewController.prototype.replacePreviousChar = function (source, text, replaceCharCnt) {\r\n        this.commandDelegate.replacePreviousChar(source, text, replaceCharCnt);\r\n    };\r\n    ViewController.prototype.compositionStart = function (source) {\r\n        this.commandDelegate.compositionStart(source);\r\n    };\r\n    ViewController.prototype.compositionEnd = function (source) {\r\n        this.commandDelegate.compositionEnd(source);\r\n    };\r\n    ViewController.prototype.cut = function (source) {\r\n        this.commandDelegate.cut(source);\r\n    };\r\n    ViewController.prototype.setSelection = function (source, modelSelection) {\r\n        this.commandDelegate.executeEditorCommand(CoreNavigationCommands.SetSelection, {\r\n            source: source,\r\n            selection: modelSelection\r\n        });\r\n    };\r\n    ViewController.prototype._validateViewColumn = function (viewPosition) {\r\n        var minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\r\n        if (viewPosition.column < minColumn) {\r\n            return new Position(viewPosition.lineNumber, minColumn);\r\n        }\r\n        return viewPosition;\r\n    };\r\n    ViewController.prototype._hasMulticursorModifier = function (data) {\r\n        switch (this.configuration.options.get(59 /* multiCursorModifier */)) {\r\n            case 'altKey':\r\n                return data.altKey;\r\n            case 'ctrlKey':\r\n                return data.ctrlKey;\r\n            case 'metaKey':\r\n                return data.metaKey;\r\n        }\r\n        return false;\r\n    };\r\n    ViewController.prototype._hasNonMulticursorModifier = function (data) {\r\n        switch (this.configuration.options.get(59 /* multiCursorModifier */)) {\r\n            case 'altKey':\r\n                return data.ctrlKey || data.metaKey;\r\n            case 'ctrlKey':\r\n                return data.altKey || data.metaKey;\r\n            case 'metaKey':\r\n                return data.ctrlKey || data.altKey;\r\n        }\r\n        return false;\r\n    };\r\n    ViewController.prototype.dispatchMouse = function (data) {\r\n        var selectionClipboardIsOn = (platform.isLinux && this.configuration.options.get(81 /* selectionClipboard */));\r\n        if (data.middleButton && !selectionClipboardIsOn) {\r\n            this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\r\n        }\r\n        else if (data.startedOnLineNumbers) {\r\n            // If the dragging started on the gutter, then have operations work on the entire line\r\n            if (this._hasMulticursorModifier(data)) {\r\n                if (data.inSelectionMode) {\r\n                    this._lastCursorLineSelect(data.position);\r\n                }\r\n                else {\r\n                    this._createCursor(data.position, true);\r\n                }\r\n            }\r\n            else {\r\n                if (data.inSelectionMode) {\r\n                    this._lineSelectDrag(data.position);\r\n                }\r\n                else {\r\n                    this._lineSelect(data.position);\r\n                }\r\n            }\r\n        }\r\n        else if (data.mouseDownCount >= 4) {\r\n            this._selectAll();\r\n        }\r\n        else if (data.mouseDownCount === 3) {\r\n            if (this._hasMulticursorModifier(data)) {\r\n                if (data.inSelectionMode) {\r\n                    this._lastCursorLineSelectDrag(data.position);\r\n                }\r\n                else {\r\n                    this._lastCursorLineSelect(data.position);\r\n                }\r\n            }\r\n            else {\r\n                if (data.inSelectionMode) {\r\n                    this._lineSelectDrag(data.position);\r\n                }\r\n                else {\r\n                    this._lineSelect(data.position);\r\n                }\r\n            }\r\n        }\r\n        else if (data.mouseDownCount === 2) {\r\n            if (this._hasMulticursorModifier(data)) {\r\n                this._lastCursorWordSelect(data.position);\r\n            }\r\n            else {\r\n                if (data.inSelectionMode) {\r\n                    this._wordSelectDrag(data.position);\r\n                }\r\n                else {\r\n                    this._wordSelect(data.position);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (this._hasMulticursorModifier(data)) {\r\n                if (!this._hasNonMulticursorModifier(data)) {\r\n                    if (data.shiftKey) {\r\n                        this._columnSelect(data.position, data.mouseColumn, true);\r\n                    }\r\n                    else {\r\n                        // Do multi-cursor operations only when purely alt is pressed\r\n                        if (data.inSelectionMode) {\r\n                            this._lastCursorMoveToSelect(data.position);\r\n                        }\r\n                        else {\r\n                            this._createCursor(data.position, false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (data.inSelectionMode) {\r\n                    if (data.altKey) {\r\n                        this._columnSelect(data.position, data.mouseColumn, true);\r\n                    }\r\n                    else {\r\n                        this._moveToSelect(data.position);\r\n                    }\r\n                }\r\n                else {\r\n                    this.moveTo(data.position);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    ViewController.prototype._usualArgs = function (viewPosition) {\r\n        viewPosition = this._validateViewColumn(viewPosition);\r\n        return {\r\n            position: this._convertViewToModelPosition(viewPosition),\r\n            viewPosition: viewPosition\r\n        };\r\n    };\r\n    ViewController.prototype.moveTo = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.MoveTo, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._moveToSelect = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.MoveToSelect, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._columnSelect = function (viewPosition, mouseColumn, doColumnSelect) {\r\n        viewPosition = this._validateViewColumn(viewPosition);\r\n        this._execMouseCommand(CoreNavigationCommands.ColumnSelect, {\r\n            position: this._convertViewToModelPosition(viewPosition),\r\n            viewPosition: viewPosition,\r\n            mouseColumn: mouseColumn,\r\n            doColumnSelect: doColumnSelect\r\n        });\r\n    };\r\n    ViewController.prototype._createCursor = function (viewPosition, wholeLine) {\r\n        viewPosition = this._validateViewColumn(viewPosition);\r\n        this._execMouseCommand(CoreNavigationCommands.CreateCursor, {\r\n            position: this._convertViewToModelPosition(viewPosition),\r\n            viewPosition: viewPosition,\r\n            wholeLine: wholeLine\r\n        });\r\n    };\r\n    ViewController.prototype._lastCursorMoveToSelect = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.LastCursorMoveToSelect, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._wordSelect = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.WordSelect, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._wordSelectDrag = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.WordSelectDrag, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._lastCursorWordSelect = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.LastCursorWordSelect, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._lineSelect = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.LineSelect, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._lineSelectDrag = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.LineSelectDrag, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._lastCursorLineSelect = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.LastCursorLineSelect, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._lastCursorLineSelectDrag = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.LastCursorLineSelectDrag, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._selectAll = function () {\r\n        this._execMouseCommand(CoreNavigationCommands.SelectAll, {});\r\n    };\r\n    // ----------------------\r\n    ViewController.prototype._convertViewToModelPosition = function (viewPosition) {\r\n        return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\r\n    };\r\n    ViewController.prototype.emitKeyDown = function (e) {\r\n        this.outgoingEvents.emitKeyDown(e);\r\n    };\r\n    ViewController.prototype.emitKeyUp = function (e) {\r\n        this.outgoingEvents.emitKeyUp(e);\r\n    };\r\n    ViewController.prototype.emitContextMenu = function (e) {\r\n        this.outgoingEvents.emitContextMenu(e);\r\n    };\r\n    ViewController.prototype.emitMouseMove = function (e) {\r\n        this.outgoingEvents.emitMouseMove(e);\r\n    };\r\n    ViewController.prototype.emitMouseLeave = function (e) {\r\n        this.outgoingEvents.emitMouseLeave(e);\r\n    };\r\n    ViewController.prototype.emitMouseUp = function (e) {\r\n        this.outgoingEvents.emitMouseUp(e);\r\n    };\r\n    ViewController.prototype.emitMouseDown = function (e) {\r\n        this.outgoingEvents.emitMouseDown(e);\r\n    };\r\n    ViewController.prototype.emitMouseDrag = function (e) {\r\n        this.outgoingEvents.emitMouseDrag(e);\r\n    };\r\n    ViewController.prototype.emitMouseDrop = function (e) {\r\n        this.outgoingEvents.emitMouseDrop(e);\r\n    };\r\n    ViewController.prototype.emitMouseWheel = function (e) {\r\n        this.outgoingEvents.emitMouseWheel(e);\r\n    };\r\n    return ViewController;\r\n}());\r\nexport { ViewController };\r\n"]},"metadata":{},"sourceType":"module"}