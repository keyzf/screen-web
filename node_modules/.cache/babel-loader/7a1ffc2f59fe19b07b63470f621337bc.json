{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Parser from '../parser/jsonParser.js';\nimport * as Json from './../../jsonc-parser/main.js';\nimport { stringifyObject } from '../utils/json.js';\nimport { endsWith } from '../utils/strings.js';\nimport { isDefined } from '../utils/objects.js';\nimport { CompletionItem, CompletionItemKind, Range, TextEdit, InsertTextFormat, MarkupKind } from '../jsonLanguageTypes.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nvar valueCommitCharacters = [',', '}', ']'];\nvar propertyCommitCharacters = [':'];\n\nvar JSONCompletion =\n/** @class */\nfunction () {\n  function JSONCompletion(schemaService, contributions, promiseConstructor, clientCapabilities) {\n    if (contributions === void 0) {\n      contributions = [];\n    }\n\n    if (promiseConstructor === void 0) {\n      promiseConstructor = Promise;\n    }\n\n    if (clientCapabilities === void 0) {\n      clientCapabilities = {};\n    }\n\n    this.schemaService = schemaService;\n    this.contributions = contributions;\n    this.promiseConstructor = promiseConstructor;\n    this.clientCapabilities = clientCapabilities;\n    this.templateVarIdCounter = 0;\n  }\n\n  JSONCompletion.prototype.doResolve = function (item) {\n    for (var i = this.contributions.length - 1; i >= 0; i--) {\n      if (this.contributions[i].resolveCompletion) {\n        var resolver = this.contributions[i].resolveCompletion(item);\n\n        if (resolver) {\n          return resolver;\n        }\n      }\n    }\n\n    return this.promiseConstructor.resolve(item);\n  };\n\n  JSONCompletion.prototype.doComplete = function (document, position, doc) {\n    var _this = this;\n\n    var result = {\n      items: [],\n      isIncomplete: false\n    };\n    var text = document.getText();\n    var offset = document.offsetAt(position);\n    var node = doc.getNodeFromOffset(offset, true);\n\n    if (this.isInComment(document, node ? node.offset : 0, offset)) {\n      return Promise.resolve(result);\n    }\n\n    if (node && offset === node.offset + node.length && offset > 0) {\n      var ch = text[offset - 1];\n\n      if (node.type === 'object' && ch === '}' || node.type === 'array' && ch === ']') {\n        // after ] or }\n        node = node.parent;\n      }\n    }\n\n    var currentWord = this.getCurrentWord(document, offset);\n    var overwriteRange = null;\n\n    if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n      overwriteRange = Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));\n    } else {\n      var overwriteStart = offset - currentWord.length;\n\n      if (overwriteStart > 0 && text[overwriteStart - 1] === '\"') {\n        overwriteStart--;\n      }\n\n      overwriteRange = Range.create(document.positionAt(overwriteStart), position);\n    }\n\n    var supportsCommitCharacters = false; //this.doesSupportsCommitCharacters(); disabled for now, waiting for new API: https://github.com/microsoft/vscode/issues/42544\n\n    var proposed = {};\n    var collector = {\n      add: function (suggestion) {\n        var label = suggestion.label;\n        var existing = proposed[label];\n\n        if (!existing) {\n          label = label.replace(/[\\n]/g, 'â†µ');\n\n          if (label.length > 60) {\n            var shortendedLabel = label.substr(0, 57).trim() + '...';\n\n            if (!proposed[shortendedLabel]) {\n              label = shortendedLabel;\n            }\n          }\n\n          if (overwriteRange) {\n            suggestion.textEdit = TextEdit.replace(overwriteRange, suggestion.insertText);\n          }\n\n          if (supportsCommitCharacters) {\n            suggestion.commitCharacters = suggestion.kind === CompletionItemKind.Property ? propertyCommitCharacters : valueCommitCharacters;\n          }\n\n          suggestion.label = label;\n          proposed[label] = suggestion;\n          result.items.push(suggestion);\n        } else if (!existing.documentation) {\n          existing.documentation = suggestion.documentation;\n        }\n      },\n      setAsIncomplete: function () {\n        result.isIncomplete = true;\n      },\n      error: function (message) {\n        console.error(message);\n      },\n      log: function (message) {\n        console.log(message);\n      },\n      getNumberOfProposals: function () {\n        return result.items.length;\n      }\n    };\n    return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema) {\n      var collectionPromises = [];\n      var addValue = true;\n      var currentKey = '';\n      var currentProperty = null;\n\n      if (node) {\n        if (node.type === 'string') {\n          var parent = node.parent;\n\n          if (parent && parent.type === 'property' && parent.keyNode === node) {\n            addValue = !parent.valueNode;\n            currentProperty = parent;\n            currentKey = text.substr(node.offset + 1, node.length - 2);\n\n            if (parent) {\n              node = parent.parent;\n            }\n          }\n        }\n      } // proposals for properties\n\n\n      if (node && node.type === 'object') {\n        // don't suggest keys when the cursor is just before the opening curly brace\n        if (node.offset === offset) {\n          return result;\n        } // don't suggest properties that are already present\n\n\n        var properties = node.properties;\n        properties.forEach(function (p) {\n          if (!currentProperty || currentProperty !== p) {\n            proposed[p.keyNode.value] = CompletionItem.create('__');\n          }\n        });\n        var separatorAfter_1 = '';\n\n        if (addValue) {\n          separatorAfter_1 = _this.evaluateSeparatorAfter(document, document.offsetAt(overwriteRange.end));\n        }\n\n        if (schema) {\n          // property proposals with schema\n          _this.getPropertyCompletions(schema, doc, node, addValue, separatorAfter_1, collector);\n        } else {\n          // property proposals without schema\n          _this.getSchemaLessPropertyCompletions(doc, node, currentKey, collector);\n        }\n\n        var location_1 = Parser.getNodePath(node);\n\n        _this.contributions.forEach(function (contribution) {\n          var collectPromise = contribution.collectPropertyCompletions(document.uri, location_1, currentWord, addValue, separatorAfter_1 === '', collector);\n\n          if (collectPromise) {\n            collectionPromises.push(collectPromise);\n          }\n        });\n\n        if (!schema && currentWord.length > 0 && text.charAt(offset - currentWord.length - 1) !== '\"') {\n          collector.add({\n            kind: CompletionItemKind.Property,\n            label: _this.getLabelForValue(currentWord),\n            insertText: _this.getInsertTextForProperty(currentWord, null, false, separatorAfter_1),\n            insertTextFormat: InsertTextFormat.Snippet,\n            documentation: ''\n          });\n          collector.setAsIncomplete();\n        }\n      } // proposals for values\n\n\n      var types = {};\n\n      if (schema) {\n        // value proposals with schema\n        _this.getValueCompletions(schema, doc, node, offset, document, collector, types);\n      } else {\n        // value proposals without schema\n        _this.getSchemaLessValueCompletions(doc, node, offset, document, collector);\n      }\n\n      if (_this.contributions.length > 0) {\n        _this.getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises);\n      }\n\n      return _this.promiseConstructor.all(collectionPromises).then(function () {\n        if (collector.getNumberOfProposals() === 0) {\n          var offsetForSeparator = offset;\n\n          if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            offsetForSeparator = node.offset + node.length;\n          }\n\n          var separatorAfter = _this.evaluateSeparatorAfter(document, offsetForSeparator);\n\n          _this.addFillerValueCompletions(types, separatorAfter, collector);\n        }\n\n        return result;\n      });\n    });\n  };\n\n  JSONCompletion.prototype.getPropertyCompletions = function (schema, doc, node, addValue, separatorAfter, collector) {\n    var _this = this;\n\n    var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset);\n    matchingSchemas.forEach(function (s) {\n      if (s.node === node && !s.inverted) {\n        var schemaProperties_1 = s.schema.properties;\n\n        if (schemaProperties_1) {\n          Object.keys(schemaProperties_1).forEach(function (key) {\n            var propertySchema = schemaProperties_1[key];\n\n            if (typeof propertySchema === 'object' && !propertySchema.deprecationMessage && !propertySchema.doNotSuggest) {\n              var proposal = {\n                kind: CompletionItemKind.Property,\n                label: key,\n                insertText: _this.getInsertTextForProperty(key, propertySchema, addValue, separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                filterText: _this.getFilterTextForValue(key),\n                documentation: _this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || ''\n              };\n\n              if (endsWith(proposal.insertText, \"$1\" + separatorAfter)) {\n                proposal.command = {\n                  title: 'Suggest',\n                  command: 'editor.action.triggerSuggest'\n                };\n              }\n\n              collector.add(proposal);\n            }\n          });\n        }\n      }\n    });\n  };\n\n  JSONCompletion.prototype.getSchemaLessPropertyCompletions = function (doc, node, currentKey, collector) {\n    var _this = this;\n\n    var collectCompletionsForSimilarObject = function (obj) {\n      obj.properties.forEach(function (p) {\n        var key = p.keyNode.value;\n        collector.add({\n          kind: CompletionItemKind.Property,\n          label: key,\n          insertText: _this.getInsertTextForValue(key, ''),\n          insertTextFormat: InsertTextFormat.Snippet,\n          filterText: _this.getFilterTextForValue(key),\n          documentation: ''\n        });\n      });\n    };\n\n    if (node.parent) {\n      if (node.parent.type === 'property') {\n        // if the object is a property value, check the tree for other objects that hang under a property of the same name\n        var parentKey_1 = node.parent.keyNode.value;\n        doc.visit(function (n) {\n          if (n.type === 'property' && n !== node.parent && n.keyNode.value === parentKey_1 && n.valueNode && n.valueNode.type === 'object') {\n            collectCompletionsForSimilarObject(n.valueNode);\n          }\n\n          return true;\n        });\n      } else if (node.parent.type === 'array') {\n        // if the object is in an array, use all other array elements as similar objects\n        node.parent.items.forEach(function (n) {\n          if (n.type === 'object' && n !== node) {\n            collectCompletionsForSimilarObject(n);\n          }\n        });\n      }\n    } else if (node.type === 'object') {\n      collector.add({\n        kind: CompletionItemKind.Property,\n        label: '$schema',\n        insertText: this.getInsertTextForProperty('$schema', null, true, ''),\n        insertTextFormat: InsertTextFormat.Snippet,\n        documentation: '',\n        filterText: this.getFilterTextForValue(\"$schema\")\n      });\n    }\n  };\n\n  JSONCompletion.prototype.getSchemaLessValueCompletions = function (doc, node, offset, document, collector) {\n    var _this = this;\n\n    var offsetForSeparator = offset;\n\n    if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n      offsetForSeparator = node.offset + node.length;\n      node = node.parent;\n    }\n\n    if (!node) {\n      collector.add({\n        kind: this.getSuggestionKind('object'),\n        label: 'Empty object',\n        insertText: this.getInsertTextForValue({}, ''),\n        insertTextFormat: InsertTextFormat.Snippet,\n        documentation: ''\n      });\n      collector.add({\n        kind: this.getSuggestionKind('array'),\n        label: 'Empty array',\n        insertText: this.getInsertTextForValue([], ''),\n        insertTextFormat: InsertTextFormat.Snippet,\n        documentation: ''\n      });\n      return;\n    }\n\n    var separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);\n\n    var collectSuggestionsForValues = function (value) {\n      if (!Parser.contains(value.parent, offset, true)) {\n        collector.add({\n          kind: _this.getSuggestionKind(value.type),\n          label: _this.getLabelTextForMatchingNode(value, document),\n          insertText: _this.getInsertTextForMatchingNode(value, document, separatorAfter),\n          insertTextFormat: InsertTextFormat.Snippet,\n          documentation: ''\n        });\n      }\n\n      if (value.type === 'boolean') {\n        _this.addBooleanValueCompletion(!value.value, separatorAfter, collector);\n      }\n    };\n\n    if (node.type === 'property') {\n      if (offset > node.colonOffset) {\n        var valueNode = node.valueNode;\n\n        if (valueNode && (offset > valueNode.offset + valueNode.length || valueNode.type === 'object' || valueNode.type === 'array')) {\n          return;\n        } // suggest values at the same key\n\n\n        var parentKey_2 = node.keyNode.value;\n        doc.visit(function (n) {\n          if (n.type === 'property' && n.keyNode.value === parentKey_2 && n.valueNode) {\n            collectSuggestionsForValues(n.valueNode);\n          }\n\n          return true;\n        });\n\n        if (parentKey_2 === '$schema' && node.parent && !node.parent.parent) {\n          this.addDollarSchemaCompletions(separatorAfter, collector);\n        }\n      }\n    }\n\n    if (node.type === 'array') {\n      if (node.parent && node.parent.type === 'property') {\n        // suggest items of an array at the same key\n        var parentKey_3 = node.parent.keyNode.value;\n        doc.visit(function (n) {\n          if (n.type === 'property' && n.keyNode.value === parentKey_3 && n.valueNode && n.valueNode.type === 'array') {\n            n.valueNode.items.forEach(collectSuggestionsForValues);\n          }\n\n          return true;\n        });\n      } else {\n        // suggest items in the same array\n        node.items.forEach(collectSuggestionsForValues);\n      }\n    }\n  };\n\n  JSONCompletion.prototype.getValueCompletions = function (schema, doc, node, offset, document, collector, types) {\n    var _this = this;\n\n    var offsetForSeparator = offset;\n    var parentKey = null;\n    var valueNode = null;\n\n    if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n      offsetForSeparator = node.offset + node.length;\n      valueNode = node;\n      node = node.parent;\n    }\n\n    if (!node) {\n      this.addSchemaValueCompletions(schema.schema, '', collector, types);\n      return;\n    }\n\n    if (node.type === 'property' && offset > node.colonOffset) {\n      var valueNode_1 = node.valueNode;\n\n      if (valueNode_1 && offset > valueNode_1.offset + valueNode_1.length) {\n        return; // we are past the value node\n      }\n\n      parentKey = node.keyNode.value;\n      node = node.parent;\n    }\n\n    if (node && (parentKey !== null || node.type === 'array')) {\n      var separatorAfter_2 = this.evaluateSeparatorAfter(document, offsetForSeparator);\n      var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset, valueNode);\n      matchingSchemas.forEach(function (s) {\n        if (s.node === node && !s.inverted && s.schema) {\n          if (node.type === 'array' && s.schema.items) {\n            if (Array.isArray(s.schema.items)) {\n              var index = _this.findItemAtOffset(node, document, offset);\n\n              if (index < s.schema.items.length) {\n                _this.addSchemaValueCompletions(s.schema.items[index], separatorAfter_2, collector, types);\n              }\n            } else {\n              _this.addSchemaValueCompletions(s.schema.items, separatorAfter_2, collector, types);\n            }\n          }\n\n          if (s.schema.properties) {\n            var propertySchema = s.schema.properties[parentKey];\n\n            if (propertySchema) {\n              _this.addSchemaValueCompletions(propertySchema, separatorAfter_2, collector, types);\n            }\n          }\n        }\n      });\n\n      if (parentKey === '$schema' && !node.parent) {\n        this.addDollarSchemaCompletions(separatorAfter_2, collector);\n      }\n\n      if (types['boolean']) {\n        this.addBooleanValueCompletion(true, separatorAfter_2, collector);\n        this.addBooleanValueCompletion(false, separatorAfter_2, collector);\n      }\n\n      if (types['null']) {\n        this.addNullValueCompletion(separatorAfter_2, collector);\n      }\n    }\n  };\n\n  JSONCompletion.prototype.getContributedValueCompletions = function (doc, node, offset, document, collector, collectionPromises) {\n    if (!node) {\n      this.contributions.forEach(function (contribution) {\n        var collectPromise = contribution.collectDefaultCompletions(document.uri, collector);\n\n        if (collectPromise) {\n          collectionPromises.push(collectPromise);\n        }\n      });\n    } else {\n      if (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null') {\n        node = node.parent;\n      }\n\n      if (node.type === 'property' && offset > node.colonOffset) {\n        var parentKey_4 = node.keyNode.value;\n        var valueNode = node.valueNode;\n\n        if (!valueNode || offset <= valueNode.offset + valueNode.length) {\n          var location_2 = Parser.getNodePath(node.parent);\n          this.contributions.forEach(function (contribution) {\n            var collectPromise = contribution.collectValueCompletions(document.uri, location_2, parentKey_4, collector);\n\n            if (collectPromise) {\n              collectionPromises.push(collectPromise);\n            }\n          });\n        }\n      }\n    }\n  };\n\n  JSONCompletion.prototype.addSchemaValueCompletions = function (schema, separatorAfter, collector, types) {\n    var _this = this;\n\n    if (typeof schema === 'object') {\n      this.addEnumValueCompletions(schema, separatorAfter, collector);\n      this.addDefaultValueCompletions(schema, separatorAfter, collector);\n      this.collectTypes(schema, types);\n\n      if (Array.isArray(schema.allOf)) {\n        schema.allOf.forEach(function (s) {\n          return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);\n        });\n      }\n\n      if (Array.isArray(schema.anyOf)) {\n        schema.anyOf.forEach(function (s) {\n          return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);\n        });\n      }\n\n      if (Array.isArray(schema.oneOf)) {\n        schema.oneOf.forEach(function (s) {\n          return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);\n        });\n      }\n    }\n  };\n\n  JSONCompletion.prototype.addDefaultValueCompletions = function (schema, separatorAfter, collector, arrayDepth) {\n    var _this = this;\n\n    if (arrayDepth === void 0) {\n      arrayDepth = 0;\n    }\n\n    var hasProposals = false;\n\n    if (isDefined(schema.default)) {\n      var type = schema.type;\n      var value = schema.default;\n\n      for (var i = arrayDepth; i > 0; i--) {\n        value = [value];\n        type = 'array';\n      }\n\n      collector.add({\n        kind: this.getSuggestionKind(type),\n        label: this.getLabelForValue(value),\n        insertText: this.getInsertTextForValue(value, separatorAfter),\n        insertTextFormat: InsertTextFormat.Snippet,\n        detail: localize('json.suggest.default', 'Default value')\n      });\n      hasProposals = true;\n    }\n\n    if (Array.isArray(schema.examples)) {\n      schema.examples.forEach(function (example) {\n        var type = schema.type;\n        var value = example;\n\n        for (var i = arrayDepth; i > 0; i--) {\n          value = [value];\n          type = 'array';\n        }\n\n        collector.add({\n          kind: _this.getSuggestionKind(type),\n          label: _this.getLabelForValue(value),\n          insertText: _this.getInsertTextForValue(value, separatorAfter),\n          insertTextFormat: InsertTextFormat.Snippet\n        });\n        hasProposals = true;\n      });\n    }\n\n    if (Array.isArray(schema.defaultSnippets)) {\n      schema.defaultSnippets.forEach(function (s) {\n        var type = schema.type;\n        var value = s.body;\n        var label = s.label;\n        var insertText;\n        var filterText;\n\n        if (isDefined(value)) {\n          var type_1 = schema.type;\n\n          for (var i = arrayDepth; i > 0; i--) {\n            value = [value];\n            type_1 = 'array';\n          }\n\n          insertText = _this.getInsertTextForSnippetValue(value, separatorAfter);\n          filterText = _this.getFilterTextForSnippetValue(value);\n          label = label || _this.getLabelForSnippetValue(value);\n        } else if (typeof s.bodyText === 'string') {\n          var prefix = '',\n              suffix = '',\n              indent = '';\n\n          for (var i = arrayDepth; i > 0; i--) {\n            prefix = prefix + indent + '[\\n';\n            suffix = suffix + '\\n' + indent + ']';\n            indent += '\\t';\n            type = 'array';\n          }\n\n          insertText = prefix + indent + s.bodyText.split('\\n').join('\\n' + indent) + suffix + separatorAfter;\n          label = label || insertText, filterText = insertText.replace(/[\\n]/g, ''); // remove new lines\n        }\n\n        collector.add({\n          kind: _this.getSuggestionKind(type),\n          label: label,\n          documentation: _this.fromMarkup(s.markdownDescription) || s.description,\n          insertText: insertText,\n          insertTextFormat: InsertTextFormat.Snippet,\n          filterText: filterText\n        });\n        hasProposals = true;\n      });\n    }\n\n    if (!hasProposals && typeof schema.items === 'object' && !Array.isArray(schema.items)) {\n      this.addDefaultValueCompletions(schema.items, separatorAfter, collector, arrayDepth + 1);\n    }\n  };\n\n  JSONCompletion.prototype.addEnumValueCompletions = function (schema, separatorAfter, collector) {\n    if (isDefined(schema.const)) {\n      collector.add({\n        kind: this.getSuggestionKind(schema.type),\n        label: this.getLabelForValue(schema.const),\n        insertText: this.getInsertTextForValue(schema.const, separatorAfter),\n        insertTextFormat: InsertTextFormat.Snippet,\n        documentation: this.fromMarkup(schema.markdownDescription) || schema.description\n      });\n    }\n\n    if (Array.isArray(schema.enum)) {\n      for (var i = 0, length = schema.enum.length; i < length; i++) {\n        var enm = schema.enum[i];\n        var documentation = this.fromMarkup(schema.markdownDescription) || schema.description;\n\n        if (schema.markdownEnumDescriptions && i < schema.markdownEnumDescriptions.length && this.doesSupportMarkdown()) {\n          documentation = this.fromMarkup(schema.markdownEnumDescriptions[i]);\n        } else if (schema.enumDescriptions && i < schema.enumDescriptions.length) {\n          documentation = schema.enumDescriptions[i];\n        }\n\n        collector.add({\n          kind: this.getSuggestionKind(schema.type),\n          label: this.getLabelForValue(enm),\n          insertText: this.getInsertTextForValue(enm, separatorAfter),\n          insertTextFormat: InsertTextFormat.Snippet,\n          documentation: documentation\n        });\n      }\n    }\n  };\n\n  JSONCompletion.prototype.collectTypes = function (schema, types) {\n    if (Array.isArray(schema.enum) || isDefined(schema.const)) {\n      return;\n    }\n\n    var type = schema.type;\n\n    if (Array.isArray(type)) {\n      type.forEach(function (t) {\n        return types[t] = true;\n      });\n    } else {\n      types[type] = true;\n    }\n  };\n\n  JSONCompletion.prototype.addFillerValueCompletions = function (types, separatorAfter, collector) {\n    if (types['object']) {\n      collector.add({\n        kind: this.getSuggestionKind('object'),\n        label: '{}',\n        insertText: this.getInsertTextForGuessedValue({}, separatorAfter),\n        insertTextFormat: InsertTextFormat.Snippet,\n        detail: localize('defaults.object', 'New object'),\n        documentation: ''\n      });\n    }\n\n    if (types['array']) {\n      collector.add({\n        kind: this.getSuggestionKind('array'),\n        label: '[]',\n        insertText: this.getInsertTextForGuessedValue([], separatorAfter),\n        insertTextFormat: InsertTextFormat.Snippet,\n        detail: localize('defaults.array', 'New array'),\n        documentation: ''\n      });\n    }\n  };\n\n  JSONCompletion.prototype.addBooleanValueCompletion = function (value, separatorAfter, collector) {\n    collector.add({\n      kind: this.getSuggestionKind('boolean'),\n      label: value ? 'true' : 'false',\n      insertText: this.getInsertTextForValue(value, separatorAfter),\n      insertTextFormat: InsertTextFormat.Snippet,\n      documentation: ''\n    });\n  };\n\n  JSONCompletion.prototype.addNullValueCompletion = function (separatorAfter, collector) {\n    collector.add({\n      kind: this.getSuggestionKind('null'),\n      label: 'null',\n      insertText: 'null' + separatorAfter,\n      insertTextFormat: InsertTextFormat.Snippet,\n      documentation: ''\n    });\n  };\n\n  JSONCompletion.prototype.addDollarSchemaCompletions = function (separatorAfter, collector) {\n    var _this = this;\n\n    var schemaIds = this.schemaService.getRegisteredSchemaIds(function (schema) {\n      return schema === 'http' || schema === 'https';\n    });\n    schemaIds.forEach(function (schemaId) {\n      return collector.add({\n        kind: CompletionItemKind.Module,\n        label: _this.getLabelForValue(schemaId),\n        filterText: _this.getFilterTextForValue(schemaId),\n        insertText: _this.getInsertTextForValue(schemaId, separatorAfter),\n        insertTextFormat: InsertTextFormat.Snippet,\n        documentation: ''\n      });\n    });\n  };\n\n  JSONCompletion.prototype.getLabelForValue = function (value) {\n    return JSON.stringify(value);\n  };\n\n  JSONCompletion.prototype.getFilterTextForValue = function (value) {\n    return JSON.stringify(value);\n  };\n\n  JSONCompletion.prototype.getFilterTextForSnippetValue = function (value) {\n    return JSON.stringify(value).replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, '$1');\n  };\n\n  JSONCompletion.prototype.getLabelForSnippetValue = function (value) {\n    var label = JSON.stringify(value);\n    return label.replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, '$1');\n  };\n\n  JSONCompletion.prototype.getInsertTextForPlainText = function (text) {\n    return text.replace(/[\\\\\\$\\}]/g, '\\\\$&'); // escape $, \\ and } \n  };\n\n  JSONCompletion.prototype.getInsertTextForValue = function (value, separatorAfter) {\n    var text = JSON.stringify(value, null, '\\t');\n\n    if (text === '{}') {\n      return '{$1}' + separatorAfter;\n    } else if (text === '[]') {\n      return '[$1]' + separatorAfter;\n    }\n\n    return this.getInsertTextForPlainText(text + separatorAfter);\n  };\n\n  JSONCompletion.prototype.getInsertTextForSnippetValue = function (value, separatorAfter) {\n    var replacer = function (value) {\n      if (typeof value === 'string') {\n        if (value[0] === '^') {\n          return value.substr(1);\n        }\n      }\n\n      return JSON.stringify(value);\n    };\n\n    return stringifyObject(value, '', replacer) + separatorAfter;\n  };\n\n  JSONCompletion.prototype.getInsertTextForGuessedValue = function (value, separatorAfter) {\n    switch (typeof value) {\n      case 'object':\n        if (value === null) {\n          return '${1:null}' + separatorAfter;\n        }\n\n        return this.getInsertTextForValue(value, separatorAfter);\n\n      case 'string':\n        var snippetValue = JSON.stringify(value);\n        snippetValue = snippetValue.substr(1, snippetValue.length - 2); // remove quotes\n\n        snippetValue = this.getInsertTextForPlainText(snippetValue); // escape \\ and }\n\n        return '\"${1:' + snippetValue + '}\"' + separatorAfter;\n\n      case 'number':\n      case 'boolean':\n        return '${1:' + JSON.stringify(value) + '}' + separatorAfter;\n    }\n\n    return this.getInsertTextForValue(value, separatorAfter);\n  };\n\n  JSONCompletion.prototype.getSuggestionKind = function (type) {\n    if (Array.isArray(type)) {\n      var array = type;\n      type = array.length > 0 ? array[0] : null;\n    }\n\n    if (!type) {\n      return CompletionItemKind.Value;\n    }\n\n    switch (type) {\n      case 'string':\n        return CompletionItemKind.Value;\n\n      case 'object':\n        return CompletionItemKind.Module;\n\n      case 'property':\n        return CompletionItemKind.Property;\n\n      default:\n        return CompletionItemKind.Value;\n    }\n  };\n\n  JSONCompletion.prototype.getLabelTextForMatchingNode = function (node, document) {\n    switch (node.type) {\n      case 'array':\n        return '[]';\n\n      case 'object':\n        return '{}';\n\n      default:\n        var content = document.getText().substr(node.offset, node.length);\n        return content;\n    }\n  };\n\n  JSONCompletion.prototype.getInsertTextForMatchingNode = function (node, document, separatorAfter) {\n    switch (node.type) {\n      case 'array':\n        return this.getInsertTextForValue([], separatorAfter);\n\n      case 'object':\n        return this.getInsertTextForValue({}, separatorAfter);\n\n      default:\n        var content = document.getText().substr(node.offset, node.length) + separatorAfter;\n        return this.getInsertTextForPlainText(content);\n    }\n  };\n\n  JSONCompletion.prototype.getInsertTextForProperty = function (key, propertySchema, addValue, separatorAfter) {\n    var propertyText = this.getInsertTextForValue(key, '');\n\n    if (!addValue) {\n      return propertyText;\n    }\n\n    var resultText = propertyText + ': ';\n    var value;\n    var nValueProposals = 0;\n\n    if (propertySchema) {\n      if (Array.isArray(propertySchema.defaultSnippets)) {\n        if (propertySchema.defaultSnippets.length === 1) {\n          var body = propertySchema.defaultSnippets[0].body;\n\n          if (isDefined(body)) {\n            value = this.getInsertTextForSnippetValue(body, '');\n          }\n        }\n\n        nValueProposals += propertySchema.defaultSnippets.length;\n      }\n\n      if (propertySchema.enum) {\n        if (!value && propertySchema.enum.length === 1) {\n          value = this.getInsertTextForGuessedValue(propertySchema.enum[0], '');\n        }\n\n        nValueProposals += propertySchema.enum.length;\n      }\n\n      if (isDefined(propertySchema.default)) {\n        if (!value) {\n          value = this.getInsertTextForGuessedValue(propertySchema.default, '');\n        }\n\n        nValueProposals++;\n      }\n\n      if (Array.isArray(propertySchema.examples) && propertySchema.examples.length) {\n        if (!value) {\n          value = this.getInsertTextForGuessedValue(propertySchema.examples[0], '');\n        }\n\n        nValueProposals += propertySchema.examples.length;\n      }\n\n      if (nValueProposals === 0) {\n        var type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;\n\n        if (!type) {\n          if (propertySchema.properties) {\n            type = 'object';\n          } else if (propertySchema.items) {\n            type = 'array';\n          }\n        }\n\n        switch (type) {\n          case 'boolean':\n            value = '$1';\n            break;\n\n          case 'string':\n            value = '\"$1\"';\n            break;\n\n          case 'object':\n            value = '{$1}';\n            break;\n\n          case 'array':\n            value = '[$1]';\n            break;\n\n          case 'number':\n          case 'integer':\n            value = '${1:0}';\n            break;\n\n          case 'null':\n            value = '${1:null}';\n            break;\n\n          default:\n            return propertyText;\n        }\n      }\n    }\n\n    if (!value || nValueProposals > 1) {\n      value = '$1';\n    }\n\n    return resultText + value + separatorAfter;\n  };\n\n  JSONCompletion.prototype.getCurrentWord = function (document, offset) {\n    var i = offset - 1;\n    var text = document.getText();\n\n    while (i >= 0 && ' \\t\\n\\r\\v\":{[,]}'.indexOf(text.charAt(i)) === -1) {\n      i--;\n    }\n\n    return text.substring(i + 1, offset);\n  };\n\n  JSONCompletion.prototype.evaluateSeparatorAfter = function (document, offset) {\n    var scanner = Json.createScanner(document.getText(), true);\n    scanner.setPosition(offset);\n    var token = scanner.scan();\n\n    switch (token) {\n      case 5\n      /* CommaToken */\n      :\n      case 2\n      /* CloseBraceToken */\n      :\n      case 4\n      /* CloseBracketToken */\n      :\n      case 17\n      /* EOF */\n      :\n        return '';\n\n      default:\n        return ',';\n    }\n  };\n\n  JSONCompletion.prototype.findItemAtOffset = function (node, document, offset) {\n    var scanner = Json.createScanner(document.getText(), true);\n    var children = node.items;\n\n    for (var i = children.length - 1; i >= 0; i--) {\n      var child = children[i];\n\n      if (offset > child.offset + child.length) {\n        scanner.setPosition(child.offset + child.length);\n        var token = scanner.scan();\n\n        if (token === 5\n        /* CommaToken */\n        && offset >= scanner.getTokenOffset() + scanner.getTokenLength()) {\n          return i + 1;\n        }\n\n        return i;\n      } else if (offset >= child.offset) {\n        return i;\n      }\n    }\n\n    return 0;\n  };\n\n  JSONCompletion.prototype.isInComment = function (document, start, offset) {\n    var scanner = Json.createScanner(document.getText(), false);\n    scanner.setPosition(start);\n    var token = scanner.scan();\n\n    while (token !== 17\n    /* EOF */\n    && scanner.getTokenOffset() + scanner.getTokenLength() < offset) {\n      token = scanner.scan();\n    }\n\n    return (token === 12\n    /* LineCommentTrivia */\n    || token === 13\n    /* BlockCommentTrivia */\n    ) && scanner.getTokenOffset() <= offset;\n  };\n\n  JSONCompletion.prototype.fromMarkup = function (markupString) {\n    if (markupString && this.doesSupportMarkdown()) {\n      return {\n        kind: MarkupKind.Markdown,\n        value: markupString\n      };\n    }\n\n    return undefined;\n  };\n\n  JSONCompletion.prototype.doesSupportMarkdown = function () {\n    if (!isDefined(this.supportsMarkdown)) {\n      var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;\n      this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;\n    }\n\n    return this.supportsMarkdown;\n  };\n\n  JSONCompletion.prototype.doesSupportsCommitCharacters = function () {\n    if (!isDefined(this.supportsCommitCharacters)) {\n      var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;\n      this.supportsCommitCharacters = completion && completion.completionItem && !!completion.completionItem.commitCharactersSupport;\n    }\n\n    return this.supportsCommitCharacters;\n  };\n\n  return JSONCompletion;\n}();\n\nexport { JSONCompletion };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonCompletion.js"],"names":["Parser","Json","stringifyObject","endsWith","isDefined","CompletionItem","CompletionItemKind","Range","TextEdit","InsertTextFormat","MarkupKind","nls","localize","loadMessageBundle","valueCommitCharacters","propertyCommitCharacters","JSONCompletion","schemaService","contributions","promiseConstructor","clientCapabilities","Promise","templateVarIdCounter","prototype","doResolve","item","i","length","resolveCompletion","resolver","resolve","doComplete","document","position","doc","_this","result","items","isIncomplete","text","getText","offset","offsetAt","node","getNodeFromOffset","isInComment","ch","type","parent","currentWord","getCurrentWord","overwriteRange","create","positionAt","overwriteStart","supportsCommitCharacters","proposed","collector","add","suggestion","label","existing","replace","shortendedLabel","substr","trim","textEdit","insertText","commitCharacters","kind","Property","push","documentation","setAsIncomplete","error","message","console","log","getNumberOfProposals","getSchemaForResource","uri","then","schema","collectionPromises","addValue","currentKey","currentProperty","keyNode","valueNode","properties","forEach","p","value","separatorAfter_1","evaluateSeparatorAfter","end","getPropertyCompletions","getSchemaLessPropertyCompletions","location_1","getNodePath","contribution","collectPromise","collectPropertyCompletions","charAt","getLabelForValue","getInsertTextForProperty","insertTextFormat","Snippet","types","getValueCompletions","getSchemaLessValueCompletions","getContributedValueCompletions","all","offsetForSeparator","separatorAfter","addFillerValueCompletions","matchingSchemas","getMatchingSchemas","s","inverted","schemaProperties_1","Object","keys","key","propertySchema","deprecationMessage","doNotSuggest","proposal","filterText","getFilterTextForValue","fromMarkup","markdownDescription","description","command","title","collectCompletionsForSimilarObject","obj","getInsertTextForValue","parentKey_1","visit","n","getSuggestionKind","collectSuggestionsForValues","contains","getLabelTextForMatchingNode","getInsertTextForMatchingNode","addBooleanValueCompletion","colonOffset","parentKey_2","addDollarSchemaCompletions","parentKey_3","parentKey","addSchemaValueCompletions","valueNode_1","separatorAfter_2","Array","isArray","index","findItemAtOffset","addNullValueCompletion","collectDefaultCompletions","parentKey_4","location_2","collectValueCompletions","addEnumValueCompletions","addDefaultValueCompletions","collectTypes","allOf","anyOf","oneOf","arrayDepth","hasProposals","default","detail","examples","example","defaultSnippets","body","type_1","getInsertTextForSnippetValue","getFilterTextForSnippetValue","getLabelForSnippetValue","bodyText","prefix","suffix","indent","split","join","const","enum","enm","markdownEnumDescriptions","doesSupportMarkdown","enumDescriptions","t","getInsertTextForGuessedValue","schemaIds","getRegisteredSchemaIds","schemaId","Module","JSON","stringify","getInsertTextForPlainText","replacer","snippetValue","array","Value","content","propertyText","resultText","nValueProposals","indexOf","substring","scanner","createScanner","setPosition","token","scan","children","child","getTokenOffset","getTokenLength","start","markupString","Markdown","undefined","supportsMarkdown","completion","textDocument","completionItem","documentationFormat","doesSupportsCommitCharacters","commitCharactersSupport"],"mappings":"AAAA;;;;AAIA,OAAO,KAAKA,MAAZ,MAAwB,yBAAxB;AACA,OAAO,KAAKC,IAAZ,MAAsB,8BAAtB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,cAAT,EAAyBC,kBAAzB,EAA6CC,KAA7C,EAAoDC,QAApD,EAA8DC,gBAA9D,EAAgFC,UAAhF,QAAkG,yBAAlG;AACA,OAAO,KAAKC,GAAZ,MAAqB,kCAArB;AACA,IAAIC,QAAQ,GAAGD,GAAG,CAACE,iBAAJ,EAAf;AACA,IAAIC,qBAAqB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA5B;AACA,IAAIC,wBAAwB,GAAG,CAAC,GAAD,CAA/B;;AACA,IAAIC,cAAc;AAAG;AAAe,YAAY;AAC5C,WAASA,cAAT,CAAwBC,aAAxB,EAAuCC,aAAvC,EAAsDC,kBAAtD,EAA0EC,kBAA1E,EAA8F;AAC1F,QAAIF,aAAa,KAAK,KAAK,CAA3B,EAA8B;AAAEA,MAAAA,aAAa,GAAG,EAAhB;AAAqB;;AACrD,QAAIC,kBAAkB,KAAK,KAAK,CAAhC,EAAmC;AAAEA,MAAAA,kBAAkB,GAAGE,OAArB;AAA+B;;AACpE,QAAID,kBAAkB,KAAK,KAAK,CAAhC,EAAmC;AAAEA,MAAAA,kBAAkB,GAAG,EAArB;AAA0B;;AAC/D,SAAKH,aAAL,GAAqBA,aAArB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKE,oBAAL,GAA4B,CAA5B;AACH;;AACDN,EAAAA,cAAc,CAACO,SAAf,CAAyBC,SAAzB,GAAqC,UAAUC,IAAV,EAAgB;AACjD,SAAK,IAAIC,CAAC,GAAG,KAAKR,aAAL,CAAmBS,MAAnB,GAA4B,CAAzC,EAA4CD,CAAC,IAAI,CAAjD,EAAoDA,CAAC,EAArD,EAAyD;AACrD,UAAI,KAAKR,aAAL,CAAmBQ,CAAnB,EAAsBE,iBAA1B,EAA6C;AACzC,YAAIC,QAAQ,GAAG,KAAKX,aAAL,CAAmBQ,CAAnB,EAAsBE,iBAAtB,CAAwCH,IAAxC,CAAf;;AACA,YAAII,QAAJ,EAAc;AACV,iBAAOA,QAAP;AACH;AACJ;AACJ;;AACD,WAAO,KAAKV,kBAAL,CAAwBW,OAAxB,CAAgCL,IAAhC,CAAP;AACH,GAVD;;AAWAT,EAAAA,cAAc,CAACO,SAAf,CAAyBQ,UAAzB,GAAsC,UAAUC,QAAV,EAAoBC,QAApB,EAA8BC,GAA9B,EAAmC;AACrE,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAIC,MAAM,GAAG;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,YAAY,EAAE;AAFL,KAAb;AAIA,QAAIC,IAAI,GAAGP,QAAQ,CAACQ,OAAT,EAAX;AACA,QAAIC,MAAM,GAAGT,QAAQ,CAACU,QAAT,CAAkBT,QAAlB,CAAb;AACA,QAAIU,IAAI,GAAGT,GAAG,CAACU,iBAAJ,CAAsBH,MAAtB,EAA8B,IAA9B,CAAX;;AACA,QAAI,KAAKI,WAAL,CAAiBb,QAAjB,EAA2BW,IAAI,GAAGA,IAAI,CAACF,MAAR,GAAiB,CAAhD,EAAmDA,MAAnD,CAAJ,EAAgE;AAC5D,aAAOpB,OAAO,CAACS,OAAR,CAAgBM,MAAhB,CAAP;AACH;;AACD,QAAIO,IAAI,IAAKF,MAAM,KAAKE,IAAI,CAACF,MAAL,GAAcE,IAAI,CAAChB,MAAvC,IAAkDc,MAAM,GAAG,CAA/D,EAAkE;AAC9D,UAAIK,EAAE,GAAGP,IAAI,CAACE,MAAM,GAAG,CAAV,CAAb;;AACA,UAAIE,IAAI,CAACI,IAAL,KAAc,QAAd,IAA0BD,EAAE,KAAK,GAAjC,IAAwCH,IAAI,CAACI,IAAL,KAAc,OAAd,IAAyBD,EAAE,KAAK,GAA5E,EAAiF;AAC7E;AACAH,QAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACH;AACJ;;AACD,QAAIC,WAAW,GAAG,KAAKC,cAAL,CAAoBlB,QAApB,EAA8BS,MAA9B,CAAlB;AACA,QAAIU,cAAc,GAAG,IAArB;;AACA,QAAIR,IAAI,KAAKA,IAAI,CAACI,IAAL,KAAc,QAAd,IAA0BJ,IAAI,CAACI,IAAL,KAAc,QAAxC,IAAoDJ,IAAI,CAACI,IAAL,KAAc,SAAlE,IAA+EJ,IAAI,CAACI,IAAL,KAAc,MAAlG,CAAR,EAAmH;AAC/GI,MAAAA,cAAc,GAAG5C,KAAK,CAAC6C,MAAN,CAAapB,QAAQ,CAACqB,UAAT,CAAoBV,IAAI,CAACF,MAAzB,CAAb,EAA+CT,QAAQ,CAACqB,UAAT,CAAoBV,IAAI,CAACF,MAAL,GAAcE,IAAI,CAAChB,MAAvC,CAA/C,CAAjB;AACH,KAFD,MAGK;AACD,UAAI2B,cAAc,GAAGb,MAAM,GAAGQ,WAAW,CAACtB,MAA1C;;AACA,UAAI2B,cAAc,GAAG,CAAjB,IAAsBf,IAAI,CAACe,cAAc,GAAG,CAAlB,CAAJ,KAA6B,GAAvD,EAA4D;AACxDA,QAAAA,cAAc;AACjB;;AACDH,MAAAA,cAAc,GAAG5C,KAAK,CAAC6C,MAAN,CAAapB,QAAQ,CAACqB,UAAT,CAAoBC,cAApB,CAAb,EAAkDrB,QAAlD,CAAjB;AACH;;AACD,QAAIsB,wBAAwB,GAAG,KAA/B,CA/BqE,CA+B/B;;AACtC,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,SAAS,GAAG;AACZC,MAAAA,GAAG,EAAE,UAAUC,UAAV,EAAsB;AACvB,YAAIC,KAAK,GAAGD,UAAU,CAACC,KAAvB;AACA,YAAIC,QAAQ,GAAGL,QAAQ,CAACI,KAAD,CAAvB;;AACA,YAAI,CAACC,QAAL,EAAe;AACXD,UAAAA,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAc,OAAd,EAAuB,GAAvB,CAAR;;AACA,cAAIF,KAAK,CAACjC,MAAN,GAAe,EAAnB,EAAuB;AACnB,gBAAIoC,eAAe,GAAGH,KAAK,CAACI,MAAN,CAAa,CAAb,EAAgB,EAAhB,EAAoBC,IAApB,KAA6B,KAAnD;;AACA,gBAAI,CAACT,QAAQ,CAACO,eAAD,CAAb,EAAgC;AAC5BH,cAAAA,KAAK,GAAGG,eAAR;AACH;AACJ;;AACD,cAAIZ,cAAJ,EAAoB;AAChBQ,YAAAA,UAAU,CAACO,QAAX,GAAsB1D,QAAQ,CAACsD,OAAT,CAAiBX,cAAjB,EAAiCQ,UAAU,CAACQ,UAA5C,CAAtB;AACH;;AACD,cAAIZ,wBAAJ,EAA8B;AAC1BI,YAAAA,UAAU,CAACS,gBAAX,GAA8BT,UAAU,CAACU,IAAX,KAAoB/D,kBAAkB,CAACgE,QAAvC,GAAkDvD,wBAAlD,GAA6ED,qBAA3G;AACH;;AACD6C,UAAAA,UAAU,CAACC,KAAX,GAAmBA,KAAnB;AACAJ,UAAAA,QAAQ,CAACI,KAAD,CAAR,GAAkBD,UAAlB;AACAvB,UAAAA,MAAM,CAACC,KAAP,CAAakC,IAAb,CAAkBZ,UAAlB;AACH,SAjBD,MAkBK,IAAI,CAACE,QAAQ,CAACW,aAAd,EAA6B;AAC9BX,UAAAA,QAAQ,CAACW,aAAT,GAAyBb,UAAU,CAACa,aAApC;AACH;AACJ,OAzBW;AA0BZC,MAAAA,eAAe,EAAE,YAAY;AACzBrC,QAAAA,MAAM,CAACE,YAAP,GAAsB,IAAtB;AACH,OA5BW;AA6BZoC,MAAAA,KAAK,EAAE,UAAUC,OAAV,EAAmB;AACtBC,QAAAA,OAAO,CAACF,KAAR,CAAcC,OAAd;AACH,OA/BW;AAgCZE,MAAAA,GAAG,EAAE,UAAUF,OAAV,EAAmB;AACpBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACH,OAlCW;AAmCZG,MAAAA,oBAAoB,EAAE,YAAY;AAC9B,eAAO1C,MAAM,CAACC,KAAP,CAAaV,MAApB;AACH;AArCW,KAAhB;AAuCA,WAAO,KAAKV,aAAL,CAAmB8D,oBAAnB,CAAwC/C,QAAQ,CAACgD,GAAjD,EAAsD9C,GAAtD,EAA2D+C,IAA3D,CAAgE,UAAUC,MAAV,EAAkB;AACrF,UAAIC,kBAAkB,GAAG,EAAzB;AACA,UAAIC,QAAQ,GAAG,IAAf;AACA,UAAIC,UAAU,GAAG,EAAjB;AACA,UAAIC,eAAe,GAAG,IAAtB;;AACA,UAAI3C,IAAJ,EAAU;AACN,YAAIA,IAAI,CAACI,IAAL,KAAc,QAAlB,EAA4B;AACxB,cAAIC,MAAM,GAAGL,IAAI,CAACK,MAAlB;;AACA,cAAIA,MAAM,IAAIA,MAAM,CAACD,IAAP,KAAgB,UAA1B,IAAwCC,MAAM,CAACuC,OAAP,KAAmB5C,IAA/D,EAAqE;AACjEyC,YAAAA,QAAQ,GAAG,CAACpC,MAAM,CAACwC,SAAnB;AACAF,YAAAA,eAAe,GAAGtC,MAAlB;AACAqC,YAAAA,UAAU,GAAG9C,IAAI,CAACyB,MAAL,CAAYrB,IAAI,CAACF,MAAL,GAAc,CAA1B,EAA6BE,IAAI,CAAChB,MAAL,GAAc,CAA3C,CAAb;;AACA,gBAAIqB,MAAJ,EAAY;AACRL,cAAAA,IAAI,GAAGK,MAAM,CAACA,MAAd;AACH;AACJ;AACJ;AACJ,OAjBoF,CAkBrF;;;AACA,UAAIL,IAAI,IAAIA,IAAI,CAACI,IAAL,KAAc,QAA1B,EAAoC;AAChC;AACA,YAAIJ,IAAI,CAACF,MAAL,KAAgBA,MAApB,EAA4B;AACxB,iBAAOL,MAAP;AACH,SAJ+B,CAKhC;;;AACA,YAAIqD,UAAU,GAAG9C,IAAI,CAAC8C,UAAtB;AACAA,QAAAA,UAAU,CAACC,OAAX,CAAmB,UAAUC,CAAV,EAAa;AAC5B,cAAI,CAACL,eAAD,IAAoBA,eAAe,KAAKK,CAA5C,EAA+C;AAC3CnC,YAAAA,QAAQ,CAACmC,CAAC,CAACJ,OAAF,CAAUK,KAAX,CAAR,GAA4BvF,cAAc,CAAC+C,MAAf,CAAsB,IAAtB,CAA5B;AACH;AACJ,SAJD;AAKA,YAAIyC,gBAAgB,GAAG,EAAvB;;AACA,YAAIT,QAAJ,EAAc;AACVS,UAAAA,gBAAgB,GAAG1D,KAAK,CAAC2D,sBAAN,CAA6B9D,QAA7B,EAAuCA,QAAQ,CAACU,QAAT,CAAkBS,cAAc,CAAC4C,GAAjC,CAAvC,CAAnB;AACH;;AACD,YAAIb,MAAJ,EAAY;AACR;AACA/C,UAAAA,KAAK,CAAC6D,sBAAN,CAA6Bd,MAA7B,EAAqChD,GAArC,EAA0CS,IAA1C,EAAgDyC,QAAhD,EAA0DS,gBAA1D,EAA4EpC,SAA5E;AACH,SAHD,MAIK;AACD;AACAtB,UAAAA,KAAK,CAAC8D,gCAAN,CAAuC/D,GAAvC,EAA4CS,IAA5C,EAAkD0C,UAAlD,EAA8D5B,SAA9D;AACH;;AACD,YAAIyC,UAAU,GAAGlG,MAAM,CAACmG,WAAP,CAAmBxD,IAAnB,CAAjB;;AACAR,QAAAA,KAAK,CAACjB,aAAN,CAAoBwE,OAApB,CAA4B,UAAUU,YAAV,EAAwB;AAChD,cAAIC,cAAc,GAAGD,YAAY,CAACE,0BAAb,CAAwCtE,QAAQ,CAACgD,GAAjD,EAAsDkB,UAAtD,EAAkEjD,WAAlE,EAA+EmC,QAA/E,EAAyFS,gBAAgB,KAAK,EAA9G,EAAkHpC,SAAlH,CAArB;;AACA,cAAI4C,cAAJ,EAAoB;AAChBlB,YAAAA,kBAAkB,CAACZ,IAAnB,CAAwB8B,cAAxB;AACH;AACJ,SALD;;AAMA,YAAK,CAACnB,MAAD,IAAWjC,WAAW,CAACtB,MAAZ,GAAqB,CAAhC,IAAqCY,IAAI,CAACgE,MAAL,CAAY9D,MAAM,GAAGQ,WAAW,CAACtB,MAArB,GAA8B,CAA1C,MAAiD,GAA3F,EAAiG;AAC7F8B,UAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,YAAAA,IAAI,EAAE/D,kBAAkB,CAACgE,QADf;AAEVV,YAAAA,KAAK,EAAEzB,KAAK,CAACqE,gBAAN,CAAuBvD,WAAvB,CAFG;AAGVkB,YAAAA,UAAU,EAAEhC,KAAK,CAACsE,wBAAN,CAA+BxD,WAA/B,EAA4C,IAA5C,EAAkD,KAAlD,EAAyD4C,gBAAzD,CAHF;AAIVa,YAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJzB;AAIkCnC,YAAAA,aAAa,EAAE;AAJjD,WAAd;AAMAf,UAAAA,SAAS,CAACgB,eAAV;AACH;AACJ,OA3DoF,CA4DrF;;;AACA,UAAImC,KAAK,GAAG,EAAZ;;AACA,UAAI1B,MAAJ,EAAY;AACR;AACA/C,QAAAA,KAAK,CAAC0E,mBAAN,CAA0B3B,MAA1B,EAAkChD,GAAlC,EAAuCS,IAAvC,EAA6CF,MAA7C,EAAqDT,QAArD,EAA+DyB,SAA/D,EAA0EmD,KAA1E;AACH,OAHD,MAIK;AACD;AACAzE,QAAAA,KAAK,CAAC2E,6BAAN,CAAoC5E,GAApC,EAAyCS,IAAzC,EAA+CF,MAA/C,EAAuDT,QAAvD,EAAiEyB,SAAjE;AACH;;AACD,UAAItB,KAAK,CAACjB,aAAN,CAAoBS,MAApB,GAA6B,CAAjC,EAAoC;AAChCQ,QAAAA,KAAK,CAAC4E,8BAAN,CAAqC7E,GAArC,EAA0CS,IAA1C,EAAgDF,MAAhD,EAAwDT,QAAxD,EAAkEyB,SAAlE,EAA6E0B,kBAA7E;AACH;;AACD,aAAOhD,KAAK,CAAChB,kBAAN,CAAyB6F,GAAzB,CAA6B7B,kBAA7B,EAAiDF,IAAjD,CAAsD,YAAY;AACrE,YAAIxB,SAAS,CAACqB,oBAAV,OAAqC,CAAzC,EAA4C;AACxC,cAAImC,kBAAkB,GAAGxE,MAAzB;;AACA,cAAIE,IAAI,KAAKA,IAAI,CAACI,IAAL,KAAc,QAAd,IAA0BJ,IAAI,CAACI,IAAL,KAAc,QAAxC,IAAoDJ,IAAI,CAACI,IAAL,KAAc,SAAlE,IAA+EJ,IAAI,CAACI,IAAL,KAAc,MAAlG,CAAR,EAAmH;AAC/GkE,YAAAA,kBAAkB,GAAGtE,IAAI,CAACF,MAAL,GAAcE,IAAI,CAAChB,MAAxC;AACH;;AACD,cAAIuF,cAAc,GAAG/E,KAAK,CAAC2D,sBAAN,CAA6B9D,QAA7B,EAAuCiF,kBAAvC,CAArB;;AACA9E,UAAAA,KAAK,CAACgF,yBAAN,CAAgCP,KAAhC,EAAuCM,cAAvC,EAAuDzD,SAAvD;AACH;;AACD,eAAOrB,MAAP;AACH,OAVM,CAAP;AAWH,KApFM,CAAP;AAqFH,GA7JD;;AA8JApB,EAAAA,cAAc,CAACO,SAAf,CAAyByE,sBAAzB,GAAkD,UAAUd,MAAV,EAAkBhD,GAAlB,EAAuBS,IAAvB,EAA6ByC,QAA7B,EAAuC8B,cAAvC,EAAuDzD,SAAvD,EAAkE;AAChH,QAAItB,KAAK,GAAG,IAAZ;;AACA,QAAIiF,eAAe,GAAGlF,GAAG,CAACmF,kBAAJ,CAAuBnC,MAAM,CAACA,MAA9B,EAAsCvC,IAAI,CAACF,MAA3C,CAAtB;AACA2E,IAAAA,eAAe,CAAC1B,OAAhB,CAAwB,UAAU4B,CAAV,EAAa;AACjC,UAAIA,CAAC,CAAC3E,IAAF,KAAWA,IAAX,IAAmB,CAAC2E,CAAC,CAACC,QAA1B,EAAoC;AAChC,YAAIC,kBAAkB,GAAGF,CAAC,CAACpC,MAAF,CAASO,UAAlC;;AACA,YAAI+B,kBAAJ,EAAwB;AACpBC,UAAAA,MAAM,CAACC,IAAP,CAAYF,kBAAZ,EAAgC9B,OAAhC,CAAwC,UAAUiC,GAAV,EAAe;AACnD,gBAAIC,cAAc,GAAGJ,kBAAkB,CAACG,GAAD,CAAvC;;AACA,gBAAI,OAAOC,cAAP,KAA0B,QAA1B,IAAsC,CAACA,cAAc,CAACC,kBAAtD,IAA4E,CAACD,cAAc,CAACE,YAAhG,EAA8G;AAC1G,kBAAIC,QAAQ,GAAG;AACX1D,gBAAAA,IAAI,EAAE/D,kBAAkB,CAACgE,QADd;AAEXV,gBAAAA,KAAK,EAAE+D,GAFI;AAGXxD,gBAAAA,UAAU,EAAEhC,KAAK,CAACsE,wBAAN,CAA+BkB,GAA/B,EAAoCC,cAApC,EAAoDxC,QAApD,EAA8D8B,cAA9D,CAHD;AAIXR,gBAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJxB;AAKXqB,gBAAAA,UAAU,EAAE7F,KAAK,CAAC8F,qBAAN,CAA4BN,GAA5B,CALD;AAMXnD,gBAAAA,aAAa,EAAErC,KAAK,CAAC+F,UAAN,CAAiBN,cAAc,CAACO,mBAAhC,KAAwDP,cAAc,CAACQ,WAAvE,IAAsF;AAN1F,eAAf;;AAQA,kBAAIjI,QAAQ,CAAC4H,QAAQ,CAAC5D,UAAV,EAAsB,OAAO+C,cAA7B,CAAZ,EAA0D;AACtDa,gBAAAA,QAAQ,CAACM,OAAT,GAAmB;AACfC,kBAAAA,KAAK,EAAE,SADQ;AAEfD,kBAAAA,OAAO,EAAE;AAFM,iBAAnB;AAIH;;AACD5E,cAAAA,SAAS,CAACC,GAAV,CAAcqE,QAAd;AACH;AACJ,WAnBD;AAoBH;AACJ;AACJ,KA1BD;AA2BH,GA9BD;;AA+BA/G,EAAAA,cAAc,CAACO,SAAf,CAAyB0E,gCAAzB,GAA4D,UAAU/D,GAAV,EAAeS,IAAf,EAAqB0C,UAArB,EAAiC5B,SAAjC,EAA4C;AACpG,QAAItB,KAAK,GAAG,IAAZ;;AACA,QAAIoG,kCAAkC,GAAG,UAAUC,GAAV,EAAe;AACpDA,MAAAA,GAAG,CAAC/C,UAAJ,CAAeC,OAAf,CAAuB,UAAUC,CAAV,EAAa;AAChC,YAAIgC,GAAG,GAAGhC,CAAC,CAACJ,OAAF,CAAUK,KAApB;AACAnC,QAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,UAAAA,IAAI,EAAE/D,kBAAkB,CAACgE,QADf;AAEVV,UAAAA,KAAK,EAAE+D,GAFG;AAGVxD,UAAAA,UAAU,EAAEhC,KAAK,CAACsG,qBAAN,CAA4Bd,GAA5B,EAAiC,EAAjC,CAHF;AAIVjB,UAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJzB;AAKVqB,UAAAA,UAAU,EAAE7F,KAAK,CAAC8F,qBAAN,CAA4BN,GAA5B,CALF;AAMVnD,UAAAA,aAAa,EAAE;AANL,SAAd;AAQH,OAVD;AAWH,KAZD;;AAaA,QAAI7B,IAAI,CAACK,MAAT,EAAiB;AACb,UAAIL,IAAI,CAACK,MAAL,CAAYD,IAAZ,KAAqB,UAAzB,EAAqC;AACjC;AACA,YAAI2F,WAAW,GAAG/F,IAAI,CAACK,MAAL,CAAYuC,OAAZ,CAAoBK,KAAtC;AACA1D,QAAAA,GAAG,CAACyG,KAAJ,CAAU,UAAUC,CAAV,EAAa;AACnB,cAAIA,CAAC,CAAC7F,IAAF,KAAW,UAAX,IAAyB6F,CAAC,KAAKjG,IAAI,CAACK,MAApC,IAA8C4F,CAAC,CAACrD,OAAF,CAAUK,KAAV,KAAoB8C,WAAlE,IAAiFE,CAAC,CAACpD,SAAnF,IAAgGoD,CAAC,CAACpD,SAAF,CAAYzC,IAAZ,KAAqB,QAAzH,EAAmI;AAC/HwF,YAAAA,kCAAkC,CAACK,CAAC,CAACpD,SAAH,CAAlC;AACH;;AACD,iBAAO,IAAP;AACH,SALD;AAMH,OATD,MAUK,IAAI7C,IAAI,CAACK,MAAL,CAAYD,IAAZ,KAAqB,OAAzB,EAAkC;AACnC;AACAJ,QAAAA,IAAI,CAACK,MAAL,CAAYX,KAAZ,CAAkBqD,OAAlB,CAA0B,UAAUkD,CAAV,EAAa;AACnC,cAAIA,CAAC,CAAC7F,IAAF,KAAW,QAAX,IAAuB6F,CAAC,KAAKjG,IAAjC,EAAuC;AACnC4F,YAAAA,kCAAkC,CAACK,CAAD,CAAlC;AACH;AACJ,SAJD;AAKH;AACJ,KAnBD,MAoBK,IAAIjG,IAAI,CAACI,IAAL,KAAc,QAAlB,EAA4B;AAC7BU,MAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,QAAAA,IAAI,EAAE/D,kBAAkB,CAACgE,QADf;AAEVV,QAAAA,KAAK,EAAE,SAFG;AAGVO,QAAAA,UAAU,EAAE,KAAKsC,wBAAL,CAA8B,SAA9B,EAAyC,IAAzC,EAA+C,IAA/C,EAAqD,EAArD,CAHF;AAIVC,QAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJzB;AAIkCnC,QAAAA,aAAa,EAAE,EAJjD;AAKVwD,QAAAA,UAAU,EAAE,KAAKC,qBAAL,CAA2B,SAA3B;AALF,OAAd;AAOH;AACJ,GA5CD;;AA6CAjH,EAAAA,cAAc,CAACO,SAAf,CAAyBuF,6BAAzB,GAAyD,UAAU5E,GAAV,EAAeS,IAAf,EAAqBF,MAArB,EAA6BT,QAA7B,EAAuCyB,SAAvC,EAAkD;AACvG,QAAItB,KAAK,GAAG,IAAZ;;AACA,QAAI8E,kBAAkB,GAAGxE,MAAzB;;AACA,QAAIE,IAAI,KAAKA,IAAI,CAACI,IAAL,KAAc,QAAd,IAA0BJ,IAAI,CAACI,IAAL,KAAc,QAAxC,IAAoDJ,IAAI,CAACI,IAAL,KAAc,SAAlE,IAA+EJ,IAAI,CAACI,IAAL,KAAc,MAAlG,CAAR,EAAmH;AAC/GkE,MAAAA,kBAAkB,GAAGtE,IAAI,CAACF,MAAL,GAAcE,IAAI,CAAChB,MAAxC;AACAgB,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACH;;AACD,QAAI,CAACL,IAAL,EAAW;AACPc,MAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,QAAAA,IAAI,EAAE,KAAKwE,iBAAL,CAAuB,QAAvB,CADI;AAEVjF,QAAAA,KAAK,EAAE,cAFG;AAGVO,QAAAA,UAAU,EAAE,KAAKsE,qBAAL,CAA2B,EAA3B,EAA+B,EAA/B,CAHF;AAIV/B,QAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJzB;AAKVnC,QAAAA,aAAa,EAAE;AALL,OAAd;AAOAf,MAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,QAAAA,IAAI,EAAE,KAAKwE,iBAAL,CAAuB,OAAvB,CADI;AAEVjF,QAAAA,KAAK,EAAE,aAFG;AAGVO,QAAAA,UAAU,EAAE,KAAKsE,qBAAL,CAA2B,EAA3B,EAA+B,EAA/B,CAHF;AAIV/B,QAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJzB;AAKVnC,QAAAA,aAAa,EAAE;AALL,OAAd;AAOA;AACH;;AACD,QAAI0C,cAAc,GAAG,KAAKpB,sBAAL,CAA4B9D,QAA5B,EAAsCiF,kBAAtC,CAArB;;AACA,QAAI6B,2BAA2B,GAAG,UAAUlD,KAAV,EAAiB;AAC/C,UAAI,CAAC5F,MAAM,CAAC+I,QAAP,CAAgBnD,KAAK,CAAC5C,MAAtB,EAA8BP,MAA9B,EAAsC,IAAtC,CAAL,EAAkD;AAC9CgB,QAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,UAAAA,IAAI,EAAElC,KAAK,CAAC0G,iBAAN,CAAwBjD,KAAK,CAAC7C,IAA9B,CADI;AAEVa,UAAAA,KAAK,EAAEzB,KAAK,CAAC6G,2BAAN,CAAkCpD,KAAlC,EAAyC5D,QAAzC,CAFG;AAGVmC,UAAAA,UAAU,EAAEhC,KAAK,CAAC8G,4BAAN,CAAmCrD,KAAnC,EAA0C5D,QAA1C,EAAoDkF,cAApD,CAHF;AAIVR,UAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJzB;AAIkCnC,UAAAA,aAAa,EAAE;AAJjD,SAAd;AAMH;;AACD,UAAIoB,KAAK,CAAC7C,IAAN,KAAe,SAAnB,EAA8B;AAC1BZ,QAAAA,KAAK,CAAC+G,yBAAN,CAAgC,CAACtD,KAAK,CAACA,KAAvC,EAA8CsB,cAA9C,EAA8DzD,SAA9D;AACH;AACJ,KAZD;;AAaA,QAAId,IAAI,CAACI,IAAL,KAAc,UAAlB,EAA8B;AAC1B,UAAIN,MAAM,GAAGE,IAAI,CAACwG,WAAlB,EAA+B;AAC3B,YAAI3D,SAAS,GAAG7C,IAAI,CAAC6C,SAArB;;AACA,YAAIA,SAAS,KAAK/C,MAAM,GAAI+C,SAAS,CAAC/C,MAAV,GAAmB+C,SAAS,CAAC7D,MAAvC,IAAkD6D,SAAS,CAACzC,IAAV,KAAmB,QAArE,IAAiFyC,SAAS,CAACzC,IAAV,KAAmB,OAAzG,CAAb,EAAgI;AAC5H;AACH,SAJ0B,CAK3B;;;AACA,YAAIqG,WAAW,GAAGzG,IAAI,CAAC4C,OAAL,CAAaK,KAA/B;AACA1D,QAAAA,GAAG,CAACyG,KAAJ,CAAU,UAAUC,CAAV,EAAa;AACnB,cAAIA,CAAC,CAAC7F,IAAF,KAAW,UAAX,IAAyB6F,CAAC,CAACrD,OAAF,CAAUK,KAAV,KAAoBwD,WAA7C,IAA4DR,CAAC,CAACpD,SAAlE,EAA6E;AACzEsD,YAAAA,2BAA2B,CAACF,CAAC,CAACpD,SAAH,CAA3B;AACH;;AACD,iBAAO,IAAP;AACH,SALD;;AAMA,YAAI4D,WAAW,KAAK,SAAhB,IAA6BzG,IAAI,CAACK,MAAlC,IAA4C,CAACL,IAAI,CAACK,MAAL,CAAYA,MAA7D,EAAqE;AACjE,eAAKqG,0BAAL,CAAgCnC,cAAhC,EAAgDzD,SAAhD;AACH;AACJ;AACJ;;AACD,QAAId,IAAI,CAACI,IAAL,KAAc,OAAlB,EAA2B;AACvB,UAAIJ,IAAI,CAACK,MAAL,IAAeL,IAAI,CAACK,MAAL,CAAYD,IAAZ,KAAqB,UAAxC,EAAoD;AAChD;AACA,YAAIuG,WAAW,GAAG3G,IAAI,CAACK,MAAL,CAAYuC,OAAZ,CAAoBK,KAAtC;AACA1D,QAAAA,GAAG,CAACyG,KAAJ,CAAU,UAAUC,CAAV,EAAa;AACnB,cAAIA,CAAC,CAAC7F,IAAF,KAAW,UAAX,IAAyB6F,CAAC,CAACrD,OAAF,CAAUK,KAAV,KAAoB0D,WAA7C,IAA4DV,CAAC,CAACpD,SAA9D,IAA2EoD,CAAC,CAACpD,SAAF,CAAYzC,IAAZ,KAAqB,OAApG,EAA6G;AACzG6F,YAAAA,CAAC,CAACpD,SAAF,CAAYnD,KAAZ,CAAkBqD,OAAlB,CAA0BoD,2BAA1B;AACH;;AACD,iBAAO,IAAP;AACH,SALD;AAMH,OATD,MAUK;AACD;AACAnG,QAAAA,IAAI,CAACN,KAAL,CAAWqD,OAAX,CAAmBoD,2BAAnB;AACH;AACJ;AACJ,GAzED;;AA0EA9H,EAAAA,cAAc,CAACO,SAAf,CAAyBsF,mBAAzB,GAA+C,UAAU3B,MAAV,EAAkBhD,GAAlB,EAAuBS,IAAvB,EAA6BF,MAA7B,EAAqCT,QAArC,EAA+CyB,SAA/C,EAA0DmD,KAA1D,EAAiE;AAC5G,QAAIzE,KAAK,GAAG,IAAZ;;AACA,QAAI8E,kBAAkB,GAAGxE,MAAzB;AACA,QAAI8G,SAAS,GAAG,IAAhB;AACA,QAAI/D,SAAS,GAAG,IAAhB;;AACA,QAAI7C,IAAI,KAAKA,IAAI,CAACI,IAAL,KAAc,QAAd,IAA0BJ,IAAI,CAACI,IAAL,KAAc,QAAxC,IAAoDJ,IAAI,CAACI,IAAL,KAAc,SAAlE,IAA+EJ,IAAI,CAACI,IAAL,KAAc,MAAlG,CAAR,EAAmH;AAC/GkE,MAAAA,kBAAkB,GAAGtE,IAAI,CAACF,MAAL,GAAcE,IAAI,CAAChB,MAAxC;AACA6D,MAAAA,SAAS,GAAG7C,IAAZ;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACH;;AACD,QAAI,CAACL,IAAL,EAAW;AACP,WAAK6G,yBAAL,CAA+BtE,MAAM,CAACA,MAAtC,EAA8C,EAA9C,EAAkDzB,SAAlD,EAA6DmD,KAA7D;AACA;AACH;;AACD,QAAKjE,IAAI,CAACI,IAAL,KAAc,UAAf,IAA8BN,MAAM,GAAGE,IAAI,CAACwG,WAAhD,EAA6D;AACzD,UAAIM,WAAW,GAAG9G,IAAI,CAAC6C,SAAvB;;AACA,UAAIiE,WAAW,IAAIhH,MAAM,GAAIgH,WAAW,CAAChH,MAAZ,GAAqBgH,WAAW,CAAC9H,MAA9D,EAAuE;AACnE,eADmE,CAC3D;AACX;;AACD4H,MAAAA,SAAS,GAAG5G,IAAI,CAAC4C,OAAL,CAAaK,KAAzB;AACAjD,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACH;;AACD,QAAIL,IAAI,KAAK4G,SAAS,KAAK,IAAd,IAAsB5G,IAAI,CAACI,IAAL,KAAc,OAAzC,CAAR,EAA2D;AACvD,UAAI2G,gBAAgB,GAAG,KAAK5D,sBAAL,CAA4B9D,QAA5B,EAAsCiF,kBAAtC,CAAvB;AACA,UAAIG,eAAe,GAAGlF,GAAG,CAACmF,kBAAJ,CAAuBnC,MAAM,CAACA,MAA9B,EAAsCvC,IAAI,CAACF,MAA3C,EAAmD+C,SAAnD,CAAtB;AACA4B,MAAAA,eAAe,CAAC1B,OAAhB,CAAwB,UAAU4B,CAAV,EAAa;AACjC,YAAIA,CAAC,CAAC3E,IAAF,KAAWA,IAAX,IAAmB,CAAC2E,CAAC,CAACC,QAAtB,IAAkCD,CAAC,CAACpC,MAAxC,EAAgD;AAC5C,cAAIvC,IAAI,CAACI,IAAL,KAAc,OAAd,IAAyBuE,CAAC,CAACpC,MAAF,CAAS7C,KAAtC,EAA6C;AACzC,gBAAIsH,KAAK,CAACC,OAAN,CAActC,CAAC,CAACpC,MAAF,CAAS7C,KAAvB,CAAJ,EAAmC;AAC/B,kBAAIwH,KAAK,GAAG1H,KAAK,CAAC2H,gBAAN,CAAuBnH,IAAvB,EAA6BX,QAA7B,EAAuCS,MAAvC,CAAZ;;AACA,kBAAIoH,KAAK,GAAGvC,CAAC,CAACpC,MAAF,CAAS7C,KAAT,CAAeV,MAA3B,EAAmC;AAC/BQ,gBAAAA,KAAK,CAACqH,yBAAN,CAAgClC,CAAC,CAACpC,MAAF,CAAS7C,KAAT,CAAewH,KAAf,CAAhC,EAAuDH,gBAAvD,EAAyEjG,SAAzE,EAAoFmD,KAApF;AACH;AACJ,aALD,MAMK;AACDzE,cAAAA,KAAK,CAACqH,yBAAN,CAAgClC,CAAC,CAACpC,MAAF,CAAS7C,KAAzC,EAAgDqH,gBAAhD,EAAkEjG,SAAlE,EAA6EmD,KAA7E;AACH;AACJ;;AACD,cAAIU,CAAC,CAACpC,MAAF,CAASO,UAAb,EAAyB;AACrB,gBAAImC,cAAc,GAAGN,CAAC,CAACpC,MAAF,CAASO,UAAT,CAAoB8D,SAApB,CAArB;;AACA,gBAAI3B,cAAJ,EAAoB;AAChBzF,cAAAA,KAAK,CAACqH,yBAAN,CAAgC5B,cAAhC,EAAgD8B,gBAAhD,EAAkEjG,SAAlE,EAA6EmD,KAA7E;AACH;AACJ;AACJ;AACJ,OApBD;;AAqBA,UAAI2C,SAAS,KAAK,SAAd,IAA2B,CAAC5G,IAAI,CAACK,MAArC,EAA6C;AACzC,aAAKqG,0BAAL,CAAgCK,gBAAhC,EAAkDjG,SAAlD;AACH;;AACD,UAAImD,KAAK,CAAC,SAAD,CAAT,EAAsB;AAClB,aAAKsC,yBAAL,CAA+B,IAA/B,EAAqCQ,gBAArC,EAAuDjG,SAAvD;AACA,aAAKyF,yBAAL,CAA+B,KAA/B,EAAsCQ,gBAAtC,EAAwDjG,SAAxD;AACH;;AACD,UAAImD,KAAK,CAAC,MAAD,CAAT,EAAmB;AACf,aAAKmD,sBAAL,CAA4BL,gBAA5B,EAA8CjG,SAA9C;AACH;AACJ;AACJ,GAzDD;;AA0DAzC,EAAAA,cAAc,CAACO,SAAf,CAAyBwF,8BAAzB,GAA0D,UAAU7E,GAAV,EAAeS,IAAf,EAAqBF,MAArB,EAA6BT,QAA7B,EAAuCyB,SAAvC,EAAkD0B,kBAAlD,EAAsE;AAC5H,QAAI,CAACxC,IAAL,EAAW;AACP,WAAKzB,aAAL,CAAmBwE,OAAnB,CAA2B,UAAUU,YAAV,EAAwB;AAC/C,YAAIC,cAAc,GAAGD,YAAY,CAAC4D,yBAAb,CAAuChI,QAAQ,CAACgD,GAAhD,EAAqDvB,SAArD,CAArB;;AACA,YAAI4C,cAAJ,EAAoB;AAChBlB,UAAAA,kBAAkB,CAACZ,IAAnB,CAAwB8B,cAAxB;AACH;AACJ,OALD;AAMH,KAPD,MAQK;AACD,UAAI1D,IAAI,CAACI,IAAL,KAAc,QAAd,IAA0BJ,IAAI,CAACI,IAAL,KAAc,QAAxC,IAAoDJ,IAAI,CAACI,IAAL,KAAc,SAAlE,IAA+EJ,IAAI,CAACI,IAAL,KAAc,MAAjG,EAAyG;AACrGJ,QAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACH;;AACD,UAAKL,IAAI,CAACI,IAAL,KAAc,UAAf,IAA8BN,MAAM,GAAGE,IAAI,CAACwG,WAAhD,EAA6D;AACzD,YAAIc,WAAW,GAAGtH,IAAI,CAAC4C,OAAL,CAAaK,KAA/B;AACA,YAAIJ,SAAS,GAAG7C,IAAI,CAAC6C,SAArB;;AACA,YAAI,CAACA,SAAD,IAAc/C,MAAM,IAAK+C,SAAS,CAAC/C,MAAV,GAAmB+C,SAAS,CAAC7D,MAA1D,EAAmE;AAC/D,cAAIuI,UAAU,GAAGlK,MAAM,CAACmG,WAAP,CAAmBxD,IAAI,CAACK,MAAxB,CAAjB;AACA,eAAK9B,aAAL,CAAmBwE,OAAnB,CAA2B,UAAUU,YAAV,EAAwB;AAC/C,gBAAIC,cAAc,GAAGD,YAAY,CAAC+D,uBAAb,CAAqCnI,QAAQ,CAACgD,GAA9C,EAAmDkF,UAAnD,EAA+DD,WAA/D,EAA4ExG,SAA5E,CAArB;;AACA,gBAAI4C,cAAJ,EAAoB;AAChBlB,cAAAA,kBAAkB,CAACZ,IAAnB,CAAwB8B,cAAxB;AACH;AACJ,WALD;AAMH;AACJ;AACJ;AACJ,GA3BD;;AA4BArF,EAAAA,cAAc,CAACO,SAAf,CAAyBiI,yBAAzB,GAAqD,UAAUtE,MAAV,EAAkBgC,cAAlB,EAAkCzD,SAAlC,EAA6CmD,KAA7C,EAAoD;AACrG,QAAIzE,KAAK,GAAG,IAAZ;;AACA,QAAI,OAAO+C,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,WAAKkF,uBAAL,CAA6BlF,MAA7B,EAAqCgC,cAArC,EAAqDzD,SAArD;AACA,WAAK4G,0BAAL,CAAgCnF,MAAhC,EAAwCgC,cAAxC,EAAwDzD,SAAxD;AACA,WAAK6G,YAAL,CAAkBpF,MAAlB,EAA0B0B,KAA1B;;AACA,UAAI+C,KAAK,CAACC,OAAN,CAAc1E,MAAM,CAACqF,KAArB,CAAJ,EAAiC;AAC7BrF,QAAAA,MAAM,CAACqF,KAAP,CAAa7E,OAAb,CAAqB,UAAU4B,CAAV,EAAa;AAAE,iBAAOnF,KAAK,CAACqH,yBAAN,CAAgClC,CAAhC,EAAmCJ,cAAnC,EAAmDzD,SAAnD,EAA8DmD,KAA9D,CAAP;AAA8E,SAAlH;AACH;;AACD,UAAI+C,KAAK,CAACC,OAAN,CAAc1E,MAAM,CAACsF,KAArB,CAAJ,EAAiC;AAC7BtF,QAAAA,MAAM,CAACsF,KAAP,CAAa9E,OAAb,CAAqB,UAAU4B,CAAV,EAAa;AAAE,iBAAOnF,KAAK,CAACqH,yBAAN,CAAgClC,CAAhC,EAAmCJ,cAAnC,EAAmDzD,SAAnD,EAA8DmD,KAA9D,CAAP;AAA8E,SAAlH;AACH;;AACD,UAAI+C,KAAK,CAACC,OAAN,CAAc1E,MAAM,CAACuF,KAArB,CAAJ,EAAiC;AAC7BvF,QAAAA,MAAM,CAACuF,KAAP,CAAa/E,OAAb,CAAqB,UAAU4B,CAAV,EAAa;AAAE,iBAAOnF,KAAK,CAACqH,yBAAN,CAAgClC,CAAhC,EAAmCJ,cAAnC,EAAmDzD,SAAnD,EAA8DmD,KAA9D,CAAP;AAA8E,SAAlH;AACH;AACJ;AACJ,GAhBD;;AAiBA5F,EAAAA,cAAc,CAACO,SAAf,CAAyB8I,0BAAzB,GAAsD,UAAUnF,MAAV,EAAkBgC,cAAlB,EAAkCzD,SAAlC,EAA6CiH,UAA7C,EAAyD;AAC3G,QAAIvI,KAAK,GAAG,IAAZ;;AACA,QAAIuI,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAEA,MAAAA,UAAU,GAAG,CAAb;AAAiB;;AAC9C,QAAIC,YAAY,GAAG,KAAnB;;AACA,QAAIvK,SAAS,CAAC8E,MAAM,CAAC0F,OAAR,CAAb,EAA+B;AAC3B,UAAI7H,IAAI,GAAGmC,MAAM,CAACnC,IAAlB;AACA,UAAI6C,KAAK,GAAGV,MAAM,CAAC0F,OAAnB;;AACA,WAAK,IAAIlJ,CAAC,GAAGgJ,UAAb,EAAyBhJ,CAAC,GAAG,CAA7B,EAAgCA,CAAC,EAAjC,EAAqC;AACjCkE,QAAAA,KAAK,GAAG,CAACA,KAAD,CAAR;AACA7C,QAAAA,IAAI,GAAG,OAAP;AACH;;AACDU,MAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,QAAAA,IAAI,EAAE,KAAKwE,iBAAL,CAAuB9F,IAAvB,CADI;AAEVa,QAAAA,KAAK,EAAE,KAAK4C,gBAAL,CAAsBZ,KAAtB,CAFG;AAGVzB,QAAAA,UAAU,EAAE,KAAKsE,qBAAL,CAA2B7C,KAA3B,EAAkCsB,cAAlC,CAHF;AAIVR,QAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJzB;AAKVkE,QAAAA,MAAM,EAAEjK,QAAQ,CAAC,sBAAD,EAAyB,eAAzB;AALN,OAAd;AAOA+J,MAAAA,YAAY,GAAG,IAAf;AACH;;AACD,QAAIhB,KAAK,CAACC,OAAN,CAAc1E,MAAM,CAAC4F,QAArB,CAAJ,EAAoC;AAChC5F,MAAAA,MAAM,CAAC4F,QAAP,CAAgBpF,OAAhB,CAAwB,UAAUqF,OAAV,EAAmB;AACvC,YAAIhI,IAAI,GAAGmC,MAAM,CAACnC,IAAlB;AACA,YAAI6C,KAAK,GAAGmF,OAAZ;;AACA,aAAK,IAAIrJ,CAAC,GAAGgJ,UAAb,EAAyBhJ,CAAC,GAAG,CAA7B,EAAgCA,CAAC,EAAjC,EAAqC;AACjCkE,UAAAA,KAAK,GAAG,CAACA,KAAD,CAAR;AACA7C,UAAAA,IAAI,GAAG,OAAP;AACH;;AACDU,QAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,UAAAA,IAAI,EAAElC,KAAK,CAAC0G,iBAAN,CAAwB9F,IAAxB,CADI;AAEVa,UAAAA,KAAK,EAAEzB,KAAK,CAACqE,gBAAN,CAAuBZ,KAAvB,CAFG;AAGVzB,UAAAA,UAAU,EAAEhC,KAAK,CAACsG,qBAAN,CAA4B7C,KAA5B,EAAmCsB,cAAnC,CAHF;AAIVR,UAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG;AAJzB,SAAd;AAMAgE,QAAAA,YAAY,GAAG,IAAf;AACH,OAdD;AAeH;;AACD,QAAIhB,KAAK,CAACC,OAAN,CAAc1E,MAAM,CAAC8F,eAArB,CAAJ,EAA2C;AACvC9F,MAAAA,MAAM,CAAC8F,eAAP,CAAuBtF,OAAvB,CAA+B,UAAU4B,CAAV,EAAa;AACxC,YAAIvE,IAAI,GAAGmC,MAAM,CAACnC,IAAlB;AACA,YAAI6C,KAAK,GAAG0B,CAAC,CAAC2D,IAAd;AACA,YAAIrH,KAAK,GAAG0D,CAAC,CAAC1D,KAAd;AACA,YAAIO,UAAJ;AACA,YAAI6D,UAAJ;;AACA,YAAI5H,SAAS,CAACwF,KAAD,CAAb,EAAsB;AAClB,cAAIsF,MAAM,GAAGhG,MAAM,CAACnC,IAApB;;AACA,eAAK,IAAIrB,CAAC,GAAGgJ,UAAb,EAAyBhJ,CAAC,GAAG,CAA7B,EAAgCA,CAAC,EAAjC,EAAqC;AACjCkE,YAAAA,KAAK,GAAG,CAACA,KAAD,CAAR;AACAsF,YAAAA,MAAM,GAAG,OAAT;AACH;;AACD/G,UAAAA,UAAU,GAAGhC,KAAK,CAACgJ,4BAAN,CAAmCvF,KAAnC,EAA0CsB,cAA1C,CAAb;AACAc,UAAAA,UAAU,GAAG7F,KAAK,CAACiJ,4BAAN,CAAmCxF,KAAnC,CAAb;AACAhC,UAAAA,KAAK,GAAGA,KAAK,IAAIzB,KAAK,CAACkJ,uBAAN,CAA8BzF,KAA9B,CAAjB;AACH,SATD,MAUK,IAAI,OAAO0B,CAAC,CAACgE,QAAT,KAAsB,QAA1B,EAAoC;AACrC,cAAIC,MAAM,GAAG,EAAb;AAAA,cAAiBC,MAAM,GAAG,EAA1B;AAAA,cAA8BC,MAAM,GAAG,EAAvC;;AACA,eAAK,IAAI/J,CAAC,GAAGgJ,UAAb,EAAyBhJ,CAAC,GAAG,CAA7B,EAAgCA,CAAC,EAAjC,EAAqC;AACjC6J,YAAAA,MAAM,GAAGA,MAAM,GAAGE,MAAT,GAAkB,KAA3B;AACAD,YAAAA,MAAM,GAAGA,MAAM,GAAG,IAAT,GAAgBC,MAAhB,GAAyB,GAAlC;AACAA,YAAAA,MAAM,IAAI,IAAV;AACA1I,YAAAA,IAAI,GAAG,OAAP;AACH;;AACDoB,UAAAA,UAAU,GAAGoH,MAAM,GAAGE,MAAT,GAAkBnE,CAAC,CAACgE,QAAF,CAAWI,KAAX,CAAiB,IAAjB,EAAuBC,IAAvB,CAA4B,OAAOF,MAAnC,CAAlB,GAA+DD,MAA/D,GAAwEtE,cAArF;AACAtD,UAAAA,KAAK,GAAGA,KAAK,IAAIO,UAAjB,EACI6D,UAAU,GAAG7D,UAAU,CAACL,OAAX,CAAmB,OAAnB,EAA4B,EAA5B,CADjB,CATqC,CAUa;AACrD;;AACDL,QAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,UAAAA,IAAI,EAAElC,KAAK,CAAC0G,iBAAN,CAAwB9F,IAAxB,CADI;AAEVa,UAAAA,KAAK,EAAEA,KAFG;AAGVY,UAAAA,aAAa,EAAErC,KAAK,CAAC+F,UAAN,CAAiBZ,CAAC,CAACa,mBAAnB,KAA2Cb,CAAC,CAACc,WAHlD;AAIVjE,UAAAA,UAAU,EAAEA,UAJF;AAKVuC,UAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OALzB;AAMVqB,UAAAA,UAAU,EAAEA;AANF,SAAd;AAQA2C,QAAAA,YAAY,GAAG,IAAf;AACH,OArCD;AAsCH;;AACD,QAAI,CAACA,YAAD,IAAiB,OAAOzF,MAAM,CAAC7C,KAAd,KAAwB,QAAzC,IAAqD,CAACsH,KAAK,CAACC,OAAN,CAAc1E,MAAM,CAAC7C,KAArB,CAA1D,EAAuF;AACnF,WAAKgI,0BAAL,CAAgCnF,MAAM,CAAC7C,KAAvC,EAA8C6E,cAA9C,EAA8DzD,SAA9D,EAAyEiH,UAAU,GAAG,CAAtF;AACH;AACJ,GAhFD;;AAiFA1J,EAAAA,cAAc,CAACO,SAAf,CAAyB6I,uBAAzB,GAAmD,UAAUlF,MAAV,EAAkBgC,cAAlB,EAAkCzD,SAAlC,EAA6C;AAC5F,QAAIrD,SAAS,CAAC8E,MAAM,CAAC0G,KAAR,CAAb,EAA6B;AACzBnI,MAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,QAAAA,IAAI,EAAE,KAAKwE,iBAAL,CAAuB3D,MAAM,CAACnC,IAA9B,CADI;AAEVa,QAAAA,KAAK,EAAE,KAAK4C,gBAAL,CAAsBtB,MAAM,CAAC0G,KAA7B,CAFG;AAGVzH,QAAAA,UAAU,EAAE,KAAKsE,qBAAL,CAA2BvD,MAAM,CAAC0G,KAAlC,EAAyC1E,cAAzC,CAHF;AAIVR,QAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJzB;AAKVnC,QAAAA,aAAa,EAAE,KAAK0D,UAAL,CAAgBhD,MAAM,CAACiD,mBAAvB,KAA+CjD,MAAM,CAACkD;AAL3D,OAAd;AAOH;;AACD,QAAIuB,KAAK,CAACC,OAAN,CAAc1E,MAAM,CAAC2G,IAArB,CAAJ,EAAgC;AAC5B,WAAK,IAAInK,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGuD,MAAM,CAAC2G,IAAP,CAAYlK,MAArC,EAA6CD,CAAC,GAAGC,MAAjD,EAAyDD,CAAC,EAA1D,EAA8D;AAC1D,YAAIoK,GAAG,GAAG5G,MAAM,CAAC2G,IAAP,CAAYnK,CAAZ,CAAV;AACA,YAAI8C,aAAa,GAAG,KAAK0D,UAAL,CAAgBhD,MAAM,CAACiD,mBAAvB,KAA+CjD,MAAM,CAACkD,WAA1E;;AACA,YAAIlD,MAAM,CAAC6G,wBAAP,IAAmCrK,CAAC,GAAGwD,MAAM,CAAC6G,wBAAP,CAAgCpK,MAAvE,IAAiF,KAAKqK,mBAAL,EAArF,EAAiH;AAC7GxH,UAAAA,aAAa,GAAG,KAAK0D,UAAL,CAAgBhD,MAAM,CAAC6G,wBAAP,CAAgCrK,CAAhC,CAAhB,CAAhB;AACH,SAFD,MAGK,IAAIwD,MAAM,CAAC+G,gBAAP,IAA2BvK,CAAC,GAAGwD,MAAM,CAAC+G,gBAAP,CAAwBtK,MAA3D,EAAmE;AACpE6C,UAAAA,aAAa,GAAGU,MAAM,CAAC+G,gBAAP,CAAwBvK,CAAxB,CAAhB;AACH;;AACD+B,QAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,UAAAA,IAAI,EAAE,KAAKwE,iBAAL,CAAuB3D,MAAM,CAACnC,IAA9B,CADI;AAEVa,UAAAA,KAAK,EAAE,KAAK4C,gBAAL,CAAsBsF,GAAtB,CAFG;AAGV3H,UAAAA,UAAU,EAAE,KAAKsE,qBAAL,CAA2BqD,GAA3B,EAAgC5E,cAAhC,CAHF;AAIVR,UAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJzB;AAKVnC,UAAAA,aAAa,EAAEA;AALL,SAAd;AAOH;AACJ;AACJ,GA7BD;;AA8BAxD,EAAAA,cAAc,CAACO,SAAf,CAAyB+I,YAAzB,GAAwC,UAAUpF,MAAV,EAAkB0B,KAAlB,EAAyB;AAC7D,QAAI+C,KAAK,CAACC,OAAN,CAAc1E,MAAM,CAAC2G,IAArB,KAA8BzL,SAAS,CAAC8E,MAAM,CAAC0G,KAAR,CAA3C,EAA2D;AACvD;AACH;;AACD,QAAI7I,IAAI,GAAGmC,MAAM,CAACnC,IAAlB;;AACA,QAAI4G,KAAK,CAACC,OAAN,CAAc7G,IAAd,CAAJ,EAAyB;AACrBA,MAAAA,IAAI,CAAC2C,OAAL,CAAa,UAAUwG,CAAV,EAAa;AAAE,eAAOtF,KAAK,CAACsF,CAAD,CAAL,GAAW,IAAlB;AAAyB,OAArD;AACH,KAFD,MAGK;AACDtF,MAAAA,KAAK,CAAC7D,IAAD,CAAL,GAAc,IAAd;AACH;AACJ,GAXD;;AAYA/B,EAAAA,cAAc,CAACO,SAAf,CAAyB4F,yBAAzB,GAAqD,UAAUP,KAAV,EAAiBM,cAAjB,EAAiCzD,SAAjC,EAA4C;AAC7F,QAAImD,KAAK,CAAC,QAAD,CAAT,EAAqB;AACjBnD,MAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,QAAAA,IAAI,EAAE,KAAKwE,iBAAL,CAAuB,QAAvB,CADI;AAEVjF,QAAAA,KAAK,EAAE,IAFG;AAGVO,QAAAA,UAAU,EAAE,KAAKgI,4BAAL,CAAkC,EAAlC,EAAsCjF,cAAtC,CAHF;AAIVR,QAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJzB;AAKVkE,QAAAA,MAAM,EAAEjK,QAAQ,CAAC,iBAAD,EAAoB,YAApB,CALN;AAMV4D,QAAAA,aAAa,EAAE;AANL,OAAd;AAQH;;AACD,QAAIoC,KAAK,CAAC,OAAD,CAAT,EAAoB;AAChBnD,MAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,QAAAA,IAAI,EAAE,KAAKwE,iBAAL,CAAuB,OAAvB,CADI;AAEVjF,QAAAA,KAAK,EAAE,IAFG;AAGVO,QAAAA,UAAU,EAAE,KAAKgI,4BAAL,CAAkC,EAAlC,EAAsCjF,cAAtC,CAHF;AAIVR,QAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJzB;AAKVkE,QAAAA,MAAM,EAAEjK,QAAQ,CAAC,gBAAD,EAAmB,WAAnB,CALN;AAMV4D,QAAAA,aAAa,EAAE;AANL,OAAd;AAQH;AACJ,GArBD;;AAsBAxD,EAAAA,cAAc,CAACO,SAAf,CAAyB2H,yBAAzB,GAAqD,UAAUtD,KAAV,EAAiBsB,cAAjB,EAAiCzD,SAAjC,EAA4C;AAC7FA,IAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,MAAAA,IAAI,EAAE,KAAKwE,iBAAL,CAAuB,SAAvB,CADI;AAEVjF,MAAAA,KAAK,EAAEgC,KAAK,GAAG,MAAH,GAAY,OAFd;AAGVzB,MAAAA,UAAU,EAAE,KAAKsE,qBAAL,CAA2B7C,KAA3B,EAAkCsB,cAAlC,CAHF;AAIVR,MAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJzB;AAKVnC,MAAAA,aAAa,EAAE;AALL,KAAd;AAOH,GARD;;AASAxD,EAAAA,cAAc,CAACO,SAAf,CAAyBwI,sBAAzB,GAAkD,UAAU7C,cAAV,EAA0BzD,SAA1B,EAAqC;AACnFA,IAAAA,SAAS,CAACC,GAAV,CAAc;AACVW,MAAAA,IAAI,EAAE,KAAKwE,iBAAL,CAAuB,MAAvB,CADI;AAEVjF,MAAAA,KAAK,EAAE,MAFG;AAGVO,MAAAA,UAAU,EAAE,SAAS+C,cAHX;AAIVR,MAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OAJzB;AAKVnC,MAAAA,aAAa,EAAE;AALL,KAAd;AAOH,GARD;;AASAxD,EAAAA,cAAc,CAACO,SAAf,CAAyB8H,0BAAzB,GAAsD,UAAUnC,cAAV,EAA0BzD,SAA1B,EAAqC;AACvF,QAAItB,KAAK,GAAG,IAAZ;;AACA,QAAIiK,SAAS,GAAG,KAAKnL,aAAL,CAAmBoL,sBAAnB,CAA0C,UAAUnH,MAAV,EAAkB;AAAE,aAAOA,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,OAAvC;AAAiD,KAA/G,CAAhB;AACAkH,IAAAA,SAAS,CAAC1G,OAAV,CAAkB,UAAU4G,QAAV,EAAoB;AAAE,aAAO7I,SAAS,CAACC,GAAV,CAAc;AACzDW,QAAAA,IAAI,EAAE/D,kBAAkB,CAACiM,MADgC;AAEzD3I,QAAAA,KAAK,EAAEzB,KAAK,CAACqE,gBAAN,CAAuB8F,QAAvB,CAFkD;AAGzDtE,QAAAA,UAAU,EAAE7F,KAAK,CAAC8F,qBAAN,CAA4BqE,QAA5B,CAH6C;AAIzDnI,QAAAA,UAAU,EAAEhC,KAAK,CAACsG,qBAAN,CAA4B6D,QAA5B,EAAsCpF,cAAtC,CAJ6C;AAKzDR,QAAAA,gBAAgB,EAAEjG,gBAAgB,CAACkG,OALsB;AAKbnC,QAAAA,aAAa,EAAE;AALF,OAAd,CAAP;AAMnC,KANL;AAOH,GAVD;;AAWAxD,EAAAA,cAAc,CAACO,SAAf,CAAyBiF,gBAAzB,GAA4C,UAAUZ,KAAV,EAAiB;AACzD,WAAO4G,IAAI,CAACC,SAAL,CAAe7G,KAAf,CAAP;AACH,GAFD;;AAGA5E,EAAAA,cAAc,CAACO,SAAf,CAAyB0G,qBAAzB,GAAiD,UAAUrC,KAAV,EAAiB;AAC9D,WAAO4G,IAAI,CAACC,SAAL,CAAe7G,KAAf,CAAP;AACH,GAFD;;AAGA5E,EAAAA,cAAc,CAACO,SAAf,CAAyB6J,4BAAzB,GAAwD,UAAUxF,KAAV,EAAiB;AACrE,WAAO4G,IAAI,CAACC,SAAL,CAAe7G,KAAf,EAAsB9B,OAAtB,CAA8B,0BAA9B,EAA0D,IAA1D,CAAP;AACH,GAFD;;AAGA9C,EAAAA,cAAc,CAACO,SAAf,CAAyB8J,uBAAzB,GAAmD,UAAUzF,KAAV,EAAiB;AAChE,QAAIhC,KAAK,GAAG4I,IAAI,CAACC,SAAL,CAAe7G,KAAf,CAAZ;AACA,WAAOhC,KAAK,CAACE,OAAN,CAAc,0BAAd,EAA0C,IAA1C,CAAP;AACH,GAHD;;AAIA9C,EAAAA,cAAc,CAACO,SAAf,CAAyBmL,yBAAzB,GAAqD,UAAUnK,IAAV,EAAgB;AACjE,WAAOA,IAAI,CAACuB,OAAL,CAAa,WAAb,EAA0B,MAA1B,CAAP,CADiE,CACvB;AAC7C,GAFD;;AAGA9C,EAAAA,cAAc,CAACO,SAAf,CAAyBkH,qBAAzB,GAAiD,UAAU7C,KAAV,EAAiBsB,cAAjB,EAAiC;AAC9E,QAAI3E,IAAI,GAAGiK,IAAI,CAACC,SAAL,CAAe7G,KAAf,EAAsB,IAAtB,EAA4B,IAA5B,CAAX;;AACA,QAAIrD,IAAI,KAAK,IAAb,EAAmB;AACf,aAAO,SAAS2E,cAAhB;AACH,KAFD,MAGK,IAAI3E,IAAI,KAAK,IAAb,EAAmB;AACpB,aAAO,SAAS2E,cAAhB;AACH;;AACD,WAAO,KAAKwF,yBAAL,CAA+BnK,IAAI,GAAG2E,cAAtC,CAAP;AACH,GATD;;AAUAlG,EAAAA,cAAc,CAACO,SAAf,CAAyB4J,4BAAzB,GAAwD,UAAUvF,KAAV,EAAiBsB,cAAjB,EAAiC;AACrF,QAAIyF,QAAQ,GAAG,UAAU/G,KAAV,EAAiB;AAC5B,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,YAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjB,EAAsB;AAClB,iBAAOA,KAAK,CAAC5B,MAAN,CAAa,CAAb,CAAP;AACH;AACJ;;AACD,aAAOwI,IAAI,CAACC,SAAL,CAAe7G,KAAf,CAAP;AACH,KAPD;;AAQA,WAAO1F,eAAe,CAAC0F,KAAD,EAAQ,EAAR,EAAY+G,QAAZ,CAAf,GAAuCzF,cAA9C;AACH,GAVD;;AAWAlG,EAAAA,cAAc,CAACO,SAAf,CAAyB4K,4BAAzB,GAAwD,UAAUvG,KAAV,EAAiBsB,cAAjB,EAAiC;AACrF,YAAQ,OAAOtB,KAAf;AACI,WAAK,QAAL;AACI,YAAIA,KAAK,KAAK,IAAd,EAAoB;AAChB,iBAAO,cAAcsB,cAArB;AACH;;AACD,eAAO,KAAKuB,qBAAL,CAA2B7C,KAA3B,EAAkCsB,cAAlC,CAAP;;AACJ,WAAK,QAAL;AACI,YAAI0F,YAAY,GAAGJ,IAAI,CAACC,SAAL,CAAe7G,KAAf,CAAnB;AACAgH,QAAAA,YAAY,GAAGA,YAAY,CAAC5I,MAAb,CAAoB,CAApB,EAAuB4I,YAAY,CAACjL,MAAb,GAAsB,CAA7C,CAAf,CAFJ,CAEoE;;AAChEiL,QAAAA,YAAY,GAAG,KAAKF,yBAAL,CAA+BE,YAA/B,CAAf,CAHJ,CAGiE;;AAC7D,eAAO,UAAUA,YAAV,GAAyB,IAAzB,GAAgC1F,cAAvC;;AACJ,WAAK,QAAL;AACA,WAAK,SAAL;AACI,eAAO,SAASsF,IAAI,CAACC,SAAL,CAAe7G,KAAf,CAAT,GAAiC,GAAjC,GAAuCsB,cAA9C;AAbR;;AAeA,WAAO,KAAKuB,qBAAL,CAA2B7C,KAA3B,EAAkCsB,cAAlC,CAAP;AACH,GAjBD;;AAkBAlG,EAAAA,cAAc,CAACO,SAAf,CAAyBsH,iBAAzB,GAA6C,UAAU9F,IAAV,EAAgB;AACzD,QAAI4G,KAAK,CAACC,OAAN,CAAc7G,IAAd,CAAJ,EAAyB;AACrB,UAAI8J,KAAK,GAAG9J,IAAZ;AACAA,MAAAA,IAAI,GAAG8J,KAAK,CAAClL,MAAN,GAAe,CAAf,GAAmBkL,KAAK,CAAC,CAAD,CAAxB,GAA8B,IAArC;AACH;;AACD,QAAI,CAAC9J,IAAL,EAAW;AACP,aAAOzC,kBAAkB,CAACwM,KAA1B;AACH;;AACD,YAAQ/J,IAAR;AACI,WAAK,QAAL;AAAe,eAAOzC,kBAAkB,CAACwM,KAA1B;;AACf,WAAK,QAAL;AAAe,eAAOxM,kBAAkB,CAACiM,MAA1B;;AACf,WAAK,UAAL;AAAiB,eAAOjM,kBAAkB,CAACgE,QAA1B;;AACjB;AAAS,eAAOhE,kBAAkB,CAACwM,KAA1B;AAJb;AAMH,GAdD;;AAeA9L,EAAAA,cAAc,CAACO,SAAf,CAAyByH,2BAAzB,GAAuD,UAAUrG,IAAV,EAAgBX,QAAhB,EAA0B;AAC7E,YAAQW,IAAI,CAACI,IAAb;AACI,WAAK,OAAL;AACI,eAAO,IAAP;;AACJ,WAAK,QAAL;AACI,eAAO,IAAP;;AACJ;AACI,YAAIgK,OAAO,GAAG/K,QAAQ,CAACQ,OAAT,GAAmBwB,MAAnB,CAA0BrB,IAAI,CAACF,MAA/B,EAAuCE,IAAI,CAAChB,MAA5C,CAAd;AACA,eAAOoL,OAAP;AAPR;AASH,GAVD;;AAWA/L,EAAAA,cAAc,CAACO,SAAf,CAAyB0H,4BAAzB,GAAwD,UAAUtG,IAAV,EAAgBX,QAAhB,EAA0BkF,cAA1B,EAA0C;AAC9F,YAAQvE,IAAI,CAACI,IAAb;AACI,WAAK,OAAL;AACI,eAAO,KAAK0F,qBAAL,CAA2B,EAA3B,EAA+BvB,cAA/B,CAAP;;AACJ,WAAK,QAAL;AACI,eAAO,KAAKuB,qBAAL,CAA2B,EAA3B,EAA+BvB,cAA/B,CAAP;;AACJ;AACI,YAAI6F,OAAO,GAAG/K,QAAQ,CAACQ,OAAT,GAAmBwB,MAAnB,CAA0BrB,IAAI,CAACF,MAA/B,EAAuCE,IAAI,CAAChB,MAA5C,IAAsDuF,cAApE;AACA,eAAO,KAAKwF,yBAAL,CAA+BK,OAA/B,CAAP;AAPR;AASH,GAVD;;AAWA/L,EAAAA,cAAc,CAACO,SAAf,CAAyBkF,wBAAzB,GAAoD,UAAUkB,GAAV,EAAeC,cAAf,EAA+BxC,QAA/B,EAAyC8B,cAAzC,EAAyD;AACzG,QAAI8F,YAAY,GAAG,KAAKvE,qBAAL,CAA2Bd,GAA3B,EAAgC,EAAhC,CAAnB;;AACA,QAAI,CAACvC,QAAL,EAAe;AACX,aAAO4H,YAAP;AACH;;AACD,QAAIC,UAAU,GAAGD,YAAY,GAAG,IAAhC;AACA,QAAIpH,KAAJ;AACA,QAAIsH,eAAe,GAAG,CAAtB;;AACA,QAAItF,cAAJ,EAAoB;AAChB,UAAI+B,KAAK,CAACC,OAAN,CAAchC,cAAc,CAACoD,eAA7B,CAAJ,EAAmD;AAC/C,YAAIpD,cAAc,CAACoD,eAAf,CAA+BrJ,MAA/B,KAA0C,CAA9C,EAAiD;AAC7C,cAAIsJ,IAAI,GAAGrD,cAAc,CAACoD,eAAf,CAA+B,CAA/B,EAAkCC,IAA7C;;AACA,cAAI7K,SAAS,CAAC6K,IAAD,CAAb,EAAqB;AACjBrF,YAAAA,KAAK,GAAG,KAAKuF,4BAAL,CAAkCF,IAAlC,EAAwC,EAAxC,CAAR;AACH;AACJ;;AACDiC,QAAAA,eAAe,IAAItF,cAAc,CAACoD,eAAf,CAA+BrJ,MAAlD;AACH;;AACD,UAAIiG,cAAc,CAACiE,IAAnB,EAAyB;AACrB,YAAI,CAACjG,KAAD,IAAUgC,cAAc,CAACiE,IAAf,CAAoBlK,MAApB,KAA+B,CAA7C,EAAgD;AAC5CiE,UAAAA,KAAK,GAAG,KAAKuG,4BAAL,CAAkCvE,cAAc,CAACiE,IAAf,CAAoB,CAApB,CAAlC,EAA0D,EAA1D,CAAR;AACH;;AACDqB,QAAAA,eAAe,IAAItF,cAAc,CAACiE,IAAf,CAAoBlK,MAAvC;AACH;;AACD,UAAIvB,SAAS,CAACwH,cAAc,CAACgD,OAAhB,CAAb,EAAuC;AACnC,YAAI,CAAChF,KAAL,EAAY;AACRA,UAAAA,KAAK,GAAG,KAAKuG,4BAAL,CAAkCvE,cAAc,CAACgD,OAAjD,EAA0D,EAA1D,CAAR;AACH;;AACDsC,QAAAA,eAAe;AAClB;;AACD,UAAIvD,KAAK,CAACC,OAAN,CAAchC,cAAc,CAACkD,QAA7B,KAA0ClD,cAAc,CAACkD,QAAf,CAAwBnJ,MAAtE,EAA8E;AAC1E,YAAI,CAACiE,KAAL,EAAY;AACRA,UAAAA,KAAK,GAAG,KAAKuG,4BAAL,CAAkCvE,cAAc,CAACkD,QAAf,CAAwB,CAAxB,CAAlC,EAA8D,EAA9D,CAAR;AACH;;AACDoC,QAAAA,eAAe,IAAItF,cAAc,CAACkD,QAAf,CAAwBnJ,MAA3C;AACH;;AACD,UAAIuL,eAAe,KAAK,CAAxB,EAA2B;AACvB,YAAInK,IAAI,GAAG4G,KAAK,CAACC,OAAN,CAAchC,cAAc,CAAC7E,IAA7B,IAAqC6E,cAAc,CAAC7E,IAAf,CAAoB,CAApB,CAArC,GAA8D6E,cAAc,CAAC7E,IAAxF;;AACA,YAAI,CAACA,IAAL,EAAW;AACP,cAAI6E,cAAc,CAACnC,UAAnB,EAA+B;AAC3B1C,YAAAA,IAAI,GAAG,QAAP;AACH,WAFD,MAGK,IAAI6E,cAAc,CAACvF,KAAnB,EAA0B;AAC3BU,YAAAA,IAAI,GAAG,OAAP;AACH;AACJ;;AACD,gBAAQA,IAAR;AACI,eAAK,SAAL;AACI6C,YAAAA,KAAK,GAAG,IAAR;AACA;;AACJ,eAAK,QAAL;AACIA,YAAAA,KAAK,GAAG,MAAR;AACA;;AACJ,eAAK,QAAL;AACIA,YAAAA,KAAK,GAAG,MAAR;AACA;;AACJ,eAAK,OAAL;AACIA,YAAAA,KAAK,GAAG,MAAR;AACA;;AACJ,eAAK,QAAL;AACA,eAAK,SAAL;AACIA,YAAAA,KAAK,GAAG,QAAR;AACA;;AACJ,eAAK,MAAL;AACIA,YAAAA,KAAK,GAAG,WAAR;AACA;;AACJ;AACI,mBAAOoH,YAAP;AArBR;AAuBH;AACJ;;AACD,QAAI,CAACpH,KAAD,IAAUsH,eAAe,GAAG,CAAhC,EAAmC;AAC/BtH,MAAAA,KAAK,GAAG,IAAR;AACH;;AACD,WAAOqH,UAAU,GAAGrH,KAAb,GAAqBsB,cAA5B;AACH,GA3ED;;AA4EAlG,EAAAA,cAAc,CAACO,SAAf,CAAyB2B,cAAzB,GAA0C,UAAUlB,QAAV,EAAoBS,MAApB,EAA4B;AAClE,QAAIf,CAAC,GAAGe,MAAM,GAAG,CAAjB;AACA,QAAIF,IAAI,GAAGP,QAAQ,CAACQ,OAAT,EAAX;;AACA,WAAOd,CAAC,IAAI,CAAL,IAAU,mBAAmByL,OAAnB,CAA2B5K,IAAI,CAACgE,MAAL,CAAY7E,CAAZ,CAA3B,MAA+C,CAAC,CAAjE,EAAoE;AAChEA,MAAAA,CAAC;AACJ;;AACD,WAAOa,IAAI,CAAC6K,SAAL,CAAe1L,CAAC,GAAG,CAAnB,EAAsBe,MAAtB,CAAP;AACH,GAPD;;AAQAzB,EAAAA,cAAc,CAACO,SAAf,CAAyBuE,sBAAzB,GAAkD,UAAU9D,QAAV,EAAoBS,MAApB,EAA4B;AAC1E,QAAI4K,OAAO,GAAGpN,IAAI,CAACqN,aAAL,CAAmBtL,QAAQ,CAACQ,OAAT,EAAnB,EAAuC,IAAvC,CAAd;AACA6K,IAAAA,OAAO,CAACE,WAAR,CAAoB9K,MAApB;AACA,QAAI+K,KAAK,GAAGH,OAAO,CAACI,IAAR,EAAZ;;AACA,YAAQD,KAAR;AACI,WAAK;AAAE;AAAP;AACA,WAAK;AAAE;AAAP;AACA,WAAK;AAAE;AAAP;AACA,WAAK;AAAG;AAAR;AACI,eAAO,EAAP;;AACJ;AACI,eAAO,GAAP;AAPR;AASH,GAbD;;AAcAxM,EAAAA,cAAc,CAACO,SAAf,CAAyBuI,gBAAzB,GAA4C,UAAUnH,IAAV,EAAgBX,QAAhB,EAA0BS,MAA1B,EAAkC;AAC1E,QAAI4K,OAAO,GAAGpN,IAAI,CAACqN,aAAL,CAAmBtL,QAAQ,CAACQ,OAAT,EAAnB,EAAuC,IAAvC,CAAd;AACA,QAAIkL,QAAQ,GAAG/K,IAAI,CAACN,KAApB;;AACA,SAAK,IAAIX,CAAC,GAAGgM,QAAQ,CAAC/L,MAAT,GAAkB,CAA/B,EAAkCD,CAAC,IAAI,CAAvC,EAA0CA,CAAC,EAA3C,EAA+C;AAC3C,UAAIiM,KAAK,GAAGD,QAAQ,CAAChM,CAAD,CAApB;;AACA,UAAIe,MAAM,GAAGkL,KAAK,CAAClL,MAAN,GAAekL,KAAK,CAAChM,MAAlC,EAA0C;AACtC0L,QAAAA,OAAO,CAACE,WAAR,CAAoBI,KAAK,CAAClL,MAAN,GAAekL,KAAK,CAAChM,MAAzC;AACA,YAAI6L,KAAK,GAAGH,OAAO,CAACI,IAAR,EAAZ;;AACA,YAAID,KAAK,KAAK;AAAE;AAAZ,WAAgC/K,MAAM,IAAI4K,OAAO,CAACO,cAAR,KAA2BP,OAAO,CAACQ,cAAR,EAAzE,EAAmG;AAC/F,iBAAOnM,CAAC,GAAG,CAAX;AACH;;AACD,eAAOA,CAAP;AACH,OAPD,MAQK,IAAIe,MAAM,IAAIkL,KAAK,CAAClL,MAApB,EAA4B;AAC7B,eAAOf,CAAP;AACH;AACJ;;AACD,WAAO,CAAP;AACH,GAlBD;;AAmBAV,EAAAA,cAAc,CAACO,SAAf,CAAyBsB,WAAzB,GAAuC,UAAUb,QAAV,EAAoB8L,KAApB,EAA2BrL,MAA3B,EAAmC;AACtE,QAAI4K,OAAO,GAAGpN,IAAI,CAACqN,aAAL,CAAmBtL,QAAQ,CAACQ,OAAT,EAAnB,EAAuC,KAAvC,CAAd;AACA6K,IAAAA,OAAO,CAACE,WAAR,CAAoBO,KAApB;AACA,QAAIN,KAAK,GAAGH,OAAO,CAACI,IAAR,EAAZ;;AACA,WAAOD,KAAK,KAAK;AAAG;AAAb,OAA2BH,OAAO,CAACO,cAAR,KAA2BP,OAAO,CAACQ,cAAR,EAA3B,GAAsDpL,MAAxF,EAAiG;AAC7F+K,MAAAA,KAAK,GAAGH,OAAO,CAACI,IAAR,EAAR;AACH;;AACD,WAAO,CAACD,KAAK,KAAK;AAAG;AAAb,OAAwCA,KAAK,KAAK;AAAG;AAAtD,SAAmFH,OAAO,CAACO,cAAR,MAA4BnL,MAAtH;AACH,GARD;;AASAzB,EAAAA,cAAc,CAACO,SAAf,CAAyB2G,UAAzB,GAAsC,UAAU6F,YAAV,EAAwB;AAC1D,QAAIA,YAAY,IAAI,KAAK/B,mBAAL,EAApB,EAAgD;AAC5C,aAAO;AACH3H,QAAAA,IAAI,EAAE3D,UAAU,CAACsN,QADd;AAEHpI,QAAAA,KAAK,EAAEmI;AAFJ,OAAP;AAIH;;AACD,WAAOE,SAAP;AACH,GARD;;AASAjN,EAAAA,cAAc,CAACO,SAAf,CAAyByK,mBAAzB,GAA+C,YAAY;AACvD,QAAI,CAAC5L,SAAS,CAAC,KAAK8N,gBAAN,CAAd,EAAuC;AACnC,UAAIC,UAAU,GAAG,KAAK/M,kBAAL,CAAwBgN,YAAxB,IAAwC,KAAKhN,kBAAL,CAAwBgN,YAAxB,CAAqCD,UAA9F;AACA,WAAKD,gBAAL,GAAwBC,UAAU,IAAIA,UAAU,CAACE,cAAzB,IAA2C1E,KAAK,CAACC,OAAN,CAAcuE,UAAU,CAACE,cAAX,CAA0BC,mBAAxC,CAA3C,IAA2GH,UAAU,CAACE,cAAX,CAA0BC,mBAA1B,CAA8CnB,OAA9C,CAAsDzM,UAAU,CAACsN,QAAjE,MAA+E,CAAC,CAAnN;AACH;;AACD,WAAO,KAAKE,gBAAZ;AACH,GAND;;AAOAlN,EAAAA,cAAc,CAACO,SAAf,CAAyBgN,4BAAzB,GAAwD,YAAY;AAChE,QAAI,CAACnO,SAAS,CAAC,KAAKmD,wBAAN,CAAd,EAA+C;AAC3C,UAAI4K,UAAU,GAAG,KAAK/M,kBAAL,CAAwBgN,YAAxB,IAAwC,KAAKhN,kBAAL,CAAwBgN,YAAxB,CAAqCD,UAA9F;AACA,WAAK5K,wBAAL,GAAgC4K,UAAU,IAAIA,UAAU,CAACE,cAAzB,IAA2C,CAAC,CAACF,UAAU,CAACE,cAAX,CAA0BG,uBAAvG;AACH;;AACD,WAAO,KAAKjL,wBAAZ;AACH,GAND;;AAOA,SAAOvC,cAAP;AACH,CAj1BmC,EAApC;;AAk1BA,SAASA,cAAT","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Parser from '../parser/jsonParser.js';\nimport * as Json from './../../jsonc-parser/main.js';\nimport { stringifyObject } from '../utils/json.js';\nimport { endsWith } from '../utils/strings.js';\nimport { isDefined } from '../utils/objects.js';\nimport { CompletionItem, CompletionItemKind, Range, TextEdit, InsertTextFormat, MarkupKind } from '../jsonLanguageTypes.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nvar valueCommitCharacters = [',', '}', ']'];\nvar propertyCommitCharacters = [':'];\nvar JSONCompletion = /** @class */ (function () {\n    function JSONCompletion(schemaService, contributions, promiseConstructor, clientCapabilities) {\n        if (contributions === void 0) { contributions = []; }\n        if (promiseConstructor === void 0) { promiseConstructor = Promise; }\n        if (clientCapabilities === void 0) { clientCapabilities = {}; }\n        this.schemaService = schemaService;\n        this.contributions = contributions;\n        this.promiseConstructor = promiseConstructor;\n        this.clientCapabilities = clientCapabilities;\n        this.templateVarIdCounter = 0;\n    }\n    JSONCompletion.prototype.doResolve = function (item) {\n        for (var i = this.contributions.length - 1; i >= 0; i--) {\n            if (this.contributions[i].resolveCompletion) {\n                var resolver = this.contributions[i].resolveCompletion(item);\n                if (resolver) {\n                    return resolver;\n                }\n            }\n        }\n        return this.promiseConstructor.resolve(item);\n    };\n    JSONCompletion.prototype.doComplete = function (document, position, doc) {\n        var _this = this;\n        var result = {\n            items: [],\n            isIncomplete: false\n        };\n        var text = document.getText();\n        var offset = document.offsetAt(position);\n        var node = doc.getNodeFromOffset(offset, true);\n        if (this.isInComment(document, node ? node.offset : 0, offset)) {\n            return Promise.resolve(result);\n        }\n        if (node && (offset === node.offset + node.length) && offset > 0) {\n            var ch = text[offset - 1];\n            if (node.type === 'object' && ch === '}' || node.type === 'array' && ch === ']') {\n                // after ] or }\n                node = node.parent;\n            }\n        }\n        var currentWord = this.getCurrentWord(document, offset);\n        var overwriteRange = null;\n        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            overwriteRange = Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));\n        }\n        else {\n            var overwriteStart = offset - currentWord.length;\n            if (overwriteStart > 0 && text[overwriteStart - 1] === '\"') {\n                overwriteStart--;\n            }\n            overwriteRange = Range.create(document.positionAt(overwriteStart), position);\n        }\n        var supportsCommitCharacters = false; //this.doesSupportsCommitCharacters(); disabled for now, waiting for new API: https://github.com/microsoft/vscode/issues/42544\n        var proposed = {};\n        var collector = {\n            add: function (suggestion) {\n                var label = suggestion.label;\n                var existing = proposed[label];\n                if (!existing) {\n                    label = label.replace(/[\\n]/g, 'â†µ');\n                    if (label.length > 60) {\n                        var shortendedLabel = label.substr(0, 57).trim() + '...';\n                        if (!proposed[shortendedLabel]) {\n                            label = shortendedLabel;\n                        }\n                    }\n                    if (overwriteRange) {\n                        suggestion.textEdit = TextEdit.replace(overwriteRange, suggestion.insertText);\n                    }\n                    if (supportsCommitCharacters) {\n                        suggestion.commitCharacters = suggestion.kind === CompletionItemKind.Property ? propertyCommitCharacters : valueCommitCharacters;\n                    }\n                    suggestion.label = label;\n                    proposed[label] = suggestion;\n                    result.items.push(suggestion);\n                }\n                else if (!existing.documentation) {\n                    existing.documentation = suggestion.documentation;\n                }\n            },\n            setAsIncomplete: function () {\n                result.isIncomplete = true;\n            },\n            error: function (message) {\n                console.error(message);\n            },\n            log: function (message) {\n                console.log(message);\n            },\n            getNumberOfProposals: function () {\n                return result.items.length;\n            }\n        };\n        return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema) {\n            var collectionPromises = [];\n            var addValue = true;\n            var currentKey = '';\n            var currentProperty = null;\n            if (node) {\n                if (node.type === 'string') {\n                    var parent = node.parent;\n                    if (parent && parent.type === 'property' && parent.keyNode === node) {\n                        addValue = !parent.valueNode;\n                        currentProperty = parent;\n                        currentKey = text.substr(node.offset + 1, node.length - 2);\n                        if (parent) {\n                            node = parent.parent;\n                        }\n                    }\n                }\n            }\n            // proposals for properties\n            if (node && node.type === 'object') {\n                // don't suggest keys when the cursor is just before the opening curly brace\n                if (node.offset === offset) {\n                    return result;\n                }\n                // don't suggest properties that are already present\n                var properties = node.properties;\n                properties.forEach(function (p) {\n                    if (!currentProperty || currentProperty !== p) {\n                        proposed[p.keyNode.value] = CompletionItem.create('__');\n                    }\n                });\n                var separatorAfter_1 = '';\n                if (addValue) {\n                    separatorAfter_1 = _this.evaluateSeparatorAfter(document, document.offsetAt(overwriteRange.end));\n                }\n                if (schema) {\n                    // property proposals with schema\n                    _this.getPropertyCompletions(schema, doc, node, addValue, separatorAfter_1, collector);\n                }\n                else {\n                    // property proposals without schema\n                    _this.getSchemaLessPropertyCompletions(doc, node, currentKey, collector);\n                }\n                var location_1 = Parser.getNodePath(node);\n                _this.contributions.forEach(function (contribution) {\n                    var collectPromise = contribution.collectPropertyCompletions(document.uri, location_1, currentWord, addValue, separatorAfter_1 === '', collector);\n                    if (collectPromise) {\n                        collectionPromises.push(collectPromise);\n                    }\n                });\n                if ((!schema && currentWord.length > 0 && text.charAt(offset - currentWord.length - 1) !== '\"')) {\n                    collector.add({\n                        kind: CompletionItemKind.Property,\n                        label: _this.getLabelForValue(currentWord),\n                        insertText: _this.getInsertTextForProperty(currentWord, null, false, separatorAfter_1),\n                        insertTextFormat: InsertTextFormat.Snippet, documentation: '',\n                    });\n                    collector.setAsIncomplete();\n                }\n            }\n            // proposals for values\n            var types = {};\n            if (schema) {\n                // value proposals with schema\n                _this.getValueCompletions(schema, doc, node, offset, document, collector, types);\n            }\n            else {\n                // value proposals without schema\n                _this.getSchemaLessValueCompletions(doc, node, offset, document, collector);\n            }\n            if (_this.contributions.length > 0) {\n                _this.getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises);\n            }\n            return _this.promiseConstructor.all(collectionPromises).then(function () {\n                if (collector.getNumberOfProposals() === 0) {\n                    var offsetForSeparator = offset;\n                    if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n                        offsetForSeparator = node.offset + node.length;\n                    }\n                    var separatorAfter = _this.evaluateSeparatorAfter(document, offsetForSeparator);\n                    _this.addFillerValueCompletions(types, separatorAfter, collector);\n                }\n                return result;\n            });\n        });\n    };\n    JSONCompletion.prototype.getPropertyCompletions = function (schema, doc, node, addValue, separatorAfter, collector) {\n        var _this = this;\n        var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset);\n        matchingSchemas.forEach(function (s) {\n            if (s.node === node && !s.inverted) {\n                var schemaProperties_1 = s.schema.properties;\n                if (schemaProperties_1) {\n                    Object.keys(schemaProperties_1).forEach(function (key) {\n                        var propertySchema = schemaProperties_1[key];\n                        if (typeof propertySchema === 'object' && !propertySchema.deprecationMessage && !propertySchema.doNotSuggest) {\n                            var proposal = {\n                                kind: CompletionItemKind.Property,\n                                label: key,\n                                insertText: _this.getInsertTextForProperty(key, propertySchema, addValue, separatorAfter),\n                                insertTextFormat: InsertTextFormat.Snippet,\n                                filterText: _this.getFilterTextForValue(key),\n                                documentation: _this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || '',\n                            };\n                            if (endsWith(proposal.insertText, \"$1\" + separatorAfter)) {\n                                proposal.command = {\n                                    title: 'Suggest',\n                                    command: 'editor.action.triggerSuggest'\n                                };\n                            }\n                            collector.add(proposal);\n                        }\n                    });\n                }\n            }\n        });\n    };\n    JSONCompletion.prototype.getSchemaLessPropertyCompletions = function (doc, node, currentKey, collector) {\n        var _this = this;\n        var collectCompletionsForSimilarObject = function (obj) {\n            obj.properties.forEach(function (p) {\n                var key = p.keyNode.value;\n                collector.add({\n                    kind: CompletionItemKind.Property,\n                    label: key,\n                    insertText: _this.getInsertTextForValue(key, ''),\n                    insertTextFormat: InsertTextFormat.Snippet,\n                    filterText: _this.getFilterTextForValue(key),\n                    documentation: ''\n                });\n            });\n        };\n        if (node.parent) {\n            if (node.parent.type === 'property') {\n                // if the object is a property value, check the tree for other objects that hang under a property of the same name\n                var parentKey_1 = node.parent.keyNode.value;\n                doc.visit(function (n) {\n                    if (n.type === 'property' && n !== node.parent && n.keyNode.value === parentKey_1 && n.valueNode && n.valueNode.type === 'object') {\n                        collectCompletionsForSimilarObject(n.valueNode);\n                    }\n                    return true;\n                });\n            }\n            else if (node.parent.type === 'array') {\n                // if the object is in an array, use all other array elements as similar objects\n                node.parent.items.forEach(function (n) {\n                    if (n.type === 'object' && n !== node) {\n                        collectCompletionsForSimilarObject(n);\n                    }\n                });\n            }\n        }\n        else if (node.type === 'object') {\n            collector.add({\n                kind: CompletionItemKind.Property,\n                label: '$schema',\n                insertText: this.getInsertTextForProperty('$schema', null, true, ''),\n                insertTextFormat: InsertTextFormat.Snippet, documentation: '',\n                filterText: this.getFilterTextForValue(\"$schema\")\n            });\n        }\n    };\n    JSONCompletion.prototype.getSchemaLessValueCompletions = function (doc, node, offset, document, collector) {\n        var _this = this;\n        var offsetForSeparator = offset;\n        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            offsetForSeparator = node.offset + node.length;\n            node = node.parent;\n        }\n        if (!node) {\n            collector.add({\n                kind: this.getSuggestionKind('object'),\n                label: 'Empty object',\n                insertText: this.getInsertTextForValue({}, ''),\n                insertTextFormat: InsertTextFormat.Snippet,\n                documentation: ''\n            });\n            collector.add({\n                kind: this.getSuggestionKind('array'),\n                label: 'Empty array',\n                insertText: this.getInsertTextForValue([], ''),\n                insertTextFormat: InsertTextFormat.Snippet,\n                documentation: ''\n            });\n            return;\n        }\n        var separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);\n        var collectSuggestionsForValues = function (value) {\n            if (!Parser.contains(value.parent, offset, true)) {\n                collector.add({\n                    kind: _this.getSuggestionKind(value.type),\n                    label: _this.getLabelTextForMatchingNode(value, document),\n                    insertText: _this.getInsertTextForMatchingNode(value, document, separatorAfter),\n                    insertTextFormat: InsertTextFormat.Snippet, documentation: ''\n                });\n            }\n            if (value.type === 'boolean') {\n                _this.addBooleanValueCompletion(!value.value, separatorAfter, collector);\n            }\n        };\n        if (node.type === 'property') {\n            if (offset > node.colonOffset) {\n                var valueNode = node.valueNode;\n                if (valueNode && (offset > (valueNode.offset + valueNode.length) || valueNode.type === 'object' || valueNode.type === 'array')) {\n                    return;\n                }\n                // suggest values at the same key\n                var parentKey_2 = node.keyNode.value;\n                doc.visit(function (n) {\n                    if (n.type === 'property' && n.keyNode.value === parentKey_2 && n.valueNode) {\n                        collectSuggestionsForValues(n.valueNode);\n                    }\n                    return true;\n                });\n                if (parentKey_2 === '$schema' && node.parent && !node.parent.parent) {\n                    this.addDollarSchemaCompletions(separatorAfter, collector);\n                }\n            }\n        }\n        if (node.type === 'array') {\n            if (node.parent && node.parent.type === 'property') {\n                // suggest items of an array at the same key\n                var parentKey_3 = node.parent.keyNode.value;\n                doc.visit(function (n) {\n                    if (n.type === 'property' && n.keyNode.value === parentKey_3 && n.valueNode && n.valueNode.type === 'array') {\n                        n.valueNode.items.forEach(collectSuggestionsForValues);\n                    }\n                    return true;\n                });\n            }\n            else {\n                // suggest items in the same array\n                node.items.forEach(collectSuggestionsForValues);\n            }\n        }\n    };\n    JSONCompletion.prototype.getValueCompletions = function (schema, doc, node, offset, document, collector, types) {\n        var _this = this;\n        var offsetForSeparator = offset;\n        var parentKey = null;\n        var valueNode = null;\n        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            offsetForSeparator = node.offset + node.length;\n            valueNode = node;\n            node = node.parent;\n        }\n        if (!node) {\n            this.addSchemaValueCompletions(schema.schema, '', collector, types);\n            return;\n        }\n        if ((node.type === 'property') && offset > node.colonOffset) {\n            var valueNode_1 = node.valueNode;\n            if (valueNode_1 && offset > (valueNode_1.offset + valueNode_1.length)) {\n                return; // we are past the value node\n            }\n            parentKey = node.keyNode.value;\n            node = node.parent;\n        }\n        if (node && (parentKey !== null || node.type === 'array')) {\n            var separatorAfter_2 = this.evaluateSeparatorAfter(document, offsetForSeparator);\n            var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset, valueNode);\n            matchingSchemas.forEach(function (s) {\n                if (s.node === node && !s.inverted && s.schema) {\n                    if (node.type === 'array' && s.schema.items) {\n                        if (Array.isArray(s.schema.items)) {\n                            var index = _this.findItemAtOffset(node, document, offset);\n                            if (index < s.schema.items.length) {\n                                _this.addSchemaValueCompletions(s.schema.items[index], separatorAfter_2, collector, types);\n                            }\n                        }\n                        else {\n                            _this.addSchemaValueCompletions(s.schema.items, separatorAfter_2, collector, types);\n                        }\n                    }\n                    if (s.schema.properties) {\n                        var propertySchema = s.schema.properties[parentKey];\n                        if (propertySchema) {\n                            _this.addSchemaValueCompletions(propertySchema, separatorAfter_2, collector, types);\n                        }\n                    }\n                }\n            });\n            if (parentKey === '$schema' && !node.parent) {\n                this.addDollarSchemaCompletions(separatorAfter_2, collector);\n            }\n            if (types['boolean']) {\n                this.addBooleanValueCompletion(true, separatorAfter_2, collector);\n                this.addBooleanValueCompletion(false, separatorAfter_2, collector);\n            }\n            if (types['null']) {\n                this.addNullValueCompletion(separatorAfter_2, collector);\n            }\n        }\n    };\n    JSONCompletion.prototype.getContributedValueCompletions = function (doc, node, offset, document, collector, collectionPromises) {\n        if (!node) {\n            this.contributions.forEach(function (contribution) {\n                var collectPromise = contribution.collectDefaultCompletions(document.uri, collector);\n                if (collectPromise) {\n                    collectionPromises.push(collectPromise);\n                }\n            });\n        }\n        else {\n            if (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null') {\n                node = node.parent;\n            }\n            if ((node.type === 'property') && offset > node.colonOffset) {\n                var parentKey_4 = node.keyNode.value;\n                var valueNode = node.valueNode;\n                if (!valueNode || offset <= (valueNode.offset + valueNode.length)) {\n                    var location_2 = Parser.getNodePath(node.parent);\n                    this.contributions.forEach(function (contribution) {\n                        var collectPromise = contribution.collectValueCompletions(document.uri, location_2, parentKey_4, collector);\n                        if (collectPromise) {\n                            collectionPromises.push(collectPromise);\n                        }\n                    });\n                }\n            }\n        }\n    };\n    JSONCompletion.prototype.addSchemaValueCompletions = function (schema, separatorAfter, collector, types) {\n        var _this = this;\n        if (typeof schema === 'object') {\n            this.addEnumValueCompletions(schema, separatorAfter, collector);\n            this.addDefaultValueCompletions(schema, separatorAfter, collector);\n            this.collectTypes(schema, types);\n            if (Array.isArray(schema.allOf)) {\n                schema.allOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, separatorAfter, collector, types); });\n            }\n            if (Array.isArray(schema.anyOf)) {\n                schema.anyOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, separatorAfter, collector, types); });\n            }\n            if (Array.isArray(schema.oneOf)) {\n                schema.oneOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, separatorAfter, collector, types); });\n            }\n        }\n    };\n    JSONCompletion.prototype.addDefaultValueCompletions = function (schema, separatorAfter, collector, arrayDepth) {\n        var _this = this;\n        if (arrayDepth === void 0) { arrayDepth = 0; }\n        var hasProposals = false;\n        if (isDefined(schema.default)) {\n            var type = schema.type;\n            var value = schema.default;\n            for (var i = arrayDepth; i > 0; i--) {\n                value = [value];\n                type = 'array';\n            }\n            collector.add({\n                kind: this.getSuggestionKind(type),\n                label: this.getLabelForValue(value),\n                insertText: this.getInsertTextForValue(value, separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                detail: localize('json.suggest.default', 'Default value')\n            });\n            hasProposals = true;\n        }\n        if (Array.isArray(schema.examples)) {\n            schema.examples.forEach(function (example) {\n                var type = schema.type;\n                var value = example;\n                for (var i = arrayDepth; i > 0; i--) {\n                    value = [value];\n                    type = 'array';\n                }\n                collector.add({\n                    kind: _this.getSuggestionKind(type),\n                    label: _this.getLabelForValue(value),\n                    insertText: _this.getInsertTextForValue(value, separatorAfter),\n                    insertTextFormat: InsertTextFormat.Snippet\n                });\n                hasProposals = true;\n            });\n        }\n        if (Array.isArray(schema.defaultSnippets)) {\n            schema.defaultSnippets.forEach(function (s) {\n                var type = schema.type;\n                var value = s.body;\n                var label = s.label;\n                var insertText;\n                var filterText;\n                if (isDefined(value)) {\n                    var type_1 = schema.type;\n                    for (var i = arrayDepth; i > 0; i--) {\n                        value = [value];\n                        type_1 = 'array';\n                    }\n                    insertText = _this.getInsertTextForSnippetValue(value, separatorAfter);\n                    filterText = _this.getFilterTextForSnippetValue(value);\n                    label = label || _this.getLabelForSnippetValue(value);\n                }\n                else if (typeof s.bodyText === 'string') {\n                    var prefix = '', suffix = '', indent = '';\n                    for (var i = arrayDepth; i > 0; i--) {\n                        prefix = prefix + indent + '[\\n';\n                        suffix = suffix + '\\n' + indent + ']';\n                        indent += '\\t';\n                        type = 'array';\n                    }\n                    insertText = prefix + indent + s.bodyText.split('\\n').join('\\n' + indent) + suffix + separatorAfter;\n                    label = label || insertText,\n                        filterText = insertText.replace(/[\\n]/g, ''); // remove new lines\n                }\n                collector.add({\n                    kind: _this.getSuggestionKind(type),\n                    label: label,\n                    documentation: _this.fromMarkup(s.markdownDescription) || s.description,\n                    insertText: insertText,\n                    insertTextFormat: InsertTextFormat.Snippet,\n                    filterText: filterText\n                });\n                hasProposals = true;\n            });\n        }\n        if (!hasProposals && typeof schema.items === 'object' && !Array.isArray(schema.items)) {\n            this.addDefaultValueCompletions(schema.items, separatorAfter, collector, arrayDepth + 1);\n        }\n    };\n    JSONCompletion.prototype.addEnumValueCompletions = function (schema, separatorAfter, collector) {\n        if (isDefined(schema.const)) {\n            collector.add({\n                kind: this.getSuggestionKind(schema.type),\n                label: this.getLabelForValue(schema.const),\n                insertText: this.getInsertTextForValue(schema.const, separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                documentation: this.fromMarkup(schema.markdownDescription) || schema.description\n            });\n        }\n        if (Array.isArray(schema.enum)) {\n            for (var i = 0, length = schema.enum.length; i < length; i++) {\n                var enm = schema.enum[i];\n                var documentation = this.fromMarkup(schema.markdownDescription) || schema.description;\n                if (schema.markdownEnumDescriptions && i < schema.markdownEnumDescriptions.length && this.doesSupportMarkdown()) {\n                    documentation = this.fromMarkup(schema.markdownEnumDescriptions[i]);\n                }\n                else if (schema.enumDescriptions && i < schema.enumDescriptions.length) {\n                    documentation = schema.enumDescriptions[i];\n                }\n                collector.add({\n                    kind: this.getSuggestionKind(schema.type),\n                    label: this.getLabelForValue(enm),\n                    insertText: this.getInsertTextForValue(enm, separatorAfter),\n                    insertTextFormat: InsertTextFormat.Snippet,\n                    documentation: documentation\n                });\n            }\n        }\n    };\n    JSONCompletion.prototype.collectTypes = function (schema, types) {\n        if (Array.isArray(schema.enum) || isDefined(schema.const)) {\n            return;\n        }\n        var type = schema.type;\n        if (Array.isArray(type)) {\n            type.forEach(function (t) { return types[t] = true; });\n        }\n        else {\n            types[type] = true;\n        }\n    };\n    JSONCompletion.prototype.addFillerValueCompletions = function (types, separatorAfter, collector) {\n        if (types['object']) {\n            collector.add({\n                kind: this.getSuggestionKind('object'),\n                label: '{}',\n                insertText: this.getInsertTextForGuessedValue({}, separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                detail: localize('defaults.object', 'New object'),\n                documentation: ''\n            });\n        }\n        if (types['array']) {\n            collector.add({\n                kind: this.getSuggestionKind('array'),\n                label: '[]',\n                insertText: this.getInsertTextForGuessedValue([], separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                detail: localize('defaults.array', 'New array'),\n                documentation: ''\n            });\n        }\n    };\n    JSONCompletion.prototype.addBooleanValueCompletion = function (value, separatorAfter, collector) {\n        collector.add({\n            kind: this.getSuggestionKind('boolean'),\n            label: value ? 'true' : 'false',\n            insertText: this.getInsertTextForValue(value, separatorAfter),\n            insertTextFormat: InsertTextFormat.Snippet,\n            documentation: ''\n        });\n    };\n    JSONCompletion.prototype.addNullValueCompletion = function (separatorAfter, collector) {\n        collector.add({\n            kind: this.getSuggestionKind('null'),\n            label: 'null',\n            insertText: 'null' + separatorAfter,\n            insertTextFormat: InsertTextFormat.Snippet,\n            documentation: ''\n        });\n    };\n    JSONCompletion.prototype.addDollarSchemaCompletions = function (separatorAfter, collector) {\n        var _this = this;\n        var schemaIds = this.schemaService.getRegisteredSchemaIds(function (schema) { return schema === 'http' || schema === 'https'; });\n        schemaIds.forEach(function (schemaId) { return collector.add({\n            kind: CompletionItemKind.Module,\n            label: _this.getLabelForValue(schemaId),\n            filterText: _this.getFilterTextForValue(schemaId),\n            insertText: _this.getInsertTextForValue(schemaId, separatorAfter),\n            insertTextFormat: InsertTextFormat.Snippet, documentation: ''\n        }); });\n    };\n    JSONCompletion.prototype.getLabelForValue = function (value) {\n        return JSON.stringify(value);\n    };\n    JSONCompletion.prototype.getFilterTextForValue = function (value) {\n        return JSON.stringify(value);\n    };\n    JSONCompletion.prototype.getFilterTextForSnippetValue = function (value) {\n        return JSON.stringify(value).replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, '$1');\n    };\n    JSONCompletion.prototype.getLabelForSnippetValue = function (value) {\n        var label = JSON.stringify(value);\n        return label.replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, '$1');\n    };\n    JSONCompletion.prototype.getInsertTextForPlainText = function (text) {\n        return text.replace(/[\\\\\\$\\}]/g, '\\\\$&'); // escape $, \\ and } \n    };\n    JSONCompletion.prototype.getInsertTextForValue = function (value, separatorAfter) {\n        var text = JSON.stringify(value, null, '\\t');\n        if (text === '{}') {\n            return '{$1}' + separatorAfter;\n        }\n        else if (text === '[]') {\n            return '[$1]' + separatorAfter;\n        }\n        return this.getInsertTextForPlainText(text + separatorAfter);\n    };\n    JSONCompletion.prototype.getInsertTextForSnippetValue = function (value, separatorAfter) {\n        var replacer = function (value) {\n            if (typeof value === 'string') {\n                if (value[0] === '^') {\n                    return value.substr(1);\n                }\n            }\n            return JSON.stringify(value);\n        };\n        return stringifyObject(value, '', replacer) + separatorAfter;\n    };\n    JSONCompletion.prototype.getInsertTextForGuessedValue = function (value, separatorAfter) {\n        switch (typeof value) {\n            case 'object':\n                if (value === null) {\n                    return '${1:null}' + separatorAfter;\n                }\n                return this.getInsertTextForValue(value, separatorAfter);\n            case 'string':\n                var snippetValue = JSON.stringify(value);\n                snippetValue = snippetValue.substr(1, snippetValue.length - 2); // remove quotes\n                snippetValue = this.getInsertTextForPlainText(snippetValue); // escape \\ and }\n                return '\"${1:' + snippetValue + '}\"' + separatorAfter;\n            case 'number':\n            case 'boolean':\n                return '${1:' + JSON.stringify(value) + '}' + separatorAfter;\n        }\n        return this.getInsertTextForValue(value, separatorAfter);\n    };\n    JSONCompletion.prototype.getSuggestionKind = function (type) {\n        if (Array.isArray(type)) {\n            var array = type;\n            type = array.length > 0 ? array[0] : null;\n        }\n        if (!type) {\n            return CompletionItemKind.Value;\n        }\n        switch (type) {\n            case 'string': return CompletionItemKind.Value;\n            case 'object': return CompletionItemKind.Module;\n            case 'property': return CompletionItemKind.Property;\n            default: return CompletionItemKind.Value;\n        }\n    };\n    JSONCompletion.prototype.getLabelTextForMatchingNode = function (node, document) {\n        switch (node.type) {\n            case 'array':\n                return '[]';\n            case 'object':\n                return '{}';\n            default:\n                var content = document.getText().substr(node.offset, node.length);\n                return content;\n        }\n    };\n    JSONCompletion.prototype.getInsertTextForMatchingNode = function (node, document, separatorAfter) {\n        switch (node.type) {\n            case 'array':\n                return this.getInsertTextForValue([], separatorAfter);\n            case 'object':\n                return this.getInsertTextForValue({}, separatorAfter);\n            default:\n                var content = document.getText().substr(node.offset, node.length) + separatorAfter;\n                return this.getInsertTextForPlainText(content);\n        }\n    };\n    JSONCompletion.prototype.getInsertTextForProperty = function (key, propertySchema, addValue, separatorAfter) {\n        var propertyText = this.getInsertTextForValue(key, '');\n        if (!addValue) {\n            return propertyText;\n        }\n        var resultText = propertyText + ': ';\n        var value;\n        var nValueProposals = 0;\n        if (propertySchema) {\n            if (Array.isArray(propertySchema.defaultSnippets)) {\n                if (propertySchema.defaultSnippets.length === 1) {\n                    var body = propertySchema.defaultSnippets[0].body;\n                    if (isDefined(body)) {\n                        value = this.getInsertTextForSnippetValue(body, '');\n                    }\n                }\n                nValueProposals += propertySchema.defaultSnippets.length;\n            }\n            if (propertySchema.enum) {\n                if (!value && propertySchema.enum.length === 1) {\n                    value = this.getInsertTextForGuessedValue(propertySchema.enum[0], '');\n                }\n                nValueProposals += propertySchema.enum.length;\n            }\n            if (isDefined(propertySchema.default)) {\n                if (!value) {\n                    value = this.getInsertTextForGuessedValue(propertySchema.default, '');\n                }\n                nValueProposals++;\n            }\n            if (Array.isArray(propertySchema.examples) && propertySchema.examples.length) {\n                if (!value) {\n                    value = this.getInsertTextForGuessedValue(propertySchema.examples[0], '');\n                }\n                nValueProposals += propertySchema.examples.length;\n            }\n            if (nValueProposals === 0) {\n                var type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;\n                if (!type) {\n                    if (propertySchema.properties) {\n                        type = 'object';\n                    }\n                    else if (propertySchema.items) {\n                        type = 'array';\n                    }\n                }\n                switch (type) {\n                    case 'boolean':\n                        value = '$1';\n                        break;\n                    case 'string':\n                        value = '\"$1\"';\n                        break;\n                    case 'object':\n                        value = '{$1}';\n                        break;\n                    case 'array':\n                        value = '[$1]';\n                        break;\n                    case 'number':\n                    case 'integer':\n                        value = '${1:0}';\n                        break;\n                    case 'null':\n                        value = '${1:null}';\n                        break;\n                    default:\n                        return propertyText;\n                }\n            }\n        }\n        if (!value || nValueProposals > 1) {\n            value = '$1';\n        }\n        return resultText + value + separatorAfter;\n    };\n    JSONCompletion.prototype.getCurrentWord = function (document, offset) {\n        var i = offset - 1;\n        var text = document.getText();\n        while (i >= 0 && ' \\t\\n\\r\\v\":{[,]}'.indexOf(text.charAt(i)) === -1) {\n            i--;\n        }\n        return text.substring(i + 1, offset);\n    };\n    JSONCompletion.prototype.evaluateSeparatorAfter = function (document, offset) {\n        var scanner = Json.createScanner(document.getText(), true);\n        scanner.setPosition(offset);\n        var token = scanner.scan();\n        switch (token) {\n            case 5 /* CommaToken */:\n            case 2 /* CloseBraceToken */:\n            case 4 /* CloseBracketToken */:\n            case 17 /* EOF */:\n                return '';\n            default:\n                return ',';\n        }\n    };\n    JSONCompletion.prototype.findItemAtOffset = function (node, document, offset) {\n        var scanner = Json.createScanner(document.getText(), true);\n        var children = node.items;\n        for (var i = children.length - 1; i >= 0; i--) {\n            var child = children[i];\n            if (offset > child.offset + child.length) {\n                scanner.setPosition(child.offset + child.length);\n                var token = scanner.scan();\n                if (token === 5 /* CommaToken */ && offset >= scanner.getTokenOffset() + scanner.getTokenLength()) {\n                    return i + 1;\n                }\n                return i;\n            }\n            else if (offset >= child.offset) {\n                return i;\n            }\n        }\n        return 0;\n    };\n    JSONCompletion.prototype.isInComment = function (document, start, offset) {\n        var scanner = Json.createScanner(document.getText(), false);\n        scanner.setPosition(start);\n        var token = scanner.scan();\n        while (token !== 17 /* EOF */ && (scanner.getTokenOffset() + scanner.getTokenLength() < offset)) {\n            token = scanner.scan();\n        }\n        return (token === 12 /* LineCommentTrivia */ || token === 13 /* BlockCommentTrivia */) && scanner.getTokenOffset() <= offset;\n    };\n    JSONCompletion.prototype.fromMarkup = function (markupString) {\n        if (markupString && this.doesSupportMarkdown()) {\n            return {\n                kind: MarkupKind.Markdown,\n                value: markupString\n            };\n        }\n        return undefined;\n    };\n    JSONCompletion.prototype.doesSupportMarkdown = function () {\n        if (!isDefined(this.supportsMarkdown)) {\n            var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;\n            this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;\n        }\n        return this.supportsMarkdown;\n    };\n    JSONCompletion.prototype.doesSupportsCommitCharacters = function () {\n        if (!isDefined(this.supportsCommitCharacters)) {\n            var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;\n            this.supportsCommitCharacters = completion && completion.completionItem && !!completion.completionItem.commitCharactersSupport;\n        }\n        return this.supportsCommitCharacters;\n    };\n    return JSONCompletion;\n}());\nexport { JSONCompletion };\n"]},"metadata":{},"sourceType":"module"}