{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { ShiftCommand } from '../../common/commands/shiftCommand.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { IndentAction } from '../../common/modes/languageConfiguration.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nimport * as indentUtils from '../indentation/indentUtils.js';\n\nvar MoveLinesCommand =\n/** @class */\nfunction () {\n  function MoveLinesCommand(selection, isMovingDown, autoIndent) {\n    this._selection = selection;\n    this._isMovingDown = isMovingDown;\n    this._autoIndent = autoIndent;\n    this._selectionId = null;\n    this._moveEndLineSelectionShrink = false;\n  }\n\n  MoveLinesCommand.prototype.getEditOperations = function (model, builder) {\n    var modelLineCount = model.getLineCount();\n\n    if (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {\n      this._selectionId = builder.trackSelection(this._selection);\n      return;\n    }\n\n    if (!this._isMovingDown && this._selection.startLineNumber === 1) {\n      this._selectionId = builder.trackSelection(this._selection);\n      return;\n    }\n\n    this._moveEndPositionDown = false;\n    var s = this._selection;\n\n    if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n      this._moveEndPositionDown = true;\n      s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n    }\n\n    var _a = model.getOptions(),\n        tabSize = _a.tabSize,\n        indentSize = _a.indentSize,\n        insertSpaces = _a.insertSpaces;\n\n    var indentConverter = this.buildIndentConverter(tabSize, indentSize, insertSpaces);\n    var virtualModel = {\n      getLineTokens: function (lineNumber) {\n        return model.getLineTokens(lineNumber);\n      },\n      getLanguageIdentifier: function () {\n        return model.getLanguageIdentifier();\n      },\n      getLanguageIdAtPosition: function (lineNumber, column) {\n        return model.getLanguageIdAtPosition(lineNumber, column);\n      },\n      getLineContent: null\n    };\n\n    if (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {\n      // Current line is empty\n      var lineNumber = s.startLineNumber;\n      var otherLineNumber = this._isMovingDown ? lineNumber + 1 : lineNumber - 1;\n\n      if (model.getLineMaxColumn(otherLineNumber) === 1) {\n        // Other line number is empty too, so no editing is needed\n        // Add a no-op to force running by the model\n        builder.addEditOperation(new Range(1, 1, 1, 1), null);\n      } else {\n        // Type content from other line number on line number\n        builder.addEditOperation(new Range(lineNumber, 1, lineNumber, 1), model.getLineContent(otherLineNumber)); // Remove content from other line number\n\n        builder.addEditOperation(new Range(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);\n      } // Track selection at the other line number\n\n\n      s = new Selection(otherLineNumber, 1, otherLineNumber, 1);\n    } else {\n      var movingLineNumber_1;\n      var movingLineText = void 0;\n\n      if (this._isMovingDown) {\n        movingLineNumber_1 = s.endLineNumber + 1;\n        movingLineText = model.getLineContent(movingLineNumber_1); // Delete line that needs to be moved\n\n        builder.addEditOperation(new Range(movingLineNumber_1 - 1, model.getLineMaxColumn(movingLineNumber_1 - 1), movingLineNumber_1, model.getLineMaxColumn(movingLineNumber_1)), null);\n        var insertingText_1 = movingLineText;\n\n        if (this.shouldAutoIndent(model, s)) {\n          var movingLineMatchResult = this.matchEnterRule(model, indentConverter, tabSize, movingLineNumber_1, s.startLineNumber - 1); // if s.startLineNumber - 1 matches onEnter rule, we still honor that.\n\n          if (movingLineMatchResult !== null) {\n            var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber_1));\n            var newSpaceCnt = movingLineMatchResult + indentUtils.getSpaceCnt(oldIndentation, tabSize);\n            var newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n            insertingText_1 = newIndentation + this.trimLeft(movingLineText);\n          } else {\n            // no enter rule matches, let's check indentatin rules then.\n            virtualModel.getLineContent = function (lineNumber) {\n              if (lineNumber === s.startLineNumber) {\n                return model.getLineContent(movingLineNumber_1);\n              } else {\n                return model.getLineContent(lineNumber);\n              }\n            };\n\n            var indentOfMovingLine = LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber_1, 1), s.startLineNumber, indentConverter);\n\n            if (indentOfMovingLine !== null) {\n              var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber_1));\n              var newSpaceCnt = indentUtils.getSpaceCnt(indentOfMovingLine, tabSize);\n              var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\n              if (newSpaceCnt !== oldSpaceCnt) {\n                var newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n                insertingText_1 = newIndentation + this.trimLeft(movingLineText);\n              }\n            }\n          } // add edit operations for moving line first to make sure it's executed after we make indentation change\n          // to s.startLineNumber\n\n\n          builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText_1 + '\\n');\n          var ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber, insertingText_1); // check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.\n\n          if (ret !== null) {\n            if (ret !== 0) {\n              this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n            }\n          } else {\n            // it doesn't match onEnter rules, let's check indentation rules then.\n            virtualModel.getLineContent = function (lineNumber) {\n              if (lineNumber === s.startLineNumber) {\n                return insertingText_1;\n              } else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) {\n                return model.getLineContent(lineNumber - 1);\n              } else {\n                return model.getLineContent(lineNumber);\n              }\n            };\n\n            var newIndentatOfMovingBlock = LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber_1, 1), s.startLineNumber + 1, indentConverter);\n\n            if (newIndentatOfMovingBlock !== null) {\n              var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n              var newSpaceCnt = indentUtils.getSpaceCnt(newIndentatOfMovingBlock, tabSize);\n              var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\n              if (newSpaceCnt !== oldSpaceCnt) {\n                var spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n              }\n            }\n          }\n        } else {\n          // Insert line that needs to be moved before\n          builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText_1 + '\\n');\n        }\n      } else {\n        movingLineNumber_1 = s.startLineNumber - 1;\n        movingLineText = model.getLineContent(movingLineNumber_1); // Delete line that needs to be moved\n\n        builder.addEditOperation(new Range(movingLineNumber_1, 1, movingLineNumber_1 + 1, 1), null); // Insert line that needs to be moved after\n\n        builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + movingLineText);\n\n        if (this.shouldAutoIndent(model, s)) {\n          virtualModel.getLineContent = function (lineNumber) {\n            if (lineNumber === movingLineNumber_1) {\n              return model.getLineContent(s.startLineNumber);\n            } else {\n              return model.getLineContent(lineNumber);\n            }\n          };\n\n          var ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber - 2); // check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.\n\n          if (ret !== null) {\n            if (ret !== 0) {\n              this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n            }\n          } else {\n            // it doesn't match any onEnter rule, let's check indentation rules then.\n            var indentOfFirstLine = LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(s.startLineNumber, 1), movingLineNumber_1, indentConverter);\n\n            if (indentOfFirstLine !== null) {\n              // adjust the indentation of the moving block\n              var oldIndent = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n              var newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n              var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndent, tabSize);\n\n              if (newSpaceCnt !== oldSpaceCnt) {\n                var spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    this._selectionId = builder.trackSelection(s);\n  };\n\n  MoveLinesCommand.prototype.buildIndentConverter = function (tabSize, indentSize, insertSpaces) {\n    return {\n      shiftIndent: function (indentation) {\n        return ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n      },\n      unshiftIndent: function (indentation) {\n        return ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n      }\n    };\n  };\n\n  MoveLinesCommand.prototype.matchEnterRule = function (model, indentConverter, tabSize, line, oneLineAbove, oneLineAboveText) {\n    var validPrecedingLine = oneLineAbove;\n\n    while (validPrecedingLine >= 1) {\n      // ship empty lines as empty lines just inherit indentation\n      var lineContent = void 0;\n\n      if (validPrecedingLine === oneLineAbove && oneLineAboveText !== undefined) {\n        lineContent = oneLineAboveText;\n      } else {\n        lineContent = model.getLineContent(validPrecedingLine);\n      }\n\n      var nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\n\n      if (nonWhitespaceIdx >= 0) {\n        break;\n      }\n\n      validPrecedingLine--;\n    }\n\n    if (validPrecedingLine < 1 || line > model.getLineCount()) {\n      return null;\n    }\n\n    var maxColumn = model.getLineMaxColumn(validPrecedingLine);\n    var enter = LanguageConfigurationRegistry.getEnterAction(this._autoIndent, model, new Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn));\n\n    if (enter) {\n      var enterPrefix = enter.indentation;\n\n      if (enter.indentAction === IndentAction.None) {\n        enterPrefix = enter.indentation + enter.appendText;\n      } else if (enter.indentAction === IndentAction.Indent) {\n        enterPrefix = enter.indentation + enter.appendText;\n      } else if (enter.indentAction === IndentAction.IndentOutdent) {\n        enterPrefix = enter.indentation;\n      } else if (enter.indentAction === IndentAction.Outdent) {\n        enterPrefix = indentConverter.unshiftIndent(enter.indentation) + enter.appendText;\n      }\n\n      var movingLineText = model.getLineContent(line);\n\n      if (this.trimLeft(movingLineText).indexOf(this.trimLeft(enterPrefix)) >= 0) {\n        var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(line));\n        var newIndentation = strings.getLeadingWhitespace(enterPrefix);\n        var indentMetadataOfMovelingLine = LanguageConfigurationRegistry.getIndentMetadata(model, line);\n\n        if (indentMetadataOfMovelingLine !== null && indentMetadataOfMovelingLine & 2\n        /* DECREASE_MASK */\n        ) {\n            newIndentation = indentConverter.unshiftIndent(newIndentation);\n          }\n\n        var newSpaceCnt = indentUtils.getSpaceCnt(newIndentation, tabSize);\n        var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n        return newSpaceCnt - oldSpaceCnt;\n      }\n    }\n\n    return null;\n  };\n\n  MoveLinesCommand.prototype.trimLeft = function (str) {\n    return str.replace(/^\\s+/, '');\n  };\n\n  MoveLinesCommand.prototype.shouldAutoIndent = function (model, selection) {\n    if (this._autoIndent < 4\n    /* Full */\n    ) {\n        return false;\n      } // if it's not easy to tokenize, we stop auto indent.\n\n\n    if (!model.isCheapToTokenize(selection.startLineNumber)) {\n      return false;\n    }\n\n    var languageAtSelectionStart = model.getLanguageIdAtPosition(selection.startLineNumber, 1);\n    var languageAtSelectionEnd = model.getLanguageIdAtPosition(selection.endLineNumber, 1);\n\n    if (languageAtSelectionStart !== languageAtSelectionEnd) {\n      return false;\n    }\n\n    if (LanguageConfigurationRegistry.getIndentRulesSupport(languageAtSelectionStart) === null) {\n      return false;\n    }\n\n    return true;\n  };\n\n  MoveLinesCommand.prototype.getIndentEditsOfMovingBlock = function (model, builder, s, tabSize, insertSpaces, offset) {\n    for (var i = s.startLineNumber; i <= s.endLineNumber; i++) {\n      var lineContent = model.getLineContent(i);\n      var originalIndent = strings.getLeadingWhitespace(lineContent);\n      var originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n      var newSpacesCnt = originalSpacesCnt + offset;\n      var newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n\n      if (newIndent !== originalIndent) {\n        builder.addEditOperation(new Range(i, 1, i, originalIndent.length + 1), newIndent);\n\n        if (i === s.endLineNumber && s.endColumn <= originalIndent.length + 1 && newIndent === '') {\n          // as users select part of the original indent white spaces\n          // when we adjust the indentation of endLine, we should adjust the cursor position as well.\n          this._moveEndLineSelectionShrink = true;\n        }\n      }\n    }\n  };\n\n  MoveLinesCommand.prototype.computeCursorState = function (model, helper) {\n    var result = helper.getTrackedSelection(this._selectionId);\n\n    if (this._moveEndPositionDown) {\n      result = result.setEndPosition(result.endLineNumber + 1, 1);\n    }\n\n    if (this._moveEndLineSelectionShrink && result.startLineNumber < result.endLineNumber) {\n      result = result.setEndPosition(result.endLineNumber, 2);\n    }\n\n    return result;\n  };\n\n  return MoveLinesCommand;\n}();\n\nexport { MoveLinesCommand };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/moveLinesCommand.js"],"names":["strings","ShiftCommand","Range","Selection","IndentAction","LanguageConfigurationRegistry","indentUtils","MoveLinesCommand","selection","isMovingDown","autoIndent","_selection","_isMovingDown","_autoIndent","_selectionId","_moveEndLineSelectionShrink","prototype","getEditOperations","model","builder","modelLineCount","getLineCount","endLineNumber","trackSelection","startLineNumber","_moveEndPositionDown","s","endColumn","setEndPosition","getLineMaxColumn","_a","getOptions","tabSize","indentSize","insertSpaces","indentConverter","buildIndentConverter","virtualModel","getLineTokens","lineNumber","getLanguageIdentifier","getLanguageIdAtPosition","column","getLineContent","otherLineNumber","addEditOperation","movingLineNumber_1","movingLineText","insertingText_1","shouldAutoIndent","movingLineMatchResult","matchEnterRule","oldIndentation","getLeadingWhitespace","newSpaceCnt","getSpaceCnt","newIndentation","generateIndent","trimLeft","indentOfMovingLine","getGoodIndentForLine","oldSpaceCnt","ret","getIndentEditsOfMovingBlock","newIndentatOfMovingBlock","spaceCntOffset","indentOfFirstLine","oldIndent","shiftIndent","indentation","length","unshiftIndent","line","oneLineAbove","oneLineAboveText","validPrecedingLine","lineContent","undefined","nonWhitespaceIdx","lastNonWhitespaceIndex","maxColumn","enter","getEnterAction","enterPrefix","indentAction","None","appendText","Indent","IndentOutdent","Outdent","indexOf","indentMetadataOfMovelingLine","getIndentMetadata","str","replace","isCheapToTokenize","languageAtSelectionStart","languageAtSelectionEnd","getIndentRulesSupport","offset","i","originalIndent","originalSpacesCnt","newSpacesCnt","newIndent","computeCursorState","helper","result","getTrackedSelection"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { ShiftCommand } from '../../common/commands/shiftCommand.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { IndentAction } from '../../common/modes/languageConfiguration.js';\r\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\r\nimport * as indentUtils from '../indentation/indentUtils.js';\r\nvar MoveLinesCommand = /** @class */ (function () {\r\n    function MoveLinesCommand(selection, isMovingDown, autoIndent) {\r\n        this._selection = selection;\r\n        this._isMovingDown = isMovingDown;\r\n        this._autoIndent = autoIndent;\r\n        this._selectionId = null;\r\n        this._moveEndLineSelectionShrink = false;\r\n    }\r\n    MoveLinesCommand.prototype.getEditOperations = function (model, builder) {\r\n        var modelLineCount = model.getLineCount();\r\n        if (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {\r\n            this._selectionId = builder.trackSelection(this._selection);\r\n            return;\r\n        }\r\n        if (!this._isMovingDown && this._selection.startLineNumber === 1) {\r\n            this._selectionId = builder.trackSelection(this._selection);\r\n            return;\r\n        }\r\n        this._moveEndPositionDown = false;\r\n        var s = this._selection;\r\n        if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\r\n            this._moveEndPositionDown = true;\r\n            s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\r\n        }\r\n        var _a = model.getOptions(), tabSize = _a.tabSize, indentSize = _a.indentSize, insertSpaces = _a.insertSpaces;\r\n        var indentConverter = this.buildIndentConverter(tabSize, indentSize, insertSpaces);\r\n        var virtualModel = {\r\n            getLineTokens: function (lineNumber) {\r\n                return model.getLineTokens(lineNumber);\r\n            },\r\n            getLanguageIdentifier: function () {\r\n                return model.getLanguageIdentifier();\r\n            },\r\n            getLanguageIdAtPosition: function (lineNumber, column) {\r\n                return model.getLanguageIdAtPosition(lineNumber, column);\r\n            },\r\n            getLineContent: null,\r\n        };\r\n        if (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {\r\n            // Current line is empty\r\n            var lineNumber = s.startLineNumber;\r\n            var otherLineNumber = (this._isMovingDown ? lineNumber + 1 : lineNumber - 1);\r\n            if (model.getLineMaxColumn(otherLineNumber) === 1) {\r\n                // Other line number is empty too, so no editing is needed\r\n                // Add a no-op to force running by the model\r\n                builder.addEditOperation(new Range(1, 1, 1, 1), null);\r\n            }\r\n            else {\r\n                // Type content from other line number on line number\r\n                builder.addEditOperation(new Range(lineNumber, 1, lineNumber, 1), model.getLineContent(otherLineNumber));\r\n                // Remove content from other line number\r\n                builder.addEditOperation(new Range(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);\r\n            }\r\n            // Track selection at the other line number\r\n            s = new Selection(otherLineNumber, 1, otherLineNumber, 1);\r\n        }\r\n        else {\r\n            var movingLineNumber_1;\r\n            var movingLineText = void 0;\r\n            if (this._isMovingDown) {\r\n                movingLineNumber_1 = s.endLineNumber + 1;\r\n                movingLineText = model.getLineContent(movingLineNumber_1);\r\n                // Delete line that needs to be moved\r\n                builder.addEditOperation(new Range(movingLineNumber_1 - 1, model.getLineMaxColumn(movingLineNumber_1 - 1), movingLineNumber_1, model.getLineMaxColumn(movingLineNumber_1)), null);\r\n                var insertingText_1 = movingLineText;\r\n                if (this.shouldAutoIndent(model, s)) {\r\n                    var movingLineMatchResult = this.matchEnterRule(model, indentConverter, tabSize, movingLineNumber_1, s.startLineNumber - 1);\r\n                    // if s.startLineNumber - 1 matches onEnter rule, we still honor that.\r\n                    if (movingLineMatchResult !== null) {\r\n                        var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber_1));\r\n                        var newSpaceCnt = movingLineMatchResult + indentUtils.getSpaceCnt(oldIndentation, tabSize);\r\n                        var newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\r\n                        insertingText_1 = newIndentation + this.trimLeft(movingLineText);\r\n                    }\r\n                    else {\r\n                        // no enter rule matches, let's check indentatin rules then.\r\n                        virtualModel.getLineContent = function (lineNumber) {\r\n                            if (lineNumber === s.startLineNumber) {\r\n                                return model.getLineContent(movingLineNumber_1);\r\n                            }\r\n                            else {\r\n                                return model.getLineContent(lineNumber);\r\n                            }\r\n                        };\r\n                        var indentOfMovingLine = LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber_1, 1), s.startLineNumber, indentConverter);\r\n                        if (indentOfMovingLine !== null) {\r\n                            var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber_1));\r\n                            var newSpaceCnt = indentUtils.getSpaceCnt(indentOfMovingLine, tabSize);\r\n                            var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\r\n                            if (newSpaceCnt !== oldSpaceCnt) {\r\n                                var newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\r\n                                insertingText_1 = newIndentation + this.trimLeft(movingLineText);\r\n                            }\r\n                        }\r\n                    }\r\n                    // add edit operations for moving line first to make sure it's executed after we make indentation change\r\n                    // to s.startLineNumber\r\n                    builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText_1 + '\\n');\r\n                    var ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber, insertingText_1);\r\n                    // check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.\r\n                    if (ret !== null) {\r\n                        if (ret !== 0) {\r\n                            this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // it doesn't match onEnter rules, let's check indentation rules then.\r\n                        virtualModel.getLineContent = function (lineNumber) {\r\n                            if (lineNumber === s.startLineNumber) {\r\n                                return insertingText_1;\r\n                            }\r\n                            else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) {\r\n                                return model.getLineContent(lineNumber - 1);\r\n                            }\r\n                            else {\r\n                                return model.getLineContent(lineNumber);\r\n                            }\r\n                        };\r\n                        var newIndentatOfMovingBlock = LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber_1, 1), s.startLineNumber + 1, indentConverter);\r\n                        if (newIndentatOfMovingBlock !== null) {\r\n                            var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\r\n                            var newSpaceCnt = indentUtils.getSpaceCnt(newIndentatOfMovingBlock, tabSize);\r\n                            var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\r\n                            if (newSpaceCnt !== oldSpaceCnt) {\r\n                                var spaceCntOffset = newSpaceCnt - oldSpaceCnt;\r\n                                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // Insert line that needs to be moved before\r\n                    builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText_1 + '\\n');\r\n                }\r\n            }\r\n            else {\r\n                movingLineNumber_1 = s.startLineNumber - 1;\r\n                movingLineText = model.getLineContent(movingLineNumber_1);\r\n                // Delete line that needs to be moved\r\n                builder.addEditOperation(new Range(movingLineNumber_1, 1, movingLineNumber_1 + 1, 1), null);\r\n                // Insert line that needs to be moved after\r\n                builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + movingLineText);\r\n                if (this.shouldAutoIndent(model, s)) {\r\n                    virtualModel.getLineContent = function (lineNumber) {\r\n                        if (lineNumber === movingLineNumber_1) {\r\n                            return model.getLineContent(s.startLineNumber);\r\n                        }\r\n                        else {\r\n                            return model.getLineContent(lineNumber);\r\n                        }\r\n                    };\r\n                    var ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber - 2);\r\n                    // check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.\r\n                    if (ret !== null) {\r\n                        if (ret !== 0) {\r\n                            this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // it doesn't match any onEnter rule, let's check indentation rules then.\r\n                        var indentOfFirstLine = LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(s.startLineNumber, 1), movingLineNumber_1, indentConverter);\r\n                        if (indentOfFirstLine !== null) {\r\n                            // adjust the indentation of the moving block\r\n                            var oldIndent = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\r\n                            var newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\r\n                            var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndent, tabSize);\r\n                            if (newSpaceCnt !== oldSpaceCnt) {\r\n                                var spaceCntOffset = newSpaceCnt - oldSpaceCnt;\r\n                                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._selectionId = builder.trackSelection(s);\r\n    };\r\n    MoveLinesCommand.prototype.buildIndentConverter = function (tabSize, indentSize, insertSpaces) {\r\n        return {\r\n            shiftIndent: function (indentation) {\r\n                return ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\r\n            },\r\n            unshiftIndent: function (indentation) {\r\n                return ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\r\n            }\r\n        };\r\n    };\r\n    MoveLinesCommand.prototype.matchEnterRule = function (model, indentConverter, tabSize, line, oneLineAbove, oneLineAboveText) {\r\n        var validPrecedingLine = oneLineAbove;\r\n        while (validPrecedingLine >= 1) {\r\n            // ship empty lines as empty lines just inherit indentation\r\n            var lineContent = void 0;\r\n            if (validPrecedingLine === oneLineAbove && oneLineAboveText !== undefined) {\r\n                lineContent = oneLineAboveText;\r\n            }\r\n            else {\r\n                lineContent = model.getLineContent(validPrecedingLine);\r\n            }\r\n            var nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\r\n            if (nonWhitespaceIdx >= 0) {\r\n                break;\r\n            }\r\n            validPrecedingLine--;\r\n        }\r\n        if (validPrecedingLine < 1 || line > model.getLineCount()) {\r\n            return null;\r\n        }\r\n        var maxColumn = model.getLineMaxColumn(validPrecedingLine);\r\n        var enter = LanguageConfigurationRegistry.getEnterAction(this._autoIndent, model, new Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn));\r\n        if (enter) {\r\n            var enterPrefix = enter.indentation;\r\n            if (enter.indentAction === IndentAction.None) {\r\n                enterPrefix = enter.indentation + enter.appendText;\r\n            }\r\n            else if (enter.indentAction === IndentAction.Indent) {\r\n                enterPrefix = enter.indentation + enter.appendText;\r\n            }\r\n            else if (enter.indentAction === IndentAction.IndentOutdent) {\r\n                enterPrefix = enter.indentation;\r\n            }\r\n            else if (enter.indentAction === IndentAction.Outdent) {\r\n                enterPrefix = indentConverter.unshiftIndent(enter.indentation) + enter.appendText;\r\n            }\r\n            var movingLineText = model.getLineContent(line);\r\n            if (this.trimLeft(movingLineText).indexOf(this.trimLeft(enterPrefix)) >= 0) {\r\n                var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(line));\r\n                var newIndentation = strings.getLeadingWhitespace(enterPrefix);\r\n                var indentMetadataOfMovelingLine = LanguageConfigurationRegistry.getIndentMetadata(model, line);\r\n                if (indentMetadataOfMovelingLine !== null && indentMetadataOfMovelingLine & 2 /* DECREASE_MASK */) {\r\n                    newIndentation = indentConverter.unshiftIndent(newIndentation);\r\n                }\r\n                var newSpaceCnt = indentUtils.getSpaceCnt(newIndentation, tabSize);\r\n                var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\r\n                return newSpaceCnt - oldSpaceCnt;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    MoveLinesCommand.prototype.trimLeft = function (str) {\r\n        return str.replace(/^\\s+/, '');\r\n    };\r\n    MoveLinesCommand.prototype.shouldAutoIndent = function (model, selection) {\r\n        if (this._autoIndent < 4 /* Full */) {\r\n            return false;\r\n        }\r\n        // if it's not easy to tokenize, we stop auto indent.\r\n        if (!model.isCheapToTokenize(selection.startLineNumber)) {\r\n            return false;\r\n        }\r\n        var languageAtSelectionStart = model.getLanguageIdAtPosition(selection.startLineNumber, 1);\r\n        var languageAtSelectionEnd = model.getLanguageIdAtPosition(selection.endLineNumber, 1);\r\n        if (languageAtSelectionStart !== languageAtSelectionEnd) {\r\n            return false;\r\n        }\r\n        if (LanguageConfigurationRegistry.getIndentRulesSupport(languageAtSelectionStart) === null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    MoveLinesCommand.prototype.getIndentEditsOfMovingBlock = function (model, builder, s, tabSize, insertSpaces, offset) {\r\n        for (var i = s.startLineNumber; i <= s.endLineNumber; i++) {\r\n            var lineContent = model.getLineContent(i);\r\n            var originalIndent = strings.getLeadingWhitespace(lineContent);\r\n            var originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\r\n            var newSpacesCnt = originalSpacesCnt + offset;\r\n            var newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\r\n            if (newIndent !== originalIndent) {\r\n                builder.addEditOperation(new Range(i, 1, i, originalIndent.length + 1), newIndent);\r\n                if (i === s.endLineNumber && s.endColumn <= originalIndent.length + 1 && newIndent === '') {\r\n                    // as users select part of the original indent white spaces\r\n                    // when we adjust the indentation of endLine, we should adjust the cursor position as well.\r\n                    this._moveEndLineSelectionShrink = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    MoveLinesCommand.prototype.computeCursorState = function (model, helper) {\r\n        var result = helper.getTrackedSelection(this._selectionId);\r\n        if (this._moveEndPositionDown) {\r\n            result = result.setEndPosition(result.endLineNumber + 1, 1);\r\n        }\r\n        if (this._moveEndLineSelectionShrink && result.startLineNumber < result.endLineNumber) {\r\n            result = result.setEndPosition(result.endLineNumber, 2);\r\n        }\r\n        return result;\r\n    };\r\n    return MoveLinesCommand;\r\n}());\r\nexport { MoveLinesCommand };\r\n"]},"metadata":{},"sourceType":"module"}