{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar LANGUAGE_DEFAULT = 'en';\nvar _isWindows = false;\nvar _isMacintosh = false;\nvar _isLinux = false;\nvar _isNative = false;\nvar _isWeb = false;\nvar _isIOS = false;\nvar _locale = undefined;\nvar _language = LANGUAGE_DEFAULT;\nvar _translationsConfigFile = undefined;\nvar _userAgent = undefined;\nvar isElectronRenderer = typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer'; // OS detection\n\nif (typeof navigator === 'object' && !isElectronRenderer) {\n  _userAgent = navigator.userAgent;\n  _isWindows = _userAgent.indexOf('Windows') >= 0;\n  _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\n  _isIOS = _userAgent.indexOf('Macintosh') >= 0 && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\n  _isLinux = _userAgent.indexOf('Linux') >= 0;\n  _isWeb = true;\n  _locale = navigator.language;\n  _language = _locale;\n} else if (typeof process === 'object') {\n  _isWindows = process.platform === 'win32';\n  _isMacintosh = process.platform === 'darwin';\n  _isLinux = process.platform === 'linux';\n  _locale = LANGUAGE_DEFAULT;\n  _language = LANGUAGE_DEFAULT;\n  var rawNlsConfig = process.env['VSCODE_NLS_CONFIG'];\n\n  if (rawNlsConfig) {\n    try {\n      var nlsConfig = JSON.parse(rawNlsConfig);\n      var resolved = nlsConfig.availableLanguages['*'];\n      _locale = nlsConfig.locale; // VSCode's default language is 'en'\n\n      _language = resolved ? resolved : LANGUAGE_DEFAULT;\n      _translationsConfigFile = nlsConfig._translationsConfigFile;\n    } catch (e) {}\n  }\n\n  _isNative = true;\n}\n\nvar _platform = 0\n/* Web */\n;\n\nif (_isMacintosh) {\n  _platform = 1\n  /* Mac */\n  ;\n} else if (_isWindows) {\n  _platform = 3\n  /* Windows */\n  ;\n} else if (_isLinux) {\n  _platform = 2\n  /* Linux */\n  ;\n}\n\nexport var isWindows = _isWindows;\nexport var isMacintosh = _isMacintosh;\nexport var isLinux = _isLinux;\nexport var isNative = _isNative;\nexport var isWeb = _isWeb;\nexport var isIOS = _isIOS;\n\nvar _globals = typeof self === 'object' ? self : typeof global === 'object' ? global : {};\n\nexport var globals = _globals;\nexport var setImmediate = function defineSetImmediate() {\n  if (globals.setImmediate) {\n    return globals.setImmediate.bind(globals);\n  }\n\n  if (typeof globals.postMessage === 'function' && !globals.importScripts) {\n    var pending_1 = [];\n    globals.addEventListener('message', function (e) {\n      if (e.data && e.data.vscodeSetImmediateId) {\n        for (var i = 0, len = pending_1.length; i < len; i++) {\n          var candidate = pending_1[i];\n\n          if (candidate.id === e.data.vscodeSetImmediateId) {\n            pending_1.splice(i, 1);\n            candidate.callback();\n            return;\n          }\n        }\n      }\n    });\n    var lastId_1 = 0;\n    return function (callback) {\n      var myId = ++lastId_1;\n      pending_1.push({\n        id: myId,\n        callback: callback\n      });\n      globals.postMessage({\n        vscodeSetImmediateId: myId\n      }, '*');\n    };\n  }\n\n  if (typeof process !== 'undefined' && typeof process.nextTick === 'function') {\n    return process.nextTick.bind(process);\n  }\n\n  var _promise = Promise.resolve();\n\n  return function (callback) {\n    return _promise.then(callback);\n  };\n}();\nexport var OS = _isMacintosh ? 2\n/* Macintosh */\n: _isWindows ? 1\n/* Windows */\n: 3\n/* Linux */\n;","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/base/common/platform.js"],"names":["LANGUAGE_DEFAULT","_isWindows","_isMacintosh","_isLinux","_isNative","_isWeb","_isIOS","_locale","undefined","_language","_translationsConfigFile","_userAgent","isElectronRenderer","process","versions","electron","type","navigator","userAgent","indexOf","maxTouchPoints","language","platform","rawNlsConfig","env","nlsConfig","JSON","parse","resolved","availableLanguages","locale","e","_platform","isWindows","isMacintosh","isLinux","isNative","isWeb","isIOS","_globals","self","global","globals","setImmediate","defineSetImmediate","bind","postMessage","importScripts","pending_1","addEventListener","data","vscodeSetImmediateId","i","len","length","candidate","id","splice","callback","lastId_1","myId","push","nextTick","_promise","Promise","resolve","then","OS"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar LANGUAGE_DEFAULT = 'en';\r\nvar _isWindows = false;\r\nvar _isMacintosh = false;\r\nvar _isLinux = false;\r\nvar _isNative = false;\r\nvar _isWeb = false;\r\nvar _isIOS = false;\r\nvar _locale = undefined;\r\nvar _language = LANGUAGE_DEFAULT;\r\nvar _translationsConfigFile = undefined;\r\nvar _userAgent = undefined;\r\nvar isElectronRenderer = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer');\r\n// OS detection\r\nif (typeof navigator === 'object' && !isElectronRenderer) {\r\n    _userAgent = navigator.userAgent;\r\n    _isWindows = _userAgent.indexOf('Windows') >= 0;\r\n    _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\r\n    _isIOS = _userAgent.indexOf('Macintosh') >= 0 && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\r\n    _isLinux = _userAgent.indexOf('Linux') >= 0;\r\n    _isWeb = true;\r\n    _locale = navigator.language;\r\n    _language = _locale;\r\n}\r\nelse if (typeof process === 'object') {\r\n    _isWindows = (process.platform === 'win32');\r\n    _isMacintosh = (process.platform === 'darwin');\r\n    _isLinux = (process.platform === 'linux');\r\n    _locale = LANGUAGE_DEFAULT;\r\n    _language = LANGUAGE_DEFAULT;\r\n    var rawNlsConfig = process.env['VSCODE_NLS_CONFIG'];\r\n    if (rawNlsConfig) {\r\n        try {\r\n            var nlsConfig = JSON.parse(rawNlsConfig);\r\n            var resolved = nlsConfig.availableLanguages['*'];\r\n            _locale = nlsConfig.locale;\r\n            // VSCode's default language is 'en'\r\n            _language = resolved ? resolved : LANGUAGE_DEFAULT;\r\n            _translationsConfigFile = nlsConfig._translationsConfigFile;\r\n        }\r\n        catch (e) {\r\n        }\r\n    }\r\n    _isNative = true;\r\n}\r\nvar _platform = 0 /* Web */;\r\nif (_isMacintosh) {\r\n    _platform = 1 /* Mac */;\r\n}\r\nelse if (_isWindows) {\r\n    _platform = 3 /* Windows */;\r\n}\r\nelse if (_isLinux) {\r\n    _platform = 2 /* Linux */;\r\n}\r\nexport var isWindows = _isWindows;\r\nexport var isMacintosh = _isMacintosh;\r\nexport var isLinux = _isLinux;\r\nexport var isNative = _isNative;\r\nexport var isWeb = _isWeb;\r\nexport var isIOS = _isIOS;\r\nvar _globals = (typeof self === 'object' ? self : typeof global === 'object' ? global : {});\r\nexport var globals = _globals;\r\nexport var setImmediate = (function defineSetImmediate() {\r\n    if (globals.setImmediate) {\r\n        return globals.setImmediate.bind(globals);\r\n    }\r\n    if (typeof globals.postMessage === 'function' && !globals.importScripts) {\r\n        var pending_1 = [];\r\n        globals.addEventListener('message', function (e) {\r\n            if (e.data && e.data.vscodeSetImmediateId) {\r\n                for (var i = 0, len = pending_1.length; i < len; i++) {\r\n                    var candidate = pending_1[i];\r\n                    if (candidate.id === e.data.vscodeSetImmediateId) {\r\n                        pending_1.splice(i, 1);\r\n                        candidate.callback();\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        var lastId_1 = 0;\r\n        return function (callback) {\r\n            var myId = ++lastId_1;\r\n            pending_1.push({\r\n                id: myId,\r\n                callback: callback\r\n            });\r\n            globals.postMessage({ vscodeSetImmediateId: myId }, '*');\r\n        };\r\n    }\r\n    if (typeof process !== 'undefined' && typeof process.nextTick === 'function') {\r\n        return process.nextTick.bind(process);\r\n    }\r\n    var _promise = Promise.resolve();\r\n    return function (callback) { return _promise.then(callback); };\r\n})();\r\nexport var OS = (_isMacintosh ? 2 /* Macintosh */ : (_isWindows ? 1 /* Windows */ : 3 /* Linux */));\r\n"]},"metadata":{},"sourceType":"module"}