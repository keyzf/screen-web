{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { toUint8 } from '../../../base/common/uint.js';\n/**\r\n * A fast character classifier that uses a compact array for ASCII values.\r\n */\n\nvar CharacterClassifier =\n/** @class */\nfunction () {\n  function CharacterClassifier(_defaultValue) {\n    var defaultValue = toUint8(_defaultValue);\n    this._defaultValue = defaultValue;\n    this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n    this._map = new Map();\n  }\n\n  CharacterClassifier._createAsciiMap = function (defaultValue) {\n    var asciiMap = new Uint8Array(256);\n\n    for (var i = 0; i < 256; i++) {\n      asciiMap[i] = defaultValue;\n    }\n\n    return asciiMap;\n  };\n\n  CharacterClassifier.prototype.set = function (charCode, _value) {\n    var value = toUint8(_value);\n\n    if (charCode >= 0 && charCode < 256) {\n      this._asciiMap[charCode] = value;\n    } else {\n      this._map.set(charCode, value);\n    }\n  };\n\n  CharacterClassifier.prototype.get = function (charCode) {\n    if (charCode >= 0 && charCode < 256) {\n      return this._asciiMap[charCode];\n    } else {\n      return this._map.get(charCode) || this._defaultValue;\n    }\n  };\n\n  return CharacterClassifier;\n}();\n\nexport { CharacterClassifier };\n\nvar CharacterSet =\n/** @class */\nfunction () {\n  function CharacterSet() {\n    this._actual = new CharacterClassifier(0\n    /* False */\n    );\n  }\n\n  CharacterSet.prototype.add = function (charCode) {\n    this._actual.set(charCode, 1\n    /* True */\n    );\n  };\n\n  CharacterSet.prototype.has = function (charCode) {\n    return this._actual.get(charCode) === 1\n    /* True */\n    ;\n  };\n\n  return CharacterSet;\n}();\n\nexport { CharacterSet };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js"],"names":["toUint8","CharacterClassifier","_defaultValue","defaultValue","_asciiMap","_createAsciiMap","_map","Map","asciiMap","Uint8Array","i","prototype","set","charCode","_value","value","get","CharacterSet","_actual","add","has"],"mappings":"AAAA;;;;AAIA,SAASA,OAAT,QAAwB,8BAAxB;AACA;;;;AAGA,IAAIC,mBAAmB;AAAG;AAAe,YAAY;AACjD,WAASA,mBAAT,CAA6BC,aAA7B,EAA4C;AACxC,QAAIC,YAAY,GAAGH,OAAO,CAACE,aAAD,CAA1B;AACA,SAAKA,aAAL,GAAqBC,YAArB;AACA,SAAKC,SAAL,GAAiBH,mBAAmB,CAACI,eAApB,CAAoCF,YAApC,CAAjB;AACA,SAAKG,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACH;;AACDN,EAAAA,mBAAmB,CAACI,eAApB,GAAsC,UAAUF,YAAV,EAAwB;AAC1D,QAAIK,QAAQ,GAAG,IAAIC,UAAJ,CAAe,GAAf,CAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BF,MAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcP,YAAd;AACH;;AACD,WAAOK,QAAP;AACH,GAND;;AAOAP,EAAAA,mBAAmB,CAACU,SAApB,CAA8BC,GAA9B,GAAoC,UAAUC,QAAV,EAAoBC,MAApB,EAA4B;AAC5D,QAAIC,KAAK,GAAGf,OAAO,CAACc,MAAD,CAAnB;;AACA,QAAID,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,GAAG,GAAhC,EAAqC;AACjC,WAAKT,SAAL,CAAeS,QAAf,IAA2BE,KAA3B;AACH,KAFD,MAGK;AACD,WAAKT,IAAL,CAAUM,GAAV,CAAcC,QAAd,EAAwBE,KAAxB;AACH;AACJ,GARD;;AASAd,EAAAA,mBAAmB,CAACU,SAApB,CAA8BK,GAA9B,GAAoC,UAAUH,QAAV,EAAoB;AACpD,QAAIA,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,GAAG,GAAhC,EAAqC;AACjC,aAAO,KAAKT,SAAL,CAAeS,QAAf,CAAP;AACH,KAFD,MAGK;AACD,aAAQ,KAAKP,IAAL,CAAUU,GAAV,CAAcH,QAAd,KAA2B,KAAKX,aAAxC;AACH;AACJ,GAPD;;AAQA,SAAOD,mBAAP;AACH,CAhCwC,EAAzC;;AAiCA,SAASA,mBAAT;;AACA,IAAIgB,YAAY;AAAG;AAAe,YAAY;AAC1C,WAASA,YAAT,GAAwB;AACpB,SAAKC,OAAL,GAAe,IAAIjB,mBAAJ,CAAwB;AAAE;AAA1B,KAAf;AACH;;AACDgB,EAAAA,YAAY,CAACN,SAAb,CAAuBQ,GAAvB,GAA6B,UAAUN,QAAV,EAAoB;AAC7C,SAAKK,OAAL,CAAaN,GAAb,CAAiBC,QAAjB,EAA2B;AAAE;AAA7B;AACH,GAFD;;AAGAI,EAAAA,YAAY,CAACN,SAAb,CAAuBS,GAAvB,GAA6B,UAAUP,QAAV,EAAoB;AAC7C,WAAQ,KAAKK,OAAL,CAAaF,GAAb,CAAiBH,QAAjB,MAA+B;AAAE;AAAzC;AACH,GAFD;;AAGA,SAAOI,YAAP;AACH,CAXiC,EAAlC;;AAYA,SAASA,YAAT","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { toUint8 } from '../../../base/common/uint.js';\r\n/**\r\n * A fast character classifier that uses a compact array for ASCII values.\r\n */\r\nvar CharacterClassifier = /** @class */ (function () {\r\n    function CharacterClassifier(_defaultValue) {\r\n        var defaultValue = toUint8(_defaultValue);\r\n        this._defaultValue = defaultValue;\r\n        this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\r\n        this._map = new Map();\r\n    }\r\n    CharacterClassifier._createAsciiMap = function (defaultValue) {\r\n        var asciiMap = new Uint8Array(256);\r\n        for (var i = 0; i < 256; i++) {\r\n            asciiMap[i] = defaultValue;\r\n        }\r\n        return asciiMap;\r\n    };\r\n    CharacterClassifier.prototype.set = function (charCode, _value) {\r\n        var value = toUint8(_value);\r\n        if (charCode >= 0 && charCode < 256) {\r\n            this._asciiMap[charCode] = value;\r\n        }\r\n        else {\r\n            this._map.set(charCode, value);\r\n        }\r\n    };\r\n    CharacterClassifier.prototype.get = function (charCode) {\r\n        if (charCode >= 0 && charCode < 256) {\r\n            return this._asciiMap[charCode];\r\n        }\r\n        else {\r\n            return (this._map.get(charCode) || this._defaultValue);\r\n        }\r\n    };\r\n    return CharacterClassifier;\r\n}());\r\nexport { CharacterClassifier };\r\nvar CharacterSet = /** @class */ (function () {\r\n    function CharacterSet() {\r\n        this._actual = new CharacterClassifier(0 /* False */);\r\n    }\r\n    CharacterSet.prototype.add = function (charCode) {\r\n        this._actual.set(charCode, 1 /* True */);\r\n    };\r\n    CharacterSet.prototype.has = function (charCode) {\r\n        return (this._actual.get(charCode) === 1 /* True */);\r\n    };\r\n    return CharacterSet;\r\n}());\r\nexport { CharacterSet };\r\n"]},"metadata":{},"sourceType":"module"}