{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n\n/**\r\n * Describes what to do with the indentation when pressing Enter.\r\n */\nexport var IndentAction;\n\n(function (IndentAction) {\n  /**\r\n   * Insert new line and copy the previous line's indentation.\r\n   */\n  IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n  /**\r\n   * Insert new line and indent once (relative to the previous line's indentation).\r\n   */\n\n  IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n  /**\r\n   * Insert two new lines:\r\n   *  - the first one indented which will hold the cursor\r\n   *  - the second one at the same indentation level\r\n   */\n\n  IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n  /**\r\n   * Insert new line and outdent once (relative to the previous line's indentation).\r\n   */\n\n  IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n})(IndentAction || (IndentAction = {}));\n/**\r\n * @internal\r\n */\n\n\nvar StandardAutoClosingPairConditional =\n/** @class */\nfunction () {\n  function StandardAutoClosingPairConditional(source) {\n    this.open = source.open;\n    this.close = source.close; // initially allowed in all tokens\n\n    this._standardTokenMask = 0;\n\n    if (Array.isArray(source.notIn)) {\n      for (var i = 0, len = source.notIn.length; i < len; i++) {\n        var notIn = source.notIn[i];\n\n        switch (notIn) {\n          case 'string':\n            this._standardTokenMask |= 2\n            /* String */\n            ;\n            break;\n\n          case 'comment':\n            this._standardTokenMask |= 1\n            /* Comment */\n            ;\n            break;\n\n          case 'regex':\n            this._standardTokenMask |= 4\n            /* RegEx */\n            ;\n            break;\n        }\n      }\n    }\n  }\n\n  StandardAutoClosingPairConditional.prototype.isOK = function (standardToken) {\n    return (this._standardTokenMask & standardToken) === 0;\n  };\n\n  return StandardAutoClosingPairConditional;\n}();\n\nexport { StandardAutoClosingPairConditional };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/modes/languageConfiguration.js"],"names":["IndentAction","StandardAutoClosingPairConditional","source","open","close","_standardTokenMask","Array","isArray","notIn","i","len","length","prototype","isOK","standardToken"],"mappings":"AAAA;;;;;AAIA;;;AAGA,OAAO,IAAIA,YAAJ;;AACP,CAAC,UAAUA,YAAV,EAAwB;AACrB;;;AAGAA,EAAAA,YAAY,CAACA,YAAY,CAAC,MAAD,CAAZ,GAAuB,CAAxB,CAAZ,GAAyC,MAAzC;AACA;;;;AAGAA,EAAAA,YAAY,CAACA,YAAY,CAAC,QAAD,CAAZ,GAAyB,CAA1B,CAAZ,GAA2C,QAA3C;AACA;;;;;;AAKAA,EAAAA,YAAY,CAACA,YAAY,CAAC,eAAD,CAAZ,GAAgC,CAAjC,CAAZ,GAAkD,eAAlD;AACA;;;;AAGAA,EAAAA,YAAY,CAACA,YAAY,CAAC,SAAD,CAAZ,GAA0B,CAA3B,CAAZ,GAA4C,SAA5C;AACH,CAnBD,EAmBGA,YAAY,KAAKA,YAAY,GAAG,EAApB,CAnBf;AAoBA;;;;;AAGA,IAAIC,kCAAkC;AAAG;AAAe,YAAY;AAChE,WAASA,kCAAT,CAA4CC,MAA5C,EAAoD;AAChD,SAAKC,IAAL,GAAYD,MAAM,CAACC,IAAnB;AACA,SAAKC,KAAL,GAAaF,MAAM,CAACE,KAApB,CAFgD,CAGhD;;AACA,SAAKC,kBAAL,GAA0B,CAA1B;;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcL,MAAM,CAACM,KAArB,CAAJ,EAAiC;AAC7B,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGR,MAAM,CAACM,KAAP,CAAaG,MAAnC,EAA2CF,CAAC,GAAGC,GAA/C,EAAoDD,CAAC,EAArD,EAAyD;AACrD,YAAID,KAAK,GAAGN,MAAM,CAACM,KAAP,CAAaC,CAAb,CAAZ;;AACA,gBAAQD,KAAR;AACI,eAAK,QAAL;AACI,iBAAKH,kBAAL,IAA2B;AAAE;AAA7B;AACA;;AACJ,eAAK,SAAL;AACI,iBAAKA,kBAAL,IAA2B;AAAE;AAA7B;AACA;;AACJ,eAAK,OAAL;AACI,iBAAKA,kBAAL,IAA2B;AAAE;AAA7B;AACA;AATR;AAWH;AACJ;AACJ;;AACDJ,EAAAA,kCAAkC,CAACW,SAAnC,CAA6CC,IAA7C,GAAoD,UAAUC,aAAV,EAAyB;AACzE,WAAO,CAAC,KAAKT,kBAAL,GAA0BS,aAA3B,MAA8C,CAArD;AACH,GAFD;;AAGA,SAAOb,kCAAP;AACH,CA3BuD,EAAxD;;AA4BA,SAASA,kCAAT","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * Describes what to do with the indentation when pressing Enter.\r\n */\r\nexport var IndentAction;\r\n(function (IndentAction) {\r\n    /**\r\n     * Insert new line and copy the previous line's indentation.\r\n     */\r\n    IndentAction[IndentAction[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Insert new line and indent once (relative to the previous line's indentation).\r\n     */\r\n    IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\r\n    /**\r\n     * Insert two new lines:\r\n     *  - the first one indented which will hold the cursor\r\n     *  - the second one at the same indentation level\r\n     */\r\n    IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\r\n    /**\r\n     * Insert new line and outdent once (relative to the previous line's indentation).\r\n     */\r\n    IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\r\n})(IndentAction || (IndentAction = {}));\r\n/**\r\n * @internal\r\n */\r\nvar StandardAutoClosingPairConditional = /** @class */ (function () {\r\n    function StandardAutoClosingPairConditional(source) {\r\n        this.open = source.open;\r\n        this.close = source.close;\r\n        // initially allowed in all tokens\r\n        this._standardTokenMask = 0;\r\n        if (Array.isArray(source.notIn)) {\r\n            for (var i = 0, len = source.notIn.length; i < len; i++) {\r\n                var notIn = source.notIn[i];\r\n                switch (notIn) {\r\n                    case 'string':\r\n                        this._standardTokenMask |= 2 /* String */;\r\n                        break;\r\n                    case 'comment':\r\n                        this._standardTokenMask |= 1 /* Comment */;\r\n                        break;\r\n                    case 'regex':\r\n                        this._standardTokenMask |= 4 /* RegEx */;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    StandardAutoClosingPairConditional.prototype.isOK = function (standardToken) {\r\n        return (this._standardTokenMask & standardToken) === 0;\r\n    };\r\n    return StandardAutoClosingPairConditional;\r\n}());\r\nexport { StandardAutoClosingPairConditional };\r\n"]},"metadata":{},"sourceType":"module"}