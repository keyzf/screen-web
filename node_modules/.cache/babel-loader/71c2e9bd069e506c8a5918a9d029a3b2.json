{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport * as path from '../../../base/common/path.js';\nimport { dirname } from '../../../base/common/resources.js';\nimport { Text } from './snippetParser.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nimport { getLeadingWhitespace, commonPrefixLength, isFalsyOrWhitespace, pad, endsWith } from '../../../base/common/strings.js';\nimport { isSingleFolderWorkspaceIdentifier, toWorkspaceIdentifier, WORKSPACE_EXTENSION } from '../../../platform/workspaces/common/workspaces.js';\nimport { normalizeDriveLetter } from '../../../base/common/labels.js';\n\nvar CompositeSnippetVariableResolver =\n/** @class */\nfunction () {\n  function CompositeSnippetVariableResolver(_delegates) {\n    this._delegates = _delegates; //\n  }\n\n  CompositeSnippetVariableResolver.prototype.resolve = function (variable) {\n    for (var _i = 0, _a = this._delegates; _i < _a.length; _i++) {\n      var delegate = _a[_i];\n      var value = delegate.resolve(variable);\n\n      if (value !== undefined) {\n        return value;\n      }\n    }\n\n    return undefined;\n  };\n\n  return CompositeSnippetVariableResolver;\n}();\n\nexport { CompositeSnippetVariableResolver };\n\nvar SelectionBasedVariableResolver =\n/** @class */\nfunction () {\n  function SelectionBasedVariableResolver(_model, _selection) {\n    this._model = _model;\n    this._selection = _selection; //\n  }\n\n  SelectionBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n\n    if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\n      var value = this._model.getValueInRange(this._selection) || undefined;\n\n      if (value && this._selection.startLineNumber !== this._selection.endLineNumber && variable.snippet) {\n        // Selection is a multiline string which we indentation we now\n        // need to adjust. We compare the indentation of this variable\n        // with the indentation at the editor position and add potential\n        // extra indentation to the value\n        var line = this._model.getLineContent(this._selection.startLineNumber);\n\n        var lineLeadingWhitespace = getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\n        var varLeadingWhitespace_1 = lineLeadingWhitespace;\n        variable.snippet.walk(function (marker) {\n          if (marker === variable) {\n            return false;\n          }\n\n          if (marker instanceof Text) {\n            varLeadingWhitespace_1 = getLeadingWhitespace(marker.value.split(/\\r\\n|\\r|\\n/).pop());\n          }\n\n          return true;\n        });\n        var whitespaceCommonLength_1 = commonPrefixLength(varLeadingWhitespace_1, lineLeadingWhitespace);\n        value = value.replace(/(\\r\\n|\\r|\\n)(.*)/g, function (m, newline, rest) {\n          return \"\" + newline + varLeadingWhitespace_1.substr(whitespaceCommonLength_1) + rest;\n        });\n      }\n\n      return value;\n    } else if (name === 'TM_CURRENT_LINE') {\n      return this._model.getLineContent(this._selection.positionLineNumber);\n    } else if (name === 'TM_CURRENT_WORD') {\n      var info = this._model.getWordAtPosition({\n        lineNumber: this._selection.positionLineNumber,\n        column: this._selection.positionColumn\n      });\n\n      return info && info.word || undefined;\n    } else if (name === 'TM_LINE_INDEX') {\n      return String(this._selection.positionLineNumber - 1);\n    } else if (name === 'TM_LINE_NUMBER') {\n      return String(this._selection.positionLineNumber);\n    }\n\n    return undefined;\n  };\n\n  return SelectionBasedVariableResolver;\n}();\n\nexport { SelectionBasedVariableResolver };\n\nvar ModelBasedVariableResolver =\n/** @class */\nfunction () {\n  function ModelBasedVariableResolver(_labelService, _model) {\n    this._labelService = _labelService;\n    this._model = _model; //\n  }\n\n  ModelBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n\n    if (name === 'TM_FILENAME') {\n      return path.basename(this._model.uri.fsPath);\n    } else if (name === 'TM_FILENAME_BASE') {\n      var name_1 = path.basename(this._model.uri.fsPath);\n      var idx = name_1.lastIndexOf('.');\n\n      if (idx <= 0) {\n        return name_1;\n      } else {\n        return name_1.slice(0, idx);\n      }\n    } else if (name === 'TM_DIRECTORY' && this._labelService) {\n      if (path.dirname(this._model.uri.fsPath) === '.') {\n        return '';\n      }\n\n      return this._labelService.getUriLabel(dirname(this._model.uri));\n    } else if (name === 'TM_FILEPATH' && this._labelService) {\n      return this._labelService.getUriLabel(this._model.uri);\n    }\n\n    return undefined;\n  };\n\n  return ModelBasedVariableResolver;\n}();\n\nexport { ModelBasedVariableResolver };\n\nvar ClipboardBasedVariableResolver =\n/** @class */\nfunction () {\n  function ClipboardBasedVariableResolver(_readClipboardText, _selectionIdx, _selectionCount, _spread) {\n    this._readClipboardText = _readClipboardText;\n    this._selectionIdx = _selectionIdx;\n    this._selectionCount = _selectionCount;\n    this._spread = _spread; //\n  }\n\n  ClipboardBasedVariableResolver.prototype.resolve = function (variable) {\n    if (variable.name !== 'CLIPBOARD') {\n      return undefined;\n    }\n\n    var clipboardText = this._readClipboardText();\n\n    if (!clipboardText) {\n      return undefined;\n    } // `spread` is assigning each cursor a line of the clipboard\n    // text whenever there the line count equals the cursor count\n    // and when enabled\n\n\n    if (this._spread) {\n      var lines = clipboardText.split(/\\r\\n|\\n|\\r/).filter(function (s) {\n        return !isFalsyOrWhitespace(s);\n      });\n\n      if (lines.length === this._selectionCount) {\n        return lines[this._selectionIdx];\n      }\n    }\n\n    return clipboardText;\n  };\n\n  return ClipboardBasedVariableResolver;\n}();\n\nexport { ClipboardBasedVariableResolver };\n\nvar CommentBasedVariableResolver =\n/** @class */\nfunction () {\n  function CommentBasedVariableResolver(_model) {\n    this._model = _model; //\n  }\n\n  CommentBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n\n    var language = this._model.getLanguageIdentifier();\n\n    var config = LanguageConfigurationRegistry.getComments(language.id);\n\n    if (!config) {\n      return undefined;\n    }\n\n    if (name === 'LINE_COMMENT') {\n      return config.lineCommentToken || undefined;\n    } else if (name === 'BLOCK_COMMENT_START') {\n      return config.blockCommentStartToken || undefined;\n    } else if (name === 'BLOCK_COMMENT_END') {\n      return config.blockCommentEndToken || undefined;\n    }\n\n    return undefined;\n  };\n\n  return CommentBasedVariableResolver;\n}();\n\nexport { CommentBasedVariableResolver };\n\nvar TimeBasedVariableResolver =\n/** @class */\nfunction () {\n  function TimeBasedVariableResolver() {}\n\n  TimeBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n\n    if (name === 'CURRENT_YEAR') {\n      return String(new Date().getFullYear());\n    } else if (name === 'CURRENT_YEAR_SHORT') {\n      return String(new Date().getFullYear()).slice(-2);\n    } else if (name === 'CURRENT_MONTH') {\n      return pad(new Date().getMonth().valueOf() + 1, 2);\n    } else if (name === 'CURRENT_DATE') {\n      return pad(new Date().getDate().valueOf(), 2);\n    } else if (name === 'CURRENT_HOUR') {\n      return pad(new Date().getHours().valueOf(), 2);\n    } else if (name === 'CURRENT_MINUTE') {\n      return pad(new Date().getMinutes().valueOf(), 2);\n    } else if (name === 'CURRENT_SECOND') {\n      return pad(new Date().getSeconds().valueOf(), 2);\n    } else if (name === 'CURRENT_DAY_NAME') {\n      return TimeBasedVariableResolver.dayNames[new Date().getDay()];\n    } else if (name === 'CURRENT_DAY_NAME_SHORT') {\n      return TimeBasedVariableResolver.dayNamesShort[new Date().getDay()];\n    } else if (name === 'CURRENT_MONTH_NAME') {\n      return TimeBasedVariableResolver.monthNames[new Date().getMonth()];\n    } else if (name === 'CURRENT_MONTH_NAME_SHORT') {\n      return TimeBasedVariableResolver.monthNamesShort[new Date().getMonth()];\n    } else if (name === 'CURRENT_SECONDS_UNIX') {\n      return String(Math.floor(Date.now() / 1000));\n    }\n\n    return undefined;\n  };\n\n  TimeBasedVariableResolver.dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\n  TimeBasedVariableResolver.dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\n  TimeBasedVariableResolver.monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\n  TimeBasedVariableResolver.monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\n  return TimeBasedVariableResolver;\n}();\n\nexport { TimeBasedVariableResolver };\n\nvar WorkspaceBasedVariableResolver =\n/** @class */\nfunction () {\n  function WorkspaceBasedVariableResolver(_workspaceService) {\n    this._workspaceService = _workspaceService; //\n  }\n\n  WorkspaceBasedVariableResolver.prototype.resolve = function (variable) {\n    if (!this._workspaceService) {\n      return undefined;\n    }\n\n    var workspaceIdentifier = toWorkspaceIdentifier(this._workspaceService.getWorkspace());\n\n    if (!workspaceIdentifier) {\n      return undefined;\n    }\n\n    if (variable.name === 'WORKSPACE_NAME') {\n      return this._resolveWorkspaceName(workspaceIdentifier);\n    } else if (variable.name === 'WORKSPACE_FOLDER') {\n      return this._resoveWorkspacePath(workspaceIdentifier);\n    }\n\n    return undefined;\n  };\n\n  WorkspaceBasedVariableResolver.prototype._resolveWorkspaceName = function (workspaceIdentifier) {\n    if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n      return path.basename(workspaceIdentifier.path);\n    }\n\n    var filename = path.basename(workspaceIdentifier.configPath.path);\n\n    if (endsWith(filename, WORKSPACE_EXTENSION)) {\n      filename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n    }\n\n    return filename;\n  };\n\n  WorkspaceBasedVariableResolver.prototype._resoveWorkspacePath = function (workspaceIdentifier) {\n    if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n      return normalizeDriveLetter(workspaceIdentifier.fsPath);\n    }\n\n    var filename = path.basename(workspaceIdentifier.configPath.path);\n    var folderpath = workspaceIdentifier.configPath.fsPath;\n\n    if (endsWith(folderpath, filename)) {\n      folderpath = folderpath.substr(0, folderpath.length - filename.length - 1);\n    }\n\n    return folderpath ? normalizeDriveLetter(folderpath) : '/';\n  };\n\n  return WorkspaceBasedVariableResolver;\n}();\n\nexport { WorkspaceBasedVariableResolver };\n\nvar RandomBasedVariableResolver =\n/** @class */\nfunction () {\n  function RandomBasedVariableResolver() {}\n\n  RandomBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n\n    if (name === 'RANDOM') {\n      return Math.random().toString().slice(-6);\n    } else if (name === 'RANDOM_HEX') {\n      return Math.random().toString(16).slice(-6);\n    }\n\n    return undefined;\n  };\n\n  return RandomBasedVariableResolver;\n}();\n\nexport { RandomBasedVariableResolver };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetVariables.js"],"names":["nls","path","dirname","Text","LanguageConfigurationRegistry","getLeadingWhitespace","commonPrefixLength","isFalsyOrWhitespace","pad","endsWith","isSingleFolderWorkspaceIdentifier","toWorkspaceIdentifier","WORKSPACE_EXTENSION","normalizeDriveLetter","CompositeSnippetVariableResolver","_delegates","prototype","resolve","variable","_i","_a","length","delegate","value","undefined","SelectionBasedVariableResolver","_model","_selection","name","getValueInRange","startLineNumber","endLineNumber","snippet","line","getLineContent","lineLeadingWhitespace","startColumn","varLeadingWhitespace_1","walk","marker","split","pop","whitespaceCommonLength_1","replace","m","newline","rest","substr","positionLineNumber","info","getWordAtPosition","lineNumber","column","positionColumn","word","String","ModelBasedVariableResolver","_labelService","basename","uri","fsPath","name_1","idx","lastIndexOf","slice","getUriLabel","ClipboardBasedVariableResolver","_readClipboardText","_selectionIdx","_selectionCount","_spread","clipboardText","lines","filter","s","CommentBasedVariableResolver","language","getLanguageIdentifier","config","getComments","id","lineCommentToken","blockCommentStartToken","blockCommentEndToken","TimeBasedVariableResolver","Date","getFullYear","getMonth","valueOf","getDate","getHours","getMinutes","getSeconds","dayNames","getDay","dayNamesShort","monthNames","monthNamesShort","Math","floor","now","localize","WorkspaceBasedVariableResolver","_workspaceService","workspaceIdentifier","getWorkspace","_resolveWorkspaceName","_resoveWorkspacePath","filename","configPath","folderpath","RandomBasedVariableResolver","random","toString"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport * as path from '../../../base/common/path.js';\r\nimport { dirname } from '../../../base/common/resources.js';\r\nimport { Text } from './snippetParser.js';\r\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\r\nimport { getLeadingWhitespace, commonPrefixLength, isFalsyOrWhitespace, pad, endsWith } from '../../../base/common/strings.js';\r\nimport { isSingleFolderWorkspaceIdentifier, toWorkspaceIdentifier, WORKSPACE_EXTENSION } from '../../../platform/workspaces/common/workspaces.js';\r\nimport { normalizeDriveLetter } from '../../../base/common/labels.js';\r\nvar CompositeSnippetVariableResolver = /** @class */ (function () {\r\n    function CompositeSnippetVariableResolver(_delegates) {\r\n        this._delegates = _delegates;\r\n        //\r\n    }\r\n    CompositeSnippetVariableResolver.prototype.resolve = function (variable) {\r\n        for (var _i = 0, _a = this._delegates; _i < _a.length; _i++) {\r\n            var delegate = _a[_i];\r\n            var value = delegate.resolve(variable);\r\n            if (value !== undefined) {\r\n                return value;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    return CompositeSnippetVariableResolver;\r\n}());\r\nexport { CompositeSnippetVariableResolver };\r\nvar SelectionBasedVariableResolver = /** @class */ (function () {\r\n    function SelectionBasedVariableResolver(_model, _selection) {\r\n        this._model = _model;\r\n        this._selection = _selection;\r\n        //\r\n    }\r\n    SelectionBasedVariableResolver.prototype.resolve = function (variable) {\r\n        var name = variable.name;\r\n        if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\r\n            var value = this._model.getValueInRange(this._selection) || undefined;\r\n            if (value && this._selection.startLineNumber !== this._selection.endLineNumber && variable.snippet) {\r\n                // Selection is a multiline string which we indentation we now\r\n                // need to adjust. We compare the indentation of this variable\r\n                // with the indentation at the editor position and add potential\r\n                // extra indentation to the value\r\n                var line = this._model.getLineContent(this._selection.startLineNumber);\r\n                var lineLeadingWhitespace = getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\r\n                var varLeadingWhitespace_1 = lineLeadingWhitespace;\r\n                variable.snippet.walk(function (marker) {\r\n                    if (marker === variable) {\r\n                        return false;\r\n                    }\r\n                    if (marker instanceof Text) {\r\n                        varLeadingWhitespace_1 = getLeadingWhitespace(marker.value.split(/\\r\\n|\\r|\\n/).pop());\r\n                    }\r\n                    return true;\r\n                });\r\n                var whitespaceCommonLength_1 = commonPrefixLength(varLeadingWhitespace_1, lineLeadingWhitespace);\r\n                value = value.replace(/(\\r\\n|\\r|\\n)(.*)/g, function (m, newline, rest) { return \"\" + newline + varLeadingWhitespace_1.substr(whitespaceCommonLength_1) + rest; });\r\n            }\r\n            return value;\r\n        }\r\n        else if (name === 'TM_CURRENT_LINE') {\r\n            return this._model.getLineContent(this._selection.positionLineNumber);\r\n        }\r\n        else if (name === 'TM_CURRENT_WORD') {\r\n            var info = this._model.getWordAtPosition({\r\n                lineNumber: this._selection.positionLineNumber,\r\n                column: this._selection.positionColumn\r\n            });\r\n            return info && info.word || undefined;\r\n        }\r\n        else if (name === 'TM_LINE_INDEX') {\r\n            return String(this._selection.positionLineNumber - 1);\r\n        }\r\n        else if (name === 'TM_LINE_NUMBER') {\r\n            return String(this._selection.positionLineNumber);\r\n        }\r\n        return undefined;\r\n    };\r\n    return SelectionBasedVariableResolver;\r\n}());\r\nexport { SelectionBasedVariableResolver };\r\nvar ModelBasedVariableResolver = /** @class */ (function () {\r\n    function ModelBasedVariableResolver(_labelService, _model) {\r\n        this._labelService = _labelService;\r\n        this._model = _model;\r\n        //\r\n    }\r\n    ModelBasedVariableResolver.prototype.resolve = function (variable) {\r\n        var name = variable.name;\r\n        if (name === 'TM_FILENAME') {\r\n            return path.basename(this._model.uri.fsPath);\r\n        }\r\n        else if (name === 'TM_FILENAME_BASE') {\r\n            var name_1 = path.basename(this._model.uri.fsPath);\r\n            var idx = name_1.lastIndexOf('.');\r\n            if (idx <= 0) {\r\n                return name_1;\r\n            }\r\n            else {\r\n                return name_1.slice(0, idx);\r\n            }\r\n        }\r\n        else if (name === 'TM_DIRECTORY' && this._labelService) {\r\n            if (path.dirname(this._model.uri.fsPath) === '.') {\r\n                return '';\r\n            }\r\n            return this._labelService.getUriLabel(dirname(this._model.uri));\r\n        }\r\n        else if (name === 'TM_FILEPATH' && this._labelService) {\r\n            return this._labelService.getUriLabel(this._model.uri);\r\n        }\r\n        return undefined;\r\n    };\r\n    return ModelBasedVariableResolver;\r\n}());\r\nexport { ModelBasedVariableResolver };\r\nvar ClipboardBasedVariableResolver = /** @class */ (function () {\r\n    function ClipboardBasedVariableResolver(_readClipboardText, _selectionIdx, _selectionCount, _spread) {\r\n        this._readClipboardText = _readClipboardText;\r\n        this._selectionIdx = _selectionIdx;\r\n        this._selectionCount = _selectionCount;\r\n        this._spread = _spread;\r\n        //\r\n    }\r\n    ClipboardBasedVariableResolver.prototype.resolve = function (variable) {\r\n        if (variable.name !== 'CLIPBOARD') {\r\n            return undefined;\r\n        }\r\n        var clipboardText = this._readClipboardText();\r\n        if (!clipboardText) {\r\n            return undefined;\r\n        }\r\n        // `spread` is assigning each cursor a line of the clipboard\r\n        // text whenever there the line count equals the cursor count\r\n        // and when enabled\r\n        if (this._spread) {\r\n            var lines = clipboardText.split(/\\r\\n|\\n|\\r/).filter(function (s) { return !isFalsyOrWhitespace(s); });\r\n            if (lines.length === this._selectionCount) {\r\n                return lines[this._selectionIdx];\r\n            }\r\n        }\r\n        return clipboardText;\r\n    };\r\n    return ClipboardBasedVariableResolver;\r\n}());\r\nexport { ClipboardBasedVariableResolver };\r\nvar CommentBasedVariableResolver = /** @class */ (function () {\r\n    function CommentBasedVariableResolver(_model) {\r\n        this._model = _model;\r\n        //\r\n    }\r\n    CommentBasedVariableResolver.prototype.resolve = function (variable) {\r\n        var name = variable.name;\r\n        var language = this._model.getLanguageIdentifier();\r\n        var config = LanguageConfigurationRegistry.getComments(language.id);\r\n        if (!config) {\r\n            return undefined;\r\n        }\r\n        if (name === 'LINE_COMMENT') {\r\n            return config.lineCommentToken || undefined;\r\n        }\r\n        else if (name === 'BLOCK_COMMENT_START') {\r\n            return config.blockCommentStartToken || undefined;\r\n        }\r\n        else if (name === 'BLOCK_COMMENT_END') {\r\n            return config.blockCommentEndToken || undefined;\r\n        }\r\n        return undefined;\r\n    };\r\n    return CommentBasedVariableResolver;\r\n}());\r\nexport { CommentBasedVariableResolver };\r\nvar TimeBasedVariableResolver = /** @class */ (function () {\r\n    function TimeBasedVariableResolver() {\r\n    }\r\n    TimeBasedVariableResolver.prototype.resolve = function (variable) {\r\n        var name = variable.name;\r\n        if (name === 'CURRENT_YEAR') {\r\n            return String(new Date().getFullYear());\r\n        }\r\n        else if (name === 'CURRENT_YEAR_SHORT') {\r\n            return String(new Date().getFullYear()).slice(-2);\r\n        }\r\n        else if (name === 'CURRENT_MONTH') {\r\n            return pad((new Date().getMonth().valueOf() + 1), 2);\r\n        }\r\n        else if (name === 'CURRENT_DATE') {\r\n            return pad(new Date().getDate().valueOf(), 2);\r\n        }\r\n        else if (name === 'CURRENT_HOUR') {\r\n            return pad(new Date().getHours().valueOf(), 2);\r\n        }\r\n        else if (name === 'CURRENT_MINUTE') {\r\n            return pad(new Date().getMinutes().valueOf(), 2);\r\n        }\r\n        else if (name === 'CURRENT_SECOND') {\r\n            return pad(new Date().getSeconds().valueOf(), 2);\r\n        }\r\n        else if (name === 'CURRENT_DAY_NAME') {\r\n            return TimeBasedVariableResolver.dayNames[new Date().getDay()];\r\n        }\r\n        else if (name === 'CURRENT_DAY_NAME_SHORT') {\r\n            return TimeBasedVariableResolver.dayNamesShort[new Date().getDay()];\r\n        }\r\n        else if (name === 'CURRENT_MONTH_NAME') {\r\n            return TimeBasedVariableResolver.monthNames[new Date().getMonth()];\r\n        }\r\n        else if (name === 'CURRENT_MONTH_NAME_SHORT') {\r\n            return TimeBasedVariableResolver.monthNamesShort[new Date().getMonth()];\r\n        }\r\n        else if (name === 'CURRENT_SECONDS_UNIX') {\r\n            return String(Math.floor(Date.now() / 1000));\r\n        }\r\n        return undefined;\r\n    };\r\n    TimeBasedVariableResolver.dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\r\n    TimeBasedVariableResolver.dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\r\n    TimeBasedVariableResolver.monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\r\n    TimeBasedVariableResolver.monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\r\n    return TimeBasedVariableResolver;\r\n}());\r\nexport { TimeBasedVariableResolver };\r\nvar WorkspaceBasedVariableResolver = /** @class */ (function () {\r\n    function WorkspaceBasedVariableResolver(_workspaceService) {\r\n        this._workspaceService = _workspaceService;\r\n        //\r\n    }\r\n    WorkspaceBasedVariableResolver.prototype.resolve = function (variable) {\r\n        if (!this._workspaceService) {\r\n            return undefined;\r\n        }\r\n        var workspaceIdentifier = toWorkspaceIdentifier(this._workspaceService.getWorkspace());\r\n        if (!workspaceIdentifier) {\r\n            return undefined;\r\n        }\r\n        if (variable.name === 'WORKSPACE_NAME') {\r\n            return this._resolveWorkspaceName(workspaceIdentifier);\r\n        }\r\n        else if (variable.name === 'WORKSPACE_FOLDER') {\r\n            return this._resoveWorkspacePath(workspaceIdentifier);\r\n        }\r\n        return undefined;\r\n    };\r\n    WorkspaceBasedVariableResolver.prototype._resolveWorkspaceName = function (workspaceIdentifier) {\r\n        if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\r\n            return path.basename(workspaceIdentifier.path);\r\n        }\r\n        var filename = path.basename(workspaceIdentifier.configPath.path);\r\n        if (endsWith(filename, WORKSPACE_EXTENSION)) {\r\n            filename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\r\n        }\r\n        return filename;\r\n    };\r\n    WorkspaceBasedVariableResolver.prototype._resoveWorkspacePath = function (workspaceIdentifier) {\r\n        if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\r\n            return normalizeDriveLetter(workspaceIdentifier.fsPath);\r\n        }\r\n        var filename = path.basename(workspaceIdentifier.configPath.path);\r\n        var folderpath = workspaceIdentifier.configPath.fsPath;\r\n        if (endsWith(folderpath, filename)) {\r\n            folderpath = folderpath.substr(0, folderpath.length - filename.length - 1);\r\n        }\r\n        return (folderpath ? normalizeDriveLetter(folderpath) : '/');\r\n    };\r\n    return WorkspaceBasedVariableResolver;\r\n}());\r\nexport { WorkspaceBasedVariableResolver };\r\nvar RandomBasedVariableResolver = /** @class */ (function () {\r\n    function RandomBasedVariableResolver() {\r\n    }\r\n    RandomBasedVariableResolver.prototype.resolve = function (variable) {\r\n        var name = variable.name;\r\n        if (name === 'RANDOM') {\r\n            return Math.random().toString().slice(-6);\r\n        }\r\n        else if (name === 'RANDOM_HEX') {\r\n            return Math.random().toString(16).slice(-6);\r\n        }\r\n        return undefined;\r\n    };\r\n    return RandomBasedVariableResolver;\r\n}());\r\nexport { RandomBasedVariableResolver };\r\n"]},"metadata":{},"sourceType":"module"}