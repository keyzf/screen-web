{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\n\nvar RenderedLinesCollection =\n/** @class */\nfunction () {\n  function RenderedLinesCollection(createLine) {\n    this._createLine = createLine;\n\n    this._set(1, []);\n  }\n\n  RenderedLinesCollection.prototype.flush = function () {\n    this._set(1, []);\n  };\n\n  RenderedLinesCollection.prototype._set = function (rendLineNumberStart, lines) {\n    this._lines = lines;\n    this._rendLineNumberStart = rendLineNumberStart;\n  };\n\n  RenderedLinesCollection.prototype._get = function () {\n    return {\n      rendLineNumberStart: this._rendLineNumberStart,\n      lines: this._lines\n    };\n  };\n  /**\r\n   * @returns Inclusive line number that is inside this collection\r\n   */\n\n\n  RenderedLinesCollection.prototype.getStartLineNumber = function () {\n    return this._rendLineNumberStart;\n  };\n  /**\r\n   * @returns Inclusive line number that is inside this collection\r\n   */\n\n\n  RenderedLinesCollection.prototype.getEndLineNumber = function () {\n    return this._rendLineNumberStart + this._lines.length - 1;\n  };\n\n  RenderedLinesCollection.prototype.getCount = function () {\n    return this._lines.length;\n  };\n\n  RenderedLinesCollection.prototype.getLine = function (lineNumber) {\n    var lineIndex = lineNumber - this._rendLineNumberStart;\n\n    if (lineIndex < 0 || lineIndex >= this._lines.length) {\n      throw new Error('Illegal value for lineNumber');\n    }\n\n    return this._lines[lineIndex];\n  };\n  /**\r\n   * @returns Lines that were removed from this collection\r\n   */\n\n\n  RenderedLinesCollection.prototype.onLinesDeleted = function (deleteFromLineNumber, deleteToLineNumber) {\n    if (this.getCount() === 0) {\n      // no lines\n      return null;\n    }\n\n    var startLineNumber = this.getStartLineNumber();\n    var endLineNumber = this.getEndLineNumber();\n\n    if (deleteToLineNumber < startLineNumber) {\n      // deleting above the viewport\n      var deleteCnt = deleteToLineNumber - deleteFromLineNumber + 1;\n      this._rendLineNumberStart -= deleteCnt;\n      return null;\n    }\n\n    if (deleteFromLineNumber > endLineNumber) {\n      // deleted below the viewport\n      return null;\n    } // Record what needs to be deleted\n\n\n    var deleteStartIndex = 0;\n    var deleteCount = 0;\n\n    for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      var lineIndex = lineNumber - this._rendLineNumberStart;\n\n      if (deleteFromLineNumber <= lineNumber && lineNumber <= deleteToLineNumber) {\n        // this is a line to be deleted\n        if (deleteCount === 0) {\n          // this is the first line to be deleted\n          deleteStartIndex = lineIndex;\n          deleteCount = 1;\n        } else {\n          deleteCount++;\n        }\n      }\n    } // Adjust this._rendLineNumberStart for lines deleted above\n\n\n    if (deleteFromLineNumber < startLineNumber) {\n      // Something was deleted above\n      var deleteAboveCount = 0;\n\n      if (deleteToLineNumber < startLineNumber) {\n        // the entire deleted lines are above\n        deleteAboveCount = deleteToLineNumber - deleteFromLineNumber + 1;\n      } else {\n        deleteAboveCount = startLineNumber - deleteFromLineNumber;\n      }\n\n      this._rendLineNumberStart -= deleteAboveCount;\n    }\n\n    var deleted = this._lines.splice(deleteStartIndex, deleteCount);\n\n    return deleted;\n  };\n\n  RenderedLinesCollection.prototype.onLinesChanged = function (changeFromLineNumber, changeToLineNumber) {\n    if (this.getCount() === 0) {\n      // no lines\n      return false;\n    }\n\n    var startLineNumber = this.getStartLineNumber();\n    var endLineNumber = this.getEndLineNumber();\n    var someoneNotified = false;\n\n    for (var changedLineNumber = changeFromLineNumber; changedLineNumber <= changeToLineNumber; changedLineNumber++) {\n      if (changedLineNumber >= startLineNumber && changedLineNumber <= endLineNumber) {\n        // Notify the line\n        this._lines[changedLineNumber - this._rendLineNumberStart].onContentChanged();\n\n        someoneNotified = true;\n      }\n    }\n\n    return someoneNotified;\n  };\n\n  RenderedLinesCollection.prototype.onLinesInserted = function (insertFromLineNumber, insertToLineNumber) {\n    if (this.getCount() === 0) {\n      // no lines\n      return null;\n    }\n\n    var insertCnt = insertToLineNumber - insertFromLineNumber + 1;\n    var startLineNumber = this.getStartLineNumber();\n    var endLineNumber = this.getEndLineNumber();\n\n    if (insertFromLineNumber <= startLineNumber) {\n      // inserting above the viewport\n      this._rendLineNumberStart += insertCnt;\n      return null;\n    }\n\n    if (insertFromLineNumber > endLineNumber) {\n      // inserting below the viewport\n      return null;\n    }\n\n    if (insertCnt + insertFromLineNumber > endLineNumber) {\n      // insert inside the viewport in such a way that all remaining lines are pushed outside\n      var deleted = this._lines.splice(insertFromLineNumber - this._rendLineNumberStart, endLineNumber - insertFromLineNumber + 1);\n\n      return deleted;\n    } // insert inside the viewport, push out some lines, but not all remaining lines\n\n\n    var newLines = [];\n\n    for (var i = 0; i < insertCnt; i++) {\n      newLines[i] = this._createLine();\n    }\n\n    var insertIndex = insertFromLineNumber - this._rendLineNumberStart;\n\n    var beforeLines = this._lines.slice(0, insertIndex);\n\n    var afterLines = this._lines.slice(insertIndex, this._lines.length - insertCnt);\n\n    var deletedLines = this._lines.slice(this._lines.length - insertCnt, this._lines.length);\n\n    this._lines = beforeLines.concat(newLines).concat(afterLines);\n    return deletedLines;\n  };\n\n  RenderedLinesCollection.prototype.onTokensChanged = function (ranges) {\n    if (this.getCount() === 0) {\n      // no lines\n      return false;\n    }\n\n    var startLineNumber = this.getStartLineNumber();\n    var endLineNumber = this.getEndLineNumber();\n    var notifiedSomeone = false;\n\n    for (var i = 0, len = ranges.length; i < len; i++) {\n      var rng = ranges[i];\n\n      if (rng.toLineNumber < startLineNumber || rng.fromLineNumber > endLineNumber) {\n        // range outside viewport\n        continue;\n      }\n\n      var from = Math.max(startLineNumber, rng.fromLineNumber);\n      var to = Math.min(endLineNumber, rng.toLineNumber);\n\n      for (var lineNumber = from; lineNumber <= to; lineNumber++) {\n        var lineIndex = lineNumber - this._rendLineNumberStart;\n\n        this._lines[lineIndex].onTokensChanged();\n\n        notifiedSomeone = true;\n      }\n    }\n\n    return notifiedSomeone;\n  };\n\n  return RenderedLinesCollection;\n}();\n\nexport { RenderedLinesCollection };\n\nvar VisibleLinesCollection =\n/** @class */\nfunction () {\n  function VisibleLinesCollection(host) {\n    var _this = this;\n\n    this._host = host;\n    this.domNode = this._createDomNode();\n    this._linesCollection = new RenderedLinesCollection(function () {\n      return _this._host.createVisibleLine();\n    });\n  }\n\n  VisibleLinesCollection.prototype._createDomNode = function () {\n    var domNode = createFastDomNode(document.createElement('div'));\n    domNode.setClassName('view-layer');\n    domNode.setPosition('absolute');\n    domNode.domNode.setAttribute('role', 'presentation');\n    domNode.domNode.setAttribute('aria-hidden', 'true');\n    return domNode;\n  }; // ---- begin view event handlers\n\n\n  VisibleLinesCollection.prototype.onConfigurationChanged = function (e) {\n    if (e.hasChanged(107\n    /* layoutInfo */\n    )) {\n      return true;\n    }\n\n    return false;\n  };\n\n  VisibleLinesCollection.prototype.onFlushed = function (e) {\n    this._linesCollection.flush(); // No need to clear the dom node because a full .innerHTML will occur in ViewLayerRenderer._render\n\n\n    return true;\n  };\n\n  VisibleLinesCollection.prototype.onLinesChanged = function (e) {\n    return this._linesCollection.onLinesChanged(e.fromLineNumber, e.toLineNumber);\n  };\n\n  VisibleLinesCollection.prototype.onLinesDeleted = function (e) {\n    var deleted = this._linesCollection.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n\n    if (deleted) {\n      // Remove from DOM\n      for (var i = 0, len = deleted.length; i < len; i++) {\n        var lineDomNode = deleted[i].getDomNode();\n\n        if (lineDomNode) {\n          this.domNode.domNode.removeChild(lineDomNode);\n        }\n      }\n    }\n\n    return true;\n  };\n\n  VisibleLinesCollection.prototype.onLinesInserted = function (e) {\n    var deleted = this._linesCollection.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n\n    if (deleted) {\n      // Remove from DOM\n      for (var i = 0, len = deleted.length; i < len; i++) {\n        var lineDomNode = deleted[i].getDomNode();\n\n        if (lineDomNode) {\n          this.domNode.domNode.removeChild(lineDomNode);\n        }\n      }\n    }\n\n    return true;\n  };\n\n  VisibleLinesCollection.prototype.onScrollChanged = function (e) {\n    return e.scrollTopChanged;\n  };\n\n  VisibleLinesCollection.prototype.onTokensChanged = function (e) {\n    return this._linesCollection.onTokensChanged(e.ranges);\n  };\n\n  VisibleLinesCollection.prototype.onZonesChanged = function (e) {\n    return true;\n  }; // ---- end view event handlers\n\n\n  VisibleLinesCollection.prototype.getStartLineNumber = function () {\n    return this._linesCollection.getStartLineNumber();\n  };\n\n  VisibleLinesCollection.prototype.getEndLineNumber = function () {\n    return this._linesCollection.getEndLineNumber();\n  };\n\n  VisibleLinesCollection.prototype.getVisibleLine = function (lineNumber) {\n    return this._linesCollection.getLine(lineNumber);\n  };\n\n  VisibleLinesCollection.prototype.renderLines = function (viewportData) {\n    var inp = this._linesCollection._get();\n\n    var renderer = new ViewLayerRenderer(this.domNode.domNode, this._host, viewportData);\n    var ctx = {\n      rendLineNumberStart: inp.rendLineNumberStart,\n      lines: inp.lines,\n      linesLength: inp.lines.length\n    }; // Decide if this render will do a single update (single large .innerHTML) or many updates (inserting/removing dom nodes)\n\n    var resCtx = renderer.render(ctx, viewportData.startLineNumber, viewportData.endLineNumber, viewportData.relativeVerticalOffset);\n\n    this._linesCollection._set(resCtx.rendLineNumberStart, resCtx.lines);\n  };\n\n  return VisibleLinesCollection;\n}();\n\nexport { VisibleLinesCollection };\n\nvar ViewLayerRenderer =\n/** @class */\nfunction () {\n  function ViewLayerRenderer(domNode, host, viewportData) {\n    this.domNode = domNode;\n    this.host = host;\n    this.viewportData = viewportData;\n  }\n\n  ViewLayerRenderer.prototype.render = function (inContext, startLineNumber, stopLineNumber, deltaTop) {\n    var ctx = {\n      rendLineNumberStart: inContext.rendLineNumberStart,\n      lines: inContext.lines.slice(0),\n      linesLength: inContext.linesLength\n    };\n\n    if (ctx.rendLineNumberStart + ctx.linesLength - 1 < startLineNumber || stopLineNumber < ctx.rendLineNumberStart) {\n      // There is no overlap whatsoever\n      ctx.rendLineNumberStart = startLineNumber;\n      ctx.linesLength = stopLineNumber - startLineNumber + 1;\n      ctx.lines = [];\n\n      for (var x = startLineNumber; x <= stopLineNumber; x++) {\n        ctx.lines[x - startLineNumber] = this.host.createVisibleLine();\n      }\n\n      this._finishRendering(ctx, true, deltaTop);\n\n      return ctx;\n    } // Update lines which will remain untouched\n\n\n    this._renderUntouchedLines(ctx, Math.max(startLineNumber - ctx.rendLineNumberStart, 0), Math.min(stopLineNumber - ctx.rendLineNumberStart, ctx.linesLength - 1), deltaTop, startLineNumber);\n\n    if (ctx.rendLineNumberStart > startLineNumber) {\n      // Insert lines before\n      var fromLineNumber = startLineNumber;\n      var toLineNumber = Math.min(stopLineNumber, ctx.rendLineNumberStart - 1);\n\n      if (fromLineNumber <= toLineNumber) {\n        this._insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n\n        ctx.linesLength += toLineNumber - fromLineNumber + 1;\n      }\n    } else if (ctx.rendLineNumberStart < startLineNumber) {\n      // Remove lines before\n      var removeCnt = Math.min(ctx.linesLength, startLineNumber - ctx.rendLineNumberStart);\n\n      if (removeCnt > 0) {\n        this._removeLinesBefore(ctx, removeCnt);\n\n        ctx.linesLength -= removeCnt;\n      }\n    }\n\n    ctx.rendLineNumberStart = startLineNumber;\n\n    if (ctx.rendLineNumberStart + ctx.linesLength - 1 < stopLineNumber) {\n      // Insert lines after\n      var fromLineNumber = ctx.rendLineNumberStart + ctx.linesLength;\n      var toLineNumber = stopLineNumber;\n\n      if (fromLineNumber <= toLineNumber) {\n        this._insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n\n        ctx.linesLength += toLineNumber - fromLineNumber + 1;\n      }\n    } else if (ctx.rendLineNumberStart + ctx.linesLength - 1 > stopLineNumber) {\n      // Remove lines after\n      var fromLineNumber = Math.max(0, stopLineNumber - ctx.rendLineNumberStart + 1);\n      var toLineNumber = ctx.linesLength - 1;\n      var removeCnt = toLineNumber - fromLineNumber + 1;\n\n      if (removeCnt > 0) {\n        this._removeLinesAfter(ctx, removeCnt);\n\n        ctx.linesLength -= removeCnt;\n      }\n    }\n\n    this._finishRendering(ctx, false, deltaTop);\n\n    return ctx;\n  };\n\n  ViewLayerRenderer.prototype._renderUntouchedLines = function (ctx, startIndex, endIndex, deltaTop, deltaLN) {\n    var rendLineNumberStart = ctx.rendLineNumberStart;\n    var lines = ctx.lines;\n\n    for (var i = startIndex; i <= endIndex; i++) {\n      var lineNumber = rendLineNumberStart + i;\n      lines[i].layoutLine(lineNumber, deltaTop[lineNumber - deltaLN]);\n    }\n  };\n\n  ViewLayerRenderer.prototype._insertLinesBefore = function (ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n    var newLines = [];\n    var newLinesLen = 0;\n\n    for (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n      newLines[newLinesLen++] = this.host.createVisibleLine();\n    }\n\n    ctx.lines = newLines.concat(ctx.lines);\n  };\n\n  ViewLayerRenderer.prototype._removeLinesBefore = function (ctx, removeCount) {\n    for (var i = 0; i < removeCount; i++) {\n      var lineDomNode = ctx.lines[i].getDomNode();\n\n      if (lineDomNode) {\n        this.domNode.removeChild(lineDomNode);\n      }\n    }\n\n    ctx.lines.splice(0, removeCount);\n  };\n\n  ViewLayerRenderer.prototype._insertLinesAfter = function (ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n    var newLines = [];\n    var newLinesLen = 0;\n\n    for (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n      newLines[newLinesLen++] = this.host.createVisibleLine();\n    }\n\n    ctx.lines = ctx.lines.concat(newLines);\n  };\n\n  ViewLayerRenderer.prototype._removeLinesAfter = function (ctx, removeCount) {\n    var removeIndex = ctx.linesLength - removeCount;\n\n    for (var i = 0; i < removeCount; i++) {\n      var lineDomNode = ctx.lines[removeIndex + i].getDomNode();\n\n      if (lineDomNode) {\n        this.domNode.removeChild(lineDomNode);\n      }\n    }\n\n    ctx.lines.splice(removeIndex, removeCount);\n  };\n\n  ViewLayerRenderer.prototype._finishRenderingNewLines = function (ctx, domNodeIsEmpty, newLinesHTML, wasNew) {\n    var lastChild = this.domNode.lastChild;\n\n    if (domNodeIsEmpty || !lastChild) {\n      this.domNode.innerHTML = newLinesHTML;\n    } else {\n      lastChild.insertAdjacentHTML('afterend', newLinesHTML);\n    }\n\n    var currChild = this.domNode.lastChild;\n\n    for (var i = ctx.linesLength - 1; i >= 0; i--) {\n      var line = ctx.lines[i];\n\n      if (wasNew[i]) {\n        line.setDomNode(currChild);\n        currChild = currChild.previousSibling;\n      }\n    }\n  };\n\n  ViewLayerRenderer.prototype._finishRenderingInvalidLines = function (ctx, invalidLinesHTML, wasInvalid) {\n    var hugeDomNode = document.createElement('div');\n    hugeDomNode.innerHTML = invalidLinesHTML;\n\n    for (var i = 0; i < ctx.linesLength; i++) {\n      var line = ctx.lines[i];\n\n      if (wasInvalid[i]) {\n        var source = hugeDomNode.firstChild;\n        var lineDomNode = line.getDomNode();\n        lineDomNode.parentNode.replaceChild(source, lineDomNode);\n        line.setDomNode(source);\n      }\n    }\n  };\n\n  ViewLayerRenderer.prototype._finishRendering = function (ctx, domNodeIsEmpty, deltaTop) {\n    var sb = ViewLayerRenderer._sb;\n    var linesLength = ctx.linesLength;\n    var lines = ctx.lines;\n    var rendLineNumberStart = ctx.rendLineNumberStart;\n    var wasNew = [];\n    {\n      sb.reset();\n      var hadNewLine = false;\n\n      for (var i = 0; i < linesLength; i++) {\n        var line = lines[i];\n        wasNew[i] = false;\n        var lineDomNode = line.getDomNode();\n\n        if (lineDomNode) {\n          // line is not new\n          continue;\n        }\n\n        var renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\n\n        if (!renderResult) {\n          // line does not need rendering\n          continue;\n        }\n\n        wasNew[i] = true;\n        hadNewLine = true;\n      }\n\n      if (hadNewLine) {\n        this._finishRenderingNewLines(ctx, domNodeIsEmpty, sb.build(), wasNew);\n      }\n    }\n    {\n      sb.reset();\n      var hadInvalidLine = false;\n      var wasInvalid = [];\n\n      for (var i = 0; i < linesLength; i++) {\n        var line = lines[i];\n        wasInvalid[i] = false;\n\n        if (wasNew[i]) {\n          // line was new\n          continue;\n        }\n\n        var renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\n\n        if (!renderResult) {\n          // line does not need rendering\n          continue;\n        }\n\n        wasInvalid[i] = true;\n        hadInvalidLine = true;\n      }\n\n      if (hadInvalidLine) {\n        this._finishRenderingInvalidLines(ctx, sb.build(), wasInvalid);\n      }\n    }\n  };\n\n  ViewLayerRenderer._sb = createStringBuilder(100000);\n  return ViewLayerRenderer;\n}();","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/browser/view/viewLayer.js"],"names":["createFastDomNode","createStringBuilder","RenderedLinesCollection","createLine","_createLine","_set","prototype","flush","rendLineNumberStart","lines","_lines","_rendLineNumberStart","_get","getStartLineNumber","getEndLineNumber","length","getCount","getLine","lineNumber","lineIndex","Error","onLinesDeleted","deleteFromLineNumber","deleteToLineNumber","startLineNumber","endLineNumber","deleteCnt","deleteStartIndex","deleteCount","deleteAboveCount","deleted","splice","onLinesChanged","changeFromLineNumber","changeToLineNumber","someoneNotified","changedLineNumber","onContentChanged","onLinesInserted","insertFromLineNumber","insertToLineNumber","insertCnt","newLines","i","insertIndex","beforeLines","slice","afterLines","deletedLines","concat","onTokensChanged","ranges","notifiedSomeone","len","rng","toLineNumber","fromLineNumber","from","Math","max","to","min","VisibleLinesCollection","host","_this","_host","domNode","_createDomNode","_linesCollection","createVisibleLine","document","createElement","setClassName","setPosition","setAttribute","onConfigurationChanged","e","hasChanged","onFlushed","lineDomNode","getDomNode","removeChild","onScrollChanged","scrollTopChanged","onZonesChanged","getVisibleLine","renderLines","viewportData","inp","renderer","ViewLayerRenderer","ctx","linesLength","resCtx","render","relativeVerticalOffset","inContext","stopLineNumber","deltaTop","x","_finishRendering","_renderUntouchedLines","_insertLinesBefore","removeCnt","_removeLinesBefore","_insertLinesAfter","_removeLinesAfter","startIndex","endIndex","deltaLN","layoutLine","newLinesLen","removeCount","removeIndex","_finishRenderingNewLines","domNodeIsEmpty","newLinesHTML","wasNew","lastChild","innerHTML","insertAdjacentHTML","currChild","line","setDomNode","previousSibling","_finishRenderingInvalidLines","invalidLinesHTML","wasInvalid","hugeDomNode","source","firstChild","parentNode","replaceChild","sb","_sb","reset","hadNewLine","renderResult","renderLine","build","hadInvalidLine"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\r\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\r\nvar RenderedLinesCollection = /** @class */ (function () {\r\n    function RenderedLinesCollection(createLine) {\r\n        this._createLine = createLine;\r\n        this._set(1, []);\r\n    }\r\n    RenderedLinesCollection.prototype.flush = function () {\r\n        this._set(1, []);\r\n    };\r\n    RenderedLinesCollection.prototype._set = function (rendLineNumberStart, lines) {\r\n        this._lines = lines;\r\n        this._rendLineNumberStart = rendLineNumberStart;\r\n    };\r\n    RenderedLinesCollection.prototype._get = function () {\r\n        return {\r\n            rendLineNumberStart: this._rendLineNumberStart,\r\n            lines: this._lines\r\n        };\r\n    };\r\n    /**\r\n     * @returns Inclusive line number that is inside this collection\r\n     */\r\n    RenderedLinesCollection.prototype.getStartLineNumber = function () {\r\n        return this._rendLineNumberStart;\r\n    };\r\n    /**\r\n     * @returns Inclusive line number that is inside this collection\r\n     */\r\n    RenderedLinesCollection.prototype.getEndLineNumber = function () {\r\n        return this._rendLineNumberStart + this._lines.length - 1;\r\n    };\r\n    RenderedLinesCollection.prototype.getCount = function () {\r\n        return this._lines.length;\r\n    };\r\n    RenderedLinesCollection.prototype.getLine = function (lineNumber) {\r\n        var lineIndex = lineNumber - this._rendLineNumberStart;\r\n        if (lineIndex < 0 || lineIndex >= this._lines.length) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._lines[lineIndex];\r\n    };\r\n    /**\r\n     * @returns Lines that were removed from this collection\r\n     */\r\n    RenderedLinesCollection.prototype.onLinesDeleted = function (deleteFromLineNumber, deleteToLineNumber) {\r\n        if (this.getCount() === 0) {\r\n            // no lines\r\n            return null;\r\n        }\r\n        var startLineNumber = this.getStartLineNumber();\r\n        var endLineNumber = this.getEndLineNumber();\r\n        if (deleteToLineNumber < startLineNumber) {\r\n            // deleting above the viewport\r\n            var deleteCnt = deleteToLineNumber - deleteFromLineNumber + 1;\r\n            this._rendLineNumberStart -= deleteCnt;\r\n            return null;\r\n        }\r\n        if (deleteFromLineNumber > endLineNumber) {\r\n            // deleted below the viewport\r\n            return null;\r\n        }\r\n        // Record what needs to be deleted\r\n        var deleteStartIndex = 0;\r\n        var deleteCount = 0;\r\n        for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n            var lineIndex = lineNumber - this._rendLineNumberStart;\r\n            if (deleteFromLineNumber <= lineNumber && lineNumber <= deleteToLineNumber) {\r\n                // this is a line to be deleted\r\n                if (deleteCount === 0) {\r\n                    // this is the first line to be deleted\r\n                    deleteStartIndex = lineIndex;\r\n                    deleteCount = 1;\r\n                }\r\n                else {\r\n                    deleteCount++;\r\n                }\r\n            }\r\n        }\r\n        // Adjust this._rendLineNumberStart for lines deleted above\r\n        if (deleteFromLineNumber < startLineNumber) {\r\n            // Something was deleted above\r\n            var deleteAboveCount = 0;\r\n            if (deleteToLineNumber < startLineNumber) {\r\n                // the entire deleted lines are above\r\n                deleteAboveCount = deleteToLineNumber - deleteFromLineNumber + 1;\r\n            }\r\n            else {\r\n                deleteAboveCount = startLineNumber - deleteFromLineNumber;\r\n            }\r\n            this._rendLineNumberStart -= deleteAboveCount;\r\n        }\r\n        var deleted = this._lines.splice(deleteStartIndex, deleteCount);\r\n        return deleted;\r\n    };\r\n    RenderedLinesCollection.prototype.onLinesChanged = function (changeFromLineNumber, changeToLineNumber) {\r\n        if (this.getCount() === 0) {\r\n            // no lines\r\n            return false;\r\n        }\r\n        var startLineNumber = this.getStartLineNumber();\r\n        var endLineNumber = this.getEndLineNumber();\r\n        var someoneNotified = false;\r\n        for (var changedLineNumber = changeFromLineNumber; changedLineNumber <= changeToLineNumber; changedLineNumber++) {\r\n            if (changedLineNumber >= startLineNumber && changedLineNumber <= endLineNumber) {\r\n                // Notify the line\r\n                this._lines[changedLineNumber - this._rendLineNumberStart].onContentChanged();\r\n                someoneNotified = true;\r\n            }\r\n        }\r\n        return someoneNotified;\r\n    };\r\n    RenderedLinesCollection.prototype.onLinesInserted = function (insertFromLineNumber, insertToLineNumber) {\r\n        if (this.getCount() === 0) {\r\n            // no lines\r\n            return null;\r\n        }\r\n        var insertCnt = insertToLineNumber - insertFromLineNumber + 1;\r\n        var startLineNumber = this.getStartLineNumber();\r\n        var endLineNumber = this.getEndLineNumber();\r\n        if (insertFromLineNumber <= startLineNumber) {\r\n            // inserting above the viewport\r\n            this._rendLineNumberStart += insertCnt;\r\n            return null;\r\n        }\r\n        if (insertFromLineNumber > endLineNumber) {\r\n            // inserting below the viewport\r\n            return null;\r\n        }\r\n        if (insertCnt + insertFromLineNumber > endLineNumber) {\r\n            // insert inside the viewport in such a way that all remaining lines are pushed outside\r\n            var deleted = this._lines.splice(insertFromLineNumber - this._rendLineNumberStart, endLineNumber - insertFromLineNumber + 1);\r\n            return deleted;\r\n        }\r\n        // insert inside the viewport, push out some lines, but not all remaining lines\r\n        var newLines = [];\r\n        for (var i = 0; i < insertCnt; i++) {\r\n            newLines[i] = this._createLine();\r\n        }\r\n        var insertIndex = insertFromLineNumber - this._rendLineNumberStart;\r\n        var beforeLines = this._lines.slice(0, insertIndex);\r\n        var afterLines = this._lines.slice(insertIndex, this._lines.length - insertCnt);\r\n        var deletedLines = this._lines.slice(this._lines.length - insertCnt, this._lines.length);\r\n        this._lines = beforeLines.concat(newLines).concat(afterLines);\r\n        return deletedLines;\r\n    };\r\n    RenderedLinesCollection.prototype.onTokensChanged = function (ranges) {\r\n        if (this.getCount() === 0) {\r\n            // no lines\r\n            return false;\r\n        }\r\n        var startLineNumber = this.getStartLineNumber();\r\n        var endLineNumber = this.getEndLineNumber();\r\n        var notifiedSomeone = false;\r\n        for (var i = 0, len = ranges.length; i < len; i++) {\r\n            var rng = ranges[i];\r\n            if (rng.toLineNumber < startLineNumber || rng.fromLineNumber > endLineNumber) {\r\n                // range outside viewport\r\n                continue;\r\n            }\r\n            var from = Math.max(startLineNumber, rng.fromLineNumber);\r\n            var to = Math.min(endLineNumber, rng.toLineNumber);\r\n            for (var lineNumber = from; lineNumber <= to; lineNumber++) {\r\n                var lineIndex = lineNumber - this._rendLineNumberStart;\r\n                this._lines[lineIndex].onTokensChanged();\r\n                notifiedSomeone = true;\r\n            }\r\n        }\r\n        return notifiedSomeone;\r\n    };\r\n    return RenderedLinesCollection;\r\n}());\r\nexport { RenderedLinesCollection };\r\nvar VisibleLinesCollection = /** @class */ (function () {\r\n    function VisibleLinesCollection(host) {\r\n        var _this = this;\r\n        this._host = host;\r\n        this.domNode = this._createDomNode();\r\n        this._linesCollection = new RenderedLinesCollection(function () { return _this._host.createVisibleLine(); });\r\n    }\r\n    VisibleLinesCollection.prototype._createDomNode = function () {\r\n        var domNode = createFastDomNode(document.createElement('div'));\r\n        domNode.setClassName('view-layer');\r\n        domNode.setPosition('absolute');\r\n        domNode.domNode.setAttribute('role', 'presentation');\r\n        domNode.domNode.setAttribute('aria-hidden', 'true');\r\n        return domNode;\r\n    };\r\n    // ---- begin view event handlers\r\n    VisibleLinesCollection.prototype.onConfigurationChanged = function (e) {\r\n        if (e.hasChanged(107 /* layoutInfo */)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    VisibleLinesCollection.prototype.onFlushed = function (e) {\r\n        this._linesCollection.flush();\r\n        // No need to clear the dom node because a full .innerHTML will occur in ViewLayerRenderer._render\r\n        return true;\r\n    };\r\n    VisibleLinesCollection.prototype.onLinesChanged = function (e) {\r\n        return this._linesCollection.onLinesChanged(e.fromLineNumber, e.toLineNumber);\r\n    };\r\n    VisibleLinesCollection.prototype.onLinesDeleted = function (e) {\r\n        var deleted = this._linesCollection.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\r\n        if (deleted) {\r\n            // Remove from DOM\r\n            for (var i = 0, len = deleted.length; i < len; i++) {\r\n                var lineDomNode = deleted[i].getDomNode();\r\n                if (lineDomNode) {\r\n                    this.domNode.domNode.removeChild(lineDomNode);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    VisibleLinesCollection.prototype.onLinesInserted = function (e) {\r\n        var deleted = this._linesCollection.onLinesInserted(e.fromLineNumber, e.toLineNumber);\r\n        if (deleted) {\r\n            // Remove from DOM\r\n            for (var i = 0, len = deleted.length; i < len; i++) {\r\n                var lineDomNode = deleted[i].getDomNode();\r\n                if (lineDomNode) {\r\n                    this.domNode.domNode.removeChild(lineDomNode);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    VisibleLinesCollection.prototype.onScrollChanged = function (e) {\r\n        return e.scrollTopChanged;\r\n    };\r\n    VisibleLinesCollection.prototype.onTokensChanged = function (e) {\r\n        return this._linesCollection.onTokensChanged(e.ranges);\r\n    };\r\n    VisibleLinesCollection.prototype.onZonesChanged = function (e) {\r\n        return true;\r\n    };\r\n    // ---- end view event handlers\r\n    VisibleLinesCollection.prototype.getStartLineNumber = function () {\r\n        return this._linesCollection.getStartLineNumber();\r\n    };\r\n    VisibleLinesCollection.prototype.getEndLineNumber = function () {\r\n        return this._linesCollection.getEndLineNumber();\r\n    };\r\n    VisibleLinesCollection.prototype.getVisibleLine = function (lineNumber) {\r\n        return this._linesCollection.getLine(lineNumber);\r\n    };\r\n    VisibleLinesCollection.prototype.renderLines = function (viewportData) {\r\n        var inp = this._linesCollection._get();\r\n        var renderer = new ViewLayerRenderer(this.domNode.domNode, this._host, viewportData);\r\n        var ctx = {\r\n            rendLineNumberStart: inp.rendLineNumberStart,\r\n            lines: inp.lines,\r\n            linesLength: inp.lines.length\r\n        };\r\n        // Decide if this render will do a single update (single large .innerHTML) or many updates (inserting/removing dom nodes)\r\n        var resCtx = renderer.render(ctx, viewportData.startLineNumber, viewportData.endLineNumber, viewportData.relativeVerticalOffset);\r\n        this._linesCollection._set(resCtx.rendLineNumberStart, resCtx.lines);\r\n    };\r\n    return VisibleLinesCollection;\r\n}());\r\nexport { VisibleLinesCollection };\r\nvar ViewLayerRenderer = /** @class */ (function () {\r\n    function ViewLayerRenderer(domNode, host, viewportData) {\r\n        this.domNode = domNode;\r\n        this.host = host;\r\n        this.viewportData = viewportData;\r\n    }\r\n    ViewLayerRenderer.prototype.render = function (inContext, startLineNumber, stopLineNumber, deltaTop) {\r\n        var ctx = {\r\n            rendLineNumberStart: inContext.rendLineNumberStart,\r\n            lines: inContext.lines.slice(0),\r\n            linesLength: inContext.linesLength\r\n        };\r\n        if ((ctx.rendLineNumberStart + ctx.linesLength - 1 < startLineNumber) || (stopLineNumber < ctx.rendLineNumberStart)) {\r\n            // There is no overlap whatsoever\r\n            ctx.rendLineNumberStart = startLineNumber;\r\n            ctx.linesLength = stopLineNumber - startLineNumber + 1;\r\n            ctx.lines = [];\r\n            for (var x = startLineNumber; x <= stopLineNumber; x++) {\r\n                ctx.lines[x - startLineNumber] = this.host.createVisibleLine();\r\n            }\r\n            this._finishRendering(ctx, true, deltaTop);\r\n            return ctx;\r\n        }\r\n        // Update lines which will remain untouched\r\n        this._renderUntouchedLines(ctx, Math.max(startLineNumber - ctx.rendLineNumberStart, 0), Math.min(stopLineNumber - ctx.rendLineNumberStart, ctx.linesLength - 1), deltaTop, startLineNumber);\r\n        if (ctx.rendLineNumberStart > startLineNumber) {\r\n            // Insert lines before\r\n            var fromLineNumber = startLineNumber;\r\n            var toLineNumber = Math.min(stopLineNumber, ctx.rendLineNumberStart - 1);\r\n            if (fromLineNumber <= toLineNumber) {\r\n                this._insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\r\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\r\n            }\r\n        }\r\n        else if (ctx.rendLineNumberStart < startLineNumber) {\r\n            // Remove lines before\r\n            var removeCnt = Math.min(ctx.linesLength, startLineNumber - ctx.rendLineNumberStart);\r\n            if (removeCnt > 0) {\r\n                this._removeLinesBefore(ctx, removeCnt);\r\n                ctx.linesLength -= removeCnt;\r\n            }\r\n        }\r\n        ctx.rendLineNumberStart = startLineNumber;\r\n        if (ctx.rendLineNumberStart + ctx.linesLength - 1 < stopLineNumber) {\r\n            // Insert lines after\r\n            var fromLineNumber = ctx.rendLineNumberStart + ctx.linesLength;\r\n            var toLineNumber = stopLineNumber;\r\n            if (fromLineNumber <= toLineNumber) {\r\n                this._insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\r\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\r\n            }\r\n        }\r\n        else if (ctx.rendLineNumberStart + ctx.linesLength - 1 > stopLineNumber) {\r\n            // Remove lines after\r\n            var fromLineNumber = Math.max(0, stopLineNumber - ctx.rendLineNumberStart + 1);\r\n            var toLineNumber = ctx.linesLength - 1;\r\n            var removeCnt = toLineNumber - fromLineNumber + 1;\r\n            if (removeCnt > 0) {\r\n                this._removeLinesAfter(ctx, removeCnt);\r\n                ctx.linesLength -= removeCnt;\r\n            }\r\n        }\r\n        this._finishRendering(ctx, false, deltaTop);\r\n        return ctx;\r\n    };\r\n    ViewLayerRenderer.prototype._renderUntouchedLines = function (ctx, startIndex, endIndex, deltaTop, deltaLN) {\r\n        var rendLineNumberStart = ctx.rendLineNumberStart;\r\n        var lines = ctx.lines;\r\n        for (var i = startIndex; i <= endIndex; i++) {\r\n            var lineNumber = rendLineNumberStart + i;\r\n            lines[i].layoutLine(lineNumber, deltaTop[lineNumber - deltaLN]);\r\n        }\r\n    };\r\n    ViewLayerRenderer.prototype._insertLinesBefore = function (ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\r\n        var newLines = [];\r\n        var newLinesLen = 0;\r\n        for (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\r\n            newLines[newLinesLen++] = this.host.createVisibleLine();\r\n        }\r\n        ctx.lines = newLines.concat(ctx.lines);\r\n    };\r\n    ViewLayerRenderer.prototype._removeLinesBefore = function (ctx, removeCount) {\r\n        for (var i = 0; i < removeCount; i++) {\r\n            var lineDomNode = ctx.lines[i].getDomNode();\r\n            if (lineDomNode) {\r\n                this.domNode.removeChild(lineDomNode);\r\n            }\r\n        }\r\n        ctx.lines.splice(0, removeCount);\r\n    };\r\n    ViewLayerRenderer.prototype._insertLinesAfter = function (ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\r\n        var newLines = [];\r\n        var newLinesLen = 0;\r\n        for (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\r\n            newLines[newLinesLen++] = this.host.createVisibleLine();\r\n        }\r\n        ctx.lines = ctx.lines.concat(newLines);\r\n    };\r\n    ViewLayerRenderer.prototype._removeLinesAfter = function (ctx, removeCount) {\r\n        var removeIndex = ctx.linesLength - removeCount;\r\n        for (var i = 0; i < removeCount; i++) {\r\n            var lineDomNode = ctx.lines[removeIndex + i].getDomNode();\r\n            if (lineDomNode) {\r\n                this.domNode.removeChild(lineDomNode);\r\n            }\r\n        }\r\n        ctx.lines.splice(removeIndex, removeCount);\r\n    };\r\n    ViewLayerRenderer.prototype._finishRenderingNewLines = function (ctx, domNodeIsEmpty, newLinesHTML, wasNew) {\r\n        var lastChild = this.domNode.lastChild;\r\n        if (domNodeIsEmpty || !lastChild) {\r\n            this.domNode.innerHTML = newLinesHTML;\r\n        }\r\n        else {\r\n            lastChild.insertAdjacentHTML('afterend', newLinesHTML);\r\n        }\r\n        var currChild = this.domNode.lastChild;\r\n        for (var i = ctx.linesLength - 1; i >= 0; i--) {\r\n            var line = ctx.lines[i];\r\n            if (wasNew[i]) {\r\n                line.setDomNode(currChild);\r\n                currChild = currChild.previousSibling;\r\n            }\r\n        }\r\n    };\r\n    ViewLayerRenderer.prototype._finishRenderingInvalidLines = function (ctx, invalidLinesHTML, wasInvalid) {\r\n        var hugeDomNode = document.createElement('div');\r\n        hugeDomNode.innerHTML = invalidLinesHTML;\r\n        for (var i = 0; i < ctx.linesLength; i++) {\r\n            var line = ctx.lines[i];\r\n            if (wasInvalid[i]) {\r\n                var source = hugeDomNode.firstChild;\r\n                var lineDomNode = line.getDomNode();\r\n                lineDomNode.parentNode.replaceChild(source, lineDomNode);\r\n                line.setDomNode(source);\r\n            }\r\n        }\r\n    };\r\n    ViewLayerRenderer.prototype._finishRendering = function (ctx, domNodeIsEmpty, deltaTop) {\r\n        var sb = ViewLayerRenderer._sb;\r\n        var linesLength = ctx.linesLength;\r\n        var lines = ctx.lines;\r\n        var rendLineNumberStart = ctx.rendLineNumberStart;\r\n        var wasNew = [];\r\n        {\r\n            sb.reset();\r\n            var hadNewLine = false;\r\n            for (var i = 0; i < linesLength; i++) {\r\n                var line = lines[i];\r\n                wasNew[i] = false;\r\n                var lineDomNode = line.getDomNode();\r\n                if (lineDomNode) {\r\n                    // line is not new\r\n                    continue;\r\n                }\r\n                var renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\r\n                if (!renderResult) {\r\n                    // line does not need rendering\r\n                    continue;\r\n                }\r\n                wasNew[i] = true;\r\n                hadNewLine = true;\r\n            }\r\n            if (hadNewLine) {\r\n                this._finishRenderingNewLines(ctx, domNodeIsEmpty, sb.build(), wasNew);\r\n            }\r\n        }\r\n        {\r\n            sb.reset();\r\n            var hadInvalidLine = false;\r\n            var wasInvalid = [];\r\n            for (var i = 0; i < linesLength; i++) {\r\n                var line = lines[i];\r\n                wasInvalid[i] = false;\r\n                if (wasNew[i]) {\r\n                    // line was new\r\n                    continue;\r\n                }\r\n                var renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\r\n                if (!renderResult) {\r\n                    // line does not need rendering\r\n                    continue;\r\n                }\r\n                wasInvalid[i] = true;\r\n                hadInvalidLine = true;\r\n            }\r\n            if (hadInvalidLine) {\r\n                this._finishRenderingInvalidLines(ctx, sb.build(), wasInvalid);\r\n            }\r\n        }\r\n    };\r\n    ViewLayerRenderer._sb = createStringBuilder(100000);\r\n    return ViewLayerRenderer;\r\n}());\r\n"]},"metadata":{},"sourceType":"module"}