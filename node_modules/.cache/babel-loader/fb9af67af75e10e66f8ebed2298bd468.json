{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './viewLines.css';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { Configuration } from '../../config/configuration.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { DomReadingContext, ViewLine, ViewLineOptions } from './viewLine.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { LineVisibleRanges, HorizontalPosition } from '../../../common/view/renderingContext.js';\n\nvar LastRenderedData =\n/** @class */\nfunction () {\n  function LastRenderedData() {\n    this._currentVisibleRange = new Range(1, 1, 1, 1);\n  }\n\n  LastRenderedData.prototype.getCurrentVisibleRange = function () {\n    return this._currentVisibleRange;\n  };\n\n  LastRenderedData.prototype.setCurrentVisibleRange = function (currentVisibleRange) {\n    this._currentVisibleRange = currentVisibleRange;\n  };\n\n  return LastRenderedData;\n}();\n\nvar HorizontalRevealRequest =\n/** @class */\nfunction () {\n  function HorizontalRevealRequest(lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\n    this.lineNumber = lineNumber;\n    this.startColumn = startColumn;\n    this.endColumn = endColumn;\n    this.startScrollTop = startScrollTop;\n    this.stopScrollTop = stopScrollTop;\n    this.scrollType = scrollType;\n  }\n\n  return HorizontalRevealRequest;\n}();\n\nvar ViewLines =\n/** @class */\nfunction (_super) {\n  __extends(ViewLines, _super);\n\n  function ViewLines(context, linesContent) {\n    var _this = _super.call(this, context) || this;\n\n    _this._linesContent = linesContent;\n    _this._textRangeRestingSpot = document.createElement('div');\n    _this._visibleLines = new VisibleLinesCollection(_this);\n    _this.domNode = _this._visibleLines.domNode;\n    var conf = _this._context.configuration;\n    var options = _this._context.configuration.options;\n    var fontInfo = options.get(34\n    /* fontInfo */\n    );\n    var wrappingInfo = options.get(108\n    /* wrappingInfo */\n    );\n    _this._lineHeight = options.get(49\n    /* lineHeight */\n    );\n    _this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n    _this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n    _this._revealHorizontalRightPadding = options.get(75\n    /* revealHorizontalRightPadding */\n    );\n    _this._cursorSurroundingLines = options.get(19\n    /* cursorSurroundingLines */\n    );\n    _this._cursorSurroundingLinesStyle = options.get(20\n    /* cursorSurroundingLinesStyle */\n    );\n    _this._canUseLayerHinting = !options.get(22\n    /* disableLayerHinting */\n    );\n    _this._viewLineOptions = new ViewLineOptions(conf, _this._context.theme.type);\n    PartFingerprints.write(_this.domNode, 7\n    /* ViewLines */\n    );\n\n    _this.domNode.setClassName('view-lines');\n\n    Configuration.applyFontInfo(_this.domNode, fontInfo); // --- width & height\n\n    _this._maxLineWidth = 0;\n    _this._asyncUpdateLineWidths = new RunOnceScheduler(function () {\n      _this._updateLineWidthsSlow();\n    }, 200);\n    _this._lastRenderedData = new LastRenderedData();\n    _this._horizontalRevealRequest = null;\n    return _this;\n  }\n\n  ViewLines.prototype.dispose = function () {\n    this._asyncUpdateLineWidths.dispose();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  ViewLines.prototype.getDomNode = function () {\n    return this.domNode;\n  }; // ---- begin IVisibleLinesHost\n\n\n  ViewLines.prototype.createVisibleLine = function () {\n    return new ViewLine(this._viewLineOptions);\n  }; // ---- end IVisibleLinesHost\n  // ---- begin view event handlers\n\n\n  ViewLines.prototype.onConfigurationChanged = function (e) {\n    this._visibleLines.onConfigurationChanged(e);\n\n    if (e.hasChanged(108\n    /* wrappingInfo */\n    )) {\n      this._maxLineWidth = 0;\n    }\n\n    var options = this._context.configuration.options;\n    var fontInfo = options.get(34\n    /* fontInfo */\n    );\n    var wrappingInfo = options.get(108\n    /* wrappingInfo */\n    );\n    this._lineHeight = options.get(49\n    /* lineHeight */\n    );\n    this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n    this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n    this._revealHorizontalRightPadding = options.get(75\n    /* revealHorizontalRightPadding */\n    );\n    this._cursorSurroundingLines = options.get(19\n    /* cursorSurroundingLines */\n    );\n    this._cursorSurroundingLinesStyle = options.get(20\n    /* cursorSurroundingLinesStyle */\n    );\n    this._canUseLayerHinting = !options.get(22\n    /* disableLayerHinting */\n    );\n    Configuration.applyFontInfo(this.domNode, fontInfo);\n\n    this._onOptionsMaybeChanged();\n\n    if (e.hasChanged(107\n    /* layoutInfo */\n    )) {\n      this._maxLineWidth = 0;\n    }\n\n    return true;\n  };\n\n  ViewLines.prototype._onOptionsMaybeChanged = function () {\n    var conf = this._context.configuration;\n    var newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n\n    if (!this._viewLineOptions.equals(newViewLineOptions)) {\n      this._viewLineOptions = newViewLineOptions;\n\n      var startLineNumber = this._visibleLines.getStartLineNumber();\n\n      var endLineNumber = this._visibleLines.getEndLineNumber();\n\n      for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        var line = this._visibleLines.getVisibleLine(lineNumber);\n\n        line.onOptionsChanged(this._viewLineOptions);\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  ViewLines.prototype.onCursorStateChanged = function (e) {\n    var rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\n    var rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\n    var r = false;\n\n    for (var lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n      r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n    }\n\n    return r;\n  };\n\n  ViewLines.prototype.onDecorationsChanged = function (e) {\n    if (true\n    /*e.inlineDecorationsChanged*/\n    ) {\n        var rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\n        var rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\n        for (var lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n          this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n        }\n      }\n\n    return true;\n  };\n\n  ViewLines.prototype.onFlushed = function (e) {\n    var shouldRender = this._visibleLines.onFlushed(e);\n\n    this._maxLineWidth = 0;\n    return shouldRender;\n  };\n\n  ViewLines.prototype.onLinesChanged = function (e) {\n    return this._visibleLines.onLinesChanged(e);\n  };\n\n  ViewLines.prototype.onLinesDeleted = function (e) {\n    return this._visibleLines.onLinesDeleted(e);\n  };\n\n  ViewLines.prototype.onLinesInserted = function (e) {\n    return this._visibleLines.onLinesInserted(e);\n  };\n\n  ViewLines.prototype.onRevealRangeRequest = function (e) {\n    // Using the future viewport here in order to handle multiple\n    // incoming reveal range requests that might all desire to be animated\n    var desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.range, e.verticalType); // validate the new desired scroll top\n\n\n    var newScrollPosition = this._context.viewLayout.validateScrollPosition({\n      scrollTop: desiredScrollTop\n    });\n\n    if (e.revealHorizontal) {\n      if (e.range.startLineNumber !== e.range.endLineNumber) {\n        // Two or more lines? => scroll to base (That's how you see most of the two lines)\n        newScrollPosition = {\n          scrollTop: newScrollPosition.scrollTop,\n          scrollLeft: 0\n        };\n      } else {\n        // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n        this._horizontalRevealRequest = new HorizontalRevealRequest(e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n      }\n    } else {\n      this._horizontalRevealRequest = null;\n    }\n\n    var scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n\n    if (e.scrollType === 0\n    /* Smooth */\n    && scrollTopDelta > this._lineHeight) {\n      this._context.viewLayout.setScrollPositionSmooth(newScrollPosition);\n    } else {\n      this._context.viewLayout.setScrollPositionNow(newScrollPosition);\n    }\n\n    return true;\n  };\n\n  ViewLines.prototype.onScrollChanged = function (e) {\n    if (this._horizontalRevealRequest && e.scrollLeftChanged) {\n      // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n      this._horizontalRevealRequest = null;\n    }\n\n    if (this._horizontalRevealRequest && e.scrollTopChanged) {\n      var min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n      var max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n\n      if (e.scrollTop < min || e.scrollTop > max) {\n        // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n        this._horizontalRevealRequest = null;\n      }\n    }\n\n    this.domNode.setWidth(e.scrollWidth);\n    return this._visibleLines.onScrollChanged(e) || true;\n  };\n\n  ViewLines.prototype.onTokensChanged = function (e) {\n    return this._visibleLines.onTokensChanged(e);\n  };\n\n  ViewLines.prototype.onZonesChanged = function (e) {\n    this._context.viewLayout.onMaxLineWidthChanged(this._maxLineWidth);\n\n    return this._visibleLines.onZonesChanged(e);\n  };\n\n  ViewLines.prototype.onThemeChanged = function (e) {\n    return this._onOptionsMaybeChanged();\n  }; // ---- end view event handlers\n  // ----------- HELPERS FOR OTHERS\n\n\n  ViewLines.prototype.getPositionFromDOMInfo = function (spanNode, offset) {\n    var viewLineDomNode = this._getViewLineDomNode(spanNode);\n\n    if (viewLineDomNode === null) {\n      // Couldn't find view line node\n      return null;\n    }\n\n    var lineNumber = this._getLineNumberFor(viewLineDomNode);\n\n    if (lineNumber === -1) {\n      // Couldn't find view line node\n      return null;\n    }\n\n    if (lineNumber < 1 || lineNumber > this._context.model.getLineCount()) {\n      // lineNumber is outside range\n      return null;\n    }\n\n    if (this._context.model.getLineMaxColumn(lineNumber) === 1) {\n      // Line is empty\n      return new Position(lineNumber, 1);\n    }\n\n    var rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\n    var rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\n    if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n      // Couldn't find line\n      return null;\n    }\n\n    var column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(lineNumber, spanNode, offset);\n\n    var minColumn = this._context.model.getLineMinColumn(lineNumber);\n\n    if (column < minColumn) {\n      column = minColumn;\n    }\n\n    return new Position(lineNumber, column);\n  };\n\n  ViewLines.prototype._getViewLineDomNode = function (node) {\n    while (node && node.nodeType === 1) {\n      if (node.className === ViewLine.CLASS_NAME) {\n        return node;\n      }\n\n      node = node.parentElement;\n    }\n\n    return null;\n  };\n  /**\r\n   * @returns the line number of this view line dom node.\r\n   */\n\n\n  ViewLines.prototype._getLineNumberFor = function (domNode) {\n    var startLineNumber = this._visibleLines.getStartLineNumber();\n\n    var endLineNumber = this._visibleLines.getEndLineNumber();\n\n    for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      var line = this._visibleLines.getVisibleLine(lineNumber);\n\n      if (domNode === line.getDomNode()) {\n        return lineNumber;\n      }\n    }\n\n    return -1;\n  };\n\n  ViewLines.prototype.getLineWidth = function (lineNumber) {\n    var rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\n    var rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\n    if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n      // Couldn't find line\n      return -1;\n    }\n\n    return this._visibleLines.getVisibleLine(lineNumber).getWidth();\n  };\n\n  ViewLines.prototype.linesVisibleRangesForRange = function (_range, includeNewLines) {\n    if (this.shouldRender()) {\n      // Cannot read from the DOM because it is dirty\n      // i.e. the model & the dom are out of sync, so I'd be reading something stale\n      return null;\n    }\n\n    var originalEndLineNumber = _range.endLineNumber;\n    var range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n\n    if (!range) {\n      return null;\n    }\n\n    var visibleRanges = [],\n        visibleRangesLen = 0;\n    var domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n    var nextLineModelLineNumber = 0;\n\n    if (includeNewLines) {\n      nextLineModelLineNumber = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n    }\n\n    var rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\n    var rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\n    for (var lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n      if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n        continue;\n      }\n\n      var startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n      var endColumn = lineNumber === range.endLineNumber ? range.endColumn : this._context.model.getLineMaxColumn(lineNumber);\n\n      var visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(startColumn, endColumn, domReadingContext);\n\n      if (!visibleRangesForLine) {\n        continue;\n      }\n\n      if (includeNewLines && lineNumber < originalEndLineNumber) {\n        var currentLineModelLineNumber = nextLineModelLineNumber;\n        nextLineModelLineNumber = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n\n        if (currentLineModelLineNumber !== nextLineModelLineNumber) {\n          visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n        }\n      }\n\n      visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, visibleRangesForLine.ranges);\n    }\n\n    if (visibleRangesLen === 0) {\n      return null;\n    }\n\n    return visibleRanges;\n  };\n\n  ViewLines.prototype._visibleRangesForLineRange = function (lineNumber, startColumn, endColumn) {\n    if (this.shouldRender()) {\n      // Cannot read from the DOM because it is dirty\n      // i.e. the model & the dom are out of sync, so I'd be reading something stale\n      return null;\n    }\n\n    if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n      return null;\n    }\n\n    return this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(startColumn, endColumn, new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot));\n  };\n\n  ViewLines.prototype.visibleRangeForPosition = function (position) {\n    var visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n\n    if (!visibleRanges) {\n      return null;\n    }\n\n    return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n  }; // --- implementation\n\n\n  ViewLines.prototype.updateLineWidths = function () {\n    this._updateLineWidths(false);\n  };\n  /**\r\n   * Updates the max line width if it is fast to compute.\r\n   * Returns true if all lines were taken into account.\r\n   * Returns false if some lines need to be reevaluated (in a slow fashion).\r\n   */\n\n\n  ViewLines.prototype._updateLineWidthsFast = function () {\n    return this._updateLineWidths(true);\n  };\n\n  ViewLines.prototype._updateLineWidthsSlow = function () {\n    this._updateLineWidths(false);\n  };\n\n  ViewLines.prototype._updateLineWidths = function (fast) {\n    var rendStartLineNumber = this._visibleLines.getStartLineNumber();\n\n    var rendEndLineNumber = this._visibleLines.getEndLineNumber();\n\n    var localMaxLineWidth = 1;\n    var allWidthsComputed = true;\n\n    for (var lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n      var visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n\n      if (fast && !visibleLine.getWidthIsFast()) {\n        // Cannot compute width in a fast way for this line\n        allWidthsComputed = false;\n        continue;\n      }\n\n      localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth());\n    }\n\n    if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.model.getLineCount()) {\n      // we know the max line width for all the lines\n      this._maxLineWidth = 0;\n    }\n\n    this._ensureMaxLineWidth(localMaxLineWidth);\n\n    return allWidthsComputed;\n  };\n\n  ViewLines.prototype.prepareRender = function () {\n    throw new Error('Not supported');\n  };\n\n  ViewLines.prototype.render = function () {\n    throw new Error('Not supported');\n  };\n\n  ViewLines.prototype.renderText = function (viewportData) {\n    // (1) render lines - ensures lines are in the DOM\n    this._visibleLines.renderLines(viewportData);\n\n    this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n\n    this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n    this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000)); // (2) compute horizontal scroll position:\n    //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n    //  - it might change `scrollWidth` and `scrollLeft`\n\n    if (this._horizontalRevealRequest) {\n      var revealLineNumber = this._horizontalRevealRequest.lineNumber;\n      var revealStartColumn = this._horizontalRevealRequest.startColumn;\n      var revealEndColumn = this._horizontalRevealRequest.endColumn;\n      var scrollType = this._horizontalRevealRequest.scrollType; // Check that we have the line that contains the horizontal range in the viewport\n\n      if (viewportData.startLineNumber <= revealLineNumber && revealLineNumber <= viewportData.endLineNumber) {\n        this._horizontalRevealRequest = null; // allow `visibleRangesForRange2` to work\n\n        this.onDidRender(); // compute new scroll position\n\n        var newScrollLeft = this._computeScrollLeftToRevealRange(revealLineNumber, revealStartColumn, revealEndColumn);\n\n        var isViewportWrapping = this._isViewportWrapping;\n\n        if (!isViewportWrapping) {\n          // ensure `scrollWidth` is large enough\n          this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n        } // set `scrollLeft`\n\n\n        if (scrollType === 0\n        /* Smooth */\n        ) {\n            this._context.viewLayout.setScrollPositionSmooth({\n              scrollLeft: newScrollLeft.scrollLeft\n            });\n          } else {\n          this._context.viewLayout.setScrollPositionNow({\n            scrollLeft: newScrollLeft.scrollLeft\n          });\n        }\n      }\n    } // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n\n\n    if (!this._updateLineWidthsFast()) {\n      // Computing the width of some lines would be slow => delay it\n      this._asyncUpdateLineWidths.schedule();\n    } // (3) handle scrolling\n\n\n    this._linesContent.setLayerHinting(this._canUseLayerHinting);\n\n    this._linesContent.setContain('strict');\n\n    var adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n\n    this._linesContent.setTop(-adjustedScrollTop);\n\n    this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n  }; // --- width\n\n\n  ViewLines.prototype._ensureMaxLineWidth = function (lineWidth) {\n    var iLineWidth = Math.ceil(lineWidth);\n\n    if (this._maxLineWidth < iLineWidth) {\n      this._maxLineWidth = iLineWidth;\n\n      this._context.viewLayout.onMaxLineWidthChanged(this._maxLineWidth);\n    }\n  };\n\n  ViewLines.prototype._computeScrollTopToRevealRange = function (viewport, source, range, verticalType) {\n    var viewportStartY = viewport.top;\n    var viewportHeight = viewport.height;\n    var viewportEndY = viewportStartY + viewportHeight;\n    var boxStartY;\n    var boxEndY; // Have a box that includes one extra line height (for the horizontal scrollbar)\n\n    boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n    boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n    var shouldIgnoreScrollOff = source === 'mouse' && this._cursorSurroundingLinesStyle === 'default';\n\n    if (!shouldIgnoreScrollOff) {\n      var context = Math.min(viewportHeight / this._lineHeight / 2, this._cursorSurroundingLines);\n      boxStartY -= context * this._lineHeight;\n      boxEndY += Math.max(0, context - 1) * this._lineHeight;\n    }\n\n    if (verticalType === 0\n    /* Simple */\n    || verticalType === 4\n    /* Bottom */\n    ) {\n        // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n        boxEndY += this._lineHeight;\n      }\n\n    var newScrollTop;\n\n    if (boxEndY - boxStartY > viewportHeight) {\n      // the box is larger than the viewport ... scroll to its top\n      newScrollTop = boxStartY;\n    } else if (verticalType === 1\n    /* Center */\n    || verticalType === 2\n    /* CenterIfOutsideViewport */\n    ) {\n        if (verticalType === 2\n        /* CenterIfOutsideViewport */\n        && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n          // Box is already in the viewport... do nothing\n          newScrollTop = viewportStartY;\n        } else {\n          // Box is outside the viewport... center it\n          var boxMiddleY = (boxStartY + boxEndY) / 2;\n          newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n        }\n      } else {\n      newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3\n      /* Top */\n      , verticalType === 4\n      /* Bottom */\n      );\n    }\n\n    return newScrollTop;\n  };\n\n  ViewLines.prototype._computeScrollLeftToRevealRange = function (lineNumber, startColumn, endColumn) {\n    var maxHorizontalOffset = 0;\n\n    var viewport = this._context.viewLayout.getCurrentViewport();\n\n    var viewportStartX = viewport.left;\n    var viewportEndX = viewportStartX + viewport.width;\n\n    var visibleRanges = this._visibleRangesForLineRange(lineNumber, startColumn, endColumn);\n\n    var boxStartX = 1073741824\n    /* MAX_SAFE_SMALL_INTEGER */\n    ;\n    var boxEndX = 0;\n\n    if (!visibleRanges) {\n      // Unknown\n      return {\n        scrollLeft: viewportStartX,\n        maxHorizontalOffset: maxHorizontalOffset\n      };\n    }\n\n    for (var _i = 0, _a = visibleRanges.ranges; _i < _a.length; _i++) {\n      var visibleRange = _a[_i];\n\n      if (visibleRange.left < boxStartX) {\n        boxStartX = visibleRange.left;\n      }\n\n      if (visibleRange.left + visibleRange.width > boxEndX) {\n        boxEndX = visibleRange.left + visibleRange.width;\n      }\n    }\n\n    maxHorizontalOffset = boxEndX;\n    boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n    boxEndX += this._revealHorizontalRightPadding;\n\n    var newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n\n    return {\n      scrollLeft: newScrollLeft,\n      maxHorizontalOffset: maxHorizontalOffset\n    };\n  };\n\n  ViewLines.prototype._computeMinimumScrolling = function (viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\n    viewportStart = viewportStart | 0;\n    viewportEnd = viewportEnd | 0;\n    boxStart = boxStart | 0;\n    boxEnd = boxEnd | 0;\n    revealAtStart = !!revealAtStart;\n    revealAtEnd = !!revealAtEnd;\n    var viewportLength = viewportEnd - viewportStart;\n    var boxLength = boxEnd - boxStart;\n\n    if (boxLength < viewportLength) {\n      // The box would fit in the viewport\n      if (revealAtStart) {\n        return boxStart;\n      }\n\n      if (revealAtEnd) {\n        return Math.max(0, boxEnd - viewportLength);\n      }\n\n      if (boxStart < viewportStart) {\n        // The box is above the viewport\n        return boxStart;\n      } else if (boxEnd > viewportEnd) {\n        // The box is below the viewport\n        return Math.max(0, boxEnd - viewportLength);\n      }\n    } else {\n      // The box would not fit in the viewport\n      // Reveal the beginning of the box\n      return boxStart;\n    }\n\n    return viewportStart;\n  };\n  /**\r\n   * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\r\n   */\n\n\n  ViewLines.HORIZONTAL_EXTRA_PX = 30;\n  return ViewLines;\n}(ViewPart);\n\nexport { ViewLines };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLines.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","RunOnceScheduler","Configuration","VisibleLinesCollection","PartFingerprints","ViewPart","DomReadingContext","ViewLine","ViewLineOptions","Position","Range","LineVisibleRanges","HorizontalPosition","LastRenderedData","_currentVisibleRange","getCurrentVisibleRange","setCurrentVisibleRange","currentVisibleRange","HorizontalRevealRequest","lineNumber","startColumn","endColumn","startScrollTop","stopScrollTop","scrollType","ViewLines","_super","context","linesContent","_this","call","_linesContent","_textRangeRestingSpot","document","createElement","_visibleLines","domNode","conf","_context","configuration","options","fontInfo","get","wrappingInfo","_lineHeight","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_isViewportWrapping","isViewportWrapping","_revealHorizontalRightPadding","_cursorSurroundingLines","_cursorSurroundingLinesStyle","_canUseLayerHinting","_viewLineOptions","theme","type","write","setClassName","applyFontInfo","_maxLineWidth","_asyncUpdateLineWidths","_updateLineWidthsSlow","_lastRenderedData","_horizontalRevealRequest","dispose","getDomNode","createVisibleLine","onConfigurationChanged","e","hasChanged","_onOptionsMaybeChanged","newViewLineOptions","equals","startLineNumber","getStartLineNumber","endLineNumber","getEndLineNumber","line","getVisibleLine","onOptionsChanged","onCursorStateChanged","rendStartLineNumber","rendEndLineNumber","r","onSelectionChanged","onDecorationsChanged","onFlushed","shouldRender","onLinesChanged","onLinesDeleted","onLinesInserted","onRevealRangeRequest","desiredScrollTop","_computeScrollTopToRevealRange","viewLayout","getFutureViewport","source","range","verticalType","newScrollPosition","validateScrollPosition","scrollTop","revealHorizontal","scrollLeft","getCurrentScrollTop","scrollTopDelta","Math","abs","setScrollPositionSmooth","setScrollPositionNow","onScrollChanged","scrollLeftChanged","scrollTopChanged","min","max","setWidth","scrollWidth","onTokensChanged","onZonesChanged","onMaxLineWidthChanged","onThemeChanged","getPositionFromDOMInfo","spanNode","offset","viewLineDomNode","_getViewLineDomNode","_getLineNumberFor","model","getLineCount","getLineMaxColumn","column","getColumnOfNodeOffset","minColumn","getLineMinColumn","node","nodeType","className","CLASS_NAME","parentElement","getLineWidth","getWidth","linesVisibleRangesForRange","_range","includeNewLines","originalEndLineNumber","intersectRanges","visibleRanges","visibleRangesLen","domReadingContext","nextLineModelLineNumber","coordinatesConverter","convertViewPositionToModelPosition","visibleRangesForLine","getVisibleRangesForRange","currentLineModelLineNumber","ranges","length","width","outsideRenderedLine","_visibleRangesForLineRange","visibleRangeForPosition","position","left","updateLineWidths","_updateLineWidths","_updateLineWidthsFast","fast","localMaxLineWidth","allWidthsComputed","visibleLine","getWidthIsFast","_ensureMaxLineWidth","prepareRender","Error","render","renderText","viewportData","renderLines","visibleRange","getScrollWidth","setHeight","getScrollHeight","revealLineNumber","revealStartColumn","revealEndColumn","onDidRender","newScrollLeft","_computeScrollLeftToRevealRange","maxHorizontalOffset","schedule","setLayerHinting","setContain","adjustedScrollTop","bigNumbersDelta","setTop","setLeft","getCurrentScrollLeft","lineWidth","iLineWidth","ceil","viewport","viewportStartY","top","viewportHeight","height","viewportEndY","boxStartY","boxEndY","getVerticalOffsetForLineNumber","shouldIgnoreScrollOff","newScrollTop","boxMiddleY","_computeMinimumScrolling","getCurrentViewport","viewportStartX","viewportEndX","boxStartX","boxEndX","_i","_a","HORIZONTAL_EXTRA_PX","viewportStart","viewportEnd","boxStart","boxEnd","revealAtStart","revealAtEnd","viewportLength","boxLength"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport './viewLines.css';\r\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\r\nimport { Configuration } from '../../config/configuration.js';\r\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\r\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\r\nimport { DomReadingContext, ViewLine, ViewLineOptions } from './viewLine.js';\r\nimport { Position } from '../../../common/core/position.js';\r\nimport { Range } from '../../../common/core/range.js';\r\nimport { LineVisibleRanges, HorizontalPosition } from '../../../common/view/renderingContext.js';\r\nvar LastRenderedData = /** @class */ (function () {\r\n    function LastRenderedData() {\r\n        this._currentVisibleRange = new Range(1, 1, 1, 1);\r\n    }\r\n    LastRenderedData.prototype.getCurrentVisibleRange = function () {\r\n        return this._currentVisibleRange;\r\n    };\r\n    LastRenderedData.prototype.setCurrentVisibleRange = function (currentVisibleRange) {\r\n        this._currentVisibleRange = currentVisibleRange;\r\n    };\r\n    return LastRenderedData;\r\n}());\r\nvar HorizontalRevealRequest = /** @class */ (function () {\r\n    function HorizontalRevealRequest(lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\r\n        this.lineNumber = lineNumber;\r\n        this.startColumn = startColumn;\r\n        this.endColumn = endColumn;\r\n        this.startScrollTop = startScrollTop;\r\n        this.stopScrollTop = stopScrollTop;\r\n        this.scrollType = scrollType;\r\n    }\r\n    return HorizontalRevealRequest;\r\n}());\r\nvar ViewLines = /** @class */ (function (_super) {\r\n    __extends(ViewLines, _super);\r\n    function ViewLines(context, linesContent) {\r\n        var _this = _super.call(this, context) || this;\r\n        _this._linesContent = linesContent;\r\n        _this._textRangeRestingSpot = document.createElement('div');\r\n        _this._visibleLines = new VisibleLinesCollection(_this);\r\n        _this.domNode = _this._visibleLines.domNode;\r\n        var conf = _this._context.configuration;\r\n        var options = _this._context.configuration.options;\r\n        var fontInfo = options.get(34 /* fontInfo */);\r\n        var wrappingInfo = options.get(108 /* wrappingInfo */);\r\n        _this._lineHeight = options.get(49 /* lineHeight */);\r\n        _this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\r\n        _this._isViewportWrapping = wrappingInfo.isViewportWrapping;\r\n        _this._revealHorizontalRightPadding = options.get(75 /* revealHorizontalRightPadding */);\r\n        _this._cursorSurroundingLines = options.get(19 /* cursorSurroundingLines */);\r\n        _this._cursorSurroundingLinesStyle = options.get(20 /* cursorSurroundingLinesStyle */);\r\n        _this._canUseLayerHinting = !options.get(22 /* disableLayerHinting */);\r\n        _this._viewLineOptions = new ViewLineOptions(conf, _this._context.theme.type);\r\n        PartFingerprints.write(_this.domNode, 7 /* ViewLines */);\r\n        _this.domNode.setClassName('view-lines');\r\n        Configuration.applyFontInfo(_this.domNode, fontInfo);\r\n        // --- width & height\r\n        _this._maxLineWidth = 0;\r\n        _this._asyncUpdateLineWidths = new RunOnceScheduler(function () {\r\n            _this._updateLineWidthsSlow();\r\n        }, 200);\r\n        _this._lastRenderedData = new LastRenderedData();\r\n        _this._horizontalRevealRequest = null;\r\n        return _this;\r\n    }\r\n    ViewLines.prototype.dispose = function () {\r\n        this._asyncUpdateLineWidths.dispose();\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    ViewLines.prototype.getDomNode = function () {\r\n        return this.domNode;\r\n    };\r\n    // ---- begin IVisibleLinesHost\r\n    ViewLines.prototype.createVisibleLine = function () {\r\n        return new ViewLine(this._viewLineOptions);\r\n    };\r\n    // ---- end IVisibleLinesHost\r\n    // ---- begin view event handlers\r\n    ViewLines.prototype.onConfigurationChanged = function (e) {\r\n        this._visibleLines.onConfigurationChanged(e);\r\n        if (e.hasChanged(108 /* wrappingInfo */)) {\r\n            this._maxLineWidth = 0;\r\n        }\r\n        var options = this._context.configuration.options;\r\n        var fontInfo = options.get(34 /* fontInfo */);\r\n        var wrappingInfo = options.get(108 /* wrappingInfo */);\r\n        this._lineHeight = options.get(49 /* lineHeight */);\r\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\r\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\r\n        this._revealHorizontalRightPadding = options.get(75 /* revealHorizontalRightPadding */);\r\n        this._cursorSurroundingLines = options.get(19 /* cursorSurroundingLines */);\r\n        this._cursorSurroundingLinesStyle = options.get(20 /* cursorSurroundingLinesStyle */);\r\n        this._canUseLayerHinting = !options.get(22 /* disableLayerHinting */);\r\n        Configuration.applyFontInfo(this.domNode, fontInfo);\r\n        this._onOptionsMaybeChanged();\r\n        if (e.hasChanged(107 /* layoutInfo */)) {\r\n            this._maxLineWidth = 0;\r\n        }\r\n        return true;\r\n    };\r\n    ViewLines.prototype._onOptionsMaybeChanged = function () {\r\n        var conf = this._context.configuration;\r\n        var newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\r\n        if (!this._viewLineOptions.equals(newViewLineOptions)) {\r\n            this._viewLineOptions = newViewLineOptions;\r\n            var startLineNumber = this._visibleLines.getStartLineNumber();\r\n            var endLineNumber = this._visibleLines.getEndLineNumber();\r\n            for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n                var line = this._visibleLines.getVisibleLine(lineNumber);\r\n                line.onOptionsChanged(this._viewLineOptions);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ViewLines.prototype.onCursorStateChanged = function (e) {\r\n        var rendStartLineNumber = this._visibleLines.getStartLineNumber();\r\n        var rendEndLineNumber = this._visibleLines.getEndLineNumber();\r\n        var r = false;\r\n        for (var lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\r\n            r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\r\n        }\r\n        return r;\r\n    };\r\n    ViewLines.prototype.onDecorationsChanged = function (e) {\r\n        if (true /*e.inlineDecorationsChanged*/) {\r\n            var rendStartLineNumber = this._visibleLines.getStartLineNumber();\r\n            var rendEndLineNumber = this._visibleLines.getEndLineNumber();\r\n            for (var lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\r\n                this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    ViewLines.prototype.onFlushed = function (e) {\r\n        var shouldRender = this._visibleLines.onFlushed(e);\r\n        this._maxLineWidth = 0;\r\n        return shouldRender;\r\n    };\r\n    ViewLines.prototype.onLinesChanged = function (e) {\r\n        return this._visibleLines.onLinesChanged(e);\r\n    };\r\n    ViewLines.prototype.onLinesDeleted = function (e) {\r\n        return this._visibleLines.onLinesDeleted(e);\r\n    };\r\n    ViewLines.prototype.onLinesInserted = function (e) {\r\n        return this._visibleLines.onLinesInserted(e);\r\n    };\r\n    ViewLines.prototype.onRevealRangeRequest = function (e) {\r\n        // Using the future viewport here in order to handle multiple\r\n        // incoming reveal range requests that might all desire to be animated\r\n        var desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.range, e.verticalType);\r\n        // validate the new desired scroll top\r\n        var newScrollPosition = this._context.viewLayout.validateScrollPosition({ scrollTop: desiredScrollTop });\r\n        if (e.revealHorizontal) {\r\n            if (e.range.startLineNumber !== e.range.endLineNumber) {\r\n                // Two or more lines? => scroll to base (That's how you see most of the two lines)\r\n                newScrollPosition = {\r\n                    scrollTop: newScrollPosition.scrollTop,\r\n                    scrollLeft: 0\r\n                };\r\n            }\r\n            else {\r\n                // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\r\n                this._horizontalRevealRequest = new HorizontalRevealRequest(e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\r\n            }\r\n        }\r\n        else {\r\n            this._horizontalRevealRequest = null;\r\n        }\r\n        var scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\r\n        if (e.scrollType === 0 /* Smooth */ && scrollTopDelta > this._lineHeight) {\r\n            this._context.viewLayout.setScrollPositionSmooth(newScrollPosition);\r\n        }\r\n        else {\r\n            this._context.viewLayout.setScrollPositionNow(newScrollPosition);\r\n        }\r\n        return true;\r\n    };\r\n    ViewLines.prototype.onScrollChanged = function (e) {\r\n        if (this._horizontalRevealRequest && e.scrollLeftChanged) {\r\n            // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\r\n            this._horizontalRevealRequest = null;\r\n        }\r\n        if (this._horizontalRevealRequest && e.scrollTopChanged) {\r\n            var min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\r\n            var max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\r\n            if (e.scrollTop < min || e.scrollTop > max) {\r\n                // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\r\n                this._horizontalRevealRequest = null;\r\n            }\r\n        }\r\n        this.domNode.setWidth(e.scrollWidth);\r\n        return this._visibleLines.onScrollChanged(e) || true;\r\n    };\r\n    ViewLines.prototype.onTokensChanged = function (e) {\r\n        return this._visibleLines.onTokensChanged(e);\r\n    };\r\n    ViewLines.prototype.onZonesChanged = function (e) {\r\n        this._context.viewLayout.onMaxLineWidthChanged(this._maxLineWidth);\r\n        return this._visibleLines.onZonesChanged(e);\r\n    };\r\n    ViewLines.prototype.onThemeChanged = function (e) {\r\n        return this._onOptionsMaybeChanged();\r\n    };\r\n    // ---- end view event handlers\r\n    // ----------- HELPERS FOR OTHERS\r\n    ViewLines.prototype.getPositionFromDOMInfo = function (spanNode, offset) {\r\n        var viewLineDomNode = this._getViewLineDomNode(spanNode);\r\n        if (viewLineDomNode === null) {\r\n            // Couldn't find view line node\r\n            return null;\r\n        }\r\n        var lineNumber = this._getLineNumberFor(viewLineDomNode);\r\n        if (lineNumber === -1) {\r\n            // Couldn't find view line node\r\n            return null;\r\n        }\r\n        if (lineNumber < 1 || lineNumber > this._context.model.getLineCount()) {\r\n            // lineNumber is outside range\r\n            return null;\r\n        }\r\n        if (this._context.model.getLineMaxColumn(lineNumber) === 1) {\r\n            // Line is empty\r\n            return new Position(lineNumber, 1);\r\n        }\r\n        var rendStartLineNumber = this._visibleLines.getStartLineNumber();\r\n        var rendEndLineNumber = this._visibleLines.getEndLineNumber();\r\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\r\n            // Couldn't find line\r\n            return null;\r\n        }\r\n        var column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(lineNumber, spanNode, offset);\r\n        var minColumn = this._context.model.getLineMinColumn(lineNumber);\r\n        if (column < minColumn) {\r\n            column = minColumn;\r\n        }\r\n        return new Position(lineNumber, column);\r\n    };\r\n    ViewLines.prototype._getViewLineDomNode = function (node) {\r\n        while (node && node.nodeType === 1) {\r\n            if (node.className === ViewLine.CLASS_NAME) {\r\n                return node;\r\n            }\r\n            node = node.parentElement;\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @returns the line number of this view line dom node.\r\n     */\r\n    ViewLines.prototype._getLineNumberFor = function (domNode) {\r\n        var startLineNumber = this._visibleLines.getStartLineNumber();\r\n        var endLineNumber = this._visibleLines.getEndLineNumber();\r\n        for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n            var line = this._visibleLines.getVisibleLine(lineNumber);\r\n            if (domNode === line.getDomNode()) {\r\n                return lineNumber;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    ViewLines.prototype.getLineWidth = function (lineNumber) {\r\n        var rendStartLineNumber = this._visibleLines.getStartLineNumber();\r\n        var rendEndLineNumber = this._visibleLines.getEndLineNumber();\r\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\r\n            // Couldn't find line\r\n            return -1;\r\n        }\r\n        return this._visibleLines.getVisibleLine(lineNumber).getWidth();\r\n    };\r\n    ViewLines.prototype.linesVisibleRangesForRange = function (_range, includeNewLines) {\r\n        if (this.shouldRender()) {\r\n            // Cannot read from the DOM because it is dirty\r\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\r\n            return null;\r\n        }\r\n        var originalEndLineNumber = _range.endLineNumber;\r\n        var range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\r\n        if (!range) {\r\n            return null;\r\n        }\r\n        var visibleRanges = [], visibleRangesLen = 0;\r\n        var domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\r\n        var nextLineModelLineNumber = 0;\r\n        if (includeNewLines) {\r\n            nextLineModelLineNumber = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\r\n        }\r\n        var rendStartLineNumber = this._visibleLines.getStartLineNumber();\r\n        var rendEndLineNumber = this._visibleLines.getEndLineNumber();\r\n        for (var lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\r\n            if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\r\n                continue;\r\n            }\r\n            var startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\r\n            var endColumn = lineNumber === range.endLineNumber ? range.endColumn : this._context.model.getLineMaxColumn(lineNumber);\r\n            var visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(startColumn, endColumn, domReadingContext);\r\n            if (!visibleRangesForLine) {\r\n                continue;\r\n            }\r\n            if (includeNewLines && lineNumber < originalEndLineNumber) {\r\n                var currentLineModelLineNumber = nextLineModelLineNumber;\r\n                nextLineModelLineNumber = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\r\n                if (currentLineModelLineNumber !== nextLineModelLineNumber) {\r\n                    visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\r\n                }\r\n            }\r\n            visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, visibleRangesForLine.ranges);\r\n        }\r\n        if (visibleRangesLen === 0) {\r\n            return null;\r\n        }\r\n        return visibleRanges;\r\n    };\r\n    ViewLines.prototype._visibleRangesForLineRange = function (lineNumber, startColumn, endColumn) {\r\n        if (this.shouldRender()) {\r\n            // Cannot read from the DOM because it is dirty\r\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\r\n            return null;\r\n        }\r\n        if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\r\n            return null;\r\n        }\r\n        return this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(startColumn, endColumn, new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot));\r\n    };\r\n    ViewLines.prototype.visibleRangeForPosition = function (position) {\r\n        var visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\r\n        if (!visibleRanges) {\r\n            return null;\r\n        }\r\n        return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\r\n    };\r\n    // --- implementation\r\n    ViewLines.prototype.updateLineWidths = function () {\r\n        this._updateLineWidths(false);\r\n    };\r\n    /**\r\n     * Updates the max line width if it is fast to compute.\r\n     * Returns true if all lines were taken into account.\r\n     * Returns false if some lines need to be reevaluated (in a slow fashion).\r\n     */\r\n    ViewLines.prototype._updateLineWidthsFast = function () {\r\n        return this._updateLineWidths(true);\r\n    };\r\n    ViewLines.prototype._updateLineWidthsSlow = function () {\r\n        this._updateLineWidths(false);\r\n    };\r\n    ViewLines.prototype._updateLineWidths = function (fast) {\r\n        var rendStartLineNumber = this._visibleLines.getStartLineNumber();\r\n        var rendEndLineNumber = this._visibleLines.getEndLineNumber();\r\n        var localMaxLineWidth = 1;\r\n        var allWidthsComputed = true;\r\n        for (var lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\r\n            var visibleLine = this._visibleLines.getVisibleLine(lineNumber);\r\n            if (fast && !visibleLine.getWidthIsFast()) {\r\n                // Cannot compute width in a fast way for this line\r\n                allWidthsComputed = false;\r\n                continue;\r\n            }\r\n            localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth());\r\n        }\r\n        if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.model.getLineCount()) {\r\n            // we know the max line width for all the lines\r\n            this._maxLineWidth = 0;\r\n        }\r\n        this._ensureMaxLineWidth(localMaxLineWidth);\r\n        return allWidthsComputed;\r\n    };\r\n    ViewLines.prototype.prepareRender = function () {\r\n        throw new Error('Not supported');\r\n    };\r\n    ViewLines.prototype.render = function () {\r\n        throw new Error('Not supported');\r\n    };\r\n    ViewLines.prototype.renderText = function (viewportData) {\r\n        // (1) render lines - ensures lines are in the DOM\r\n        this._visibleLines.renderLines(viewportData);\r\n        this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\r\n        this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\r\n        this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\r\n        // (2) compute horizontal scroll position:\r\n        //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\r\n        //  - it might change `scrollWidth` and `scrollLeft`\r\n        if (this._horizontalRevealRequest) {\r\n            var revealLineNumber = this._horizontalRevealRequest.lineNumber;\r\n            var revealStartColumn = this._horizontalRevealRequest.startColumn;\r\n            var revealEndColumn = this._horizontalRevealRequest.endColumn;\r\n            var scrollType = this._horizontalRevealRequest.scrollType;\r\n            // Check that we have the line that contains the horizontal range in the viewport\r\n            if (viewportData.startLineNumber <= revealLineNumber && revealLineNumber <= viewportData.endLineNumber) {\r\n                this._horizontalRevealRequest = null;\r\n                // allow `visibleRangesForRange2` to work\r\n                this.onDidRender();\r\n                // compute new scroll position\r\n                var newScrollLeft = this._computeScrollLeftToRevealRange(revealLineNumber, revealStartColumn, revealEndColumn);\r\n                var isViewportWrapping = this._isViewportWrapping;\r\n                if (!isViewportWrapping) {\r\n                    // ensure `scrollWidth` is large enough\r\n                    this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\r\n                }\r\n                // set `scrollLeft`\r\n                if (scrollType === 0 /* Smooth */) {\r\n                    this._context.viewLayout.setScrollPositionSmooth({\r\n                        scrollLeft: newScrollLeft.scrollLeft\r\n                    });\r\n                }\r\n                else {\r\n                    this._context.viewLayout.setScrollPositionNow({\r\n                        scrollLeft: newScrollLeft.scrollLeft\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\r\n        if (!this._updateLineWidthsFast()) {\r\n            // Computing the width of some lines would be slow => delay it\r\n            this._asyncUpdateLineWidths.schedule();\r\n        }\r\n        // (3) handle scrolling\r\n        this._linesContent.setLayerHinting(this._canUseLayerHinting);\r\n        this._linesContent.setContain('strict');\r\n        var adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\r\n        this._linesContent.setTop(-adjustedScrollTop);\r\n        this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\r\n    };\r\n    // --- width\r\n    ViewLines.prototype._ensureMaxLineWidth = function (lineWidth) {\r\n        var iLineWidth = Math.ceil(lineWidth);\r\n        if (this._maxLineWidth < iLineWidth) {\r\n            this._maxLineWidth = iLineWidth;\r\n            this._context.viewLayout.onMaxLineWidthChanged(this._maxLineWidth);\r\n        }\r\n    };\r\n    ViewLines.prototype._computeScrollTopToRevealRange = function (viewport, source, range, verticalType) {\r\n        var viewportStartY = viewport.top;\r\n        var viewportHeight = viewport.height;\r\n        var viewportEndY = viewportStartY + viewportHeight;\r\n        var boxStartY;\r\n        var boxEndY;\r\n        // Have a box that includes one extra line height (for the horizontal scrollbar)\r\n        boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\r\n        boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\r\n        var shouldIgnoreScrollOff = source === 'mouse' && this._cursorSurroundingLinesStyle === 'default';\r\n        if (!shouldIgnoreScrollOff) {\r\n            var context = Math.min((viewportHeight / this._lineHeight) / 2, this._cursorSurroundingLines);\r\n            boxStartY -= context * this._lineHeight;\r\n            boxEndY += Math.max(0, (context - 1)) * this._lineHeight;\r\n        }\r\n        if (verticalType === 0 /* Simple */ || verticalType === 4 /* Bottom */) {\r\n            // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\r\n            boxEndY += this._lineHeight;\r\n        }\r\n        var newScrollTop;\r\n        if (boxEndY - boxStartY > viewportHeight) {\r\n            // the box is larger than the viewport ... scroll to its top\r\n            newScrollTop = boxStartY;\r\n        }\r\n        else if (verticalType === 1 /* Center */ || verticalType === 2 /* CenterIfOutsideViewport */) {\r\n            if (verticalType === 2 /* CenterIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\r\n                // Box is already in the viewport... do nothing\r\n                newScrollTop = viewportStartY;\r\n            }\r\n            else {\r\n                // Box is outside the viewport... center it\r\n                var boxMiddleY = (boxStartY + boxEndY) / 2;\r\n                newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\r\n            }\r\n        }\r\n        else {\r\n            newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3 /* Top */, verticalType === 4 /* Bottom */);\r\n        }\r\n        return newScrollTop;\r\n    };\r\n    ViewLines.prototype._computeScrollLeftToRevealRange = function (lineNumber, startColumn, endColumn) {\r\n        var maxHorizontalOffset = 0;\r\n        var viewport = this._context.viewLayout.getCurrentViewport();\r\n        var viewportStartX = viewport.left;\r\n        var viewportEndX = viewportStartX + viewport.width;\r\n        var visibleRanges = this._visibleRangesForLineRange(lineNumber, startColumn, endColumn);\r\n        var boxStartX = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\r\n        var boxEndX = 0;\r\n        if (!visibleRanges) {\r\n            // Unknown\r\n            return {\r\n                scrollLeft: viewportStartX,\r\n                maxHorizontalOffset: maxHorizontalOffset\r\n            };\r\n        }\r\n        for (var _i = 0, _a = visibleRanges.ranges; _i < _a.length; _i++) {\r\n            var visibleRange = _a[_i];\r\n            if (visibleRange.left < boxStartX) {\r\n                boxStartX = visibleRange.left;\r\n            }\r\n            if (visibleRange.left + visibleRange.width > boxEndX) {\r\n                boxEndX = visibleRange.left + visibleRange.width;\r\n            }\r\n        }\r\n        maxHorizontalOffset = boxEndX;\r\n        boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\r\n        boxEndX += this._revealHorizontalRightPadding;\r\n        var newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\r\n        return {\r\n            scrollLeft: newScrollLeft,\r\n            maxHorizontalOffset: maxHorizontalOffset\r\n        };\r\n    };\r\n    ViewLines.prototype._computeMinimumScrolling = function (viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\r\n        viewportStart = viewportStart | 0;\r\n        viewportEnd = viewportEnd | 0;\r\n        boxStart = boxStart | 0;\r\n        boxEnd = boxEnd | 0;\r\n        revealAtStart = !!revealAtStart;\r\n        revealAtEnd = !!revealAtEnd;\r\n        var viewportLength = viewportEnd - viewportStart;\r\n        var boxLength = boxEnd - boxStart;\r\n        if (boxLength < viewportLength) {\r\n            // The box would fit in the viewport\r\n            if (revealAtStart) {\r\n                return boxStart;\r\n            }\r\n            if (revealAtEnd) {\r\n                return Math.max(0, boxEnd - viewportLength);\r\n            }\r\n            if (boxStart < viewportStart) {\r\n                // The box is above the viewport\r\n                return boxStart;\r\n            }\r\n            else if (boxEnd > viewportEnd) {\r\n                // The box is below the viewport\r\n                return Math.max(0, boxEnd - viewportLength);\r\n            }\r\n        }\r\n        else {\r\n            // The box would not fit in the viewport\r\n            // Reveal the beginning of the box\r\n            return boxStart;\r\n        }\r\n        return viewportStart;\r\n    };\r\n    /**\r\n     * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\r\n     */\r\n    ViewLines.HORIZONTAL_EXTRA_PX = 30;\r\n    return ViewLines;\r\n}(ViewPart));\r\nexport { ViewLines };\r\n"]},"metadata":{},"sourceType":"module"}