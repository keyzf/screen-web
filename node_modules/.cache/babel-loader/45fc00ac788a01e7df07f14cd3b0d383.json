{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Registry } from '../../registry/common/platform.js';\nimport * as types from '../../../base/common/types.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { values } from '../../../base/common/map.js';\nexport var Extensions = {\n  Configuration: 'base.contributions.configuration'\n};\nexport var allSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var applicationSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var machineSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var machineOverridableSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var windowSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var resourceSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nvar contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\n\nvar ConfigurationRegistry =\n/** @class */\nfunction () {\n  function ConfigurationRegistry() {\n    this.overrideIdentifiers = new Set();\n    this._onDidSchemaChange = new Emitter();\n    this._onDidUpdateConfiguration = new Emitter();\n    this.defaultOverridesConfigurationNode = {\n      id: 'defaultOverrides',\n      title: nls.localize('defaultConfigurations.title', \"Default Configuration Overrides\"),\n      properties: {}\n    };\n    this.configurationContributors = [this.defaultOverridesConfigurationNode];\n    this.resourceLanguageSettingsSchema = {\n      properties: {},\n      patternProperties: {},\n      additionalProperties: false,\n      errorMessage: 'Unknown editor configuration setting',\n      allowTrailingCommas: true,\n      allowComments: true\n    };\n    this.configurationProperties = {};\n    this.excludedConfigurationProperties = {};\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n  }\n\n  ConfigurationRegistry.prototype.registerConfiguration = function (configuration, validate) {\n    if (validate === void 0) {\n      validate = true;\n    }\n\n    this.registerConfigurations([configuration], validate);\n  };\n\n  ConfigurationRegistry.prototype.registerConfigurations = function (configurations, validate) {\n    var _this = this;\n\n    if (validate === void 0) {\n      validate = true;\n    }\n\n    var properties = [];\n    configurations.forEach(function (configuration) {\n      properties.push.apply(properties, _this.validateAndRegisterProperties(configuration, validate)); // fills in defaults\n\n      _this.configurationContributors.push(configuration);\n\n      _this.registerJSONConfiguration(configuration);\n    });\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\n    this._onDidSchemaChange.fire();\n\n    this._onDidUpdateConfiguration.fire(properties);\n  };\n\n  ConfigurationRegistry.prototype.registerOverrideIdentifiers = function (overrideIdentifiers) {\n    for (var _i = 0, overrideIdentifiers_1 = overrideIdentifiers; _i < overrideIdentifiers_1.length; _i++) {\n      var overrideIdentifier = overrideIdentifiers_1[_i];\n      this.overrideIdentifiers.add(overrideIdentifier);\n    }\n\n    this.updateOverridePropertyPatternKey();\n  };\n\n  ConfigurationRegistry.prototype.validateAndRegisterProperties = function (configuration, validate, scope) {\n    if (validate === void 0) {\n      validate = true;\n    }\n\n    if (scope === void 0) {\n      scope = 3\n      /* WINDOW */\n      ;\n    }\n\n    scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n    var propertyKeys = [];\n    var properties = configuration.properties;\n\n    if (properties) {\n      for (var key in properties) {\n        if (validate && validateProperty(key)) {\n          delete properties[key];\n          continue;\n        } // fill in default values\n\n\n        var property = properties[key];\n        var defaultValue = property.default;\n\n        if (types.isUndefined(defaultValue)) {\n          property.default = getDefaultValue(property.type);\n        }\n\n        if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n          property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n        } else {\n          property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n        } // Add to properties maps\n        // Property is included by default if 'included' is unspecified\n\n\n        if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n          this.excludedConfigurationProperties[key] = properties[key];\n          delete properties[key];\n          continue;\n        } else {\n          this.configurationProperties[key] = properties[key];\n        }\n\n        propertyKeys.push(key);\n      }\n    }\n\n    var subNodes = configuration.allOf;\n\n    if (subNodes) {\n      for (var _i = 0, subNodes_1 = subNodes; _i < subNodes_1.length; _i++) {\n        var node = subNodes_1[_i];\n        propertyKeys.push.apply(propertyKeys, this.validateAndRegisterProperties(node, validate, scope));\n      }\n    }\n\n    return propertyKeys;\n  };\n\n  ConfigurationRegistry.prototype.getConfigurationProperties = function () {\n    return this.configurationProperties;\n  };\n\n  ConfigurationRegistry.prototype.registerJSONConfiguration = function (configuration) {\n    var _this = this;\n\n    var register = function (configuration) {\n      var properties = configuration.properties;\n\n      if (properties) {\n        for (var key in properties) {\n          allSettings.properties[key] = properties[key];\n\n          switch (properties[key].scope) {\n            case 1\n            /* APPLICATION */\n            :\n              applicationSettings.properties[key] = properties[key];\n              break;\n\n            case 2\n            /* MACHINE */\n            :\n              machineSettings.properties[key] = properties[key];\n              break;\n\n            case 6\n            /* MACHINE_OVERRIDABLE */\n            :\n              machineOverridableSettings.properties[key] = properties[key];\n              break;\n\n            case 3\n            /* WINDOW */\n            :\n              windowSettings.properties[key] = properties[key];\n              break;\n\n            case 4\n            /* RESOURCE */\n            :\n              resourceSettings.properties[key] = properties[key];\n              break;\n\n            case 5\n            /* LANGUAGE_OVERRIDABLE */\n            :\n              resourceSettings.properties[key] = properties[key];\n              _this.resourceLanguageSettingsSchema.properties[key] = properties[key];\n              break;\n          }\n        }\n      }\n\n      var subNodes = configuration.allOf;\n\n      if (subNodes) {\n        subNodes.forEach(register);\n      }\n    };\n\n    register(configuration);\n  };\n\n  ConfigurationRegistry.prototype.updateOverridePropertyPatternKey = function () {\n    var _a;\n\n    for (var _i = 0, _b = values(this.overrideIdentifiers); _i < _b.length; _i++) {\n      var overrideIdentifier = _b[_i];\n      var overrideIdentifierProperty = \"[\" + overrideIdentifier + \"]\";\n      var resourceLanguagePropertiesSchema = {\n        type: 'object',\n        description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n        errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n        $ref: resourceLanguageSettingsSchemaId,\n        default: (_a = this.defaultOverridesConfigurationNode.properties[overrideIdentifierProperty]) === null || _a === void 0 ? void 0 : _a.default\n      };\n      allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n    }\n\n    this._onDidSchemaChange.fire();\n  };\n\n  return ConfigurationRegistry;\n}();\n\nvar OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\nexport var OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\nexport function getDefaultValue(type) {\n  var t = Array.isArray(type) ? type[0] : type;\n\n  switch (t) {\n    case 'boolean':\n      return false;\n\n    case 'integer':\n    case 'number':\n      return 0;\n\n    case 'string':\n      return '';\n\n    case 'array':\n      return [];\n\n    case 'object':\n      return {};\n\n    default:\n      return null;\n  }\n}\nvar configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property) {\n  if (OVERRIDE_PROPERTY_PATTERN.test(property)) {\n    return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n  }\n\n  if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n    return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js"],"names":["nls","Emitter","Registry","types","Extensions","JSONExtensions","values","Configuration","allSettings","properties","patternProperties","applicationSettings","machineSettings","machineOverridableSettings","windowSettings","resourceSettings","resourceLanguageSettingsSchemaId","contributionRegistry","as","JSONContribution","ConfigurationRegistry","overrideIdentifiers","Set","_onDidSchemaChange","_onDidUpdateConfiguration","defaultOverridesConfigurationNode","id","title","localize","configurationContributors","resourceLanguageSettingsSchema","additionalProperties","errorMessage","allowTrailingCommas","allowComments","configurationProperties","excludedConfigurationProperties","registerSchema","prototype","registerConfiguration","configuration","validate","registerConfigurations","configurations","_this","forEach","push","apply","validateAndRegisterProperties","registerJSONConfiguration","fire","registerOverrideIdentifiers","_i","overrideIdentifiers_1","length","overrideIdentifier","add","updateOverridePropertyPatternKey","scope","isUndefinedOrNull","propertyKeys","key","validateProperty","property","defaultValue","default","isUndefined","getDefaultValue","type","OVERRIDE_PROPERTY_PATTERN","test","undefined","hasOwnProperty","included","subNodes","allOf","subNodes_1","node","getConfigurationProperties","register","_a","_b","overrideIdentifierProperty","resourceLanguagePropertiesSchema","description","$ref","OVERRIDE_PROPERTY","RegExp","t","Array","isArray","configurationRegistry"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Registry } from '../../registry/common/platform.js';\r\nimport * as types from '../../../base/common/types.js';\r\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\r\nimport { values } from '../../../base/common/map.js';\r\nexport var Extensions = {\r\n    Configuration: 'base.contributions.configuration'\r\n};\r\nexport var allSettings = { properties: {}, patternProperties: {} };\r\nexport var applicationSettings = { properties: {}, patternProperties: {} };\r\nexport var machineSettings = { properties: {}, patternProperties: {} };\r\nexport var machineOverridableSettings = { properties: {}, patternProperties: {} };\r\nexport var windowSettings = { properties: {}, patternProperties: {} };\r\nexport var resourceSettings = { properties: {}, patternProperties: {} };\r\nexport var resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\r\nvar contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\r\nvar ConfigurationRegistry = /** @class */ (function () {\r\n    function ConfigurationRegistry() {\r\n        this.overrideIdentifiers = new Set();\r\n        this._onDidSchemaChange = new Emitter();\r\n        this._onDidUpdateConfiguration = new Emitter();\r\n        this.defaultOverridesConfigurationNode = {\r\n            id: 'defaultOverrides',\r\n            title: nls.localize('defaultConfigurations.title', \"Default Configuration Overrides\"),\r\n            properties: {}\r\n        };\r\n        this.configurationContributors = [this.defaultOverridesConfigurationNode];\r\n        this.resourceLanguageSettingsSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown editor configuration setting', allowTrailingCommas: true, allowComments: true };\r\n        this.configurationProperties = {};\r\n        this.excludedConfigurationProperties = {};\r\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\r\n    }\r\n    ConfigurationRegistry.prototype.registerConfiguration = function (configuration, validate) {\r\n        if (validate === void 0) { validate = true; }\r\n        this.registerConfigurations([configuration], validate);\r\n    };\r\n    ConfigurationRegistry.prototype.registerConfigurations = function (configurations, validate) {\r\n        var _this = this;\r\n        if (validate === void 0) { validate = true; }\r\n        var properties = [];\r\n        configurations.forEach(function (configuration) {\r\n            properties.push.apply(properties, _this.validateAndRegisterProperties(configuration, validate)); // fills in defaults\r\n            _this.configurationContributors.push(configuration);\r\n            _this.registerJSONConfiguration(configuration);\r\n        });\r\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\r\n        this._onDidSchemaChange.fire();\r\n        this._onDidUpdateConfiguration.fire(properties);\r\n    };\r\n    ConfigurationRegistry.prototype.registerOverrideIdentifiers = function (overrideIdentifiers) {\r\n        for (var _i = 0, overrideIdentifiers_1 = overrideIdentifiers; _i < overrideIdentifiers_1.length; _i++) {\r\n            var overrideIdentifier = overrideIdentifiers_1[_i];\r\n            this.overrideIdentifiers.add(overrideIdentifier);\r\n        }\r\n        this.updateOverridePropertyPatternKey();\r\n    };\r\n    ConfigurationRegistry.prototype.validateAndRegisterProperties = function (configuration, validate, scope) {\r\n        if (validate === void 0) { validate = true; }\r\n        if (scope === void 0) { scope = 3 /* WINDOW */; }\r\n        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\r\n        var propertyKeys = [];\r\n        var properties = configuration.properties;\r\n        if (properties) {\r\n            for (var key in properties) {\r\n                if (validate && validateProperty(key)) {\r\n                    delete properties[key];\r\n                    continue;\r\n                }\r\n                // fill in default values\r\n                var property = properties[key];\r\n                var defaultValue = property.default;\r\n                if (types.isUndefined(defaultValue)) {\r\n                    property.default = getDefaultValue(property.type);\r\n                }\r\n                if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\r\n                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`\r\n                }\r\n                else {\r\n                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\r\n                }\r\n                // Add to properties maps\r\n                // Property is included by default if 'included' is unspecified\r\n                if (properties[key].hasOwnProperty('included') && !properties[key].included) {\r\n                    this.excludedConfigurationProperties[key] = properties[key];\r\n                    delete properties[key];\r\n                    continue;\r\n                }\r\n                else {\r\n                    this.configurationProperties[key] = properties[key];\r\n                }\r\n                propertyKeys.push(key);\r\n            }\r\n        }\r\n        var subNodes = configuration.allOf;\r\n        if (subNodes) {\r\n            for (var _i = 0, subNodes_1 = subNodes; _i < subNodes_1.length; _i++) {\r\n                var node = subNodes_1[_i];\r\n                propertyKeys.push.apply(propertyKeys, this.validateAndRegisterProperties(node, validate, scope));\r\n            }\r\n        }\r\n        return propertyKeys;\r\n    };\r\n    ConfigurationRegistry.prototype.getConfigurationProperties = function () {\r\n        return this.configurationProperties;\r\n    };\r\n    ConfigurationRegistry.prototype.registerJSONConfiguration = function (configuration) {\r\n        var _this = this;\r\n        var register = function (configuration) {\r\n            var properties = configuration.properties;\r\n            if (properties) {\r\n                for (var key in properties) {\r\n                    allSettings.properties[key] = properties[key];\r\n                    switch (properties[key].scope) {\r\n                        case 1 /* APPLICATION */:\r\n                            applicationSettings.properties[key] = properties[key];\r\n                            break;\r\n                        case 2 /* MACHINE */:\r\n                            machineSettings.properties[key] = properties[key];\r\n                            break;\r\n                        case 6 /* MACHINE_OVERRIDABLE */:\r\n                            machineOverridableSettings.properties[key] = properties[key];\r\n                            break;\r\n                        case 3 /* WINDOW */:\r\n                            windowSettings.properties[key] = properties[key];\r\n                            break;\r\n                        case 4 /* RESOURCE */:\r\n                            resourceSettings.properties[key] = properties[key];\r\n                            break;\r\n                        case 5 /* LANGUAGE_OVERRIDABLE */:\r\n                            resourceSettings.properties[key] = properties[key];\r\n                            _this.resourceLanguageSettingsSchema.properties[key] = properties[key];\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            var subNodes = configuration.allOf;\r\n            if (subNodes) {\r\n                subNodes.forEach(register);\r\n            }\r\n        };\r\n        register(configuration);\r\n    };\r\n    ConfigurationRegistry.prototype.updateOverridePropertyPatternKey = function () {\r\n        var _a;\r\n        for (var _i = 0, _b = values(this.overrideIdentifiers); _i < _b.length; _i++) {\r\n            var overrideIdentifier = _b[_i];\r\n            var overrideIdentifierProperty = \"[\" + overrideIdentifier + \"]\";\r\n            var resourceLanguagePropertiesSchema = {\r\n                type: 'object',\r\n                description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\r\n                errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\r\n                $ref: resourceLanguageSettingsSchemaId,\r\n                default: (_a = this.defaultOverridesConfigurationNode.properties[overrideIdentifierProperty]) === null || _a === void 0 ? void 0 : _a.default\r\n            };\r\n            allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n        }\r\n        this._onDidSchemaChange.fire();\r\n    };\r\n    return ConfigurationRegistry;\r\n}());\r\nvar OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\r\nexport var OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\r\nexport function getDefaultValue(type) {\r\n    var t = Array.isArray(type) ? type[0] : type;\r\n    switch (t) {\r\n        case 'boolean':\r\n            return false;\r\n        case 'integer':\r\n        case 'number':\r\n            return 0;\r\n        case 'string':\r\n            return '';\r\n        case 'array':\r\n            return [];\r\n        case 'object':\r\n            return {};\r\n        default:\r\n            return null;\r\n    }\r\n}\r\nvar configurationRegistry = new ConfigurationRegistry();\r\nRegistry.add(Extensions.Configuration, configurationRegistry);\r\nexport function validateProperty(property) {\r\n    if (OVERRIDE_PROPERTY_PATTERN.test(property)) {\r\n        return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\r\n    }\r\n    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\r\n        return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\r\n    }\r\n    return null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}