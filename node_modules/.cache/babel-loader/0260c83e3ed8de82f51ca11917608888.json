{"ast":null,"code":"import '../../editor/editor.api.js';\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nvar Emitter = monaco.Emitter; // --- JSON configuration and defaults ---------\n\nvar LanguageServiceDefaultsImpl =\n/** @class */\nfunction () {\n  function LanguageServiceDefaultsImpl(languageId, diagnosticsOptions, modeConfiguration) {\n    this._onDidChange = new Emitter();\n    this._languageId = languageId;\n    this.setDiagnosticsOptions(diagnosticsOptions);\n    this.setModeConfiguration(modeConfiguration);\n  }\n\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"onDidChange\", {\n    get: function () {\n      return this._onDidChange.event;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"languageId\", {\n    get: function () {\n      return this._languageId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"modeConfiguration\", {\n    get: function () {\n      return this._modeConfiguration;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"diagnosticsOptions\", {\n    get: function () {\n      return this._diagnosticsOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LanguageServiceDefaultsImpl.prototype.setDiagnosticsOptions = function (options) {\n    this._diagnosticsOptions = options || Object.create(null);\n\n    this._onDidChange.fire(this);\n  };\n\n  LanguageServiceDefaultsImpl.prototype.setModeConfiguration = function (modeConfiguration) {\n    this._modeConfiguration = modeConfiguration || Object.create(null);\n\n    this._onDidChange.fire(this);\n  };\n\n  ;\n  return LanguageServiceDefaultsImpl;\n}();\n\nexport { LanguageServiceDefaultsImpl };\nvar diagnosticDefault = {\n  validate: true,\n  allowComments: true,\n  schemas: [],\n  enableSchemaRequest: false\n};\nvar modeConfigurationDefault = {\n  documentFormattingEdits: true,\n  documentRangeFormattingEdits: true,\n  completionItems: true,\n  hovers: true,\n  documentSymbols: true,\n  tokens: true,\n  colors: true,\n  foldingRanges: true,\n  diagnostics: true,\n  selectionRanges: true\n};\nvar jsonDefaults = new LanguageServiceDefaultsImpl('json', diagnosticDefault, modeConfigurationDefault); // Export API\n\nfunction createAPI() {\n  return {\n    jsonDefaults: jsonDefaults\n  };\n}\n\nmonaco.languages.json = createAPI(); // --- Registration to monaco editor ---\n\nfunction getMode() {\n  return import('./jsonMode.js');\n}\n\nmonaco.languages.register({\n  id: 'json',\n  extensions: ['.json', '.bowerrc', '.jshintrc', '.jscsrc', '.eslintrc', '.babelrc', '.har'],\n  aliases: ['JSON', 'json'],\n  mimetypes: ['application/json']\n});\nmonaco.languages.onLanguage('json', function () {\n  getMode().then(function (mode) {\n    return mode.setupMode(jsonDefaults);\n  });\n});","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/language/json/monaco.contribution.js"],"names":["Emitter","monaco","LanguageServiceDefaultsImpl","languageId","diagnosticsOptions","modeConfiguration","_onDidChange","_languageId","setDiagnosticsOptions","setModeConfiguration","Object","defineProperty","prototype","get","event","enumerable","configurable","_modeConfiguration","_diagnosticsOptions","options","create","fire","diagnosticDefault","validate","allowComments","schemas","enableSchemaRequest","modeConfigurationDefault","documentFormattingEdits","documentRangeFormattingEdits","completionItems","hovers","documentSymbols","tokens","colors","foldingRanges","diagnostics","selectionRanges","jsonDefaults","createAPI","languages","json","getMode","register","id","extensions","aliases","mimetypes","onLanguage","then","mode","setupMode"],"mappings":"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","sourcesContent":["import '../../editor/editor.api.js';\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nvar Emitter = monaco.Emitter;\r\n// --- JSON configuration and defaults ---------\r\nvar LanguageServiceDefaultsImpl = /** @class */ (function () {\r\n    function LanguageServiceDefaultsImpl(languageId, diagnosticsOptions, modeConfiguration) {\r\n        this._onDidChange = new Emitter();\r\n        this._languageId = languageId;\r\n        this.setDiagnosticsOptions(diagnosticsOptions);\r\n        this.setModeConfiguration(modeConfiguration);\r\n    }\r\n    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"onDidChange\", {\r\n        get: function () {\r\n            return this._onDidChange.event;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"languageId\", {\r\n        get: function () {\r\n            return this._languageId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"modeConfiguration\", {\r\n        get: function () {\r\n            return this._modeConfiguration;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"diagnosticsOptions\", {\r\n        get: function () {\r\n            return this._diagnosticsOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    LanguageServiceDefaultsImpl.prototype.setDiagnosticsOptions = function (options) {\r\n        this._diagnosticsOptions = options || Object.create(null);\r\n        this._onDidChange.fire(this);\r\n    };\r\n    LanguageServiceDefaultsImpl.prototype.setModeConfiguration = function (modeConfiguration) {\r\n        this._modeConfiguration = modeConfiguration || Object.create(null);\r\n        this._onDidChange.fire(this);\r\n    };\r\n    ;\r\n    return LanguageServiceDefaultsImpl;\r\n}());\r\nexport { LanguageServiceDefaultsImpl };\r\nvar diagnosticDefault = {\r\n    validate: true,\r\n    allowComments: true,\r\n    schemas: [],\r\n    enableSchemaRequest: false\r\n};\r\nvar modeConfigurationDefault = {\r\n    documentFormattingEdits: true,\r\n    documentRangeFormattingEdits: true,\r\n    completionItems: true,\r\n    hovers: true,\r\n    documentSymbols: true,\r\n    tokens: true,\r\n    colors: true,\r\n    foldingRanges: true,\r\n    diagnostics: true,\r\n    selectionRanges: true\r\n};\r\nvar jsonDefaults = new LanguageServiceDefaultsImpl('json', diagnosticDefault, modeConfigurationDefault);\r\n// Export API\r\nfunction createAPI() {\r\n    return {\r\n        jsonDefaults: jsonDefaults\r\n    };\r\n}\r\nmonaco.languages.json = createAPI();\r\n// --- Registration to monaco editor ---\r\nfunction getMode() {\r\n    return import('./jsonMode.js');\r\n}\r\nmonaco.languages.register({\r\n    id: 'json',\r\n    extensions: ['.json', '.bowerrc', '.jshintrc', '.jscsrc', '.eslintrc', '.babelrc', '.har'],\r\n    aliases: ['JSON', 'json'],\r\n    mimetypes: ['application/json'],\r\n});\r\nmonaco.languages.onLanguage('json', function () {\r\n    getMode().then(function (mode) { return mode.setupMode(jsonDefaults); });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}