{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar layout = require(\"../../util/layout\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _model = require(\"../../util/model\");\n\nvar groupData = _model.groupData;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nfunction _default(ecModel, api, payload) {\n  ecModel.eachSeriesByType('sankey', function (seriesModel) {\n    var nodeWidth = seriesModel.get('nodeWidth');\n    var nodeGap = seriesModel.get('nodeGap');\n    var layoutInfo = getViewRect(seriesModel, api);\n    seriesModel.layoutInfo = layoutInfo;\n    var width = layoutInfo.width;\n    var height = layoutInfo.height;\n    var graph = seriesModel.getGraph();\n    var nodes = graph.nodes;\n    var edges = graph.edges;\n    computeNodeValues(nodes);\n    var filteredNodes = zrUtil.filter(nodes, function (node) {\n      return node.getLayout().value === 0;\n    });\n    var iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get('layoutIterations');\n    var orient = seriesModel.get('orient');\n    var nodeAlign = seriesModel.get('nodeAlign');\n    layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign);\n  });\n}\n/**\n * Get the layout position of the whole view\n *\n * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\n * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\n * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\n */\n\n\nfunction getViewRect(seriesModel, api) {\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n    width: api.getWidth(),\n    height: api.getHeight()\n  });\n}\n\nfunction layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign) {\n  computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign);\n  computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient);\n  computeEdgeDepths(nodes, orient);\n}\n/**\n * Compute the value of each node by summing the associated edge's value\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeNodeValues(nodes) {\n  zrUtil.each(nodes, function (node) {\n    var value1 = sum(node.outEdges, getEdgeValue);\n    var value2 = sum(node.inEdges, getEdgeValue);\n    var value = Math.max(value1, value2);\n    node.setLayout({\n      value: value\n    }, true);\n  });\n}\n/**\n * Compute the x-position for each node.\n *\n * Here we use Kahn algorithm to detect cycle when we traverse\n * the node to computer the initial x position.\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param  {number} nodeWidth  the dx of the node\n * @param  {number} width  the whole width of the area to draw the view\n */\n\n\nfunction computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign) {\n  // Used to mark whether the edge is deleted. if it is deleted,\n  // the value is 0, otherwise it is 1.\n  var remainEdges = []; // Storage each node's indegree.\n\n  var indegreeArr = []; //Used to storage the node with indegree is equal to 0.\n\n  var zeroIndegrees = [];\n  var nextTargetNode = [];\n  var x = 0;\n  var kx = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    remainEdges[i] = 1;\n  }\n\n  for (i = 0; i < nodes.length; i++) {\n    indegreeArr[i] = nodes[i].inEdges.length;\n\n    if (indegreeArr[i] === 0) {\n      zeroIndegrees.push(nodes[i]);\n    }\n  }\n\n  var maxNodeDepth = -1; // Traversing nodes using topological sorting to calculate the\n  // horizontal(if orient === 'horizontal') or vertical(if orient === 'vertical')\n  // position of the nodes.\n\n  while (zeroIndegrees.length) {\n    for (var idx = 0; idx < zeroIndegrees.length; idx++) {\n      var node = zeroIndegrees[idx];\n      var item = node.hostGraph.data.getRawDataItem(node.dataIndex);\n      var isItemDepth = item.depth != null && item.depth >= 0;\n\n      if (isItemDepth && item.depth > maxNodeDepth) {\n        maxNodeDepth = item.depth;\n      }\n\n      node.setLayout({\n        depth: isItemDepth ? item.depth : x\n      }, true);\n      orient === 'vertical' ? node.setLayout({\n        dy: nodeWidth\n      }, true) : node.setLayout({\n        dx: nodeWidth\n      }, true);\n\n      for (var edgeIdx = 0; edgeIdx < node.outEdges.length; edgeIdx++) {\n        var edge = node.outEdges[edgeIdx];\n        var indexEdge = edges.indexOf(edge);\n        remainEdges[indexEdge] = 0;\n        var targetNode = edge.node2;\n        var nodeIndex = nodes.indexOf(targetNode);\n\n        if (--indegreeArr[nodeIndex] === 0 && nextTargetNode.indexOf(targetNode) < 0) {\n          nextTargetNode.push(targetNode);\n        }\n      }\n    }\n\n    ++x;\n    zeroIndegrees = nextTargetNode;\n    nextTargetNode = [];\n  }\n\n  for (i = 0; i < remainEdges.length; i++) {\n    if (remainEdges[i] === 1) {\n      throw new Error('Sankey is a DAG, the original data has cycle!');\n    }\n  }\n\n  var maxDepth = maxNodeDepth > x - 1 ? maxNodeDepth : x - 1;\n\n  if (nodeAlign && nodeAlign !== 'left') {\n    adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth);\n  }\n\n  var kx = orient === 'vertical' ? (height - nodeWidth) / maxDepth : (width - nodeWidth) / maxDepth;\n  scaleNodeBreadths(nodes, kx, orient);\n}\n\nfunction isNodeDepth(node) {\n  var item = node.hostGraph.data.getRawDataItem(node.dataIndex);\n  return item.depth != null && item.depth >= 0;\n}\n\nfunction adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth) {\n  if (nodeAlign === 'right') {\n    var nextSourceNode = [];\n    var remainNodes = nodes;\n    var nodeHeight = 0;\n\n    while (remainNodes.length) {\n      for (var i = 0; i < remainNodes.length; i++) {\n        var node = remainNodes[i];\n        node.setLayout({\n          skNodeHeight: nodeHeight\n        }, true);\n\n        for (var j = 0; j < node.inEdges.length; j++) {\n          var edge = node.inEdges[j];\n\n          if (nextSourceNode.indexOf(edge.node1) < 0) {\n            nextSourceNode.push(edge.node1);\n          }\n        }\n      }\n\n      remainNodes = nextSourceNode;\n      nextSourceNode = [];\n      ++nodeHeight;\n    }\n\n    zrUtil.each(nodes, function (node) {\n      if (!isNodeDepth(node)) {\n        node.setLayout({\n          depth: Math.max(0, maxDepth - node.getLayout().skNodeHeight)\n        }, true);\n      }\n    });\n  } else if (nodeAlign === 'justify') {\n    moveSinksRight(nodes, maxDepth);\n  }\n}\n/**\n * All the node without outEgdes are assigned maximum x-position and\n *     be aligned in the last column.\n *\n * @param {module:echarts/data/Graph~Node} nodes.  node of sankey view.\n * @param {number} maxDepth.  use to assign to node without outEdges as x-position.\n */\n\n\nfunction moveSinksRight(nodes, maxDepth) {\n  zrUtil.each(nodes, function (node) {\n    if (!isNodeDepth(node) && !node.outEdges.length) {\n      node.setLayout({\n        depth: maxDepth\n      }, true);\n    }\n  });\n}\n/**\n * Scale node x-position to the width\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {number} kx   multiple used to scale nodes\n */\n\n\nfunction scaleNodeBreadths(nodes, kx, orient) {\n  zrUtil.each(nodes, function (node) {\n    var nodeDepth = node.getLayout().depth * kx;\n    orient === 'vertical' ? node.setLayout({\n      y: nodeDepth\n    }, true) : node.setLayout({\n      x: nodeDepth\n    }, true);\n  });\n}\n/**\n * Using Gauss-Seidel iterations method to compute the node depth(y-position)\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n *     in the same column.\n * @param {number} iterations  the number of iterations for the algorithm\n */\n\n\nfunction computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient) {\n  var nodesByBreadth = prepareNodesByBreadth(nodes, orient);\n  initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient);\n  resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n\n  for (var alpha = 1; iterations > 0; iterations--) {\n    // 0.99 is a experience parameter, ensure that each iterations of\n    // changes as small as possible.\n    alpha *= 0.99;\n    relaxRightToLeft(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n    relaxLeftToRight(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n  }\n}\n\nfunction prepareNodesByBreadth(nodes, orient) {\n  var nodesByBreadth = [];\n  var keyAttr = orient === 'vertical' ? 'y' : 'x';\n  var groupResult = groupData(nodes, function (node) {\n    return node.getLayout()[keyAttr];\n  });\n  groupResult.keys.sort(function (a, b) {\n    return a - b;\n  });\n  zrUtil.each(groupResult.keys, function (key) {\n    nodesByBreadth.push(groupResult.buckets.get(key));\n  });\n  return nodesByBreadth;\n}\n/**\n * Compute the original y-position for each node\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n */\n\n\nfunction initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient) {\n  var minKy = Infinity;\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var n = nodes.length;\n    var sum = 0;\n    zrUtil.each(nodes, function (node) {\n      sum += node.getLayout().value;\n    });\n    var ky = orient === 'vertical' ? (width - (n - 1) * nodeGap) / sum : (height - (n - 1) * nodeGap) / sum;\n\n    if (ky < minKy) {\n      minKy = ky;\n    }\n  });\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node, i) {\n      var nodeDy = node.getLayout().value * minKy;\n\n      if (orient === 'vertical') {\n        node.setLayout({\n          x: i\n        }, true);\n        node.setLayout({\n          dx: nodeDy\n        }, true);\n      } else {\n        node.setLayout({\n          y: i\n        }, true);\n        node.setLayout({\n          dy: nodeDy\n        }, true);\n      }\n    });\n  });\n  zrUtil.each(edges, function (edge) {\n    var edgeDy = +edge.getValue() * minKy;\n    edge.setLayout({\n      dy: edgeDy\n    }, true);\n  });\n}\n/**\n * Resolve the collision of initialized depth (y-position)\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {number} nodeGap  the vertical distance between two nodes\n * @param {number} height  the whole height of the area to draw the view\n */\n\n\nfunction resolveCollisions(nodesByBreadth, nodeGap, height, width, orient) {\n  var keyAttr = orient === 'vertical' ? 'x' : 'y';\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    nodes.sort(function (a, b) {\n      return a.getLayout()[keyAttr] - b.getLayout()[keyAttr];\n    });\n    var nodeX;\n    var node;\n    var dy;\n    var y0 = 0;\n    var n = nodes.length;\n    var nodeDyAttr = orient === 'vertical' ? 'dx' : 'dy';\n\n    for (var i = 0; i < n; i++) {\n      node = nodes[i];\n      dy = y0 - node.getLayout()[keyAttr];\n\n      if (dy > 0) {\n        nodeX = node.getLayout()[keyAttr] + dy;\n        orient === 'vertical' ? node.setLayout({\n          x: nodeX\n        }, true) : node.setLayout({\n          y: nodeX\n        }, true);\n      }\n\n      y0 = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap;\n    }\n\n    var viewWidth = orient === 'vertical' ? width : height; // If the bottommost node goes outside the bounds, push it back up\n\n    dy = y0 - nodeGap - viewWidth;\n\n    if (dy > 0) {\n      nodeX = node.getLayout()[keyAttr] - dy;\n      orient === 'vertical' ? node.setLayout({\n        x: nodeX\n      }, true) : node.setLayout({\n        y: nodeX\n      }, true);\n      y0 = nodeX;\n\n      for (i = n - 2; i >= 0; --i) {\n        node = nodes[i];\n        dy = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap - y0;\n\n        if (dy > 0) {\n          nodeX = node.getLayout()[keyAttr] - dy;\n          orient === 'vertical' ? node.setLayout({\n            x: nodeX\n          }, true) : node.setLayout({\n            y: nodeX\n          }, true);\n        }\n\n        y0 = node.getLayout()[keyAttr];\n      }\n    }\n  });\n}\n/**\n * Change the y-position of the nodes, except most the right side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxRightToLeft(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.outEdges.length) {\n        var y = sum(node.outEdges, weightedTarget, orient) / sum(node.outEdges, getEdgeValue, orient);\n\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n\nfunction weightedTarget(edge, orient) {\n  return center(edge.node2, orient) * edge.getValue();\n}\n\nfunction weightedSource(edge, orient) {\n  return center(edge.node1, orient) * edge.getValue();\n}\n\nfunction center(node, orient) {\n  return orient === 'vertical' ? node.getLayout().x + node.getLayout().dx / 2 : node.getLayout().y + node.getLayout().dy / 2;\n}\n\nfunction getEdgeValue(edge) {\n  return edge.getValue();\n}\n\nfunction sum(array, f, orient) {\n  var sum = 0;\n  var len = array.length;\n  var i = -1;\n\n  while (++i < len) {\n    var value = +f.call(array, array[i], orient);\n\n    if (!isNaN(value)) {\n      sum += value;\n    }\n  }\n\n  return sum;\n}\n/**\n * Change the y-position of the nodes, except most the left side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxLeftToRight(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.inEdges.length) {\n        var y = sum(node.inEdges, weightedSource, orient) / sum(node.inEdges, getEdgeValue, orient);\n\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n/**\n * Compute the depth(y-position) of each edge\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeEdgeDepths(nodes, orient) {\n  var keyAttr = orient === 'vertical' ? 'x' : 'y';\n  zrUtil.each(nodes, function (node) {\n    node.outEdges.sort(function (a, b) {\n      return a.node2.getLayout()[keyAttr] - b.node2.getLayout()[keyAttr];\n    });\n    node.inEdges.sort(function (a, b) {\n      return a.node1.getLayout()[keyAttr] - b.node1.getLayout()[keyAttr];\n    });\n  });\n  zrUtil.each(nodes, function (node) {\n    var sy = 0;\n    var ty = 0;\n    zrUtil.each(node.outEdges, function (edge) {\n      edge.setLayout({\n        sy: sy\n      }, true);\n      sy += edge.getLayout().dy;\n    });\n    zrUtil.each(node.inEdges, function (edge) {\n      edge.setLayout({\n        ty: ty\n      }, true);\n      ty += edge.getLayout().dy;\n    });\n  });\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/echarts/lib/chart/sankey/sankeyLayout.js"],"names":["layout","require","zrUtil","_model","groupData","_default","ecModel","api","payload","eachSeriesByType","seriesModel","nodeWidth","get","nodeGap","layoutInfo","getViewRect","width","height","graph","getGraph","nodes","edges","computeNodeValues","filteredNodes","filter","node","getLayout","value","iterations","length","orient","nodeAlign","layoutSankey","getLayoutRect","getBoxLayoutParams","getWidth","getHeight","computeNodeBreadths","computeNodeDepths","computeEdgeDepths","each","value1","sum","outEdges","getEdgeValue","value2","inEdges","Math","max","setLayout","remainEdges","indegreeArr","zeroIndegrees","nextTargetNode","x","kx","i","push","maxNodeDepth","idx","item","hostGraph","data","getRawDataItem","dataIndex","isItemDepth","depth","dy","dx","edgeIdx","edge","indexEdge","indexOf","targetNode","node2","nodeIndex","Error","maxDepth","adjustNodeWithNodeAlign","scaleNodeBreadths","isNodeDepth","nextSourceNode","remainNodes","nodeHeight","skNodeHeight","j","node1","moveSinksRight","nodeDepth","y","nodesByBreadth","prepareNodesByBreadth","initializeNodeDepth","resolveCollisions","alpha","relaxRightToLeft","relaxLeftToRight","keyAttr","groupResult","keys","sort","a","b","key","buckets","minKy","Infinity","n","ky","nodeDy","edgeDy","getValue","nodeX","y0","nodeDyAttr","viewWidth","slice","reverse","weightedTarget","center","nodeY","weightedSource","array","f","len","call","isNaN","sy","ty","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar layout = require(\"../../util/layout\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _model = require(\"../../util/model\");\n\nvar groupData = _model.groupData;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction _default(ecModel, api, payload) {\n  ecModel.eachSeriesByType('sankey', function (seriesModel) {\n    var nodeWidth = seriesModel.get('nodeWidth');\n    var nodeGap = seriesModel.get('nodeGap');\n    var layoutInfo = getViewRect(seriesModel, api);\n    seriesModel.layoutInfo = layoutInfo;\n    var width = layoutInfo.width;\n    var height = layoutInfo.height;\n    var graph = seriesModel.getGraph();\n    var nodes = graph.nodes;\n    var edges = graph.edges;\n    computeNodeValues(nodes);\n    var filteredNodes = zrUtil.filter(nodes, function (node) {\n      return node.getLayout().value === 0;\n    });\n    var iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get('layoutIterations');\n    var orient = seriesModel.get('orient');\n    var nodeAlign = seriesModel.get('nodeAlign');\n    layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign);\n  });\n}\n/**\n * Get the layout position of the whole view\n *\n * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\n * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\n * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\n */\n\n\nfunction getViewRect(seriesModel, api) {\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n    width: api.getWidth(),\n    height: api.getHeight()\n  });\n}\n\nfunction layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign) {\n  computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign);\n  computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient);\n  computeEdgeDepths(nodes, orient);\n}\n/**\n * Compute the value of each node by summing the associated edge's value\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeNodeValues(nodes) {\n  zrUtil.each(nodes, function (node) {\n    var value1 = sum(node.outEdges, getEdgeValue);\n    var value2 = sum(node.inEdges, getEdgeValue);\n    var value = Math.max(value1, value2);\n    node.setLayout({\n      value: value\n    }, true);\n  });\n}\n/**\n * Compute the x-position for each node.\n *\n * Here we use Kahn algorithm to detect cycle when we traverse\n * the node to computer the initial x position.\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param  {number} nodeWidth  the dx of the node\n * @param  {number} width  the whole width of the area to draw the view\n */\n\n\nfunction computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign) {\n  // Used to mark whether the edge is deleted. if it is deleted,\n  // the value is 0, otherwise it is 1.\n  var remainEdges = []; // Storage each node's indegree.\n\n  var indegreeArr = []; //Used to storage the node with indegree is equal to 0.\n\n  var zeroIndegrees = [];\n  var nextTargetNode = [];\n  var x = 0;\n  var kx = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    remainEdges[i] = 1;\n  }\n\n  for (i = 0; i < nodes.length; i++) {\n    indegreeArr[i] = nodes[i].inEdges.length;\n\n    if (indegreeArr[i] === 0) {\n      zeroIndegrees.push(nodes[i]);\n    }\n  }\n\n  var maxNodeDepth = -1; // Traversing nodes using topological sorting to calculate the\n  // horizontal(if orient === 'horizontal') or vertical(if orient === 'vertical')\n  // position of the nodes.\n\n  while (zeroIndegrees.length) {\n    for (var idx = 0; idx < zeroIndegrees.length; idx++) {\n      var node = zeroIndegrees[idx];\n      var item = node.hostGraph.data.getRawDataItem(node.dataIndex);\n      var isItemDepth = item.depth != null && item.depth >= 0;\n\n      if (isItemDepth && item.depth > maxNodeDepth) {\n        maxNodeDepth = item.depth;\n      }\n\n      node.setLayout({\n        depth: isItemDepth ? item.depth : x\n      }, true);\n      orient === 'vertical' ? node.setLayout({\n        dy: nodeWidth\n      }, true) : node.setLayout({\n        dx: nodeWidth\n      }, true);\n\n      for (var edgeIdx = 0; edgeIdx < node.outEdges.length; edgeIdx++) {\n        var edge = node.outEdges[edgeIdx];\n        var indexEdge = edges.indexOf(edge);\n        remainEdges[indexEdge] = 0;\n        var targetNode = edge.node2;\n        var nodeIndex = nodes.indexOf(targetNode);\n\n        if (--indegreeArr[nodeIndex] === 0 && nextTargetNode.indexOf(targetNode) < 0) {\n          nextTargetNode.push(targetNode);\n        }\n      }\n    }\n\n    ++x;\n    zeroIndegrees = nextTargetNode;\n    nextTargetNode = [];\n  }\n\n  for (i = 0; i < remainEdges.length; i++) {\n    if (remainEdges[i] === 1) {\n      throw new Error('Sankey is a DAG, the original data has cycle!');\n    }\n  }\n\n  var maxDepth = maxNodeDepth > x - 1 ? maxNodeDepth : x - 1;\n\n  if (nodeAlign && nodeAlign !== 'left') {\n    adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth);\n  }\n\n  var kx = orient === 'vertical' ? (height - nodeWidth) / maxDepth : (width - nodeWidth) / maxDepth;\n  scaleNodeBreadths(nodes, kx, orient);\n}\n\nfunction isNodeDepth(node) {\n  var item = node.hostGraph.data.getRawDataItem(node.dataIndex);\n  return item.depth != null && item.depth >= 0;\n}\n\nfunction adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth) {\n  if (nodeAlign === 'right') {\n    var nextSourceNode = [];\n    var remainNodes = nodes;\n    var nodeHeight = 0;\n\n    while (remainNodes.length) {\n      for (var i = 0; i < remainNodes.length; i++) {\n        var node = remainNodes[i];\n        node.setLayout({\n          skNodeHeight: nodeHeight\n        }, true);\n\n        for (var j = 0; j < node.inEdges.length; j++) {\n          var edge = node.inEdges[j];\n\n          if (nextSourceNode.indexOf(edge.node1) < 0) {\n            nextSourceNode.push(edge.node1);\n          }\n        }\n      }\n\n      remainNodes = nextSourceNode;\n      nextSourceNode = [];\n      ++nodeHeight;\n    }\n\n    zrUtil.each(nodes, function (node) {\n      if (!isNodeDepth(node)) {\n        node.setLayout({\n          depth: Math.max(0, maxDepth - node.getLayout().skNodeHeight)\n        }, true);\n      }\n    });\n  } else if (nodeAlign === 'justify') {\n    moveSinksRight(nodes, maxDepth);\n  }\n}\n/**\n * All the node without outEgdes are assigned maximum x-position and\n *     be aligned in the last column.\n *\n * @param {module:echarts/data/Graph~Node} nodes.  node of sankey view.\n * @param {number} maxDepth.  use to assign to node without outEdges as x-position.\n */\n\n\nfunction moveSinksRight(nodes, maxDepth) {\n  zrUtil.each(nodes, function (node) {\n    if (!isNodeDepth(node) && !node.outEdges.length) {\n      node.setLayout({\n        depth: maxDepth\n      }, true);\n    }\n  });\n}\n/**\n * Scale node x-position to the width\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {number} kx   multiple used to scale nodes\n */\n\n\nfunction scaleNodeBreadths(nodes, kx, orient) {\n  zrUtil.each(nodes, function (node) {\n    var nodeDepth = node.getLayout().depth * kx;\n    orient === 'vertical' ? node.setLayout({\n      y: nodeDepth\n    }, true) : node.setLayout({\n      x: nodeDepth\n    }, true);\n  });\n}\n/**\n * Using Gauss-Seidel iterations method to compute the node depth(y-position)\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n *     in the same column.\n * @param {number} iterations  the number of iterations for the algorithm\n */\n\n\nfunction computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient) {\n  var nodesByBreadth = prepareNodesByBreadth(nodes, orient);\n  initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient);\n  resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n\n  for (var alpha = 1; iterations > 0; iterations--) {\n    // 0.99 is a experience parameter, ensure that each iterations of\n    // changes as small as possible.\n    alpha *= 0.99;\n    relaxRightToLeft(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n    relaxLeftToRight(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n  }\n}\n\nfunction prepareNodesByBreadth(nodes, orient) {\n  var nodesByBreadth = [];\n  var keyAttr = orient === 'vertical' ? 'y' : 'x';\n  var groupResult = groupData(nodes, function (node) {\n    return node.getLayout()[keyAttr];\n  });\n  groupResult.keys.sort(function (a, b) {\n    return a - b;\n  });\n  zrUtil.each(groupResult.keys, function (key) {\n    nodesByBreadth.push(groupResult.buckets.get(key));\n  });\n  return nodesByBreadth;\n}\n/**\n * Compute the original y-position for each node\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n */\n\n\nfunction initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient) {\n  var minKy = Infinity;\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var n = nodes.length;\n    var sum = 0;\n    zrUtil.each(nodes, function (node) {\n      sum += node.getLayout().value;\n    });\n    var ky = orient === 'vertical' ? (width - (n - 1) * nodeGap) / sum : (height - (n - 1) * nodeGap) / sum;\n\n    if (ky < minKy) {\n      minKy = ky;\n    }\n  });\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node, i) {\n      var nodeDy = node.getLayout().value * minKy;\n\n      if (orient === 'vertical') {\n        node.setLayout({\n          x: i\n        }, true);\n        node.setLayout({\n          dx: nodeDy\n        }, true);\n      } else {\n        node.setLayout({\n          y: i\n        }, true);\n        node.setLayout({\n          dy: nodeDy\n        }, true);\n      }\n    });\n  });\n  zrUtil.each(edges, function (edge) {\n    var edgeDy = +edge.getValue() * minKy;\n    edge.setLayout({\n      dy: edgeDy\n    }, true);\n  });\n}\n/**\n * Resolve the collision of initialized depth (y-position)\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {number} nodeGap  the vertical distance between two nodes\n * @param {number} height  the whole height of the area to draw the view\n */\n\n\nfunction resolveCollisions(nodesByBreadth, nodeGap, height, width, orient) {\n  var keyAttr = orient === 'vertical' ? 'x' : 'y';\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    nodes.sort(function (a, b) {\n      return a.getLayout()[keyAttr] - b.getLayout()[keyAttr];\n    });\n    var nodeX;\n    var node;\n    var dy;\n    var y0 = 0;\n    var n = nodes.length;\n    var nodeDyAttr = orient === 'vertical' ? 'dx' : 'dy';\n\n    for (var i = 0; i < n; i++) {\n      node = nodes[i];\n      dy = y0 - node.getLayout()[keyAttr];\n\n      if (dy > 0) {\n        nodeX = node.getLayout()[keyAttr] + dy;\n        orient === 'vertical' ? node.setLayout({\n          x: nodeX\n        }, true) : node.setLayout({\n          y: nodeX\n        }, true);\n      }\n\n      y0 = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap;\n    }\n\n    var viewWidth = orient === 'vertical' ? width : height; // If the bottommost node goes outside the bounds, push it back up\n\n    dy = y0 - nodeGap - viewWidth;\n\n    if (dy > 0) {\n      nodeX = node.getLayout()[keyAttr] - dy;\n      orient === 'vertical' ? node.setLayout({\n        x: nodeX\n      }, true) : node.setLayout({\n        y: nodeX\n      }, true);\n      y0 = nodeX;\n\n      for (i = n - 2; i >= 0; --i) {\n        node = nodes[i];\n        dy = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap - y0;\n\n        if (dy > 0) {\n          nodeX = node.getLayout()[keyAttr] - dy;\n          orient === 'vertical' ? node.setLayout({\n            x: nodeX\n          }, true) : node.setLayout({\n            y: nodeX\n          }, true);\n        }\n\n        y0 = node.getLayout()[keyAttr];\n      }\n    }\n  });\n}\n/**\n * Change the y-position of the nodes, except most the right side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxRightToLeft(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.outEdges.length) {\n        var y = sum(node.outEdges, weightedTarget, orient) / sum(node.outEdges, getEdgeValue, orient);\n\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n\nfunction weightedTarget(edge, orient) {\n  return center(edge.node2, orient) * edge.getValue();\n}\n\nfunction weightedSource(edge, orient) {\n  return center(edge.node1, orient) * edge.getValue();\n}\n\nfunction center(node, orient) {\n  return orient === 'vertical' ? node.getLayout().x + node.getLayout().dx / 2 : node.getLayout().y + node.getLayout().dy / 2;\n}\n\nfunction getEdgeValue(edge) {\n  return edge.getValue();\n}\n\nfunction sum(array, f, orient) {\n  var sum = 0;\n  var len = array.length;\n  var i = -1;\n\n  while (++i < len) {\n    var value = +f.call(array, array[i], orient);\n\n    if (!isNaN(value)) {\n      sum += value;\n    }\n  }\n\n  return sum;\n}\n/**\n * Change the y-position of the nodes, except most the left side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxLeftToRight(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.inEdges.length) {\n        var y = sum(node.inEdges, weightedSource, orient) / sum(node.inEdges, getEdgeValue, orient);\n\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n/**\n * Compute the depth(y-position) of each edge\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeEdgeDepths(nodes, orient) {\n  var keyAttr = orient === 'vertical' ? 'x' : 'y';\n  zrUtil.each(nodes, function (node) {\n    node.outEdges.sort(function (a, b) {\n      return a.node2.getLayout()[keyAttr] - b.node2.getLayout()[keyAttr];\n    });\n    node.inEdges.sort(function (a, b) {\n      return a.node1.getLayout()[keyAttr] - b.node1.getLayout()[keyAttr];\n    });\n  });\n  zrUtil.each(nodes, function (node) {\n    var sy = 0;\n    var ty = 0;\n    zrUtil.each(node.outEdges, function (edge) {\n      edge.setLayout({\n        sy: sy\n      }, true);\n      sy += edge.getLayout().dy;\n    });\n    zrUtil.each(node.inEdges, function (edge) {\n      edge.setLayout({\n        ty: ty\n      }, true);\n      ty += edge.getLayout().dy;\n    });\n  });\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}