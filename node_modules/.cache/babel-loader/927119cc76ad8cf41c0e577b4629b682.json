{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\n\nvar Uint8Matrix =\n/** @class */\nfunction () {\n  function Uint8Matrix(rows, cols, defaultValue) {\n    var data = new Uint8Array(rows * cols);\n\n    for (var i = 0, len = rows * cols; i < len; i++) {\n      data[i] = defaultValue;\n    }\n\n    this._data = data;\n    this.rows = rows;\n    this.cols = cols;\n  }\n\n  Uint8Matrix.prototype.get = function (row, col) {\n    return this._data[row * this.cols + col];\n  };\n\n  Uint8Matrix.prototype.set = function (row, col, value) {\n    this._data[row * this.cols + col] = value;\n  };\n\n  return Uint8Matrix;\n}();\n\nexport { Uint8Matrix };\n\nvar StateMachine =\n/** @class */\nfunction () {\n  function StateMachine(edges) {\n    var maxCharCode = 0;\n    var maxState = 0\n    /* Invalid */\n    ;\n\n    for (var i = 0, len = edges.length; i < len; i++) {\n      var _a = edges[i],\n          from = _a[0],\n          chCode = _a[1],\n          to = _a[2];\n\n      if (chCode > maxCharCode) {\n        maxCharCode = chCode;\n      }\n\n      if (from > maxState) {\n        maxState = from;\n      }\n\n      if (to > maxState) {\n        maxState = to;\n      }\n    }\n\n    maxCharCode++;\n    maxState++;\n    var states = new Uint8Matrix(maxState, maxCharCode, 0\n    /* Invalid */\n    );\n\n    for (var i = 0, len = edges.length; i < len; i++) {\n      var _b = edges[i],\n          from = _b[0],\n          chCode = _b[1],\n          to = _b[2];\n      states.set(from, chCode, to);\n    }\n\n    this._states = states;\n    this._maxCharCode = maxCharCode;\n  }\n\n  StateMachine.prototype.nextState = function (currentState, chCode) {\n    if (chCode < 0 || chCode >= this._maxCharCode) {\n      return 0\n      /* Invalid */\n      ;\n    }\n\n    return this._states.get(currentState, chCode);\n  };\n\n  return StateMachine;\n}();\n\nexport { StateMachine }; // State machine for http:// or https:// or file://\n\nvar _stateMachine = null;\n\nfunction getStateMachine() {\n  if (_stateMachine === null) {\n    _stateMachine = new StateMachine([[1\n    /* Start */\n    , 104\n    /* h */\n    , 2\n    /* H */\n    ], [1\n    /* Start */\n    , 72\n    /* H */\n    , 2\n    /* H */\n    ], [1\n    /* Start */\n    , 102\n    /* f */\n    , 6\n    /* F */\n    ], [1\n    /* Start */\n    , 70\n    /* F */\n    , 6\n    /* F */\n    ], [2\n    /* H */\n    , 116\n    /* t */\n    , 3\n    /* HT */\n    ], [2\n    /* H */\n    , 84\n    /* T */\n    , 3\n    /* HT */\n    ], [3\n    /* HT */\n    , 116\n    /* t */\n    , 4\n    /* HTT */\n    ], [3\n    /* HT */\n    , 84\n    /* T */\n    , 4\n    /* HTT */\n    ], [4\n    /* HTT */\n    , 112\n    /* p */\n    , 5\n    /* HTTP */\n    ], [4\n    /* HTT */\n    , 80\n    /* P */\n    , 5\n    /* HTTP */\n    ], [5\n    /* HTTP */\n    , 115\n    /* s */\n    , 9\n    /* BeforeColon */\n    ], [5\n    /* HTTP */\n    , 83\n    /* S */\n    , 9\n    /* BeforeColon */\n    ], [5\n    /* HTTP */\n    , 58\n    /* Colon */\n    , 10\n    /* AfterColon */\n    ], [6\n    /* F */\n    , 105\n    /* i */\n    , 7\n    /* FI */\n    ], [6\n    /* F */\n    , 73\n    /* I */\n    , 7\n    /* FI */\n    ], [7\n    /* FI */\n    , 108\n    /* l */\n    , 8\n    /* FIL */\n    ], [7\n    /* FI */\n    , 76\n    /* L */\n    , 8\n    /* FIL */\n    ], [8\n    /* FIL */\n    , 101\n    /* e */\n    , 9\n    /* BeforeColon */\n    ], [8\n    /* FIL */\n    , 69\n    /* E */\n    , 9\n    /* BeforeColon */\n    ], [9\n    /* BeforeColon */\n    , 58\n    /* Colon */\n    , 10\n    /* AfterColon */\n    ], [10\n    /* AfterColon */\n    , 47\n    /* Slash */\n    , 11\n    /* AlmostThere */\n    ], [11\n    /* AlmostThere */\n    , 47\n    /* Slash */\n    , 12\n    /* End */\n    ]]);\n  }\n\n  return _stateMachine;\n}\n\nvar _classifier = null;\n\nfunction getClassifier() {\n  if (_classifier === null) {\n    _classifier = new CharacterClassifier(0\n    /* None */\n    );\n    var FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…';\n\n    for (var i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n      _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1\n      /* ForceTermination */\n      );\n    }\n\n    var CANNOT_END_WITH_CHARACTERS = '.,;';\n\n    for (var i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n      _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2\n      /* CannotEndIn */\n      );\n    }\n  }\n\n  return _classifier;\n}\n\nvar LinkComputer =\n/** @class */\nfunction () {\n  function LinkComputer() {}\n\n  LinkComputer._createLink = function (classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n    // Do not allow to end link in certain characters...\n    var lastIncludedCharIndex = linkEndIndex - 1;\n\n    do {\n      var chCode = line.charCodeAt(lastIncludedCharIndex);\n      var chClass = classifier.get(chCode);\n\n      if (chClass !== 2\n      /* CannotEndIn */\n      ) {\n          break;\n        }\n\n      lastIncludedCharIndex--;\n    } while (lastIncludedCharIndex > linkBeginIndex); // Handle links enclosed in parens, square brackets and curlys.\n\n\n    if (linkBeginIndex > 0) {\n      var charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n      var lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n\n      if (charCodeBeforeLink === 40\n      /* OpenParen */\n      && lastCharCodeInLink === 41\n      /* CloseParen */\n      || charCodeBeforeLink === 91\n      /* OpenSquareBracket */\n      && lastCharCodeInLink === 93\n      /* CloseSquareBracket */\n      || charCodeBeforeLink === 123\n      /* OpenCurlyBrace */\n      && lastCharCodeInLink === 125\n      /* CloseCurlyBrace */\n      ) {\n        // Do not end in ) if ( is before the link start\n        // Do not end in ] if [ is before the link start\n        // Do not end in } if { is before the link start\n        lastIncludedCharIndex--;\n      }\n    }\n\n    return {\n      range: {\n        startLineNumber: lineNumber,\n        startColumn: linkBeginIndex + 1,\n        endLineNumber: lineNumber,\n        endColumn: lastIncludedCharIndex + 2\n      },\n      url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n    };\n  };\n\n  LinkComputer.computeLinks = function (model, stateMachine) {\n    if (stateMachine === void 0) {\n      stateMachine = getStateMachine();\n    }\n\n    var classifier = getClassifier();\n    var result = [];\n\n    for (var i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n      var line = model.getLineContent(i);\n      var len = line.length;\n      var j = 0;\n      var linkBeginIndex = 0;\n      var linkBeginChCode = 0;\n      var state = 1\n      /* Start */\n      ;\n      var hasOpenParens = false;\n      var hasOpenSquareBracket = false;\n      var hasOpenCurlyBracket = false;\n\n      while (j < len) {\n        var resetStateMachine = false;\n        var chCode = line.charCodeAt(j);\n\n        if (state === 13\n        /* Accept */\n        ) {\n            var chClass = void 0;\n\n            switch (chCode) {\n              case 40\n              /* OpenParen */\n              :\n                hasOpenParens = true;\n                chClass = 0\n                /* None */\n                ;\n                break;\n\n              case 41\n              /* CloseParen */\n              :\n                chClass = hasOpenParens ? 0\n                /* None */\n                : 1\n                /* ForceTermination */\n                ;\n                break;\n\n              case 91\n              /* OpenSquareBracket */\n              :\n                hasOpenSquareBracket = true;\n                chClass = 0\n                /* None */\n                ;\n                break;\n\n              case 93\n              /* CloseSquareBracket */\n              :\n                chClass = hasOpenSquareBracket ? 0\n                /* None */\n                : 1\n                /* ForceTermination */\n                ;\n                break;\n\n              case 123\n              /* OpenCurlyBrace */\n              :\n                hasOpenCurlyBracket = true;\n                chClass = 0\n                /* None */\n                ;\n                break;\n\n              case 125\n              /* CloseCurlyBrace */\n              :\n                chClass = hasOpenCurlyBracket ? 0\n                /* None */\n                : 1\n                /* ForceTermination */\n                ;\n                break;\n\n              /* The following three rules make it that ' or \" or ` are allowed inside links if the link began with a different one */\n\n              case 39\n              /* SingleQuote */\n              :\n                chClass = linkBeginChCode === 34\n                /* DoubleQuote */\n                || linkBeginChCode === 96\n                /* BackTick */\n                ? 0\n                /* None */\n                : 1\n                /* ForceTermination */\n                ;\n                break;\n\n              case 34\n              /* DoubleQuote */\n              :\n                chClass = linkBeginChCode === 39\n                /* SingleQuote */\n                || linkBeginChCode === 96\n                /* BackTick */\n                ? 0\n                /* None */\n                : 1\n                /* ForceTermination */\n                ;\n                break;\n\n              case 96\n              /* BackTick */\n              :\n                chClass = linkBeginChCode === 39\n                /* SingleQuote */\n                || linkBeginChCode === 34\n                /* DoubleQuote */\n                ? 0\n                /* None */\n                : 1\n                /* ForceTermination */\n                ;\n                break;\n\n              case 42\n              /* Asterisk */\n              :\n                // `*` terminates a link if the link began with `*`\n                chClass = linkBeginChCode === 42\n                /* Asterisk */\n                ? 1\n                /* ForceTermination */\n                : 0\n                /* None */\n                ;\n                break;\n\n              case 124\n              /* Pipe */\n              :\n                // `|` terminates a link if the link began with `|`\n                chClass = linkBeginChCode === 124\n                /* Pipe */\n                ? 1\n                /* ForceTermination */\n                : 0\n                /* None */\n                ;\n                break;\n\n              default:\n                chClass = classifier.get(chCode);\n            } // Check if character terminates link\n\n\n            if (chClass === 1\n            /* ForceTermination */\n            ) {\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n                resetStateMachine = true;\n              }\n          } else if (state === 12\n        /* End */\n        ) {\n            var chClass = void 0;\n\n            if (chCode === 91\n            /* OpenSquareBracket */\n            ) {\n                // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n                hasOpenSquareBracket = true;\n                chClass = 0\n                /* None */\n                ;\n              } else {\n              chClass = classifier.get(chCode);\n            } // Check if character terminates link\n\n\n            if (chClass === 1\n            /* ForceTermination */\n            ) {\n                resetStateMachine = true;\n              } else {\n              state = 13\n              /* Accept */\n              ;\n            }\n          } else {\n          state = stateMachine.nextState(state, chCode);\n\n          if (state === 0\n          /* Invalid */\n          ) {\n              resetStateMachine = true;\n            }\n        }\n\n        if (resetStateMachine) {\n          state = 1\n          /* Start */\n          ;\n          hasOpenParens = false;\n          hasOpenSquareBracket = false;\n          hasOpenCurlyBracket = false; // Record where the link started\n\n          linkBeginIndex = j + 1;\n          linkBeginChCode = chCode;\n        }\n\n        j++;\n      }\n\n      if (state === 13\n      /* Accept */\n      ) {\n          result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n        }\n    }\n\n    return result;\n  };\n\n  return LinkComputer;\n}();\n\nexport { LinkComputer };\n/**\r\n * Returns an array of all links contains in the provided\r\n * document. *Note* that this operation is computational\r\n * expensive and should not run in the UI thread.\r\n */\n\nexport function computeLinks(model) {\n  if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n    // Unknown caller!\n    return [];\n  }\n\n  return LinkComputer.computeLinks(model);\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js"],"names":["CharacterClassifier","Uint8Matrix","rows","cols","defaultValue","data","Uint8Array","i","len","_data","prototype","get","row","col","set","value","StateMachine","edges","maxCharCode","maxState","length","_a","from","chCode","to","states","_b","_states","_maxCharCode","nextState","currentState","_stateMachine","getStateMachine","_classifier","getClassifier","FORCE_TERMINATION_CHARACTERS","charCodeAt","CANNOT_END_WITH_CHARACTERS","LinkComputer","_createLink","classifier","line","lineNumber","linkBeginIndex","linkEndIndex","lastIncludedCharIndex","chClass","charCodeBeforeLink","lastCharCodeInLink","range","startLineNumber","startColumn","endLineNumber","endColumn","url","substring","computeLinks","model","stateMachine","result","lineCount","getLineCount","getLineContent","j","linkBeginChCode","state","hasOpenParens","hasOpenSquareBracket","hasOpenCurlyBracket","resetStateMachine","push"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CharacterClassifier } from '../core/characterClassifier.js';\r\nvar Uint8Matrix = /** @class */ (function () {\r\n    function Uint8Matrix(rows, cols, defaultValue) {\r\n        var data = new Uint8Array(rows * cols);\r\n        for (var i = 0, len = rows * cols; i < len; i++) {\r\n            data[i] = defaultValue;\r\n        }\r\n        this._data = data;\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n    }\r\n    Uint8Matrix.prototype.get = function (row, col) {\r\n        return this._data[row * this.cols + col];\r\n    };\r\n    Uint8Matrix.prototype.set = function (row, col, value) {\r\n        this._data[row * this.cols + col] = value;\r\n    };\r\n    return Uint8Matrix;\r\n}());\r\nexport { Uint8Matrix };\r\nvar StateMachine = /** @class */ (function () {\r\n    function StateMachine(edges) {\r\n        var maxCharCode = 0;\r\n        var maxState = 0 /* Invalid */;\r\n        for (var i = 0, len = edges.length; i < len; i++) {\r\n            var _a = edges[i], from = _a[0], chCode = _a[1], to = _a[2];\r\n            if (chCode > maxCharCode) {\r\n                maxCharCode = chCode;\r\n            }\r\n            if (from > maxState) {\r\n                maxState = from;\r\n            }\r\n            if (to > maxState) {\r\n                maxState = to;\r\n            }\r\n        }\r\n        maxCharCode++;\r\n        maxState++;\r\n        var states = new Uint8Matrix(maxState, maxCharCode, 0 /* Invalid */);\r\n        for (var i = 0, len = edges.length; i < len; i++) {\r\n            var _b = edges[i], from = _b[0], chCode = _b[1], to = _b[2];\r\n            states.set(from, chCode, to);\r\n        }\r\n        this._states = states;\r\n        this._maxCharCode = maxCharCode;\r\n    }\r\n    StateMachine.prototype.nextState = function (currentState, chCode) {\r\n        if (chCode < 0 || chCode >= this._maxCharCode) {\r\n            return 0 /* Invalid */;\r\n        }\r\n        return this._states.get(currentState, chCode);\r\n    };\r\n    return StateMachine;\r\n}());\r\nexport { StateMachine };\r\n// State machine for http:// or https:// or file://\r\nvar _stateMachine = null;\r\nfunction getStateMachine() {\r\n    if (_stateMachine === null) {\r\n        _stateMachine = new StateMachine([\r\n            [1 /* Start */, 104 /* h */, 2 /* H */],\r\n            [1 /* Start */, 72 /* H */, 2 /* H */],\r\n            [1 /* Start */, 102 /* f */, 6 /* F */],\r\n            [1 /* Start */, 70 /* F */, 6 /* F */],\r\n            [2 /* H */, 116 /* t */, 3 /* HT */],\r\n            [2 /* H */, 84 /* T */, 3 /* HT */],\r\n            [3 /* HT */, 116 /* t */, 4 /* HTT */],\r\n            [3 /* HT */, 84 /* T */, 4 /* HTT */],\r\n            [4 /* HTT */, 112 /* p */, 5 /* HTTP */],\r\n            [4 /* HTT */, 80 /* P */, 5 /* HTTP */],\r\n            [5 /* HTTP */, 115 /* s */, 9 /* BeforeColon */],\r\n            [5 /* HTTP */, 83 /* S */, 9 /* BeforeColon */],\r\n            [5 /* HTTP */, 58 /* Colon */, 10 /* AfterColon */],\r\n            [6 /* F */, 105 /* i */, 7 /* FI */],\r\n            [6 /* F */, 73 /* I */, 7 /* FI */],\r\n            [7 /* FI */, 108 /* l */, 8 /* FIL */],\r\n            [7 /* FI */, 76 /* L */, 8 /* FIL */],\r\n            [8 /* FIL */, 101 /* e */, 9 /* BeforeColon */],\r\n            [8 /* FIL */, 69 /* E */, 9 /* BeforeColon */],\r\n            [9 /* BeforeColon */, 58 /* Colon */, 10 /* AfterColon */],\r\n            [10 /* AfterColon */, 47 /* Slash */, 11 /* AlmostThere */],\r\n            [11 /* AlmostThere */, 47 /* Slash */, 12 /* End */],\r\n        ]);\r\n    }\r\n    return _stateMachine;\r\n}\r\nvar _classifier = null;\r\nfunction getClassifier() {\r\n    if (_classifier === null) {\r\n        _classifier = new CharacterClassifier(0 /* None */);\r\n        var FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…';\r\n        for (var i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\r\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* ForceTermination */);\r\n        }\r\n        var CANNOT_END_WITH_CHARACTERS = '.,;';\r\n        for (var i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\r\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CannotEndIn */);\r\n        }\r\n    }\r\n    return _classifier;\r\n}\r\nvar LinkComputer = /** @class */ (function () {\r\n    function LinkComputer() {\r\n    }\r\n    LinkComputer._createLink = function (classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\r\n        // Do not allow to end link in certain characters...\r\n        var lastIncludedCharIndex = linkEndIndex - 1;\r\n        do {\r\n            var chCode = line.charCodeAt(lastIncludedCharIndex);\r\n            var chClass = classifier.get(chCode);\r\n            if (chClass !== 2 /* CannotEndIn */) {\r\n                break;\r\n            }\r\n            lastIncludedCharIndex--;\r\n        } while (lastIncludedCharIndex > linkBeginIndex);\r\n        // Handle links enclosed in parens, square brackets and curlys.\r\n        if (linkBeginIndex > 0) {\r\n            var charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\r\n            var lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\r\n            if ((charCodeBeforeLink === 40 /* OpenParen */ && lastCharCodeInLink === 41 /* CloseParen */)\r\n                || (charCodeBeforeLink === 91 /* OpenSquareBracket */ && lastCharCodeInLink === 93 /* CloseSquareBracket */)\r\n                || (charCodeBeforeLink === 123 /* OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CloseCurlyBrace */)) {\r\n                // Do not end in ) if ( is before the link start\r\n                // Do not end in ] if [ is before the link start\r\n                // Do not end in } if { is before the link start\r\n                lastIncludedCharIndex--;\r\n            }\r\n        }\r\n        return {\r\n            range: {\r\n                startLineNumber: lineNumber,\r\n                startColumn: linkBeginIndex + 1,\r\n                endLineNumber: lineNumber,\r\n                endColumn: lastIncludedCharIndex + 2\r\n            },\r\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\r\n        };\r\n    };\r\n    LinkComputer.computeLinks = function (model, stateMachine) {\r\n        if (stateMachine === void 0) { stateMachine = getStateMachine(); }\r\n        var classifier = getClassifier();\r\n        var result = [];\r\n        for (var i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\r\n            var line = model.getLineContent(i);\r\n            var len = line.length;\r\n            var j = 0;\r\n            var linkBeginIndex = 0;\r\n            var linkBeginChCode = 0;\r\n            var state = 1 /* Start */;\r\n            var hasOpenParens = false;\r\n            var hasOpenSquareBracket = false;\r\n            var hasOpenCurlyBracket = false;\r\n            while (j < len) {\r\n                var resetStateMachine = false;\r\n                var chCode = line.charCodeAt(j);\r\n                if (state === 13 /* Accept */) {\r\n                    var chClass = void 0;\r\n                    switch (chCode) {\r\n                        case 40 /* OpenParen */:\r\n                            hasOpenParens = true;\r\n                            chClass = 0 /* None */;\r\n                            break;\r\n                        case 41 /* CloseParen */:\r\n                            chClass = (hasOpenParens ? 0 /* None */ : 1 /* ForceTermination */);\r\n                            break;\r\n                        case 91 /* OpenSquareBracket */:\r\n                            hasOpenSquareBracket = true;\r\n                            chClass = 0 /* None */;\r\n                            break;\r\n                        case 93 /* CloseSquareBracket */:\r\n                            chClass = (hasOpenSquareBracket ? 0 /* None */ : 1 /* ForceTermination */);\r\n                            break;\r\n                        case 123 /* OpenCurlyBrace */:\r\n                            hasOpenCurlyBracket = true;\r\n                            chClass = 0 /* None */;\r\n                            break;\r\n                        case 125 /* CloseCurlyBrace */:\r\n                            chClass = (hasOpenCurlyBracket ? 0 /* None */ : 1 /* ForceTermination */);\r\n                            break;\r\n                        /* The following three rules make it that ' or \" or ` are allowed inside links if the link began with a different one */\r\n                        case 39 /* SingleQuote */:\r\n                            chClass = (linkBeginChCode === 34 /* DoubleQuote */ || linkBeginChCode === 96 /* BackTick */) ? 0 /* None */ : 1 /* ForceTermination */;\r\n                            break;\r\n                        case 34 /* DoubleQuote */:\r\n                            chClass = (linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 96 /* BackTick */) ? 0 /* None */ : 1 /* ForceTermination */;\r\n                            break;\r\n                        case 96 /* BackTick */:\r\n                            chClass = (linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 34 /* DoubleQuote */) ? 0 /* None */ : 1 /* ForceTermination */;\r\n                            break;\r\n                        case 42 /* Asterisk */:\r\n                            // `*` terminates a link if the link began with `*`\r\n                            chClass = (linkBeginChCode === 42 /* Asterisk */) ? 1 /* ForceTermination */ : 0 /* None */;\r\n                            break;\r\n                        case 124 /* Pipe */:\r\n                            // `|` terminates a link if the link began with `|`\r\n                            chClass = (linkBeginChCode === 124 /* Pipe */) ? 1 /* ForceTermination */ : 0 /* None */;\r\n                            break;\r\n                        default:\r\n                            chClass = classifier.get(chCode);\r\n                    }\r\n                    // Check if character terminates link\r\n                    if (chClass === 1 /* ForceTermination */) {\r\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\r\n                        resetStateMachine = true;\r\n                    }\r\n                }\r\n                else if (state === 12 /* End */) {\r\n                    var chClass = void 0;\r\n                    if (chCode === 91 /* OpenSquareBracket */) {\r\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\r\n                        hasOpenSquareBracket = true;\r\n                        chClass = 0 /* None */;\r\n                    }\r\n                    else {\r\n                        chClass = classifier.get(chCode);\r\n                    }\r\n                    // Check if character terminates link\r\n                    if (chClass === 1 /* ForceTermination */) {\r\n                        resetStateMachine = true;\r\n                    }\r\n                    else {\r\n                        state = 13 /* Accept */;\r\n                    }\r\n                }\r\n                else {\r\n                    state = stateMachine.nextState(state, chCode);\r\n                    if (state === 0 /* Invalid */) {\r\n                        resetStateMachine = true;\r\n                    }\r\n                }\r\n                if (resetStateMachine) {\r\n                    state = 1 /* Start */;\r\n                    hasOpenParens = false;\r\n                    hasOpenSquareBracket = false;\r\n                    hasOpenCurlyBracket = false;\r\n                    // Record where the link started\r\n                    linkBeginIndex = j + 1;\r\n                    linkBeginChCode = chCode;\r\n                }\r\n                j++;\r\n            }\r\n            if (state === 13 /* Accept */) {\r\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    return LinkComputer;\r\n}());\r\nexport { LinkComputer };\r\n/**\r\n * Returns an array of all links contains in the provided\r\n * document. *Note* that this operation is computational\r\n * expensive and should not run in the UI thread.\r\n */\r\nexport function computeLinks(model) {\r\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\r\n        // Unknown caller!\r\n        return [];\r\n    }\r\n    return LinkComputer.computeLinks(model);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}