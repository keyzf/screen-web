{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { EditOperation } from '../../common/core/editOperation.js';\nimport { Range } from '../../common/core/range.js';\n\nvar FormattingEdit =\n/** @class */\nfunction () {\n  function FormattingEdit() {}\n\n  FormattingEdit._handleEolEdits = function (editor, edits) {\n    var newEol = undefined;\n    var singleEdits = [];\n\n    for (var _i = 0, edits_1 = edits; _i < edits_1.length; _i++) {\n      var edit = edits_1[_i];\n\n      if (typeof edit.eol === 'number') {\n        newEol = edit.eol;\n      }\n\n      if (edit.range && typeof edit.text === 'string') {\n        singleEdits.push(edit);\n      }\n    }\n\n    if (typeof newEol === 'number') {\n      if (editor.hasModel()) {\n        editor.getModel().pushEOL(newEol);\n      }\n    }\n\n    return singleEdits;\n  };\n\n  FormattingEdit._isFullModelReplaceEdit = function (editor, edit) {\n    if (!editor.hasModel()) {\n      return false;\n    }\n\n    var model = editor.getModel();\n    var editRange = model.validateRange(edit.range);\n    var fullModelRange = model.getFullModelRange();\n    return fullModelRange.equalsRange(editRange);\n  };\n\n  FormattingEdit.execute = function (editor, _edits) {\n    editor.pushUndoStop();\n\n    var edits = FormattingEdit._handleEolEdits(editor, _edits);\n\n    if (edits.length === 1 && FormattingEdit._isFullModelReplaceEdit(editor, edits[0])) {\n      // We use replace semantics and hope that markers stay put...\n      editor.executeEdits('formatEditsCommand', edits.map(function (edit) {\n        return EditOperation.replace(Range.lift(edit.range), edit.text);\n      }));\n    } else {\n      editor.executeEdits('formatEditsCommand', edits.map(function (edit) {\n        return EditOperation.replaceMove(Range.lift(edit.range), edit.text);\n      }));\n    }\n\n    editor.pushUndoStop();\n  };\n\n  return FormattingEdit;\n}();\n\nexport { FormattingEdit };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/contrib/format/formattingEdit.js"],"names":["EditOperation","Range","FormattingEdit","_handleEolEdits","editor","edits","newEol","undefined","singleEdits","_i","edits_1","length","edit","eol","range","text","push","hasModel","getModel","pushEOL","_isFullModelReplaceEdit","model","editRange","validateRange","fullModelRange","getFullModelRange","equalsRange","execute","_edits","pushUndoStop","executeEdits","map","replace","lift","replaceMove"],"mappings":"AAAA;;;;AAIA,SAASA,aAAT,QAA8B,oCAA9B;AACA,SAASC,KAAT,QAAsB,4BAAtB;;AACA,IAAIC,cAAc;AAAG;AAAe,YAAY;AAC5C,WAASA,cAAT,GAA0B,CACzB;;AACDA,EAAAA,cAAc,CAACC,eAAf,GAAiC,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;AACtD,QAAIC,MAAM,GAAGC,SAAb;AACA,QAAIC,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,OAAO,GAAGL,KAA3B,EAAkCI,EAAE,GAAGC,OAAO,CAACC,MAA/C,EAAuDF,EAAE,EAAzD,EAA6D;AACzD,UAAIG,IAAI,GAAGF,OAAO,CAACD,EAAD,CAAlB;;AACA,UAAI,OAAOG,IAAI,CAACC,GAAZ,KAAoB,QAAxB,EAAkC;AAC9BP,QAAAA,MAAM,GAAGM,IAAI,CAACC,GAAd;AACH;;AACD,UAAID,IAAI,CAACE,KAAL,IAAc,OAAOF,IAAI,CAACG,IAAZ,KAAqB,QAAvC,EAAiD;AAC7CP,QAAAA,WAAW,CAACQ,IAAZ,CAAiBJ,IAAjB;AACH;AACJ;;AACD,QAAI,OAAON,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,UAAIF,MAAM,CAACa,QAAP,EAAJ,EAAuB;AACnBb,QAAAA,MAAM,CAACc,QAAP,GAAkBC,OAAlB,CAA0Bb,MAA1B;AACH;AACJ;;AACD,WAAOE,WAAP;AACH,GAlBD;;AAmBAN,EAAAA,cAAc,CAACkB,uBAAf,GAAyC,UAAUhB,MAAV,EAAkBQ,IAAlB,EAAwB;AAC7D,QAAI,CAACR,MAAM,CAACa,QAAP,EAAL,EAAwB;AACpB,aAAO,KAAP;AACH;;AACD,QAAII,KAAK,GAAGjB,MAAM,CAACc,QAAP,EAAZ;AACA,QAAII,SAAS,GAAGD,KAAK,CAACE,aAAN,CAAoBX,IAAI,CAACE,KAAzB,CAAhB;AACA,QAAIU,cAAc,GAAGH,KAAK,CAACI,iBAAN,EAArB;AACA,WAAOD,cAAc,CAACE,WAAf,CAA2BJ,SAA3B,CAAP;AACH,GARD;;AASApB,EAAAA,cAAc,CAACyB,OAAf,GAAyB,UAAUvB,MAAV,EAAkBwB,MAAlB,EAA0B;AAC/CxB,IAAAA,MAAM,CAACyB,YAAP;;AACA,QAAIxB,KAAK,GAAGH,cAAc,CAACC,eAAf,CAA+BC,MAA/B,EAAuCwB,MAAvC,CAAZ;;AACA,QAAIvB,KAAK,CAACM,MAAN,KAAiB,CAAjB,IAAsBT,cAAc,CAACkB,uBAAf,CAAuChB,MAAvC,EAA+CC,KAAK,CAAC,CAAD,CAApD,CAA1B,EAAoF;AAChF;AACAD,MAAAA,MAAM,CAAC0B,YAAP,CAAoB,oBAApB,EAA0CzB,KAAK,CAAC0B,GAAN,CAAU,UAAUnB,IAAV,EAAgB;AAAE,eAAOZ,aAAa,CAACgC,OAAd,CAAsB/B,KAAK,CAACgC,IAAN,CAAWrB,IAAI,CAACE,KAAhB,CAAtB,EAA8CF,IAAI,CAACG,IAAnD,CAAP;AAAkE,OAA9F,CAA1C;AACH,KAHD,MAIK;AACDX,MAAAA,MAAM,CAAC0B,YAAP,CAAoB,oBAApB,EAA0CzB,KAAK,CAAC0B,GAAN,CAAU,UAAUnB,IAAV,EAAgB;AAAE,eAAOZ,aAAa,CAACkC,WAAd,CAA0BjC,KAAK,CAACgC,IAAN,CAAWrB,IAAI,CAACE,KAAhB,CAA1B,EAAkDF,IAAI,CAACG,IAAvD,CAAP;AAAsE,OAAlG,CAA1C;AACH;;AACDX,IAAAA,MAAM,CAACyB,YAAP;AACH,GAXD;;AAYA,SAAO3B,cAAP;AACH,CA5CmC,EAApC;;AA6CA,SAASA,cAAT","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { EditOperation } from '../../common/core/editOperation.js';\r\nimport { Range } from '../../common/core/range.js';\r\nvar FormattingEdit = /** @class */ (function () {\r\n    function FormattingEdit() {\r\n    }\r\n    FormattingEdit._handleEolEdits = function (editor, edits) {\r\n        var newEol = undefined;\r\n        var singleEdits = [];\r\n        for (var _i = 0, edits_1 = edits; _i < edits_1.length; _i++) {\r\n            var edit = edits_1[_i];\r\n            if (typeof edit.eol === 'number') {\r\n                newEol = edit.eol;\r\n            }\r\n            if (edit.range && typeof edit.text === 'string') {\r\n                singleEdits.push(edit);\r\n            }\r\n        }\r\n        if (typeof newEol === 'number') {\r\n            if (editor.hasModel()) {\r\n                editor.getModel().pushEOL(newEol);\r\n            }\r\n        }\r\n        return singleEdits;\r\n    };\r\n    FormattingEdit._isFullModelReplaceEdit = function (editor, edit) {\r\n        if (!editor.hasModel()) {\r\n            return false;\r\n        }\r\n        var model = editor.getModel();\r\n        var editRange = model.validateRange(edit.range);\r\n        var fullModelRange = model.getFullModelRange();\r\n        return fullModelRange.equalsRange(editRange);\r\n    };\r\n    FormattingEdit.execute = function (editor, _edits) {\r\n        editor.pushUndoStop();\r\n        var edits = FormattingEdit._handleEolEdits(editor, _edits);\r\n        if (edits.length === 1 && FormattingEdit._isFullModelReplaceEdit(editor, edits[0])) {\r\n            // We use replace semantics and hope that markers stay put...\r\n            editor.executeEdits('formatEditsCommand', edits.map(function (edit) { return EditOperation.replace(Range.lift(edit.range), edit.text); }));\r\n        }\r\n        else {\r\n            editor.executeEdits('formatEditsCommand', edits.map(function (edit) { return EditOperation.replaceMove(Range.lift(edit.range), edit.text); }));\r\n        }\r\n        editor.pushUndoStop();\r\n    };\r\n    return FormattingEdit;\r\n}());\r\nexport { FormattingEdit };\r\n"]},"metadata":{},"sourceType":"module"}