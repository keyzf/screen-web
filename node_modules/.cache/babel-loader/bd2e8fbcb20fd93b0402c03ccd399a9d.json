{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { LcsDiff } from '../../../base/common/diff/diff.js';\nimport * as strings from '../../../base/common/strings.js';\nvar MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\n\nfunction computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\n  var diffAlgo = new LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\n  return diffAlgo.ComputeDiff(pretty);\n}\n\nvar LineSequence =\n/** @class */\nfunction () {\n  function LineSequence(lines) {\n    var startColumns = [];\n    var endColumns = [];\n\n    for (var i = 0, length_1 = lines.length; i < length_1; i++) {\n      startColumns[i] = getFirstNonBlankColumn(lines[i], 1);\n      endColumns[i] = getLastNonBlankColumn(lines[i], 1);\n    }\n\n    this.lines = lines;\n    this._startColumns = startColumns;\n    this._endColumns = endColumns;\n  }\n\n  LineSequence.prototype.getElements = function () {\n    var elements = [];\n\n    for (var i = 0, len = this.lines.length; i < len; i++) {\n      elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\n    }\n\n    return elements;\n  };\n\n  LineSequence.prototype.getStartLineNumber = function (i) {\n    return i + 1;\n  };\n\n  LineSequence.prototype.getEndLineNumber = function (i) {\n    return i + 1;\n  };\n\n  LineSequence.prototype.createCharSequence = function (shouldIgnoreTrimWhitespace, startIndex, endIndex) {\n    var charCodes = [];\n    var lineNumbers = [];\n    var columns = [];\n    var len = 0;\n\n    for (var index = startIndex; index <= endIndex; index++) {\n      var lineContent = this.lines[index];\n      var startColumn = shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1;\n      var endColumn = shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1;\n\n      for (var col = startColumn; col < endColumn; col++) {\n        charCodes[len] = lineContent.charCodeAt(col - 1);\n        lineNumbers[len] = index + 1;\n        columns[len] = col;\n        len++;\n      }\n    }\n\n    return new CharSequence(charCodes, lineNumbers, columns);\n  };\n\n  return LineSequence;\n}();\n\nvar CharSequence =\n/** @class */\nfunction () {\n  function CharSequence(charCodes, lineNumbers, columns) {\n    this._charCodes = charCodes;\n    this._lineNumbers = lineNumbers;\n    this._columns = columns;\n  }\n\n  CharSequence.prototype.getElements = function () {\n    return this._charCodes;\n  };\n\n  CharSequence.prototype.getStartLineNumber = function (i) {\n    return this._lineNumbers[i];\n  };\n\n  CharSequence.prototype.getStartColumn = function (i) {\n    return this._columns[i];\n  };\n\n  CharSequence.prototype.getEndLineNumber = function (i) {\n    return this._lineNumbers[i];\n  };\n\n  CharSequence.prototype.getEndColumn = function (i) {\n    return this._columns[i] + 1;\n  };\n\n  return CharSequence;\n}();\n\nvar CharChange =\n/** @class */\nfunction () {\n  function CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\n    this.originalStartLineNumber = originalStartLineNumber;\n    this.originalStartColumn = originalStartColumn;\n    this.originalEndLineNumber = originalEndLineNumber;\n    this.originalEndColumn = originalEndColumn;\n    this.modifiedStartLineNumber = modifiedStartLineNumber;\n    this.modifiedStartColumn = modifiedStartColumn;\n    this.modifiedEndLineNumber = modifiedEndLineNumber;\n    this.modifiedEndColumn = modifiedEndColumn;\n  }\n\n  CharChange.createFromDiffChange = function (diffChange, originalCharSequence, modifiedCharSequence) {\n    var originalStartLineNumber;\n    var originalStartColumn;\n    var originalEndLineNumber;\n    var originalEndColumn;\n    var modifiedStartLineNumber;\n    var modifiedStartColumn;\n    var modifiedEndLineNumber;\n    var modifiedEndColumn;\n\n    if (diffChange.originalLength === 0) {\n      originalStartLineNumber = 0;\n      originalStartColumn = 0;\n      originalEndLineNumber = 0;\n      originalEndColumn = 0;\n    } else {\n      originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\n      originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\n      originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n      originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\n    }\n\n    if (diffChange.modifiedLength === 0) {\n      modifiedStartLineNumber = 0;\n      modifiedStartColumn = 0;\n      modifiedEndLineNumber = 0;\n      modifiedEndColumn = 0;\n    } else {\n      modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\n      modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\n      modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n      modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n    }\n\n    return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\n  };\n\n  return CharChange;\n}();\n\nfunction postProcessCharChanges(rawChanges) {\n  if (rawChanges.length <= 1) {\n    return rawChanges;\n  }\n\n  var result = [rawChanges[0]];\n  var prevChange = result[0];\n\n  for (var i = 1, len = rawChanges.length; i < len; i++) {\n    var currChange = rawChanges[i];\n    var originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\n    var modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength); // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\n\n    var matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\n\n    if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\n      // Merge the current change into the previous one\n      prevChange.originalLength = currChange.originalStart + currChange.originalLength - prevChange.originalStart;\n      prevChange.modifiedLength = currChange.modifiedStart + currChange.modifiedLength - prevChange.modifiedStart;\n    } else {\n      // Add the current change\n      result.push(currChange);\n      prevChange = currChange;\n    }\n  }\n\n  return result;\n}\n\nvar LineChange =\n/** @class */\nfunction () {\n  function LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\n    this.originalStartLineNumber = originalStartLineNumber;\n    this.originalEndLineNumber = originalEndLineNumber;\n    this.modifiedStartLineNumber = modifiedStartLineNumber;\n    this.modifiedEndLineNumber = modifiedEndLineNumber;\n    this.charChanges = charChanges;\n  }\n\n  LineChange.createFromDiffResult = function (shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {\n    var originalStartLineNumber;\n    var originalEndLineNumber;\n    var modifiedStartLineNumber;\n    var modifiedEndLineNumber;\n    var charChanges = undefined;\n\n    if (diffChange.originalLength === 0) {\n      originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\n      originalEndLineNumber = 0;\n    } else {\n      originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\n      originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n    }\n\n    if (diffChange.modifiedLength === 0) {\n      modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\n      modifiedEndLineNumber = 0;\n    } else {\n      modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\n      modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n    }\n\n    if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {\n      // Compute character changes for diff chunks of at most 20 lines...\n      var originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\n      var modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\n      var rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;\n\n      if (shouldPostProcessCharChanges) {\n        rawChanges = postProcessCharChanges(rawChanges);\n      }\n\n      charChanges = [];\n\n      for (var i = 0, length_2 = rawChanges.length; i < length_2; i++) {\n        charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\n      }\n    }\n\n    return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\n  };\n\n  return LineChange;\n}();\n\nvar DiffComputer =\n/** @class */\nfunction () {\n  function DiffComputer(originalLines, modifiedLines, opts) {\n    this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\n    this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\n    this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\n    this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\n    this.originalLines = originalLines;\n    this.modifiedLines = modifiedLines;\n    this.original = new LineSequence(originalLines);\n    this.modified = new LineSequence(modifiedLines);\n    this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);\n    this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...\n  }\n\n  DiffComputer.prototype.computeDiff = function () {\n    if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {\n      // empty original => fast path\n      return {\n        quitEarly: false,\n        changes: [{\n          originalStartLineNumber: 1,\n          originalEndLineNumber: 1,\n          modifiedStartLineNumber: 1,\n          modifiedEndLineNumber: this.modified.lines.length,\n          charChanges: [{\n            modifiedEndColumn: 0,\n            modifiedEndLineNumber: 0,\n            modifiedStartColumn: 0,\n            modifiedStartLineNumber: 0,\n            originalEndColumn: 0,\n            originalEndLineNumber: 0,\n            originalStartColumn: 0,\n            originalStartLineNumber: 0\n          }]\n        }]\n      };\n    }\n\n    if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n      // empty modified => fast path\n      return {\n        quitEarly: false,\n        changes: [{\n          originalStartLineNumber: 1,\n          originalEndLineNumber: this.original.lines.length,\n          modifiedStartLineNumber: 1,\n          modifiedEndLineNumber: 1,\n          charChanges: [{\n            modifiedEndColumn: 0,\n            modifiedEndLineNumber: 0,\n            modifiedStartColumn: 0,\n            modifiedStartLineNumber: 0,\n            originalEndColumn: 0,\n            originalEndLineNumber: 0,\n            originalStartColumn: 0,\n            originalStartLineNumber: 0\n          }]\n        }]\n      };\n    }\n\n    var diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);\n    var rawChanges = diffResult.changes;\n    var quitEarly = diffResult.quitEarly; // The diff is always computed with ignoring trim whitespace\n    // This ensures we get the prettiest diff\n\n    if (this.shouldIgnoreTrimWhitespace) {\n      var lineChanges = [];\n\n      for (var i = 0, length_3 = rawChanges.length; i < length_3; i++) {\n        lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n      }\n\n      return {\n        quitEarly: quitEarly,\n        changes: lineChanges\n      };\n    } // Need to post-process and introduce changes where the trim whitespace is different\n    // Note that we are looping starting at -1 to also cover the lines before the first change\n\n\n    var result = [];\n    var originalLineIndex = 0;\n    var modifiedLineIndex = 0;\n\n    for (var i = -1\n    /* !!!! */\n    , len = rawChanges.length; i < len; i++) {\n      var nextChange = i + 1 < len ? rawChanges[i + 1] : null;\n      var originalStop = nextChange ? nextChange.originalStart : this.originalLines.length;\n      var modifiedStop = nextChange ? nextChange.modifiedStart : this.modifiedLines.length;\n\n      while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\n        var originalLine = this.originalLines[originalLineIndex];\n        var modifiedLine = this.modifiedLines[modifiedLineIndex];\n\n        if (originalLine !== modifiedLine) {\n          // These lines differ only in trim whitespace\n          // Check the leading whitespace\n          {\n            var originalStartColumn = getFirstNonBlankColumn(originalLine, 1);\n            var modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);\n\n            while (originalStartColumn > 1 && modifiedStartColumn > 1) {\n              var originalChar = originalLine.charCodeAt(originalStartColumn - 2);\n              var modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\n\n              if (originalChar !== modifiedChar) {\n                break;\n              }\n\n              originalStartColumn--;\n              modifiedStartColumn--;\n            }\n\n            if (originalStartColumn > 1 || modifiedStartColumn > 1) {\n              this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\n            }\n          } // Check the trailing whitespace\n\n          {\n            var originalEndColumn = getLastNonBlankColumn(originalLine, 1);\n            var modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);\n            var originalMaxColumn = originalLine.length + 1;\n            var modifiedMaxColumn = modifiedLine.length + 1;\n\n            while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\n              var originalChar = originalLine.charCodeAt(originalEndColumn - 1);\n              var modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\n\n              if (originalChar !== modifiedChar) {\n                break;\n              }\n\n              originalEndColumn++;\n              modifiedEndColumn++;\n            }\n\n            if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\n              this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\n            }\n          }\n        }\n\n        originalLineIndex++;\n        modifiedLineIndex++;\n      }\n\n      if (nextChange) {\n        // Emit the actual change\n        result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n        originalLineIndex += nextChange.originalLength;\n        modifiedLineIndex += nextChange.modifiedLength;\n      }\n    }\n\n    return {\n      quitEarly: quitEarly,\n      changes: result\n    };\n  };\n\n  DiffComputer.prototype._pushTrimWhitespaceCharChange = function (result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n    if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\n      // Merged into previous\n      return;\n    }\n\n    var charChanges = undefined;\n\n    if (this.shouldComputeCharChanges) {\n      charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\n    }\n\n    result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\n  };\n\n  DiffComputer.prototype._mergeTrimWhitespaceCharChange = function (result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n    var len = result.length;\n\n    if (len === 0) {\n      return false;\n    }\n\n    var prevChange = result[len - 1];\n\n    if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\n      // Don't merge with inserts/deletes\n      return false;\n    }\n\n    if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\n      prevChange.originalEndLineNumber = originalLineNumber;\n      prevChange.modifiedEndLineNumber = modifiedLineNumber;\n\n      if (this.shouldComputeCharChanges && prevChange.charChanges) {\n        prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  return DiffComputer;\n}();\n\nexport { DiffComputer };\n\nfunction getFirstNonBlankColumn(txt, defaultValue) {\n  var r = strings.firstNonWhitespaceIndex(txt);\n\n  if (r === -1) {\n    return defaultValue;\n  }\n\n  return r + 1;\n}\n\nfunction getLastNonBlankColumn(txt, defaultValue) {\n  var r = strings.lastNonWhitespaceIndex(txt);\n\n  if (r === -1) {\n    return defaultValue;\n  }\n\n  return r + 2;\n}\n\nfunction createContinueProcessingPredicate(maximumRuntime) {\n  if (maximumRuntime === 0) {\n    return function () {\n      return true;\n    };\n  }\n\n  var startTime = Date.now();\n  return function () {\n    return Date.now() - startTime < maximumRuntime;\n  };\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js"],"names":["LcsDiff","strings","MINIMUM_MATCHING_CHARACTER_LENGTH","computeDiff","originalSequence","modifiedSequence","continueProcessingPredicate","pretty","diffAlgo","ComputeDiff","LineSequence","lines","startColumns","endColumns","i","length_1","length","getFirstNonBlankColumn","getLastNonBlankColumn","_startColumns","_endColumns","prototype","getElements","elements","len","substring","getStartLineNumber","getEndLineNumber","createCharSequence","shouldIgnoreTrimWhitespace","startIndex","endIndex","charCodes","lineNumbers","columns","index","lineContent","startColumn","endColumn","col","charCodeAt","CharSequence","_charCodes","_lineNumbers","_columns","getStartColumn","getEndColumn","CharChange","originalStartLineNumber","originalStartColumn","originalEndLineNumber","originalEndColumn","modifiedStartLineNumber","modifiedStartColumn","modifiedEndLineNumber","modifiedEndColumn","createFromDiffChange","diffChange","originalCharSequence","modifiedCharSequence","originalLength","originalStart","modifiedLength","modifiedStart","postProcessCharChanges","rawChanges","result","prevChange","currChange","originalMatchingLength","modifiedMatchingLength","matchingLength","Math","min","push","LineChange","charChanges","createFromDiffResult","originalLineSequence","modifiedLineSequence","continueCharDiff","shouldComputeCharChanges","shouldPostProcessCharChanges","undefined","changes","length_2","DiffComputer","originalLines","modifiedLines","opts","shouldMakePrettyDiff","original","modified","continueLineDiff","createContinueProcessingPredicate","maxComputationTime","quitEarly","diffResult","lineChanges","length_3","originalLineIndex","modifiedLineIndex","nextChange","originalStop","modifiedStop","originalLine","modifiedLine","originalChar","modifiedChar","_pushTrimWhitespaceCharChange","originalMaxColumn","modifiedMaxColumn","originalLineNumber","modifiedLineNumber","_mergeTrimWhitespaceCharChange","txt","defaultValue","r","firstNonWhitespaceIndex","lastNonWhitespaceIndex","maximumRuntime","startTime","Date","now"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { LcsDiff } from '../../../base/common/diff/diff.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nvar MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\r\nfunction computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\r\n    var diffAlgo = new LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\r\n    return diffAlgo.ComputeDiff(pretty);\r\n}\r\nvar LineSequence = /** @class */ (function () {\r\n    function LineSequence(lines) {\r\n        var startColumns = [];\r\n        var endColumns = [];\r\n        for (var i = 0, length_1 = lines.length; i < length_1; i++) {\r\n            startColumns[i] = getFirstNonBlankColumn(lines[i], 1);\r\n            endColumns[i] = getLastNonBlankColumn(lines[i], 1);\r\n        }\r\n        this.lines = lines;\r\n        this._startColumns = startColumns;\r\n        this._endColumns = endColumns;\r\n    }\r\n    LineSequence.prototype.getElements = function () {\r\n        var elements = [];\r\n        for (var i = 0, len = this.lines.length; i < len; i++) {\r\n            elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\r\n        }\r\n        return elements;\r\n    };\r\n    LineSequence.prototype.getStartLineNumber = function (i) {\r\n        return i + 1;\r\n    };\r\n    LineSequence.prototype.getEndLineNumber = function (i) {\r\n        return i + 1;\r\n    };\r\n    LineSequence.prototype.createCharSequence = function (shouldIgnoreTrimWhitespace, startIndex, endIndex) {\r\n        var charCodes = [];\r\n        var lineNumbers = [];\r\n        var columns = [];\r\n        var len = 0;\r\n        for (var index = startIndex; index <= endIndex; index++) {\r\n            var lineContent = this.lines[index];\r\n            var startColumn = (shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1);\r\n            var endColumn = (shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1);\r\n            for (var col = startColumn; col < endColumn; col++) {\r\n                charCodes[len] = lineContent.charCodeAt(col - 1);\r\n                lineNumbers[len] = index + 1;\r\n                columns[len] = col;\r\n                len++;\r\n            }\r\n        }\r\n        return new CharSequence(charCodes, lineNumbers, columns);\r\n    };\r\n    return LineSequence;\r\n}());\r\nvar CharSequence = /** @class */ (function () {\r\n    function CharSequence(charCodes, lineNumbers, columns) {\r\n        this._charCodes = charCodes;\r\n        this._lineNumbers = lineNumbers;\r\n        this._columns = columns;\r\n    }\r\n    CharSequence.prototype.getElements = function () {\r\n        return this._charCodes;\r\n    };\r\n    CharSequence.prototype.getStartLineNumber = function (i) {\r\n        return this._lineNumbers[i];\r\n    };\r\n    CharSequence.prototype.getStartColumn = function (i) {\r\n        return this._columns[i];\r\n    };\r\n    CharSequence.prototype.getEndLineNumber = function (i) {\r\n        return this._lineNumbers[i];\r\n    };\r\n    CharSequence.prototype.getEndColumn = function (i) {\r\n        return this._columns[i] + 1;\r\n    };\r\n    return CharSequence;\r\n}());\r\nvar CharChange = /** @class */ (function () {\r\n    function CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\r\n        this.originalStartLineNumber = originalStartLineNumber;\r\n        this.originalStartColumn = originalStartColumn;\r\n        this.originalEndLineNumber = originalEndLineNumber;\r\n        this.originalEndColumn = originalEndColumn;\r\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\r\n        this.modifiedStartColumn = modifiedStartColumn;\r\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\r\n        this.modifiedEndColumn = modifiedEndColumn;\r\n    }\r\n    CharChange.createFromDiffChange = function (diffChange, originalCharSequence, modifiedCharSequence) {\r\n        var originalStartLineNumber;\r\n        var originalStartColumn;\r\n        var originalEndLineNumber;\r\n        var originalEndColumn;\r\n        var modifiedStartLineNumber;\r\n        var modifiedStartColumn;\r\n        var modifiedEndLineNumber;\r\n        var modifiedEndColumn;\r\n        if (diffChange.originalLength === 0) {\r\n            originalStartLineNumber = 0;\r\n            originalStartColumn = 0;\r\n            originalEndLineNumber = 0;\r\n            originalEndColumn = 0;\r\n        }\r\n        else {\r\n            originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\r\n            originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\r\n            originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\r\n            originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\r\n        }\r\n        if (diffChange.modifiedLength === 0) {\r\n            modifiedStartLineNumber = 0;\r\n            modifiedStartColumn = 0;\r\n            modifiedEndLineNumber = 0;\r\n            modifiedEndColumn = 0;\r\n        }\r\n        else {\r\n            modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\r\n            modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\r\n            modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n            modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n        }\r\n        return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\r\n    };\r\n    return CharChange;\r\n}());\r\nfunction postProcessCharChanges(rawChanges) {\r\n    if (rawChanges.length <= 1) {\r\n        return rawChanges;\r\n    }\r\n    var result = [rawChanges[0]];\r\n    var prevChange = result[0];\r\n    for (var i = 1, len = rawChanges.length; i < len; i++) {\r\n        var currChange = rawChanges[i];\r\n        var originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\r\n        var modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\r\n        // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\r\n        var matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\r\n        if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\r\n            // Merge the current change into the previous one\r\n            prevChange.originalLength = (currChange.originalStart + currChange.originalLength) - prevChange.originalStart;\r\n            prevChange.modifiedLength = (currChange.modifiedStart + currChange.modifiedLength) - prevChange.modifiedStart;\r\n        }\r\n        else {\r\n            // Add the current change\r\n            result.push(currChange);\r\n            prevChange = currChange;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nvar LineChange = /** @class */ (function () {\r\n    function LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\r\n        this.originalStartLineNumber = originalStartLineNumber;\r\n        this.originalEndLineNumber = originalEndLineNumber;\r\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\r\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\r\n        this.charChanges = charChanges;\r\n    }\r\n    LineChange.createFromDiffResult = function (shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {\r\n        var originalStartLineNumber;\r\n        var originalEndLineNumber;\r\n        var modifiedStartLineNumber;\r\n        var modifiedEndLineNumber;\r\n        var charChanges = undefined;\r\n        if (diffChange.originalLength === 0) {\r\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\r\n            originalEndLineNumber = 0;\r\n        }\r\n        else {\r\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\r\n            originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\r\n        }\r\n        if (diffChange.modifiedLength === 0) {\r\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\r\n            modifiedEndLineNumber = 0;\r\n        }\r\n        else {\r\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\r\n            modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n        }\r\n        if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {\r\n            // Compute character changes for diff chunks of at most 20 lines...\r\n            var originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\r\n            var modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n            var rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;\r\n            if (shouldPostProcessCharChanges) {\r\n                rawChanges = postProcessCharChanges(rawChanges);\r\n            }\r\n            charChanges = [];\r\n            for (var i = 0, length_2 = rawChanges.length; i < length_2; i++) {\r\n                charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\r\n            }\r\n        }\r\n        return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\r\n    };\r\n    return LineChange;\r\n}());\r\nvar DiffComputer = /** @class */ (function () {\r\n    function DiffComputer(originalLines, modifiedLines, opts) {\r\n        this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\r\n        this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\r\n        this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\r\n        this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\r\n        this.originalLines = originalLines;\r\n        this.modifiedLines = modifiedLines;\r\n        this.original = new LineSequence(originalLines);\r\n        this.modified = new LineSequence(modifiedLines);\r\n        this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);\r\n        this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...\r\n    }\r\n    DiffComputer.prototype.computeDiff = function () {\r\n        if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {\r\n            // empty original => fast path\r\n            return {\r\n                quitEarly: false,\r\n                changes: [{\r\n                        originalStartLineNumber: 1,\r\n                        originalEndLineNumber: 1,\r\n                        modifiedStartLineNumber: 1,\r\n                        modifiedEndLineNumber: this.modified.lines.length,\r\n                        charChanges: [{\r\n                                modifiedEndColumn: 0,\r\n                                modifiedEndLineNumber: 0,\r\n                                modifiedStartColumn: 0,\r\n                                modifiedStartLineNumber: 0,\r\n                                originalEndColumn: 0,\r\n                                originalEndLineNumber: 0,\r\n                                originalStartColumn: 0,\r\n                                originalStartLineNumber: 0\r\n                            }]\r\n                    }]\r\n            };\r\n        }\r\n        if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\r\n            // empty modified => fast path\r\n            return {\r\n                quitEarly: false,\r\n                changes: [{\r\n                        originalStartLineNumber: 1,\r\n                        originalEndLineNumber: this.original.lines.length,\r\n                        modifiedStartLineNumber: 1,\r\n                        modifiedEndLineNumber: 1,\r\n                        charChanges: [{\r\n                                modifiedEndColumn: 0,\r\n                                modifiedEndLineNumber: 0,\r\n                                modifiedStartColumn: 0,\r\n                                modifiedStartLineNumber: 0,\r\n                                originalEndColumn: 0,\r\n                                originalEndLineNumber: 0,\r\n                                originalStartColumn: 0,\r\n                                originalStartLineNumber: 0\r\n                            }]\r\n                    }]\r\n            };\r\n        }\r\n        var diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);\r\n        var rawChanges = diffResult.changes;\r\n        var quitEarly = diffResult.quitEarly;\r\n        // The diff is always computed with ignoring trim whitespace\r\n        // This ensures we get the prettiest diff\r\n        if (this.shouldIgnoreTrimWhitespace) {\r\n            var lineChanges = [];\r\n            for (var i = 0, length_3 = rawChanges.length; i < length_3; i++) {\r\n                lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\r\n            }\r\n            return {\r\n                quitEarly: quitEarly,\r\n                changes: lineChanges\r\n            };\r\n        }\r\n        // Need to post-process and introduce changes where the trim whitespace is different\r\n        // Note that we are looping starting at -1 to also cover the lines before the first change\r\n        var result = [];\r\n        var originalLineIndex = 0;\r\n        var modifiedLineIndex = 0;\r\n        for (var i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {\r\n            var nextChange = (i + 1 < len ? rawChanges[i + 1] : null);\r\n            var originalStop = (nextChange ? nextChange.originalStart : this.originalLines.length);\r\n            var modifiedStop = (nextChange ? nextChange.modifiedStart : this.modifiedLines.length);\r\n            while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\r\n                var originalLine = this.originalLines[originalLineIndex];\r\n                var modifiedLine = this.modifiedLines[modifiedLineIndex];\r\n                if (originalLine !== modifiedLine) {\r\n                    // These lines differ only in trim whitespace\r\n                    // Check the leading whitespace\r\n                    {\r\n                        var originalStartColumn = getFirstNonBlankColumn(originalLine, 1);\r\n                        var modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);\r\n                        while (originalStartColumn > 1 && modifiedStartColumn > 1) {\r\n                            var originalChar = originalLine.charCodeAt(originalStartColumn - 2);\r\n                            var modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\r\n                            if (originalChar !== modifiedChar) {\r\n                                break;\r\n                            }\r\n                            originalStartColumn--;\r\n                            modifiedStartColumn--;\r\n                        }\r\n                        if (originalStartColumn > 1 || modifiedStartColumn > 1) {\r\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\r\n                        }\r\n                    }\r\n                    // Check the trailing whitespace\r\n                    {\r\n                        var originalEndColumn = getLastNonBlankColumn(originalLine, 1);\r\n                        var modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);\r\n                        var originalMaxColumn = originalLine.length + 1;\r\n                        var modifiedMaxColumn = modifiedLine.length + 1;\r\n                        while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\r\n                            var originalChar = originalLine.charCodeAt(originalEndColumn - 1);\r\n                            var modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\r\n                            if (originalChar !== modifiedChar) {\r\n                                break;\r\n                            }\r\n                            originalEndColumn++;\r\n                            modifiedEndColumn++;\r\n                        }\r\n                        if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\r\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\r\n                        }\r\n                    }\r\n                }\r\n                originalLineIndex++;\r\n                modifiedLineIndex++;\r\n            }\r\n            if (nextChange) {\r\n                // Emit the actual change\r\n                result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\r\n                originalLineIndex += nextChange.originalLength;\r\n                modifiedLineIndex += nextChange.modifiedLength;\r\n            }\r\n        }\r\n        return {\r\n            quitEarly: quitEarly,\r\n            changes: result\r\n        };\r\n    };\r\n    DiffComputer.prototype._pushTrimWhitespaceCharChange = function (result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\r\n        if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\r\n            // Merged into previous\r\n            return;\r\n        }\r\n        var charChanges = undefined;\r\n        if (this.shouldComputeCharChanges) {\r\n            charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\r\n        }\r\n        result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\r\n    };\r\n    DiffComputer.prototype._mergeTrimWhitespaceCharChange = function (result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\r\n        var len = result.length;\r\n        if (len === 0) {\r\n            return false;\r\n        }\r\n        var prevChange = result[len - 1];\r\n        if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\r\n            // Don't merge with inserts/deletes\r\n            return false;\r\n        }\r\n        if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\r\n            prevChange.originalEndLineNumber = originalLineNumber;\r\n            prevChange.modifiedEndLineNumber = modifiedLineNumber;\r\n            if (this.shouldComputeCharChanges && prevChange.charChanges) {\r\n                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    return DiffComputer;\r\n}());\r\nexport { DiffComputer };\r\nfunction getFirstNonBlankColumn(txt, defaultValue) {\r\n    var r = strings.firstNonWhitespaceIndex(txt);\r\n    if (r === -1) {\r\n        return defaultValue;\r\n    }\r\n    return r + 1;\r\n}\r\nfunction getLastNonBlankColumn(txt, defaultValue) {\r\n    var r = strings.lastNonWhitespaceIndex(txt);\r\n    if (r === -1) {\r\n        return defaultValue;\r\n    }\r\n    return r + 2;\r\n}\r\nfunction createContinueProcessingPredicate(maximumRuntime) {\r\n    if (maximumRuntime === 0) {\r\n        return function () { return true; };\r\n    }\r\n    var startTime = Date.now();\r\n    return function () {\r\n        return Date.now() - startTime < maximumRuntime;\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}