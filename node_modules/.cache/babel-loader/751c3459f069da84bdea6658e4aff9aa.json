{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { TimeoutTimer } from '../../../base/common/async.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../../common/core/lineTokens.js';\nimport { TokenizationRegistry } from '../../common/modes.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\n\nvar Colorizer =\n/** @class */\nfunction () {\n  function Colorizer() {}\n\n  Colorizer.colorizeElement = function (themeService, modeService, domNode, options) {\n    options = options || {};\n    var theme = options.theme || 'vs';\n    var mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\n\n    if (!mimeType) {\n      console.error('Mode not detected');\n      return Promise.resolve();\n    }\n\n    themeService.setTheme(theme);\n    var text = domNode.firstChild ? domNode.firstChild.nodeValue : '';\n    domNode.className += ' ' + theme;\n\n    var render = function (str) {\n      domNode.innerHTML = str;\n    };\n\n    return this.colorize(modeService, text || '', mimeType, options).then(render, function (err) {\n      return console.error(err);\n    });\n  };\n\n  Colorizer.colorize = function (modeService, text, mimeType, options) {\n    var tabSize = 4;\n\n    if (options && typeof options.tabSize === 'number') {\n      tabSize = options.tabSize;\n    }\n\n    if (strings.startsWithUTF8BOM(text)) {\n      text = text.substr(1);\n    }\n\n    var lines = text.split(/\\r\\n|\\r|\\n/);\n    var language = modeService.getModeId(mimeType);\n\n    if (!language) {\n      return Promise.resolve(_fakeColorize(lines, tabSize));\n    } // Send out the event to create the mode\n\n\n    modeService.triggerMode(language);\n    var tokenizationSupport = TokenizationRegistry.get(language);\n\n    if (tokenizationSupport) {\n      return _colorize(lines, tabSize, tokenizationSupport);\n    }\n\n    var tokenizationSupportPromise = TokenizationRegistry.getPromise(language);\n\n    if (tokenizationSupportPromise) {\n      // A tokenizer will be registered soon\n      return new Promise(function (resolve, reject) {\n        tokenizationSupportPromise.then(function (tokenizationSupport) {\n          _colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\n        }, reject);\n      });\n    }\n\n    return new Promise(function (resolve, reject) {\n      var listener = null;\n      var timeout = null;\n\n      var execute = function () {\n        if (listener) {\n          listener.dispose();\n          listener = null;\n        }\n\n        if (timeout) {\n          timeout.dispose();\n          timeout = null;\n        }\n\n        var tokenizationSupport = TokenizationRegistry.get(language);\n\n        if (tokenizationSupport) {\n          _colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\n\n          return;\n        }\n\n        resolve(_fakeColorize(lines, tabSize));\n      }; // wait 500ms for mode to load, then give up\n\n\n      timeout = new TimeoutTimer();\n      timeout.cancelAndSet(execute, 500);\n      listener = TokenizationRegistry.onDidChange(function (e) {\n        if (e.changedLanguages.indexOf(language) >= 0) {\n          execute();\n        }\n      });\n    });\n  };\n\n  Colorizer.colorizeLine = function (line, mightContainNonBasicASCII, mightContainRTL, tokens, tabSize) {\n    if (tabSize === void 0) {\n      tabSize = 4;\n    }\n\n    var isBasicASCII = ViewLineRenderingData.isBasicASCII(line, mightContainNonBasicASCII);\n    var containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, mightContainRTL);\n    var renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, tokens, [], tabSize, 0, 0, 0, -1, 'none', false, false, null));\n    return renderResult.html;\n  };\n\n  Colorizer.colorizeModelLine = function (model, lineNumber, tabSize) {\n    if (tabSize === void 0) {\n      tabSize = 4;\n    }\n\n    var content = model.getLineContent(lineNumber);\n    model.forceTokenization(lineNumber);\n    var tokens = model.getLineTokens(lineNumber);\n    var inflatedTokens = tokens.inflate();\n    return this.colorizeLine(content, model.mightContainNonBasicASCII(), model.mightContainRTL(), inflatedTokens, tabSize);\n  };\n\n  return Colorizer;\n}();\n\nexport { Colorizer };\n\nfunction _colorize(lines, tabSize, tokenizationSupport) {\n  return new Promise(function (c, e) {\n    var execute = function () {\n      var result = _actualColorize(lines, tabSize, tokenizationSupport);\n\n      if (tokenizationSupport instanceof MonarchTokenizer) {\n        var status_1 = tokenizationSupport.getLoadStatus();\n\n        if (status_1.loaded === false) {\n          status_1.promise.then(execute, e);\n          return;\n        }\n      }\n\n      c(result);\n    };\n\n    execute();\n  });\n}\n\nfunction _fakeColorize(lines, tabSize) {\n  var html = [];\n  var defaultMetadata = (0\n  /* None */\n  << 11\n  /* FONT_STYLE_OFFSET */\n  | 1\n  /* DefaultForeground */\n  << 14\n  /* FOREGROUND_OFFSET */\n  | 2\n  /* DefaultBackground */\n  << 23\n  /* BACKGROUND_OFFSET */\n  ) >>> 0;\n  var tokens = new Uint32Array(2);\n  tokens[0] = 0;\n  tokens[1] = defaultMetadata;\n\n  for (var i = 0, length_1 = lines.length; i < length_1; i++) {\n    var line = lines[i];\n    tokens[0] = line.length;\n    var lineTokens = new LineTokens(tokens, line);\n    var isBasicASCII = ViewLineRenderingData.isBasicASCII(line,\n    /* check for basic ASCII */\n    true);\n    var containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII,\n    /* check for RTL */\n    true);\n    var renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, 0, 0, -1, 'none', false, false, null));\n    html = html.concat(renderResult.html);\n    html.push('<br/>');\n  }\n\n  return html.join('');\n}\n\nfunction _actualColorize(lines, tabSize, tokenizationSupport) {\n  var html = [];\n  var state = tokenizationSupport.getInitialState();\n\n  for (var i = 0, length_2 = lines.length; i < length_2; i++) {\n    var line = lines[i];\n    var tokenizeResult = tokenizationSupport.tokenize2(line, state, 0);\n    LineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\n    var lineTokens = new LineTokens(tokenizeResult.tokens, line);\n    var isBasicASCII = ViewLineRenderingData.isBasicASCII(line,\n    /* check for basic ASCII */\n    true);\n    var containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII,\n    /* check for RTL */\n    true);\n    var renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens.inflate(), [], tabSize, 0, 0, 0, -1, 'none', false, false, null));\n    html = html.concat(renderResult.html);\n    html.push('<br/>');\n    state = tokenizeResult.endState;\n  }\n\n  return html.join('');\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/standalone/browser/colorizer.js"],"names":["TimeoutTimer","strings","LineTokens","TokenizationRegistry","RenderLineInput","renderViewLine2","renderViewLine","ViewLineRenderingData","MonarchTokenizer","Colorizer","colorizeElement","themeService","modeService","domNode","options","theme","mimeType","getAttribute","console","error","Promise","resolve","setTheme","text","firstChild","nodeValue","className","render","str","innerHTML","colorize","then","err","tabSize","startsWithUTF8BOM","substr","lines","split","language","getModeId","_fakeColorize","triggerMode","tokenizationSupport","get","_colorize","tokenizationSupportPromise","getPromise","reject","listener","timeout","execute","dispose","cancelAndSet","onDidChange","e","changedLanguages","indexOf","colorizeLine","line","mightContainNonBasicASCII","mightContainRTL","tokens","isBasicASCII","containsRTL","renderResult","html","colorizeModelLine","model","lineNumber","content","getLineContent","forceTokenization","getLineTokens","inflatedTokens","inflate","c","result","_actualColorize","status_1","getLoadStatus","loaded","promise","defaultMetadata","Uint32Array","i","length_1","length","lineTokens","concat","push","join","state","getInitialState","length_2","tokenizeResult","tokenize2","convertToEndOffset","endState"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { TimeoutTimer } from '../../../base/common/async.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { LineTokens } from '../../common/core/lineTokens.js';\r\nimport { TokenizationRegistry } from '../../common/modes.js';\r\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\r\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\r\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\r\nvar Colorizer = /** @class */ (function () {\r\n    function Colorizer() {\r\n    }\r\n    Colorizer.colorizeElement = function (themeService, modeService, domNode, options) {\r\n        options = options || {};\r\n        var theme = options.theme || 'vs';\r\n        var mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\r\n        if (!mimeType) {\r\n            console.error('Mode not detected');\r\n            return Promise.resolve();\r\n        }\r\n        themeService.setTheme(theme);\r\n        var text = domNode.firstChild ? domNode.firstChild.nodeValue : '';\r\n        domNode.className += ' ' + theme;\r\n        var render = function (str) {\r\n            domNode.innerHTML = str;\r\n        };\r\n        return this.colorize(modeService, text || '', mimeType, options).then(render, function (err) { return console.error(err); });\r\n    };\r\n    Colorizer.colorize = function (modeService, text, mimeType, options) {\r\n        var tabSize = 4;\r\n        if (options && typeof options.tabSize === 'number') {\r\n            tabSize = options.tabSize;\r\n        }\r\n        if (strings.startsWithUTF8BOM(text)) {\r\n            text = text.substr(1);\r\n        }\r\n        var lines = text.split(/\\r\\n|\\r|\\n/);\r\n        var language = modeService.getModeId(mimeType);\r\n        if (!language) {\r\n            return Promise.resolve(_fakeColorize(lines, tabSize));\r\n        }\r\n        // Send out the event to create the mode\r\n        modeService.triggerMode(language);\r\n        var tokenizationSupport = TokenizationRegistry.get(language);\r\n        if (tokenizationSupport) {\r\n            return _colorize(lines, tabSize, tokenizationSupport);\r\n        }\r\n        var tokenizationSupportPromise = TokenizationRegistry.getPromise(language);\r\n        if (tokenizationSupportPromise) {\r\n            // A tokenizer will be registered soon\r\n            return new Promise(function (resolve, reject) {\r\n                tokenizationSupportPromise.then(function (tokenizationSupport) {\r\n                    _colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\r\n                }, reject);\r\n            });\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            var listener = null;\r\n            var timeout = null;\r\n            var execute = function () {\r\n                if (listener) {\r\n                    listener.dispose();\r\n                    listener = null;\r\n                }\r\n                if (timeout) {\r\n                    timeout.dispose();\r\n                    timeout = null;\r\n                }\r\n                var tokenizationSupport = TokenizationRegistry.get(language);\r\n                if (tokenizationSupport) {\r\n                    _colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\r\n                    return;\r\n                }\r\n                resolve(_fakeColorize(lines, tabSize));\r\n            };\r\n            // wait 500ms for mode to load, then give up\r\n            timeout = new TimeoutTimer();\r\n            timeout.cancelAndSet(execute, 500);\r\n            listener = TokenizationRegistry.onDidChange(function (e) {\r\n                if (e.changedLanguages.indexOf(language) >= 0) {\r\n                    execute();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Colorizer.colorizeLine = function (line, mightContainNonBasicASCII, mightContainRTL, tokens, tabSize) {\r\n        if (tabSize === void 0) { tabSize = 4; }\r\n        var isBasicASCII = ViewLineRenderingData.isBasicASCII(line, mightContainNonBasicASCII);\r\n        var containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, mightContainRTL);\r\n        var renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, tokens, [], tabSize, 0, 0, 0, -1, 'none', false, false, null));\r\n        return renderResult.html;\r\n    };\r\n    Colorizer.colorizeModelLine = function (model, lineNumber, tabSize) {\r\n        if (tabSize === void 0) { tabSize = 4; }\r\n        var content = model.getLineContent(lineNumber);\r\n        model.forceTokenization(lineNumber);\r\n        var tokens = model.getLineTokens(lineNumber);\r\n        var inflatedTokens = tokens.inflate();\r\n        return this.colorizeLine(content, model.mightContainNonBasicASCII(), model.mightContainRTL(), inflatedTokens, tabSize);\r\n    };\r\n    return Colorizer;\r\n}());\r\nexport { Colorizer };\r\nfunction _colorize(lines, tabSize, tokenizationSupport) {\r\n    return new Promise(function (c, e) {\r\n        var execute = function () {\r\n            var result = _actualColorize(lines, tabSize, tokenizationSupport);\r\n            if (tokenizationSupport instanceof MonarchTokenizer) {\r\n                var status_1 = tokenizationSupport.getLoadStatus();\r\n                if (status_1.loaded === false) {\r\n                    status_1.promise.then(execute, e);\r\n                    return;\r\n                }\r\n            }\r\n            c(result);\r\n        };\r\n        execute();\r\n    });\r\n}\r\nfunction _fakeColorize(lines, tabSize) {\r\n    var html = [];\r\n    var defaultMetadata = ((0 /* None */ << 11 /* FONT_STYLE_OFFSET */)\r\n        | (1 /* DefaultForeground */ << 14 /* FOREGROUND_OFFSET */)\r\n        | (2 /* DefaultBackground */ << 23 /* BACKGROUND_OFFSET */)) >>> 0;\r\n    var tokens = new Uint32Array(2);\r\n    tokens[0] = 0;\r\n    tokens[1] = defaultMetadata;\r\n    for (var i = 0, length_1 = lines.length; i < length_1; i++) {\r\n        var line = lines[i];\r\n        tokens[0] = line.length;\r\n        var lineTokens = new LineTokens(tokens, line);\r\n        var isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */ true);\r\n        var containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */ true);\r\n        var renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, 0, 0, -1, 'none', false, false, null));\r\n        html = html.concat(renderResult.html);\r\n        html.push('<br/>');\r\n    }\r\n    return html.join('');\r\n}\r\nfunction _actualColorize(lines, tabSize, tokenizationSupport) {\r\n    var html = [];\r\n    var state = tokenizationSupport.getInitialState();\r\n    for (var i = 0, length_2 = lines.length; i < length_2; i++) {\r\n        var line = lines[i];\r\n        var tokenizeResult = tokenizationSupport.tokenize2(line, state, 0);\r\n        LineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\r\n        var lineTokens = new LineTokens(tokenizeResult.tokens, line);\r\n        var isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */ true);\r\n        var containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */ true);\r\n        var renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens.inflate(), [], tabSize, 0, 0, 0, -1, 'none', false, false, null));\r\n        html = html.concat(renderResult.html);\r\n        html.push('<br/>');\r\n        state = tokenizeResult.endState;\r\n    }\r\n    return html.join('');\r\n}\r\n"]},"metadata":{},"sourceType":"module"}