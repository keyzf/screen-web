{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict'; // Allow for running under nodejs/requirejs in tests\n\nvar _monaco = typeof monaco === 'undefined' ? self.monaco : monaco;\n\nexport var conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  onEnterRules: [{\n    // e.g. /** | */\n    beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n    afterText: /^\\s*\\*\\/$/,\n    action: {\n      indentAction: _monaco.languages.IndentAction.IndentOutdent,\n      appendText: ' * '\n    }\n  }, {\n    // e.g. /** ...|\n    beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n    action: {\n      indentAction: _monaco.languages.IndentAction.None,\n      appendText: ' * '\n    }\n  }, {\n    // e.g.  * ...|\n    beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n    action: {\n      indentAction: _monaco.languages.IndentAction.None,\n      appendText: '* '\n    }\n  }, {\n    // e.g.  */|\n    beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\n    action: {\n      indentAction: _monaco.languages.IndentAction.None,\n      removeText: 1\n    }\n  }],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }, {\n    open: '\\'',\n    close: '\\'',\n    notIn: ['string', 'comment']\n  }, {\n    open: '`',\n    close: '`',\n    notIn: ['string', 'comment']\n  }, {\n    open: \"/**\",\n    close: \" */\",\n    notIn: [\"string\"]\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\n    }\n  }\n};\nexport var language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: 'invalid',\n  tokenPostfix: '.ts',\n  keywords: ['abstract', 'as', 'break', 'case', 'catch', 'class', 'continue', 'const', 'constructor', 'debugger', 'declare', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'from', 'function', 'get', 'if', 'implements', 'import', 'in', 'infer', 'instanceof', 'interface', 'is', 'keyof', 'let', 'module', 'namespace', 'never', 'new', 'null', 'package', 'private', 'protected', 'public', 'readonly', 'require', 'global', 'return', 'set', 'static', 'super', 'switch', 'symbol', 'this', 'throw', 'true', 'try', 'type', 'typeof', 'unique', 'var', 'void', 'while', 'with', 'yield', 'async', 'await', 'of'],\n  typeKeywords: ['any', 'boolean', 'number', 'object', 'string', 'undefined'],\n  operators: ['<=', '>=', '==', '!=', '===', '!==', '=>', '+', '-', '**', '*', '/', '%', '++', '--', '<<', '</', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '??', '?', ':', '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', '@'],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/[{}]/, 'delimiter.bracket'], {\n      include: 'common'\n    }],\n    common: [// identifiers and keywords\n    [/[a-z_$][\\w$]*/, {\n      cases: {\n        '@typeKeywords': 'keyword',\n        '@keywords': 'keyword',\n        '@default': 'identifier'\n      }\n    }], [/[A-Z][\\w\\$]*/, 'type.identifier'], // [/[A-Z][\\w\\$]*/, 'identifier'],\n    // whitespace\n    {\n      include: '@whitespace'\n    }, // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\n    [/\\/(?=([^\\\\\\/]|\\\\.)+\\/([gimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/, {\n      token: 'regexp',\n      bracket: '@open',\n      next: '@regexp'\n    }], // delimiters and operators\n    [/[()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/!(?=([^=]|$))/, 'delimiter'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/(@digits)[eE]([\\-+]?(@digits))?/, 'number.float'], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, 'number.float'], [/0[xX](@hexdigits)n?/, 'number.hex'], [/0[oO]?(@octaldigits)n?/, 'number.octal'], [/0[bB](@binarydigits)n?/, 'number.binary'], [/(@digits)n?/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string_double'], [/'/, 'string', '@string_single'], [/`/, 'string', '@string_backtick']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@jsdoc'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    jsdoc: [[/[^\\/*]+/, 'comment.doc'], [/\\*\\//, 'comment.doc', '@pop'], [/[\\/*]/, 'comment.doc']],\n    // We match regular expression quite precisely\n    regexp: [[/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control']], [/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/, ['regexp.escape.control', {\n      token: 'regexp.escape.control',\n      next: '@regexrange'\n    }]], [/(\\()(\\?:|\\?=|\\?!)/, ['regexp.escape.control', 'regexp.escape.control']], [/[()]/, 'regexp.escape.control'], [/@regexpctl/, 'regexp.escape.control'], [/[^\\\\\\/]/, 'regexp'], [/@regexpesc/, 'regexp.escape'], [/\\\\\\./, 'regexp.invalid'], [/(\\/)([gimsuy]*)/, [{\n      token: 'regexp',\n      bracket: '@close',\n      next: '@pop'\n    }, 'keyword.other']]],\n    regexrange: [[/-/, 'regexp.escape.control'], [/\\^/, 'regexp.invalid'], [/@regexpesc/, 'regexp.escape'], [/[^\\]]/, 'regexp'], [/\\]/, {\n      token: 'regexp.escape.control',\n      next: '@pop',\n      bracket: '@close'\n    }]],\n    string_double: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop']],\n    string_single: [[/[^\\\\']+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/'/, 'string', '@pop']],\n    string_backtick: [[/\\$\\{/, {\n      token: 'delimiter.bracket',\n      next: '@bracketCounting'\n    }], [/[^\\\\`$]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/`/, 'string', '@pop']],\n    bracketCounting: [[/\\{/, 'delimiter.bracket', '@bracketCounting'], [/\\}/, 'delimiter.bracket', '@pop'], {\n      include: 'common'\n    }]\n  }\n};","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js"],"names":["_monaco","monaco","self","conf","wordPattern","comments","lineComment","blockComment","brackets","onEnterRules","beforeText","afterText","action","indentAction","languages","IndentAction","IndentOutdent","appendText","None","removeText","autoClosingPairs","open","close","notIn","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","keywords","typeKeywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","regexpctl","regexpesc","tokenizer","root","include","common","cases","token","bracket","next","whitespace","comment","jsdoc","regexp","regexrange","string_double","string_single","string_backtick","bracketCounting"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n// Allow for running under nodejs/requirejs in tests\r\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            // e.g. /** | */\r\n            beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\r\n            afterText: /^\\s*\\*\\/$/,\r\n            action: { indentAction: _monaco.languages.IndentAction.IndentOutdent, appendText: ' * ' }\r\n        },\r\n        {\r\n            // e.g. /** ...|\r\n            beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\r\n            action: { indentAction: _monaco.languages.IndentAction.None, appendText: ' * ' }\r\n        },\r\n        {\r\n            // e.g.  * ...|\r\n            beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\r\n            action: { indentAction: _monaco.languages.IndentAction.None, appendText: '* ' }\r\n        },\r\n        {\r\n            // e.g.  */|\r\n            beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\r\n            action: { indentAction: _monaco.languages.IndentAction.None, removeText: 1 }\r\n        }\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"', notIn: ['string'] },\r\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\r\n        { open: '`', close: '`', notIn: ['string', 'comment'] },\r\n        { open: \"/**\", close: \" */\", notIn: [\"string\"] }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\r\n            end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    // Set defaultToken to invalid to see what you do not tokenize yet\r\n    defaultToken: 'invalid',\r\n    tokenPostfix: '.ts',\r\n    keywords: [\r\n        'abstract', 'as', 'break', 'case', 'catch', 'class', 'continue', 'const',\r\n        'constructor', 'debugger', 'declare', 'default', 'delete', 'do', 'else',\r\n        'enum', 'export', 'extends', 'false', 'finally', 'for', 'from', 'function',\r\n        'get', 'if', 'implements', 'import', 'in', 'infer', 'instanceof', 'interface',\r\n        'is', 'keyof', 'let', 'module', 'namespace', 'never', 'new', 'null', 'package',\r\n        'private', 'protected', 'public', 'readonly', 'require', 'global', 'return',\r\n        'set', 'static', 'super', 'switch', 'symbol', 'this', 'throw', 'true', 'try',\r\n        'type', 'typeof', 'unique', 'var', 'void', 'while', 'with', 'yield', 'async',\r\n        'await', 'of'\r\n    ],\r\n    typeKeywords: [\r\n        'any', 'boolean', 'number', 'object', 'string', 'undefined'\r\n    ],\r\n    operators: [\r\n        '<=', '>=', '==', '!=', '===', '!==', '=>', '+', '-', '**',\r\n        '*', '/', '%', '++', '--', '<<', '</', '>>', '>>>', '&',\r\n        '|', '^', '!', '~', '&&', '||', '??', '?', ':', '=', '+=', '-=',\r\n        '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=',\r\n        '^=', '@',\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    digits: /\\d+(_+\\d+)*/,\r\n    octaldigits: /[0-7]+(_+[0-7]+)*/,\r\n    binarydigits: /[0-1]+(_+[0-1]+)*/,\r\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\r\n    regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\r\n    regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            [/[{}]/, 'delimiter.bracket'],\r\n            { include: 'common' }\r\n        ],\r\n        common: [\r\n            // identifiers and keywords\r\n            [/[a-z_$][\\w$]*/, {\r\n                    cases: {\r\n                        '@typeKeywords': 'keyword',\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            [/[A-Z][\\w\\$]*/, 'type.identifier'],\r\n            // [/[A-Z][\\w\\$]*/, 'identifier'],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\r\n            [/\\/(?=([^\\\\\\/]|\\\\.)+\\/([gimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/, { token: 'regexp', bracket: '@open', next: '@regexp' }],\r\n            // delimiters and operators\r\n            [/[()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/!(?=([^=]|$))/, 'delimiter'],\r\n            [/@symbols/, {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            // numbers\r\n            [/(@digits)[eE]([\\-+]?(@digits))?/, 'number.float'],\r\n            [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, 'number.float'],\r\n            [/0[xX](@hexdigits)n?/, 'number.hex'],\r\n            [/0[oO]?(@octaldigits)n?/, 'number.octal'],\r\n            [/0[bB](@binarydigits)n?/, 'number.binary'],\r\n            [/(@digits)n?/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, 'string', '@string_double'],\r\n            [/'/, 'string', '@string_single'],\r\n            [/`/, 'string', '@string_backtick'],\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@jsdoc'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n        comment: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        jsdoc: [\r\n            [/[^\\/*]+/, 'comment.doc'],\r\n            [/\\*\\//, 'comment.doc', '@pop'],\r\n            [/[\\/*]/, 'comment.doc']\r\n        ],\r\n        // We match regular expression quite precisely\r\n        regexp: [\r\n            [/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control']],\r\n            [/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/, ['regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]],\r\n            [/(\\()(\\?:|\\?=|\\?!)/, ['regexp.escape.control', 'regexp.escape.control']],\r\n            [/[()]/, 'regexp.escape.control'],\r\n            [/@regexpctl/, 'regexp.escape.control'],\r\n            [/[^\\\\\\/]/, 'regexp'],\r\n            [/@regexpesc/, 'regexp.escape'],\r\n            [/\\\\\\./, 'regexp.invalid'],\r\n            [/(\\/)([gimsuy]*)/, [{ token: 'regexp', bracket: '@close', next: '@pop' }, 'keyword.other']],\r\n        ],\r\n        regexrange: [\r\n            [/-/, 'regexp.escape.control'],\r\n            [/\\^/, 'regexp.invalid'],\r\n            [/@regexpesc/, 'regexp.escape'],\r\n            [/[^\\]]/, 'regexp'],\r\n            [/\\]/, { token: 'regexp.escape.control', next: '@pop', bracket: '@close' }]\r\n        ],\r\n        string_double: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, 'string', '@pop']\r\n        ],\r\n        string_single: [\r\n            [/[^\\\\']+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/'/, 'string', '@pop']\r\n        ],\r\n        string_backtick: [\r\n            [/\\$\\{/, { token: 'delimiter.bracket', next: '@bracketCounting' }],\r\n            [/[^\\\\`$]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/`/, 'string', '@pop']\r\n        ],\r\n        bracketCounting: [\r\n            [/\\{/, 'delimiter.bracket', '@bracketCounting'],\r\n            [/\\}/, 'delimiter.bracket', '@pop'],\r\n            { include: 'common' }\r\n        ],\r\n    },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}