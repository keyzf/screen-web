{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { LanguageIdentifier } from '../modes.js';\nimport { LanguageConfigurationRegistry } from './languageConfigurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js'; // Define extension point ids\n\nexport var Extensions = {\n  ModesRegistry: 'editor.modesRegistry'\n};\n\nvar EditorModesRegistry =\n/** @class */\nfunction () {\n  function EditorModesRegistry() {\n    this._onDidChangeLanguages = new Emitter();\n    this.onDidChangeLanguages = this._onDidChangeLanguages.event;\n    this._languages = [];\n    this._dynamicLanguages = [];\n  } // --- languages\n\n\n  EditorModesRegistry.prototype.registerLanguage = function (def) {\n    this._languages.push(def);\n\n    this._onDidChangeLanguages.fire(undefined);\n  };\n\n  EditorModesRegistry.prototype.getLanguages = function () {\n    return [].concat(this._languages).concat(this._dynamicLanguages);\n  };\n\n  return EditorModesRegistry;\n}();\n\nexport { EditorModesRegistry };\nexport var ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\nexport var PLAINTEXT_MODE_ID = 'plaintext';\nexport var PLAINTEXT_LANGUAGE_IDENTIFIER = new LanguageIdentifier(PLAINTEXT_MODE_ID, 1\n/* PlainText */\n);\nModesRegistry.registerLanguage({\n  id: PLAINTEXT_MODE_ID,\n  extensions: ['.txt', '.gitignore'],\n  aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n  mimetypes: ['text/plain']\n});\nLanguageConfigurationRegistry.register(PLAINTEXT_LANGUAGE_IDENTIFIER, {\n  brackets: [['(', ')'], ['[', ']'], ['{', '}']],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: '\\\"',\n    close: '\\\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }, {\n    open: '`',\n    close: '`'\n  }],\n  folding: {\n    offSide: true\n  }\n});","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/modes/modesRegistry.js"],"names":["nls","Emitter","LanguageIdentifier","LanguageConfigurationRegistry","Registry","Extensions","ModesRegistry","EditorModesRegistry","_onDidChangeLanguages","onDidChangeLanguages","event","_languages","_dynamicLanguages","prototype","registerLanguage","def","push","fire","undefined","getLanguages","concat","add","PLAINTEXT_MODE_ID","PLAINTEXT_LANGUAGE_IDENTIFIER","id","extensions","aliases","localize","mimetypes","register","brackets","surroundingPairs","open","close","folding","offSide"],"mappings":"AAAA;;;;AAIA,OAAO,KAAKA,GAAZ,MAAqB,iBAArB;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,6BAAT,QAA8C,oCAA9C;AACA,SAASC,QAAT,QAAyB,+CAAzB,C,CACA;;AACA,OAAO,IAAIC,UAAU,GAAG;AACpBC,EAAAA,aAAa,EAAE;AADK,CAAjB;;AAGP,IAAIC,mBAAmB;AAAG;AAAe,YAAY;AACjD,WAASA,mBAAT,GAA+B;AAC3B,SAAKC,qBAAL,GAA6B,IAAIP,OAAJ,EAA7B;AACA,SAAKQ,oBAAL,GAA4B,KAAKD,qBAAL,CAA2BE,KAAvD;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACH,GANgD,CAOjD;;;AACAL,EAAAA,mBAAmB,CAACM,SAApB,CAA8BC,gBAA9B,GAAiD,UAAUC,GAAV,EAAe;AAC5D,SAAKJ,UAAL,CAAgBK,IAAhB,CAAqBD,GAArB;;AACA,SAAKP,qBAAL,CAA2BS,IAA3B,CAAgCC,SAAhC;AACH,GAHD;;AAIAX,EAAAA,mBAAmB,CAACM,SAApB,CAA8BM,YAA9B,GAA6C,YAAY;AACrD,WAAO,GAAGC,MAAH,CAAU,KAAKT,UAAf,EAA2BS,MAA3B,CAAkC,KAAKR,iBAAvC,CAAP;AACH,GAFD;;AAGA,SAAOL,mBAAP;AACH,CAhBwC,EAAzC;;AAiBA,SAASA,mBAAT;AACA,OAAO,IAAID,aAAa,GAAG,IAAIC,mBAAJ,EAApB;AACPH,QAAQ,CAACiB,GAAT,CAAahB,UAAU,CAACC,aAAxB,EAAuCA,aAAvC;AACA,OAAO,IAAIgB,iBAAiB,GAAG,WAAxB;AACP,OAAO,IAAIC,6BAA6B,GAAG,IAAIrB,kBAAJ,CAAuBoB,iBAAvB,EAA0C;AAAE;AAA5C,CAApC;AACPhB,aAAa,CAACQ,gBAAd,CAA+B;AAC3BU,EAAAA,EAAE,EAAEF,iBADuB;AAE3BG,EAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,YAAT,CAFe;AAG3BC,EAAAA,OAAO,EAAE,CAAC1B,GAAG,CAAC2B,QAAJ,CAAa,iBAAb,EAAgC,YAAhC,CAAD,EAAgD,MAAhD,CAHkB;AAI3BC,EAAAA,SAAS,EAAE,CAAC,YAAD;AAJgB,CAA/B;AAMAzB,6BAA6B,CAAC0B,QAA9B,CAAuCN,6BAAvC,EAAsE;AAClEO,EAAAA,QAAQ,EAAE,CACN,CAAC,GAAD,EAAM,GAAN,CADM,EAEN,CAAC,GAAD,EAAM,GAAN,CAFM,EAGN,CAAC,GAAD,EAAM,GAAN,CAHM,CADwD;AAMlEC,EAAAA,gBAAgB,EAAE,CACd;AAAEC,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB,GADc,EAEd;AAAED,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB,GAFc,EAGd;AAAED,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB,GAHc,EAId;AAAED,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB,GAJc,EAKd;AAAED,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,KAAK,EAAE;AAArB,GALc,EAMd;AAAED,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,KAAK,EAAE;AAArB,GANc,EAOd;AAAED,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB,GAPc,CANgD;AAelEC,EAAAA,OAAO,EAAE;AACLC,IAAAA,OAAO,EAAE;AADJ;AAfyD,CAAtE","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { LanguageIdentifier } from '../modes.js';\r\nimport { LanguageConfigurationRegistry } from './languageConfigurationRegistry.js';\r\nimport { Registry } from '../../../platform/registry/common/platform.js';\r\n// Define extension point ids\r\nexport var Extensions = {\r\n    ModesRegistry: 'editor.modesRegistry'\r\n};\r\nvar EditorModesRegistry = /** @class */ (function () {\r\n    function EditorModesRegistry() {\r\n        this._onDidChangeLanguages = new Emitter();\r\n        this.onDidChangeLanguages = this._onDidChangeLanguages.event;\r\n        this._languages = [];\r\n        this._dynamicLanguages = [];\r\n    }\r\n    // --- languages\r\n    EditorModesRegistry.prototype.registerLanguage = function (def) {\r\n        this._languages.push(def);\r\n        this._onDidChangeLanguages.fire(undefined);\r\n    };\r\n    EditorModesRegistry.prototype.getLanguages = function () {\r\n        return [].concat(this._languages).concat(this._dynamicLanguages);\r\n    };\r\n    return EditorModesRegistry;\r\n}());\r\nexport { EditorModesRegistry };\r\nexport var ModesRegistry = new EditorModesRegistry();\r\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\r\nexport var PLAINTEXT_MODE_ID = 'plaintext';\r\nexport var PLAINTEXT_LANGUAGE_IDENTIFIER = new LanguageIdentifier(PLAINTEXT_MODE_ID, 1 /* PlainText */);\r\nModesRegistry.registerLanguage({\r\n    id: PLAINTEXT_MODE_ID,\r\n    extensions: ['.txt', '.gitignore'],\r\n    aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\r\n    mimetypes: ['text/plain']\r\n});\r\nLanguageConfigurationRegistry.register(PLAINTEXT_LANGUAGE_IDENTIFIER, {\r\n    brackets: [\r\n        ['(', ')'],\r\n        ['[', ']'],\r\n        ['{', '}'],\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: '\\\"', close: '\\\"' },\r\n        { open: '\\'', close: '\\'' },\r\n        { open: '`', close: '`' },\r\n    ],\r\n    folding: {\r\n        offSide: true\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}