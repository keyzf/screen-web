{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { DiffChange } from './diffChange.js';\nimport { stringHash } from '../hash.js';\n\nvar StringDiffSequence =\n/** @class */\nfunction () {\n  function StringDiffSequence(source) {\n    this.source = source;\n  }\n\n  StringDiffSequence.prototype.getElements = function () {\n    var source = this.source;\n    var characters = new Int32Array(source.length);\n\n    for (var i = 0, len = source.length; i < len; i++) {\n      characters[i] = source.charCodeAt(i);\n    }\n\n    return characters;\n  };\n\n  return StringDiffSequence;\n}();\n\nexport { StringDiffSequence };\nexport function stringDiff(original, modified, pretty) {\n  return new LcsDiff(new StringDiffSequence(original), new StringDiffSequence(modified)).ComputeDiff(pretty).changes;\n} //\n// The code below has been ported from a C# implementation in VS\n//\n\nvar Debug =\n/** @class */\nfunction () {\n  function Debug() {}\n\n  Debug.Assert = function (condition, message) {\n    if (!condition) {\n      throw new Error(message);\n    }\n  };\n\n  return Debug;\n}();\n\nexport { Debug };\n\nvar MyArray =\n/** @class */\nfunction () {\n  function MyArray() {}\n  /**\r\n   * Copies a range of elements from an Array starting at the specified source index and pastes\r\n   * them to another Array starting at the specified destination index. The length and the indexes\r\n   * are specified as 64-bit integers.\r\n   * sourceArray:\r\n   *\t\tThe Array that contains the data to copy.\r\n   * sourceIndex:\r\n   *\t\tA 64-bit integer that represents the index in the sourceArray at which copying begins.\r\n   * destinationArray:\r\n   *\t\tThe Array that receives the data.\r\n   * destinationIndex:\r\n   *\t\tA 64-bit integer that represents the index in the destinationArray at which storing begins.\r\n   * length:\r\n   *\t\tA 64-bit integer that represents the number of elements to copy.\r\n   */\n\n\n  MyArray.Copy = function (sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\n    for (var i = 0; i < length; i++) {\n      destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\n    }\n  };\n\n  MyArray.Copy2 = function (sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\n    for (var i = 0; i < length; i++) {\n      destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\n    }\n  };\n\n  return MyArray;\n}();\n\nexport { MyArray };\n/**\r\n * A utility class which helps to create the set of DiffChanges from\r\n * a difference operation. This class accepts original DiffElements and\r\n * modified DiffElements that are involved in a particular change. The\r\n * MarktNextChange() method can be called to mark the separation between\r\n * distinct changes. At the end, the Changes property can be called to retrieve\r\n * the constructed changes.\r\n */\n\nvar DiffChangeHelper =\n/** @class */\nfunction () {\n  /**\r\n   * Constructs a new DiffChangeHelper for the given DiffSequences.\r\n   */\n  function DiffChangeHelper() {\n    this.m_changes = [];\n    this.m_originalStart = 1073741824\n    /* MAX_SAFE_SMALL_INTEGER */\n    ;\n    this.m_modifiedStart = 1073741824\n    /* MAX_SAFE_SMALL_INTEGER */\n    ;\n    this.m_originalCount = 0;\n    this.m_modifiedCount = 0;\n  }\n  /**\r\n   * Marks the beginning of the next change in the set of differences.\r\n   */\n\n\n  DiffChangeHelper.prototype.MarkNextChange = function () {\n    // Only add to the list if there is something to add\n    if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n      // Add the new change to our list\n      this.m_changes.push(new DiffChange(this.m_originalStart, this.m_originalCount, this.m_modifiedStart, this.m_modifiedCount));\n    } // Reset for the next change\n\n\n    this.m_originalCount = 0;\n    this.m_modifiedCount = 0;\n    this.m_originalStart = 1073741824\n    /* MAX_SAFE_SMALL_INTEGER */\n    ;\n    this.m_modifiedStart = 1073741824\n    /* MAX_SAFE_SMALL_INTEGER */\n    ;\n  };\n  /**\r\n   * Adds the original element at the given position to the elements\r\n   * affected by the current change. The modified index gives context\r\n   * to the change position with respect to the original sequence.\r\n   * @param originalIndex The index of the original element to add.\r\n   * @param modifiedIndex The index of the modified element that provides corresponding position in the modified sequence.\r\n   */\n\n\n  DiffChangeHelper.prototype.AddOriginalElement = function (originalIndex, modifiedIndex) {\n    // The 'true' start index is the smallest of the ones we've seen\n    this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\n    this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\n    this.m_originalCount++;\n  };\n  /**\r\n   * Adds the modified element at the given position to the elements\r\n   * affected by the current change. The original index gives context\r\n   * to the change position with respect to the modified sequence.\r\n   * @param originalIndex The index of the original element that provides corresponding position in the original sequence.\r\n   * @param modifiedIndex The index of the modified element to add.\r\n   */\n\n\n  DiffChangeHelper.prototype.AddModifiedElement = function (originalIndex, modifiedIndex) {\n    // The 'true' start index is the smallest of the ones we've seen\n    this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\n    this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\n    this.m_modifiedCount++;\n  };\n  /**\r\n   * Retrieves all of the changes marked by the class.\r\n   */\n\n\n  DiffChangeHelper.prototype.getChanges = function () {\n    if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n      // Finish up on whatever is left\n      this.MarkNextChange();\n    }\n\n    return this.m_changes;\n  };\n  /**\r\n   * Retrieves all of the changes marked by the class in the reverse order\r\n   */\n\n\n  DiffChangeHelper.prototype.getReverseChanges = function () {\n    if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n      // Finish up on whatever is left\n      this.MarkNextChange();\n    }\n\n    this.m_changes.reverse();\n    return this.m_changes;\n  };\n\n  return DiffChangeHelper;\n}();\n/**\r\n * An implementation of the difference algorithm described in\r\n * \"An O(ND) Difference Algorithm and its variations\" by Eugene W. Myers\r\n */\n\n\nvar LcsDiff =\n/** @class */\nfunction () {\n  /**\r\n   * Constructs the DiffFinder\r\n   */\n  function LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate) {\n    if (continueProcessingPredicate === void 0) {\n      continueProcessingPredicate = null;\n    }\n\n    this.ContinueProcessingPredicate = continueProcessingPredicate;\n\n    var _a = LcsDiff._getElements(originalSequence),\n        originalStringElements = _a[0],\n        originalElementsOrHash = _a[1],\n        originalHasStrings = _a[2];\n\n    var _b = LcsDiff._getElements(modifiedSequence),\n        modifiedStringElements = _b[0],\n        modifiedElementsOrHash = _b[1],\n        modifiedHasStrings = _b[2];\n\n    this._hasStrings = originalHasStrings && modifiedHasStrings;\n    this._originalStringElements = originalStringElements;\n    this._originalElementsOrHash = originalElementsOrHash;\n    this._modifiedStringElements = modifiedStringElements;\n    this._modifiedElementsOrHash = modifiedElementsOrHash;\n    this.m_forwardHistory = [];\n    this.m_reverseHistory = [];\n  }\n\n  LcsDiff._isStringArray = function (arr) {\n    return arr.length > 0 && typeof arr[0] === 'string';\n  };\n\n  LcsDiff._getElements = function (sequence) {\n    var elements = sequence.getElements();\n\n    if (LcsDiff._isStringArray(elements)) {\n      var hashes = new Int32Array(elements.length);\n\n      for (var i = 0, len = elements.length; i < len; i++) {\n        hashes[i] = stringHash(elements[i], 0);\n      }\n\n      return [elements, hashes, true];\n    }\n\n    if (elements instanceof Int32Array) {\n      return [[], elements, false];\n    }\n\n    return [[], new Int32Array(elements), false];\n  };\n\n  LcsDiff.prototype.ElementsAreEqual = function (originalIndex, newIndex) {\n    if (this._originalElementsOrHash[originalIndex] !== this._modifiedElementsOrHash[newIndex]) {\n      return false;\n    }\n\n    return this._hasStrings ? this._originalStringElements[originalIndex] === this._modifiedStringElements[newIndex] : true;\n  };\n\n  LcsDiff.prototype.OriginalElementsAreEqual = function (index1, index2) {\n    if (this._originalElementsOrHash[index1] !== this._originalElementsOrHash[index2]) {\n      return false;\n    }\n\n    return this._hasStrings ? this._originalStringElements[index1] === this._originalStringElements[index2] : true;\n  };\n\n  LcsDiff.prototype.ModifiedElementsAreEqual = function (index1, index2) {\n    if (this._modifiedElementsOrHash[index1] !== this._modifiedElementsOrHash[index2]) {\n      return false;\n    }\n\n    return this._hasStrings ? this._modifiedStringElements[index1] === this._modifiedStringElements[index2] : true;\n  };\n\n  LcsDiff.prototype.ComputeDiff = function (pretty) {\n    return this._ComputeDiff(0, this._originalElementsOrHash.length - 1, 0, this._modifiedElementsOrHash.length - 1, pretty);\n  };\n  /**\r\n   * Computes the differences between the original and modified input\r\n   * sequences on the bounded range.\r\n   * @returns An array of the differences between the two input sequences.\r\n   */\n\n\n  LcsDiff.prototype._ComputeDiff = function (originalStart, originalEnd, modifiedStart, modifiedEnd, pretty) {\n    var quitEarlyArr = [false];\n    var changes = this.ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr);\n\n    if (pretty) {\n      // We have to clean up the computed diff to be more intuitive\n      // but it turns out this cannot be done correctly until the entire set\n      // of diffs have been computed\n      changes = this.PrettifyChanges(changes);\n    }\n\n    return {\n      quitEarly: quitEarlyArr[0],\n      changes: changes\n    };\n  };\n  /**\r\n   * Private helper method which computes the differences on the bounded range\r\n   * recursively.\r\n   * @returns An array of the differences between the two input sequences.\r\n   */\n\n\n  LcsDiff.prototype.ComputeDiffRecursive = function (originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr) {\n    quitEarlyArr[0] = false; // Find the start of the differences\n\n    while (originalStart <= originalEnd && modifiedStart <= modifiedEnd && this.ElementsAreEqual(originalStart, modifiedStart)) {\n      originalStart++;\n      modifiedStart++;\n    } // Find the end of the differences\n\n\n    while (originalEnd >= originalStart && modifiedEnd >= modifiedStart && this.ElementsAreEqual(originalEnd, modifiedEnd)) {\n      originalEnd--;\n      modifiedEnd--;\n    } // In the special case where we either have all insertions or all deletions or the sequences are identical\n\n\n    if (originalStart > originalEnd || modifiedStart > modifiedEnd) {\n      var changes = void 0;\n\n      if (modifiedStart <= modifiedEnd) {\n        Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd'); // All insertions\n\n        changes = [new DiffChange(originalStart, 0, modifiedStart, modifiedEnd - modifiedStart + 1)];\n      } else if (originalStart <= originalEnd) {\n        Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd'); // All deletions\n\n        changes = [new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, 0)];\n      } else {\n        Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');\n        Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd'); // Identical sequences - No differences\n\n        changes = [];\n      }\n\n      return changes;\n    } // This problem can be solved using the Divide-And-Conquer technique.\n\n\n    var midOriginalArr = [0];\n    var midModifiedArr = [0];\n    var result = this.ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr);\n    var midOriginal = midOriginalArr[0];\n    var midModified = midModifiedArr[0];\n\n    if (result !== null) {\n      // Result is not-null when there was enough memory to compute the changes while\n      // searching for the recursion point\n      return result;\n    } else if (!quitEarlyArr[0]) {\n      // We can break the problem down recursively by finding the changes in the\n      // First Half:   (originalStart, modifiedStart) to (midOriginal, midModified)\n      // Second Half:  (midOriginal + 1, minModified + 1) to (originalEnd, modifiedEnd)\n      // NOTE: ComputeDiff() is inclusive, therefore the second range starts on the next point\n      var leftChanges = this.ComputeDiffRecursive(originalStart, midOriginal, modifiedStart, midModified, quitEarlyArr);\n      var rightChanges = [];\n\n      if (!quitEarlyArr[0]) {\n        rightChanges = this.ComputeDiffRecursive(midOriginal + 1, originalEnd, midModified + 1, modifiedEnd, quitEarlyArr);\n      } else {\n        // We did't have time to finish the first half, so we don't have time to compute this half.\n        // Consider the entire rest of the sequence different.\n        rightChanges = [new DiffChange(midOriginal + 1, originalEnd - (midOriginal + 1) + 1, midModified + 1, modifiedEnd - (midModified + 1) + 1)];\n      }\n\n      return this.ConcatenateChanges(leftChanges, rightChanges);\n    } // If we hit here, we quit early, and so can't return anything meaningful\n\n\n    return [new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)];\n  };\n\n  LcsDiff.prototype.WALKTRACE = function (diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr) {\n    var forwardChanges = null;\n    var reverseChanges = null; // First, walk backward through the forward diagonals history\n\n    var changeHelper = new DiffChangeHelper();\n    var diagonalMin = diagonalForwardStart;\n    var diagonalMax = diagonalForwardEnd;\n    var diagonalRelative = midOriginalArr[0] - midModifiedArr[0] - diagonalForwardOffset;\n    var lastOriginalIndex = -1073741824\n    /* MIN_SAFE_SMALL_INTEGER */\n    ;\n    var historyIndex = this.m_forwardHistory.length - 1;\n\n    do {\n      // Get the diagonal index from the relative diagonal number\n      var diagonal = diagonalRelative + diagonalForwardBase; // Figure out where we came from\n\n      if (diagonal === diagonalMin || diagonal < diagonalMax && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1]) {\n        // Vertical line (the element is an insert)\n        originalIndex = forwardPoints[diagonal + 1];\n        modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\n\n        if (originalIndex < lastOriginalIndex) {\n          changeHelper.MarkNextChange();\n        }\n\n        lastOriginalIndex = originalIndex;\n        changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex);\n        diagonalRelative = diagonal + 1 - diagonalForwardBase; //Setup for the next iteration\n      } else {\n        // Horizontal line (the element is a deletion)\n        originalIndex = forwardPoints[diagonal - 1] + 1;\n        modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\n\n        if (originalIndex < lastOriginalIndex) {\n          changeHelper.MarkNextChange();\n        }\n\n        lastOriginalIndex = originalIndex - 1;\n        changeHelper.AddOriginalElement(originalIndex, modifiedIndex + 1);\n        diagonalRelative = diagonal - 1 - diagonalForwardBase; //Setup for the next iteration\n      }\n\n      if (historyIndex >= 0) {\n        forwardPoints = this.m_forwardHistory[historyIndex];\n        diagonalForwardBase = forwardPoints[0]; //We stored this in the first spot\n\n        diagonalMin = 1;\n        diagonalMax = forwardPoints.length - 1;\n      }\n    } while (--historyIndex >= -1); // Ironically, we get the forward changes as the reverse of the\n    // order we added them since we technically added them backwards\n\n\n    forwardChanges = changeHelper.getReverseChanges();\n\n    if (quitEarlyArr[0]) {\n      // TODO: Calculate a partial from the reverse diagonals.\n      //       For now, just assume everything after the midOriginal/midModified point is a diff\n      var originalStartPoint = midOriginalArr[0] + 1;\n      var modifiedStartPoint = midModifiedArr[0] + 1;\n\n      if (forwardChanges !== null && forwardChanges.length > 0) {\n        var lastForwardChange = forwardChanges[forwardChanges.length - 1];\n        originalStartPoint = Math.max(originalStartPoint, lastForwardChange.getOriginalEnd());\n        modifiedStartPoint = Math.max(modifiedStartPoint, lastForwardChange.getModifiedEnd());\n      }\n\n      reverseChanges = [new DiffChange(originalStartPoint, originalEnd - originalStartPoint + 1, modifiedStartPoint, modifiedEnd - modifiedStartPoint + 1)];\n    } else {\n      // Now walk backward through the reverse diagonals history\n      changeHelper = new DiffChangeHelper();\n      diagonalMin = diagonalReverseStart;\n      diagonalMax = diagonalReverseEnd;\n      diagonalRelative = midOriginalArr[0] - midModifiedArr[0] - diagonalReverseOffset;\n      lastOriginalIndex = 1073741824\n      /* MAX_SAFE_SMALL_INTEGER */\n      ;\n      historyIndex = deltaIsEven ? this.m_reverseHistory.length - 1 : this.m_reverseHistory.length - 2;\n\n      do {\n        // Get the diagonal index from the relative diagonal number\n        var diagonal = diagonalRelative + diagonalReverseBase; // Figure out where we came from\n\n        if (diagonal === diagonalMin || diagonal < diagonalMax && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1]) {\n          // Horizontal line (the element is a deletion))\n          originalIndex = reversePoints[diagonal + 1] - 1;\n          modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\n\n          if (originalIndex > lastOriginalIndex) {\n            changeHelper.MarkNextChange();\n          }\n\n          lastOriginalIndex = originalIndex + 1;\n          changeHelper.AddOriginalElement(originalIndex + 1, modifiedIndex + 1);\n          diagonalRelative = diagonal + 1 - diagonalReverseBase; //Setup for the next iteration\n        } else {\n          // Vertical line (the element is an insertion)\n          originalIndex = reversePoints[diagonal - 1];\n          modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\n\n          if (originalIndex > lastOriginalIndex) {\n            changeHelper.MarkNextChange();\n          }\n\n          lastOriginalIndex = originalIndex;\n          changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex + 1);\n          diagonalRelative = diagonal - 1 - diagonalReverseBase; //Setup for the next iteration\n        }\n\n        if (historyIndex >= 0) {\n          reversePoints = this.m_reverseHistory[historyIndex];\n          diagonalReverseBase = reversePoints[0]; //We stored this in the first spot\n\n          diagonalMin = 1;\n          diagonalMax = reversePoints.length - 1;\n        }\n      } while (--historyIndex >= -1); // There are cases where the reverse history will find diffs that\n      // are correct, but not intuitive, so we need shift them.\n\n\n      reverseChanges = changeHelper.getChanges();\n    }\n\n    return this.ConcatenateChanges(forwardChanges, reverseChanges);\n  };\n  /**\r\n   * Given the range to compute the diff on, this method finds the point:\r\n   * (midOriginal, midModified)\r\n   * that exists in the middle of the LCS of the two sequences and\r\n   * is the point at which the LCS problem may be broken down recursively.\r\n   * This method will try to keep the LCS trace in memory. If the LCS recursion\r\n   * point is calculated and the full trace is available in memory, then this method\r\n   * will return the change list.\r\n   * @param originalStart The start bound of the original sequence range\r\n   * @param originalEnd The end bound of the original sequence range\r\n   * @param modifiedStart The start bound of the modified sequence range\r\n   * @param modifiedEnd The end bound of the modified sequence range\r\n   * @param midOriginal The middle point of the original sequence range\r\n   * @param midModified The middle point of the modified sequence range\r\n   * @returns The diff changes, if available, otherwise null\r\n   */\n\n\n  LcsDiff.prototype.ComputeRecursionPoint = function (originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr) {\n    var originalIndex = 0,\n        modifiedIndex = 0;\n    var diagonalForwardStart = 0,\n        diagonalForwardEnd = 0;\n    var diagonalReverseStart = 0,\n        diagonalReverseEnd = 0; // To traverse the edit graph and produce the proper LCS, our actual\n    // start position is just outside the given boundary\n\n    originalStart--;\n    modifiedStart--; // We set these up to make the compiler happy, but they will\n    // be replaced before we return with the actual recursion point\n\n    midOriginalArr[0] = 0;\n    midModifiedArr[0] = 0; // Clear out the history\n\n    this.m_forwardHistory = [];\n    this.m_reverseHistory = []; // Each cell in the two arrays corresponds to a diagonal in the edit graph.\n    // The integer value in the cell represents the originalIndex of the furthest\n    // reaching point found so far that ends in that diagonal.\n    // The modifiedIndex can be computed mathematically from the originalIndex and the diagonal number.\n\n    var maxDifferences = originalEnd - originalStart + (modifiedEnd - modifiedStart);\n    var numDiagonals = maxDifferences + 1;\n    var forwardPoints = new Int32Array(numDiagonals);\n    var reversePoints = new Int32Array(numDiagonals); // diagonalForwardBase: Index into forwardPoints of the diagonal which passes through (originalStart, modifiedStart)\n    // diagonalReverseBase: Index into reversePoints of the diagonal which passes through (originalEnd, modifiedEnd)\n\n    var diagonalForwardBase = modifiedEnd - modifiedStart;\n    var diagonalReverseBase = originalEnd - originalStart; // diagonalForwardOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\n    //    diagonal number (relative to diagonalForwardBase)\n    // diagonalReverseOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\n    //    diagonal number (relative to diagonalReverseBase)\n\n    var diagonalForwardOffset = originalStart - modifiedStart;\n    var diagonalReverseOffset = originalEnd - modifiedEnd; // delta: The difference between the end diagonal and the start diagonal. This is used to relate diagonal numbers\n    //   relative to the start diagonal with diagonal numbers relative to the end diagonal.\n    // The Even/Oddn-ness of this delta is important for determining when we should check for overlap\n\n    var delta = diagonalReverseBase - diagonalForwardBase;\n    var deltaIsEven = delta % 2 === 0; // Here we set up the start and end points as the furthest points found so far\n    // in both the forward and reverse directions, respectively\n\n    forwardPoints[diagonalForwardBase] = originalStart;\n    reversePoints[diagonalReverseBase] = originalEnd; // Remember if we quit early, and thus need to do a best-effort result instead of a real result.\n\n    quitEarlyArr[0] = false; // A couple of points:\n    // --With this method, we iterate on the number of differences between the two sequences.\n    //   The more differences there actually are, the longer this will take.\n    // --Also, as the number of differences increases, we have to search on diagonals further\n    //   away from the reference diagonal (which is diagonalForwardBase for forward, diagonalReverseBase for reverse).\n    // --We extend on even diagonals (relative to the reference diagonal) only when numDifferences\n    //   is even and odd diagonals only when numDifferences is odd.\n\n    for (var numDifferences = 1; numDifferences <= maxDifferences / 2 + 1; numDifferences++) {\n      var furthestOriginalIndex = 0;\n      var furthestModifiedIndex = 0; // Run the algorithm in the forward direction\n\n      diagonalForwardStart = this.ClipDiagonalBound(diagonalForwardBase - numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\n      diagonalForwardEnd = this.ClipDiagonalBound(diagonalForwardBase + numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\n\n      for (var diagonal = diagonalForwardStart; diagonal <= diagonalForwardEnd; diagonal += 2) {\n        // STEP 1: We extend the furthest reaching point in the present diagonal\n        // by looking at the diagonals above and below and picking the one whose point\n        // is further away from the start point (originalStart, modifiedStart)\n        if (diagonal === diagonalForwardStart || diagonal < diagonalForwardEnd && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1]) {\n          originalIndex = forwardPoints[diagonal + 1];\n        } else {\n          originalIndex = forwardPoints[diagonal - 1] + 1;\n        }\n\n        modifiedIndex = originalIndex - (diagonal - diagonalForwardBase) - diagonalForwardOffset; // Save the current originalIndex so we can test for false overlap in step 3\n\n        var tempOriginalIndex = originalIndex; // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\n        // so long as the elements are equal.\n\n        while (originalIndex < originalEnd && modifiedIndex < modifiedEnd && this.ElementsAreEqual(originalIndex + 1, modifiedIndex + 1)) {\n          originalIndex++;\n          modifiedIndex++;\n        }\n\n        forwardPoints[diagonal] = originalIndex;\n\n        if (originalIndex + modifiedIndex > furthestOriginalIndex + furthestModifiedIndex) {\n          furthestOriginalIndex = originalIndex;\n          furthestModifiedIndex = modifiedIndex;\n        } // STEP 3: If delta is odd (overlap first happens on forward when delta is odd)\n        // and diagonal is in the range of reverse diagonals computed for numDifferences-1\n        // (the previous iteration; we haven't computed reverse diagonals for numDifferences yet)\n        // then check for overlap.\n\n\n        if (!deltaIsEven && Math.abs(diagonal - diagonalReverseBase) <= numDifferences - 1) {\n          if (originalIndex >= reversePoints[diagonal]) {\n            midOriginalArr[0] = originalIndex;\n            midModifiedArr[0] = modifiedIndex;\n\n            if (tempOriginalIndex <= reversePoints[diagonal] && 1447\n            /* MaxDifferencesHistory */\n            > 0 && numDifferences <= 1447\n            /* MaxDifferencesHistory */\n            + 1) {\n              // BINGO! We overlapped, and we have the full trace in memory!\n              return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n            } else {\n              // Either false overlap, or we didn't have enough memory for the full trace\n              // Just return the recursion point\n              return null;\n            }\n          }\n        }\n      } // Check to see if we should be quitting early, before moving on to the next iteration.\n\n\n      var matchLengthOfLongest = (furthestOriginalIndex - originalStart + (furthestModifiedIndex - modifiedStart) - numDifferences) / 2;\n\n      if (this.ContinueProcessingPredicate !== null && !this.ContinueProcessingPredicate(furthestOriginalIndex, matchLengthOfLongest)) {\n        // We can't finish, so skip ahead to generating a result from what we have.\n        quitEarlyArr[0] = true; // Use the furthest distance we got in the forward direction.\n\n        midOriginalArr[0] = furthestOriginalIndex;\n        midModifiedArr[0] = furthestModifiedIndex;\n\n        if (matchLengthOfLongest > 0 && 1447\n        /* MaxDifferencesHistory */\n        > 0 && numDifferences <= 1447\n        /* MaxDifferencesHistory */\n        + 1) {\n          // Enough of the history is in memory to walk it backwards\n          return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n        } else {\n          // We didn't actually remember enough of the history.\n          //Since we are quiting the diff early, we need to shift back the originalStart and modified start\n          //back into the boundary limits since we decremented their value above beyond the boundary limit.\n          originalStart++;\n          modifiedStart++;\n          return [new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)];\n        }\n      } // Run the algorithm in the reverse direction\n\n\n      diagonalReverseStart = this.ClipDiagonalBound(diagonalReverseBase - numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\n      diagonalReverseEnd = this.ClipDiagonalBound(diagonalReverseBase + numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\n\n      for (var diagonal = diagonalReverseStart; diagonal <= diagonalReverseEnd; diagonal += 2) {\n        // STEP 1: We extend the furthest reaching point in the present diagonal\n        // by looking at the diagonals above and below and picking the one whose point\n        // is further away from the start point (originalEnd, modifiedEnd)\n        if (diagonal === diagonalReverseStart || diagonal < diagonalReverseEnd && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1]) {\n          originalIndex = reversePoints[diagonal + 1] - 1;\n        } else {\n          originalIndex = reversePoints[diagonal - 1];\n        }\n\n        modifiedIndex = originalIndex - (diagonal - diagonalReverseBase) - diagonalReverseOffset; // Save the current originalIndex so we can test for false overlap\n\n        var tempOriginalIndex = originalIndex; // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\n        // as long as the elements are equal.\n\n        while (originalIndex > originalStart && modifiedIndex > modifiedStart && this.ElementsAreEqual(originalIndex, modifiedIndex)) {\n          originalIndex--;\n          modifiedIndex--;\n        }\n\n        reversePoints[diagonal] = originalIndex; // STEP 4: If delta is even (overlap first happens on reverse when delta is even)\n        // and diagonal is in the range of forward diagonals computed for numDifferences\n        // then check for overlap.\n\n        if (deltaIsEven && Math.abs(diagonal - diagonalForwardBase) <= numDifferences) {\n          if (originalIndex <= forwardPoints[diagonal]) {\n            midOriginalArr[0] = originalIndex;\n            midModifiedArr[0] = modifiedIndex;\n\n            if (tempOriginalIndex >= forwardPoints[diagonal] && 1447\n            /* MaxDifferencesHistory */\n            > 0 && numDifferences <= 1447\n            /* MaxDifferencesHistory */\n            + 1) {\n              // BINGO! We overlapped, and we have the full trace in memory!\n              return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n            } else {\n              // Either false overlap, or we didn't have enough memory for the full trace\n              // Just return the recursion point\n              return null;\n            }\n          }\n        }\n      } // Save current vectors to history before the next iteration\n\n\n      if (numDifferences <= 1447\n      /* MaxDifferencesHistory */\n      ) {\n          // We are allocating space for one extra int, which we fill with\n          // the index of the diagonal base index\n          var temp = new Int32Array(diagonalForwardEnd - diagonalForwardStart + 2);\n          temp[0] = diagonalForwardBase - diagonalForwardStart + 1;\n          MyArray.Copy2(forwardPoints, diagonalForwardStart, temp, 1, diagonalForwardEnd - diagonalForwardStart + 1);\n          this.m_forwardHistory.push(temp);\n          temp = new Int32Array(diagonalReverseEnd - diagonalReverseStart + 2);\n          temp[0] = diagonalReverseBase - diagonalReverseStart + 1;\n          MyArray.Copy2(reversePoints, diagonalReverseStart, temp, 1, diagonalReverseEnd - diagonalReverseStart + 1);\n          this.m_reverseHistory.push(temp);\n        }\n    } // If we got here, then we have the full trace in history. We just have to convert it to a change list\n    // NOTE: This part is a bit messy\n\n\n    return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n  };\n  /**\r\n   * Shifts the given changes to provide a more intuitive diff.\r\n   * While the first element in a diff matches the first element after the diff,\r\n   * we shift the diff down.\r\n   *\r\n   * @param changes The list of changes to shift\r\n   * @returns The shifted changes\r\n   */\n\n\n  LcsDiff.prototype.PrettifyChanges = function (changes) {\n    // Shift all the changes down first\n    for (var i = 0; i < changes.length; i++) {\n      var change = changes[i];\n      var originalStop = i < changes.length - 1 ? changes[i + 1].originalStart : this._originalElementsOrHash.length;\n      var modifiedStop = i < changes.length - 1 ? changes[i + 1].modifiedStart : this._modifiedElementsOrHash.length;\n      var checkOriginal = change.originalLength > 0;\n      var checkModified = change.modifiedLength > 0;\n\n      while (change.originalStart + change.originalLength < originalStop && change.modifiedStart + change.modifiedLength < modifiedStop && (!checkOriginal || this.OriginalElementsAreEqual(change.originalStart, change.originalStart + change.originalLength)) && (!checkModified || this.ModifiedElementsAreEqual(change.modifiedStart, change.modifiedStart + change.modifiedLength))) {\n        change.originalStart++;\n        change.modifiedStart++;\n      }\n\n      var mergedChangeArr = [null];\n\n      if (i < changes.length - 1 && this.ChangesOverlap(changes[i], changes[i + 1], mergedChangeArr)) {\n        changes[i] = mergedChangeArr[0];\n        changes.splice(i + 1, 1);\n        i--;\n        continue;\n      }\n    } // Shift changes back up until we hit empty or whitespace-only lines\n\n\n    for (var i = changes.length - 1; i >= 0; i--) {\n      var change = changes[i];\n      var originalStop = 0;\n      var modifiedStop = 0;\n\n      if (i > 0) {\n        var prevChange = changes[i - 1];\n\n        if (prevChange.originalLength > 0) {\n          originalStop = prevChange.originalStart + prevChange.originalLength;\n        }\n\n        if (prevChange.modifiedLength > 0) {\n          modifiedStop = prevChange.modifiedStart + prevChange.modifiedLength;\n        }\n      }\n\n      var checkOriginal = change.originalLength > 0;\n      var checkModified = change.modifiedLength > 0;\n      var bestDelta = 0;\n\n      var bestScore = this._boundaryScore(change.originalStart, change.originalLength, change.modifiedStart, change.modifiedLength);\n\n      for (var delta = 1;; delta++) {\n        var originalStart = change.originalStart - delta;\n        var modifiedStart = change.modifiedStart - delta;\n\n        if (originalStart < originalStop || modifiedStart < modifiedStop) {\n          break;\n        }\n\n        if (checkOriginal && !this.OriginalElementsAreEqual(originalStart, originalStart + change.originalLength)) {\n          break;\n        }\n\n        if (checkModified && !this.ModifiedElementsAreEqual(modifiedStart, modifiedStart + change.modifiedLength)) {\n          break;\n        }\n\n        var score = this._boundaryScore(originalStart, change.originalLength, modifiedStart, change.modifiedLength);\n\n        if (score > bestScore) {\n          bestScore = score;\n          bestDelta = delta;\n        }\n      }\n\n      change.originalStart -= bestDelta;\n      change.modifiedStart -= bestDelta;\n    }\n\n    return changes;\n  };\n\n  LcsDiff.prototype._OriginalIsBoundary = function (index) {\n    if (index <= 0 || index >= this._originalElementsOrHash.length - 1) {\n      return true;\n    }\n\n    return this._hasStrings && /^\\s*$/.test(this._originalStringElements[index]);\n  };\n\n  LcsDiff.prototype._OriginalRegionIsBoundary = function (originalStart, originalLength) {\n    if (this._OriginalIsBoundary(originalStart) || this._OriginalIsBoundary(originalStart - 1)) {\n      return true;\n    }\n\n    if (originalLength > 0) {\n      var originalEnd = originalStart + originalLength;\n\n      if (this._OriginalIsBoundary(originalEnd - 1) || this._OriginalIsBoundary(originalEnd)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  LcsDiff.prototype._ModifiedIsBoundary = function (index) {\n    if (index <= 0 || index >= this._modifiedElementsOrHash.length - 1) {\n      return true;\n    }\n\n    return this._hasStrings && /^\\s*$/.test(this._modifiedStringElements[index]);\n  };\n\n  LcsDiff.prototype._ModifiedRegionIsBoundary = function (modifiedStart, modifiedLength) {\n    if (this._ModifiedIsBoundary(modifiedStart) || this._ModifiedIsBoundary(modifiedStart - 1)) {\n      return true;\n    }\n\n    if (modifiedLength > 0) {\n      var modifiedEnd = modifiedStart + modifiedLength;\n\n      if (this._ModifiedIsBoundary(modifiedEnd - 1) || this._ModifiedIsBoundary(modifiedEnd)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  LcsDiff.prototype._boundaryScore = function (originalStart, originalLength, modifiedStart, modifiedLength) {\n    var originalScore = this._OriginalRegionIsBoundary(originalStart, originalLength) ? 1 : 0;\n    var modifiedScore = this._ModifiedRegionIsBoundary(modifiedStart, modifiedLength) ? 1 : 0;\n    return originalScore + modifiedScore;\n  };\n  /**\r\n   * Concatenates the two input DiffChange lists and returns the resulting\r\n   * list.\r\n   * @param The left changes\r\n   * @param The right changes\r\n   * @returns The concatenated list\r\n   */\n\n\n  LcsDiff.prototype.ConcatenateChanges = function (left, right) {\n    var mergedChangeArr = [];\n\n    if (left.length === 0 || right.length === 0) {\n      return right.length > 0 ? right : left;\n    } else if (this.ChangesOverlap(left[left.length - 1], right[0], mergedChangeArr)) {\n      // Since we break the problem down recursively, it is possible that we\n      // might recurse in the middle of a change thereby splitting it into\n      // two changes. Here in the combining stage, we detect and fuse those\n      // changes back together\n      var result = new Array(left.length + right.length - 1);\n      MyArray.Copy(left, 0, result, 0, left.length - 1);\n      result[left.length - 1] = mergedChangeArr[0];\n      MyArray.Copy(right, 1, result, left.length, right.length - 1);\n      return result;\n    } else {\n      var result = new Array(left.length + right.length);\n      MyArray.Copy(left, 0, result, 0, left.length);\n      MyArray.Copy(right, 0, result, left.length, right.length);\n      return result;\n    }\n  };\n  /**\r\n   * Returns true if the two changes overlap and can be merged into a single\r\n   * change\r\n   * @param left The left change\r\n   * @param right The right change\r\n   * @param mergedChange The merged change if the two overlap, null otherwise\r\n   * @returns True if the two changes overlap\r\n   */\n\n\n  LcsDiff.prototype.ChangesOverlap = function (left, right, mergedChangeArr) {\n    Debug.Assert(left.originalStart <= right.originalStart, 'Left change is not less than or equal to right change');\n    Debug.Assert(left.modifiedStart <= right.modifiedStart, 'Left change is not less than or equal to right change');\n\n    if (left.originalStart + left.originalLength >= right.originalStart || left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\n      var originalStart = left.originalStart;\n      var originalLength = left.originalLength;\n      var modifiedStart = left.modifiedStart;\n      var modifiedLength = left.modifiedLength;\n\n      if (left.originalStart + left.originalLength >= right.originalStart) {\n        originalLength = right.originalStart + right.originalLength - left.originalStart;\n      }\n\n      if (left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\n        modifiedLength = right.modifiedStart + right.modifiedLength - left.modifiedStart;\n      }\n\n      mergedChangeArr[0] = new DiffChange(originalStart, originalLength, modifiedStart, modifiedLength);\n      return true;\n    } else {\n      mergedChangeArr[0] = null;\n      return false;\n    }\n  };\n  /**\r\n   * Helper method used to clip a diagonal index to the range of valid\r\n   * diagonals. This also decides whether or not the diagonal index,\r\n   * if it exceeds the boundary, should be clipped to the boundary or clipped\r\n   * one inside the boundary depending on the Even/Odd status of the boundary\r\n   * and numDifferences.\r\n   * @param diagonal The index of the diagonal to clip.\r\n   * @param numDifferences The current number of differences being iterated upon.\r\n   * @param diagonalBaseIndex The base reference diagonal.\r\n   * @param numDiagonals The total number of diagonals.\r\n   * @returns The clipped diagonal index.\r\n   */\n\n\n  LcsDiff.prototype.ClipDiagonalBound = function (diagonal, numDifferences, diagonalBaseIndex, numDiagonals) {\n    if (diagonal >= 0 && diagonal < numDiagonals) {\n      // Nothing to clip, its in range\n      return diagonal;\n    } // diagonalsBelow: The number of diagonals below the reference diagonal\n    // diagonalsAbove: The number of diagonals above the reference diagonal\n\n\n    var diagonalsBelow = diagonalBaseIndex;\n    var diagonalsAbove = numDiagonals - diagonalBaseIndex - 1;\n    var diffEven = numDifferences % 2 === 0;\n\n    if (diagonal < 0) {\n      var lowerBoundEven = diagonalsBelow % 2 === 0;\n      return diffEven === lowerBoundEven ? 0 : 1;\n    } else {\n      var upperBoundEven = diagonalsAbove % 2 === 0;\n      return diffEven === upperBoundEven ? numDiagonals - 1 : numDiagonals - 2;\n    }\n  };\n\n  return LcsDiff;\n}();\n\nexport { LcsDiff };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/base/common/diff/diff.js"],"names":["DiffChange","stringHash","StringDiffSequence","source","prototype","getElements","characters","Int32Array","length","i","len","charCodeAt","stringDiff","original","modified","pretty","LcsDiff","ComputeDiff","changes","Debug","Assert","condition","message","Error","MyArray","Copy","sourceArray","sourceIndex","destinationArray","destinationIndex","Copy2","DiffChangeHelper","m_changes","m_originalStart","m_modifiedStart","m_originalCount","m_modifiedCount","MarkNextChange","push","AddOriginalElement","originalIndex","modifiedIndex","Math","min","AddModifiedElement","getChanges","getReverseChanges","reverse","originalSequence","modifiedSequence","continueProcessingPredicate","ContinueProcessingPredicate","_a","_getElements","originalStringElements","originalElementsOrHash","originalHasStrings","_b","modifiedStringElements","modifiedElementsOrHash","modifiedHasStrings","_hasStrings","_originalStringElements","_originalElementsOrHash","_modifiedStringElements","_modifiedElementsOrHash","m_forwardHistory","m_reverseHistory","_isStringArray","arr","sequence","elements","hashes","ElementsAreEqual","newIndex","OriginalElementsAreEqual","index1","index2","ModifiedElementsAreEqual","_ComputeDiff","originalStart","originalEnd","modifiedStart","modifiedEnd","quitEarlyArr","ComputeDiffRecursive","PrettifyChanges","quitEarly","midOriginalArr","midModifiedArr","result","ComputeRecursionPoint","midOriginal","midModified","leftChanges","rightChanges","ConcatenateChanges","WALKTRACE","diagonalForwardBase","diagonalForwardStart","diagonalForwardEnd","diagonalForwardOffset","diagonalReverseBase","diagonalReverseStart","diagonalReverseEnd","diagonalReverseOffset","forwardPoints","reversePoints","deltaIsEven","forwardChanges","reverseChanges","changeHelper","diagonalMin","diagonalMax","diagonalRelative","lastOriginalIndex","historyIndex","diagonal","originalStartPoint","modifiedStartPoint","lastForwardChange","max","getOriginalEnd","getModifiedEnd","maxDifferences","numDiagonals","delta","numDifferences","furthestOriginalIndex","furthestModifiedIndex","ClipDiagonalBound","tempOriginalIndex","abs","matchLengthOfLongest","temp","change","originalStop","modifiedStop","checkOriginal","originalLength","checkModified","modifiedLength","mergedChangeArr","ChangesOverlap","splice","prevChange","bestDelta","bestScore","_boundaryScore","score","_OriginalIsBoundary","index","test","_OriginalRegionIsBoundary","_ModifiedIsBoundary","_ModifiedRegionIsBoundary","originalScore","modifiedScore","left","right","Array","diagonalBaseIndex","diagonalsBelow","diagonalsAbove","diffEven","lowerBoundEven","upperBoundEven"],"mappings":"AAAA;;;;AAIA,SAASA,UAAT,QAA2B,iBAA3B;AACA,SAASC,UAAT,QAA2B,YAA3B;;AACA,IAAIC,kBAAkB;AAAG;AAAe,YAAY;AAChD,WAASA,kBAAT,CAA4BC,MAA5B,EAAoC;AAChC,SAAKA,MAAL,GAAcA,MAAd;AACH;;AACDD,EAAAA,kBAAkB,CAACE,SAAnB,CAA6BC,WAA7B,GAA2C,YAAY;AACnD,QAAIF,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAIG,UAAU,GAAG,IAAIC,UAAJ,CAAeJ,MAAM,CAACK,MAAtB,CAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGP,MAAM,CAACK,MAA7B,EAAqCC,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,EAA/C,EAAmD;AAC/CH,MAAAA,UAAU,CAACG,CAAD,CAAV,GAAgBN,MAAM,CAACQ,UAAP,CAAkBF,CAAlB,CAAhB;AACH;;AACD,WAAOH,UAAP;AACH,GAPD;;AAQA,SAAOJ,kBAAP;AACH,CAbuC,EAAxC;;AAcA,SAASA,kBAAT;AACA,OAAO,SAASU,UAAT,CAAoBC,QAApB,EAA8BC,QAA9B,EAAwCC,MAAxC,EAAgD;AACnD,SAAO,IAAIC,OAAJ,CAAY,IAAId,kBAAJ,CAAuBW,QAAvB,CAAZ,EAA8C,IAAIX,kBAAJ,CAAuBY,QAAvB,CAA9C,EAAgFG,WAAhF,CAA4FF,MAA5F,EAAoGG,OAA3G;AACH,C,CACD;AACA;AACA;;AACA,IAAIC,KAAK;AAAG;AAAe,YAAY;AACnC,WAASA,KAAT,GAAiB,CAChB;;AACDA,EAAAA,KAAK,CAACC,MAAN,GAAe,UAAUC,SAAV,EAAqBC,OAArB,EAA8B;AACzC,QAAI,CAACD,SAAL,EAAgB;AACZ,YAAM,IAAIE,KAAJ,CAAUD,OAAV,CAAN;AACH;AACJ,GAJD;;AAKA,SAAOH,KAAP;AACH,CAT0B,EAA3B;;AAUA,SAASA,KAAT;;AACA,IAAIK,OAAO;AAAG;AAAe,YAAY;AACrC,WAASA,OAAT,GAAmB,CAClB;AACD;;;;;;;;;;;;;;;;;AAeAA,EAAAA,OAAO,CAACC,IAAR,GAAe,UAAUC,WAAV,EAAuBC,WAAvB,EAAoCC,gBAApC,EAAsDC,gBAAtD,EAAwErB,MAAxE,EAAgF;AAC3F,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC7BmB,MAAAA,gBAAgB,CAACC,gBAAgB,GAAGpB,CAApB,CAAhB,GAAyCiB,WAAW,CAACC,WAAW,GAAGlB,CAAf,CAApD;AACH;AACJ,GAJD;;AAKAe,EAAAA,OAAO,CAACM,KAAR,GAAgB,UAAUJ,WAAV,EAAuBC,WAAvB,EAAoCC,gBAApC,EAAsDC,gBAAtD,EAAwErB,MAAxE,EAAgF;AAC5F,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC7BmB,MAAAA,gBAAgB,CAACC,gBAAgB,GAAGpB,CAApB,CAAhB,GAAyCiB,WAAW,CAACC,WAAW,GAAGlB,CAAf,CAApD;AACH;AACJ,GAJD;;AAKA,SAAOe,OAAP;AACH,CA7B4B,EAA7B;;AA8BA,SAASA,OAAT;AACA;;;;;;;;;AAQA,IAAIO,gBAAgB;AAAG;AAAe,YAAY;AAC9C;;;AAGA,WAASA,gBAAT,GAA4B;AACxB,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,eAAL,GAAuB;AAAW;AAAlC;AACA,SAAKC,eAAL,GAAuB;AAAW;AAAlC;AACA,SAAKC,eAAL,GAAuB,CAAvB;AACA,SAAKC,eAAL,GAAuB,CAAvB;AACH;AACD;;;;;AAGAL,EAAAA,gBAAgB,CAAC3B,SAAjB,CAA2BiC,cAA3B,GAA4C,YAAY;AACpD;AACA,QAAI,KAAKF,eAAL,GAAuB,CAAvB,IAA4B,KAAKC,eAAL,GAAuB,CAAvD,EAA0D;AACtD;AACA,WAAKJ,SAAL,CAAeM,IAAf,CAAoB,IAAItC,UAAJ,CAAe,KAAKiC,eAApB,EAAqC,KAAKE,eAA1C,EAA2D,KAAKD,eAAhE,EAAiF,KAAKE,eAAtF,CAApB;AACH,KALmD,CAMpD;;;AACA,SAAKD,eAAL,GAAuB,CAAvB;AACA,SAAKC,eAAL,GAAuB,CAAvB;AACA,SAAKH,eAAL,GAAuB;AAAW;AAAlC;AACA,SAAKC,eAAL,GAAuB;AAAW;AAAlC;AACH,GAXD;AAYA;;;;;;;;;AAOAH,EAAAA,gBAAgB,CAAC3B,SAAjB,CAA2BmC,kBAA3B,GAAgD,UAAUC,aAAV,EAAyBC,aAAzB,EAAwC;AACpF;AACA,SAAKR,eAAL,GAAuBS,IAAI,CAACC,GAAL,CAAS,KAAKV,eAAd,EAA+BO,aAA/B,CAAvB;AACA,SAAKN,eAAL,GAAuBQ,IAAI,CAACC,GAAL,CAAS,KAAKT,eAAd,EAA+BO,aAA/B,CAAvB;AACA,SAAKN,eAAL;AACH,GALD;AAMA;;;;;;;;;AAOAJ,EAAAA,gBAAgB,CAAC3B,SAAjB,CAA2BwC,kBAA3B,GAAgD,UAAUJ,aAAV,EAAyBC,aAAzB,EAAwC;AACpF;AACA,SAAKR,eAAL,GAAuBS,IAAI,CAACC,GAAL,CAAS,KAAKV,eAAd,EAA+BO,aAA/B,CAAvB;AACA,SAAKN,eAAL,GAAuBQ,IAAI,CAACC,GAAL,CAAS,KAAKT,eAAd,EAA+BO,aAA/B,CAAvB;AACA,SAAKL,eAAL;AACH,GALD;AAMA;;;;;AAGAL,EAAAA,gBAAgB,CAAC3B,SAAjB,CAA2ByC,UAA3B,GAAwC,YAAY;AAChD,QAAI,KAAKV,eAAL,GAAuB,CAAvB,IAA4B,KAAKC,eAAL,GAAuB,CAAvD,EAA0D;AACtD;AACA,WAAKC,cAAL;AACH;;AACD,WAAO,KAAKL,SAAZ;AACH,GAND;AAOA;;;;;AAGAD,EAAAA,gBAAgB,CAAC3B,SAAjB,CAA2B0C,iBAA3B,GAA+C,YAAY;AACvD,QAAI,KAAKX,eAAL,GAAuB,CAAvB,IAA4B,KAAKC,eAAL,GAAuB,CAAvD,EAA0D;AACtD;AACA,WAAKC,cAAL;AACH;;AACD,SAAKL,SAAL,CAAee,OAAf;AACA,WAAO,KAAKf,SAAZ;AACH,GAPD;;AAQA,SAAOD,gBAAP;AACH,CA1EqC,EAAtC;AA2EA;;;;;;AAIA,IAAIf,OAAO;AAAG;AAAe,YAAY;AACrC;;;AAGA,WAASA,OAAT,CAAiBgC,gBAAjB,EAAmCC,gBAAnC,EAAqDC,2BAArD,EAAkF;AAC9E,QAAIA,2BAA2B,KAAK,KAAK,CAAzC,EAA4C;AAAEA,MAAAA,2BAA2B,GAAG,IAA9B;AAAqC;;AACnF,SAAKC,2BAAL,GAAmCD,2BAAnC;;AACA,QAAIE,EAAE,GAAGpC,OAAO,CAACqC,YAAR,CAAqBL,gBAArB,CAAT;AAAA,QAAiDM,sBAAsB,GAAGF,EAAE,CAAC,CAAD,CAA5E;AAAA,QAAiFG,sBAAsB,GAAGH,EAAE,CAAC,CAAD,CAA5G;AAAA,QAAiHI,kBAAkB,GAAGJ,EAAE,CAAC,CAAD,CAAxI;;AACA,QAAIK,EAAE,GAAGzC,OAAO,CAACqC,YAAR,CAAqBJ,gBAArB,CAAT;AAAA,QAAiDS,sBAAsB,GAAGD,EAAE,CAAC,CAAD,CAA5E;AAAA,QAAiFE,sBAAsB,GAAGF,EAAE,CAAC,CAAD,CAA5G;AAAA,QAAiHG,kBAAkB,GAAGH,EAAE,CAAC,CAAD,CAAxI;;AACA,SAAKI,WAAL,GAAoBL,kBAAkB,IAAII,kBAA1C;AACA,SAAKE,uBAAL,GAA+BR,sBAA/B;AACA,SAAKS,uBAAL,GAA+BR,sBAA/B;AACA,SAAKS,uBAAL,GAA+BN,sBAA/B;AACA,SAAKO,uBAAL,GAA+BN,sBAA/B;AACA,SAAKO,gBAAL,GAAwB,EAAxB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACH;;AACDnD,EAAAA,OAAO,CAACoD,cAAR,GAAyB,UAAUC,GAAV,EAAe;AACpC,WAAQA,GAAG,CAAC7D,MAAJ,GAAa,CAAb,IAAkB,OAAO6D,GAAG,CAAC,CAAD,CAAV,KAAkB,QAA5C;AACH,GAFD;;AAGArD,EAAAA,OAAO,CAACqC,YAAR,GAAuB,UAAUiB,QAAV,EAAoB;AACvC,QAAIC,QAAQ,GAAGD,QAAQ,CAACjE,WAAT,EAAf;;AACA,QAAIW,OAAO,CAACoD,cAAR,CAAuBG,QAAvB,CAAJ,EAAsC;AAClC,UAAIC,MAAM,GAAG,IAAIjE,UAAJ,CAAegE,QAAQ,CAAC/D,MAAxB,CAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG6D,QAAQ,CAAC/D,MAA/B,EAAuCC,CAAC,GAAGC,GAA3C,EAAgDD,CAAC,EAAjD,EAAqD;AACjD+D,QAAAA,MAAM,CAAC/D,CAAD,CAAN,GAAYR,UAAU,CAACsE,QAAQ,CAAC9D,CAAD,CAAT,EAAc,CAAd,CAAtB;AACH;;AACD,aAAO,CAAC8D,QAAD,EAAWC,MAAX,EAAmB,IAAnB,CAAP;AACH;;AACD,QAAID,QAAQ,YAAYhE,UAAxB,EAAoC;AAChC,aAAO,CAAC,EAAD,EAAKgE,QAAL,EAAe,KAAf,CAAP;AACH;;AACD,WAAO,CAAC,EAAD,EAAK,IAAIhE,UAAJ,CAAegE,QAAf,CAAL,EAA+B,KAA/B,CAAP;AACH,GAbD;;AAcAvD,EAAAA,OAAO,CAACZ,SAAR,CAAkBqE,gBAAlB,GAAqC,UAAUjC,aAAV,EAAyBkC,QAAzB,EAAmC;AACpE,QAAI,KAAKX,uBAAL,CAA6BvB,aAA7B,MAAgD,KAAKyB,uBAAL,CAA6BS,QAA7B,CAApD,EAA4F;AACxF,aAAO,KAAP;AACH;;AACD,WAAQ,KAAKb,WAAL,GAAmB,KAAKC,uBAAL,CAA6BtB,aAA7B,MAAgD,KAAKwB,uBAAL,CAA6BU,QAA7B,CAAnE,GAA4G,IAApH;AACH,GALD;;AAMA1D,EAAAA,OAAO,CAACZ,SAAR,CAAkBuE,wBAAlB,GAA6C,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B;AACnE,QAAI,KAAKd,uBAAL,CAA6Ba,MAA7B,MAAyC,KAAKb,uBAAL,CAA6Bc,MAA7B,CAA7C,EAAmF;AAC/E,aAAO,KAAP;AACH;;AACD,WAAQ,KAAKhB,WAAL,GAAmB,KAAKC,uBAAL,CAA6Bc,MAA7B,MAAyC,KAAKd,uBAAL,CAA6Be,MAA7B,CAA5D,GAAmG,IAA3G;AACH,GALD;;AAMA7D,EAAAA,OAAO,CAACZ,SAAR,CAAkB0E,wBAAlB,GAA6C,UAAUF,MAAV,EAAkBC,MAAlB,EAA0B;AACnE,QAAI,KAAKZ,uBAAL,CAA6BW,MAA7B,MAAyC,KAAKX,uBAAL,CAA6BY,MAA7B,CAA7C,EAAmF;AAC/E,aAAO,KAAP;AACH;;AACD,WAAQ,KAAKhB,WAAL,GAAmB,KAAKG,uBAAL,CAA6BY,MAA7B,MAAyC,KAAKZ,uBAAL,CAA6Ba,MAA7B,CAA5D,GAAmG,IAA3G;AACH,GALD;;AAMA7D,EAAAA,OAAO,CAACZ,SAAR,CAAkBa,WAAlB,GAAgC,UAAUF,MAAV,EAAkB;AAC9C,WAAO,KAAKgE,YAAL,CAAkB,CAAlB,EAAqB,KAAKhB,uBAAL,CAA6BvD,MAA7B,GAAsC,CAA3D,EAA8D,CAA9D,EAAiE,KAAKyD,uBAAL,CAA6BzD,MAA7B,GAAsC,CAAvG,EAA0GO,MAA1G,CAAP;AACH,GAFD;AAGA;;;;;;;AAKAC,EAAAA,OAAO,CAACZ,SAAR,CAAkB2E,YAAlB,GAAiC,UAAUC,aAAV,EAAyBC,WAAzB,EAAsCC,aAAtC,EAAqDC,WAArD,EAAkEpE,MAAlE,EAA0E;AACvG,QAAIqE,YAAY,GAAG,CAAC,KAAD,CAAnB;AACA,QAAIlE,OAAO,GAAG,KAAKmE,oBAAL,CAA0BL,aAA1B,EAAyCC,WAAzC,EAAsDC,aAAtD,EAAqEC,WAArE,EAAkFC,YAAlF,CAAd;;AACA,QAAIrE,MAAJ,EAAY;AACR;AACA;AACA;AACAG,MAAAA,OAAO,GAAG,KAAKoE,eAAL,CAAqBpE,OAArB,CAAV;AACH;;AACD,WAAO;AACHqE,MAAAA,SAAS,EAAEH,YAAY,CAAC,CAAD,CADpB;AAEHlE,MAAAA,OAAO,EAAEA;AAFN,KAAP;AAIH,GAbD;AAcA;;;;;;;AAKAF,EAAAA,OAAO,CAACZ,SAAR,CAAkBiF,oBAAlB,GAAyC,UAAUL,aAAV,EAAyBC,WAAzB,EAAsCC,aAAtC,EAAqDC,WAArD,EAAkEC,YAAlE,EAAgF;AACrHA,IAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,KAAlB,CADqH,CAErH;;AACA,WAAOJ,aAAa,IAAIC,WAAjB,IAAgCC,aAAa,IAAIC,WAAjD,IAAgE,KAAKV,gBAAL,CAAsBO,aAAtB,EAAqCE,aAArC,CAAvE,EAA4H;AACxHF,MAAAA,aAAa;AACbE,MAAAA,aAAa;AAChB,KANoH,CAOrH;;;AACA,WAAOD,WAAW,IAAID,aAAf,IAAgCG,WAAW,IAAID,aAA/C,IAAgE,KAAKT,gBAAL,CAAsBQ,WAAtB,EAAmCE,WAAnC,CAAvE,EAAwH;AACpHF,MAAAA,WAAW;AACXE,MAAAA,WAAW;AACd,KAXoH,CAYrH;;;AACA,QAAIH,aAAa,GAAGC,WAAhB,IAA+BC,aAAa,GAAGC,WAAnD,EAAgE;AAC5D,UAAIjE,OAAO,GAAG,KAAK,CAAnB;;AACA,UAAIgE,aAAa,IAAIC,WAArB,EAAkC;AAC9BhE,QAAAA,KAAK,CAACC,MAAN,CAAa4D,aAAa,KAAKC,WAAW,GAAG,CAA7C,EAAgD,wDAAhD,EAD8B,CAE9B;;AACA/D,QAAAA,OAAO,GAAG,CACN,IAAIlB,UAAJ,CAAegF,aAAf,EAA8B,CAA9B,EAAiCE,aAAjC,EAAgDC,WAAW,GAAGD,aAAd,GAA8B,CAA9E,CADM,CAAV;AAGH,OAND,MAOK,IAAIF,aAAa,IAAIC,WAArB,EAAkC;AACnC9D,QAAAA,KAAK,CAACC,MAAN,CAAa8D,aAAa,KAAKC,WAAW,GAAG,CAA7C,EAAgD,wDAAhD,EADmC,CAEnC;;AACAjE,QAAAA,OAAO,GAAG,CACN,IAAIlB,UAAJ,CAAegF,aAAf,EAA8BC,WAAW,GAAGD,aAAd,GAA8B,CAA5D,EAA+DE,aAA/D,EAA8E,CAA9E,CADM,CAAV;AAGH,OANI,MAOA;AACD/D,QAAAA,KAAK,CAACC,MAAN,CAAa4D,aAAa,KAAKC,WAAW,GAAG,CAA7C,EAAgD,wDAAhD;AACA9D,QAAAA,KAAK,CAACC,MAAN,CAAa8D,aAAa,KAAKC,WAAW,GAAG,CAA7C,EAAgD,wDAAhD,EAFC,CAGD;;AACAjE,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,aAAOA,OAAP;AACH,KApCoH,CAqCrH;;;AACA,QAAIsE,cAAc,GAAG,CAAC,CAAD,CAArB;AACA,QAAIC,cAAc,GAAG,CAAC,CAAD,CAArB;AACA,QAAIC,MAAM,GAAG,KAAKC,qBAAL,CAA2BX,aAA3B,EAA0CC,WAA1C,EAAuDC,aAAvD,EAAsEC,WAAtE,EAAmFK,cAAnF,EAAmGC,cAAnG,EAAmHL,YAAnH,CAAb;AACA,QAAIQ,WAAW,GAAGJ,cAAc,CAAC,CAAD,CAAhC;AACA,QAAIK,WAAW,GAAGJ,cAAc,CAAC,CAAD,CAAhC;;AACA,QAAIC,MAAM,KAAK,IAAf,EAAqB;AACjB;AACA;AACA,aAAOA,MAAP;AACH,KAJD,MAKK,IAAI,CAACN,YAAY,CAAC,CAAD,CAAjB,EAAsB;AACvB;AACA;AACA;AACA;AACA,UAAIU,WAAW,GAAG,KAAKT,oBAAL,CAA0BL,aAA1B,EAAyCY,WAAzC,EAAsDV,aAAtD,EAAqEW,WAArE,EAAkFT,YAAlF,CAAlB;AACA,UAAIW,YAAY,GAAG,EAAnB;;AACA,UAAI,CAACX,YAAY,CAAC,CAAD,CAAjB,EAAsB;AAClBW,QAAAA,YAAY,GAAG,KAAKV,oBAAL,CAA0BO,WAAW,GAAG,CAAxC,EAA2CX,WAA3C,EAAwDY,WAAW,GAAG,CAAtE,EAAyEV,WAAzE,EAAsFC,YAAtF,CAAf;AACH,OAFD,MAGK;AACD;AACA;AACAW,QAAAA,YAAY,GAAG,CACX,IAAI/F,UAAJ,CAAe4F,WAAW,GAAG,CAA7B,EAAgCX,WAAW,IAAIW,WAAW,GAAG,CAAlB,CAAX,GAAkC,CAAlE,EAAqEC,WAAW,GAAG,CAAnF,EAAsFV,WAAW,IAAIU,WAAW,GAAG,CAAlB,CAAX,GAAkC,CAAxH,CADW,CAAf;AAGH;;AACD,aAAO,KAAKG,kBAAL,CAAwBF,WAAxB,EAAqCC,YAArC,CAAP;AACH,KAlEoH,CAmErH;;;AACA,WAAO,CACH,IAAI/F,UAAJ,CAAegF,aAAf,EAA8BC,WAAW,GAAGD,aAAd,GAA8B,CAA5D,EAA+DE,aAA/D,EAA8EC,WAAW,GAAGD,aAAd,GAA8B,CAA5G,CADG,CAAP;AAGH,GAvED;;AAwEAlE,EAAAA,OAAO,CAACZ,SAAR,CAAkB6F,SAAlB,GAA8B,UAAUC,mBAAV,EAA+BC,oBAA/B,EAAqDC,kBAArD,EAAyEC,qBAAzE,EAAgGC,mBAAhG,EAAqHC,oBAArH,EAA2IC,kBAA3I,EAA+JC,qBAA/J,EAAsLC,aAAtL,EAAqMC,aAArM,EAAoNnE,aAApN,EAAmOyC,WAAnO,EAAgPO,cAAhP,EAAgQ/C,aAAhQ,EAA+Q0C,WAA/Q,EAA4RM,cAA5R,EAA4SmB,WAA5S,EAAyTxB,YAAzT,EAAuU;AACjW,QAAIyB,cAAc,GAAG,IAArB;AACA,QAAIC,cAAc,GAAG,IAArB,CAFiW,CAGjW;;AACA,QAAIC,YAAY,GAAG,IAAIhF,gBAAJ,EAAnB;AACA,QAAIiF,WAAW,GAAGb,oBAAlB;AACA,QAAIc,WAAW,GAAGb,kBAAlB;AACA,QAAIc,gBAAgB,GAAI1B,cAAc,CAAC,CAAD,CAAd,GAAoBC,cAAc,CAAC,CAAD,CAAnC,GAA0CY,qBAAjE;AACA,QAAIc,iBAAiB,GAAG,CAAC;AAAW;AAApC;AACA,QAAIC,YAAY,GAAG,KAAKlD,gBAAL,CAAsB1D,MAAtB,GAA+B,CAAlD;;AACA,OAAG;AACC;AACA,UAAI6G,QAAQ,GAAGH,gBAAgB,GAAGhB,mBAAlC,CAFD,CAGC;;AACA,UAAImB,QAAQ,KAAKL,WAAb,IAA6BK,QAAQ,GAAGJ,WAAX,IAA0BP,aAAa,CAACW,QAAQ,GAAG,CAAZ,CAAb,GAA8BX,aAAa,CAACW,QAAQ,GAAG,CAAZ,CAAtG,EAAuH;AACnH;AACA7E,QAAAA,aAAa,GAAGkE,aAAa,CAACW,QAAQ,GAAG,CAAZ,CAA7B;AACA5E,QAAAA,aAAa,GAAGD,aAAa,GAAG0E,gBAAhB,GAAmCb,qBAAnD;;AACA,YAAI7D,aAAa,GAAG2E,iBAApB,EAAuC;AACnCJ,UAAAA,YAAY,CAAC1E,cAAb;AACH;;AACD8E,QAAAA,iBAAiB,GAAG3E,aAApB;AACAuE,QAAAA,YAAY,CAACnE,kBAAb,CAAgCJ,aAAa,GAAG,CAAhD,EAAmDC,aAAnD;AACAyE,QAAAA,gBAAgB,GAAIG,QAAQ,GAAG,CAAZ,GAAiBnB,mBAApC,CATmH,CAS1D;AAC5D,OAVD,MAWK;AACD;AACA1D,QAAAA,aAAa,GAAGkE,aAAa,CAACW,QAAQ,GAAG,CAAZ,CAAb,GAA8B,CAA9C;AACA5E,QAAAA,aAAa,GAAGD,aAAa,GAAG0E,gBAAhB,GAAmCb,qBAAnD;;AACA,YAAI7D,aAAa,GAAG2E,iBAApB,EAAuC;AACnCJ,UAAAA,YAAY,CAAC1E,cAAb;AACH;;AACD8E,QAAAA,iBAAiB,GAAG3E,aAAa,GAAG,CAApC;AACAuE,QAAAA,YAAY,CAACxE,kBAAb,CAAgCC,aAAhC,EAA+CC,aAAa,GAAG,CAA/D;AACAyE,QAAAA,gBAAgB,GAAIG,QAAQ,GAAG,CAAZ,GAAiBnB,mBAApC,CATC,CASwD;AAC5D;;AACD,UAAIkB,YAAY,IAAI,CAApB,EAAuB;AACnBV,QAAAA,aAAa,GAAG,KAAKxC,gBAAL,CAAsBkD,YAAtB,CAAhB;AACAlB,QAAAA,mBAAmB,GAAGQ,aAAa,CAAC,CAAD,CAAnC,CAFmB,CAEqB;;AACxCM,QAAAA,WAAW,GAAG,CAAd;AACAC,QAAAA,WAAW,GAAGP,aAAa,CAAClG,MAAd,GAAuB,CAArC;AACH;AACJ,KAhCD,QAgCS,EAAE4G,YAAF,IAAkB,CAAC,CAhC5B,EAViW,CA2CjW;AACA;;;AACAP,IAAAA,cAAc,GAAGE,YAAY,CAACjE,iBAAb,EAAjB;;AACA,QAAIsC,YAAY,CAAC,CAAD,CAAhB,EAAqB;AACjB;AACA;AACA,UAAIkC,kBAAkB,GAAG9B,cAAc,CAAC,CAAD,CAAd,GAAoB,CAA7C;AACA,UAAI+B,kBAAkB,GAAG9B,cAAc,CAAC,CAAD,CAAd,GAAoB,CAA7C;;AACA,UAAIoB,cAAc,KAAK,IAAnB,IAA2BA,cAAc,CAACrG,MAAf,GAAwB,CAAvD,EAA0D;AACtD,YAAIgH,iBAAiB,GAAGX,cAAc,CAACA,cAAc,CAACrG,MAAf,GAAwB,CAAzB,CAAtC;AACA8G,QAAAA,kBAAkB,GAAG5E,IAAI,CAAC+E,GAAL,CAASH,kBAAT,EAA6BE,iBAAiB,CAACE,cAAlB,EAA7B,CAArB;AACAH,QAAAA,kBAAkB,GAAG7E,IAAI,CAAC+E,GAAL,CAASF,kBAAT,EAA6BC,iBAAiB,CAACG,cAAlB,EAA7B,CAArB;AACH;;AACDb,MAAAA,cAAc,GAAG,CACb,IAAI9G,UAAJ,CAAesH,kBAAf,EAAmCrC,WAAW,GAAGqC,kBAAd,GAAmC,CAAtE,EAAyEC,kBAAzE,EAA6FpC,WAAW,GAAGoC,kBAAd,GAAmC,CAAhI,CADa,CAAjB;AAGH,KAbD,MAcK;AACD;AACAR,MAAAA,YAAY,GAAG,IAAIhF,gBAAJ,EAAf;AACAiF,MAAAA,WAAW,GAAGT,oBAAd;AACAU,MAAAA,WAAW,GAAGT,kBAAd;AACAU,MAAAA,gBAAgB,GAAI1B,cAAc,CAAC,CAAD,CAAd,GAAoBC,cAAc,CAAC,CAAD,CAAnC,GAA0CgB,qBAA7D;AACAU,MAAAA,iBAAiB,GAAG;AAAW;AAA/B;AACAC,MAAAA,YAAY,GAAIR,WAAD,GAAgB,KAAKzC,gBAAL,CAAsB3D,MAAtB,GAA+B,CAA/C,GAAmD,KAAK2D,gBAAL,CAAsB3D,MAAtB,GAA+B,CAAjG;;AACA,SAAG;AACC;AACA,YAAI6G,QAAQ,GAAGH,gBAAgB,GAAGZ,mBAAlC,CAFD,CAGC;;AACA,YAAIe,QAAQ,KAAKL,WAAb,IAA6BK,QAAQ,GAAGJ,WAAX,IAA0BN,aAAa,CAACU,QAAQ,GAAG,CAAZ,CAAb,IAA+BV,aAAa,CAACU,QAAQ,GAAG,CAAZ,CAAvG,EAAwH;AACpH;AACA7E,UAAAA,aAAa,GAAGmE,aAAa,CAACU,QAAQ,GAAG,CAAZ,CAAb,GAA8B,CAA9C;AACA5E,UAAAA,aAAa,GAAGD,aAAa,GAAG0E,gBAAhB,GAAmCT,qBAAnD;;AACA,cAAIjE,aAAa,GAAG2E,iBAApB,EAAuC;AACnCJ,YAAAA,YAAY,CAAC1E,cAAb;AACH;;AACD8E,UAAAA,iBAAiB,GAAG3E,aAAa,GAAG,CAApC;AACAuE,UAAAA,YAAY,CAACxE,kBAAb,CAAgCC,aAAa,GAAG,CAAhD,EAAmDC,aAAa,GAAG,CAAnE;AACAyE,UAAAA,gBAAgB,GAAIG,QAAQ,GAAG,CAAZ,GAAiBf,mBAApC,CAToH,CAS3D;AAC5D,SAVD,MAWK;AACD;AACA9D,UAAAA,aAAa,GAAGmE,aAAa,CAACU,QAAQ,GAAG,CAAZ,CAA7B;AACA5E,UAAAA,aAAa,GAAGD,aAAa,GAAG0E,gBAAhB,GAAmCT,qBAAnD;;AACA,cAAIjE,aAAa,GAAG2E,iBAApB,EAAuC;AACnCJ,YAAAA,YAAY,CAAC1E,cAAb;AACH;;AACD8E,UAAAA,iBAAiB,GAAG3E,aAApB;AACAuE,UAAAA,YAAY,CAACnE,kBAAb,CAAgCJ,aAAa,GAAG,CAAhD,EAAmDC,aAAa,GAAG,CAAnE;AACAyE,UAAAA,gBAAgB,GAAIG,QAAQ,GAAG,CAAZ,GAAiBf,mBAApC,CATC,CASwD;AAC5D;;AACD,YAAIc,YAAY,IAAI,CAApB,EAAuB;AACnBT,UAAAA,aAAa,GAAG,KAAKxC,gBAAL,CAAsBiD,YAAtB,CAAhB;AACAd,UAAAA,mBAAmB,GAAGK,aAAa,CAAC,CAAD,CAAnC,CAFmB,CAEqB;;AACxCK,UAAAA,WAAW,GAAG,CAAd;AACAC,UAAAA,WAAW,GAAGN,aAAa,CAACnG,MAAd,GAAuB,CAArC;AACH;AACJ,OAhCD,QAgCS,EAAE4G,YAAF,IAAkB,CAAC,CAhC5B,EARC,CAyCD;AACA;;;AACAN,MAAAA,cAAc,GAAGC,YAAY,CAAClE,UAAb,EAAjB;AACH;;AACD,WAAO,KAAKmD,kBAAL,CAAwBa,cAAxB,EAAwCC,cAAxC,CAAP;AACH,GA1GD;AA2GA;;;;;;;;;;;;;;;;;;AAgBA9F,EAAAA,OAAO,CAACZ,SAAR,CAAkBuF,qBAAlB,GAA0C,UAAUX,aAAV,EAAyBC,WAAzB,EAAsCC,aAAtC,EAAqDC,WAArD,EAAkEK,cAAlE,EAAkFC,cAAlF,EAAkGL,YAAlG,EAAgH;AACtJ,QAAI5C,aAAa,GAAG,CAApB;AAAA,QAAuBC,aAAa,GAAG,CAAvC;AACA,QAAI0D,oBAAoB,GAAG,CAA3B;AAAA,QAA8BC,kBAAkB,GAAG,CAAnD;AACA,QAAIG,oBAAoB,GAAG,CAA3B;AAAA,QAA8BC,kBAAkB,GAAG,CAAnD,CAHsJ,CAItJ;AACA;;AACAxB,IAAAA,aAAa;AACbE,IAAAA,aAAa,GAPyI,CAQtJ;AACA;;AACAM,IAAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,CAApB;AACAC,IAAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,CAApB,CAXsJ,CAYtJ;;AACA,SAAKvB,gBAAL,GAAwB,EAAxB;AACA,SAAKC,gBAAL,GAAwB,EAAxB,CAdsJ,CAetJ;AACA;AACA;AACA;;AACA,QAAIyD,cAAc,GAAI3C,WAAW,GAAGD,aAAf,IAAiCG,WAAW,GAAGD,aAA/C,CAArB;AACA,QAAI2C,YAAY,GAAGD,cAAc,GAAG,CAApC;AACA,QAAIlB,aAAa,GAAG,IAAInG,UAAJ,CAAesH,YAAf,CAApB;AACA,QAAIlB,aAAa,GAAG,IAAIpG,UAAJ,CAAesH,YAAf,CAApB,CAtBsJ,CAuBtJ;AACA;;AACA,QAAI3B,mBAAmB,GAAIf,WAAW,GAAGD,aAAzC;AACA,QAAIoB,mBAAmB,GAAIrB,WAAW,GAAGD,aAAzC,CA1BsJ,CA2BtJ;AACA;AACA;AACA;;AACA,QAAIqB,qBAAqB,GAAIrB,aAAa,GAAGE,aAA7C;AACA,QAAIuB,qBAAqB,GAAIxB,WAAW,GAAGE,WAA3C,CAhCsJ,CAiCtJ;AACA;AACA;;AACA,QAAI2C,KAAK,GAAGxB,mBAAmB,GAAGJ,mBAAlC;AACA,QAAIU,WAAW,GAAIkB,KAAK,GAAG,CAAR,KAAc,CAAjC,CArCsJ,CAsCtJ;AACA;;AACApB,IAAAA,aAAa,CAACR,mBAAD,CAAb,GAAqClB,aAArC;AACA2B,IAAAA,aAAa,CAACL,mBAAD,CAAb,GAAqCrB,WAArC,CAzCsJ,CA0CtJ;;AACAG,IAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,KAAlB,CA3CsJ,CA4CtJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAK,IAAI2C,cAAc,GAAG,CAA1B,EAA6BA,cAAc,IAAKH,cAAc,GAAG,CAAlB,GAAuB,CAAtE,EAAyEG,cAAc,EAAvF,EAA2F;AACvF,UAAIC,qBAAqB,GAAG,CAA5B;AACA,UAAIC,qBAAqB,GAAG,CAA5B,CAFuF,CAGvF;;AACA9B,MAAAA,oBAAoB,GAAG,KAAK+B,iBAAL,CAAuBhC,mBAAmB,GAAG6B,cAA7C,EAA6DA,cAA7D,EAA6E7B,mBAA7E,EAAkG2B,YAAlG,CAAvB;AACAzB,MAAAA,kBAAkB,GAAG,KAAK8B,iBAAL,CAAuBhC,mBAAmB,GAAG6B,cAA7C,EAA6DA,cAA7D,EAA6E7B,mBAA7E,EAAkG2B,YAAlG,CAArB;;AACA,WAAK,IAAIR,QAAQ,GAAGlB,oBAApB,EAA0CkB,QAAQ,IAAIjB,kBAAtD,EAA0EiB,QAAQ,IAAI,CAAtF,EAAyF;AACrF;AACA;AACA;AACA,YAAIA,QAAQ,KAAKlB,oBAAb,IAAsCkB,QAAQ,GAAGjB,kBAAX,IAAiCM,aAAa,CAACW,QAAQ,GAAG,CAAZ,CAAb,GAA8BX,aAAa,CAACW,QAAQ,GAAG,CAAZ,CAAtH,EAAuI;AACnI7E,UAAAA,aAAa,GAAGkE,aAAa,CAACW,QAAQ,GAAG,CAAZ,CAA7B;AACH,SAFD,MAGK;AACD7E,UAAAA,aAAa,GAAGkE,aAAa,CAACW,QAAQ,GAAG,CAAZ,CAAb,GAA8B,CAA9C;AACH;;AACD5E,QAAAA,aAAa,GAAGD,aAAa,IAAI6E,QAAQ,GAAGnB,mBAAf,CAAb,GAAmDG,qBAAnE,CAVqF,CAWrF;;AACA,YAAI8B,iBAAiB,GAAG3F,aAAxB,CAZqF,CAarF;AACA;;AACA,eAAOA,aAAa,GAAGyC,WAAhB,IAA+BxC,aAAa,GAAG0C,WAA/C,IAA8D,KAAKV,gBAAL,CAAsBjC,aAAa,GAAG,CAAtC,EAAyCC,aAAa,GAAG,CAAzD,CAArE,EAAkI;AAC9HD,UAAAA,aAAa;AACbC,UAAAA,aAAa;AAChB;;AACDiE,QAAAA,aAAa,CAACW,QAAD,CAAb,GAA0B7E,aAA1B;;AACA,YAAIA,aAAa,GAAGC,aAAhB,GAAgCuF,qBAAqB,GAAGC,qBAA5D,EAAmF;AAC/ED,UAAAA,qBAAqB,GAAGxF,aAAxB;AACAyF,UAAAA,qBAAqB,GAAGxF,aAAxB;AACH,SAvBoF,CAwBrF;AACA;AACA;AACA;;;AACA,YAAI,CAACmE,WAAD,IAAgBlE,IAAI,CAAC0F,GAAL,CAASf,QAAQ,GAAGf,mBAApB,KAA6CyB,cAAc,GAAG,CAAlF,EAAsF;AAClF,cAAIvF,aAAa,IAAImE,aAAa,CAACU,QAAD,CAAlC,EAA8C;AAC1C7B,YAAAA,cAAc,CAAC,CAAD,CAAd,GAAoBhD,aAApB;AACAiD,YAAAA,cAAc,CAAC,CAAD,CAAd,GAAoBhD,aAApB;;AACA,gBAAI0F,iBAAiB,IAAIxB,aAAa,CAACU,QAAD,CAAlC,IAAgD;AAAK;AAAL,cAAmC,CAAnF,IAAwFU,cAAc,IAAK;AAAK;AAAL,cAAmC,CAAlJ,EAAsJ;AAClJ;AACA,qBAAO,KAAK9B,SAAL,CAAeC,mBAAf,EAAoCC,oBAApC,EAA0DC,kBAA1D,EAA8EC,qBAA9E,EAAqGC,mBAArG,EAA0HC,oBAA1H,EAAgJC,kBAAhJ,EAAoKC,qBAApK,EAA2LC,aAA3L,EAA0MC,aAA1M,EAAyNnE,aAAzN,EAAwOyC,WAAxO,EAAqPO,cAArP,EAAqQ/C,aAArQ,EAAoR0C,WAApR,EAAiSM,cAAjS,EAAiTmB,WAAjT,EAA8TxB,YAA9T,CAAP;AACH,aAHD,MAIK;AACD;AACA;AACA,qBAAO,IAAP;AACH;AACJ;AACJ;AACJ,OAjDsF,CAkDvF;;;AACA,UAAIiD,oBAAoB,GAAG,CAAEL,qBAAqB,GAAGhD,aAAzB,IAA2CiD,qBAAqB,GAAG/C,aAAnE,IAAoF6C,cAArF,IAAuG,CAAlI;;AACA,UAAI,KAAK5E,2BAAL,KAAqC,IAArC,IAA6C,CAAC,KAAKA,2BAAL,CAAiC6E,qBAAjC,EAAwDK,oBAAxD,CAAlD,EAAiI;AAC7H;AACAjD,QAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,IAAlB,CAF6H,CAG7H;;AACAI,QAAAA,cAAc,CAAC,CAAD,CAAd,GAAoBwC,qBAApB;AACAvC,QAAAA,cAAc,CAAC,CAAD,CAAd,GAAoBwC,qBAApB;;AACA,YAAII,oBAAoB,GAAG,CAAvB,IAA4B;AAAK;AAAL,UAAmC,CAA/D,IAAoEN,cAAc,IAAK;AAAK;AAAL,UAAmC,CAA9H,EAAkI;AAC9H;AACA,iBAAO,KAAK9B,SAAL,CAAeC,mBAAf,EAAoCC,oBAApC,EAA0DC,kBAA1D,EAA8EC,qBAA9E,EAAqGC,mBAArG,EAA0HC,oBAA1H,EAAgJC,kBAAhJ,EAAoKC,qBAApK,EAA2LC,aAA3L,EAA0MC,aAA1M,EAAyNnE,aAAzN,EAAwOyC,WAAxO,EAAqPO,cAArP,EAAqQ/C,aAArQ,EAAoR0C,WAApR,EAAiSM,cAAjS,EAAiTmB,WAAjT,EAA8TxB,YAA9T,CAAP;AACH,SAHD,MAIK;AACD;AACA;AACA;AACAJ,UAAAA,aAAa;AACbE,UAAAA,aAAa;AACb,iBAAO,CACH,IAAIlF,UAAJ,CAAegF,aAAf,EAA8BC,WAAW,GAAGD,aAAd,GAA8B,CAA5D,EAA+DE,aAA/D,EAA8EC,WAAW,GAAGD,aAAd,GAA8B,CAA5G,CADG,CAAP;AAGH;AACJ,OAxEsF,CAyEvF;;;AACAqB,MAAAA,oBAAoB,GAAG,KAAK2B,iBAAL,CAAuB5B,mBAAmB,GAAGyB,cAA7C,EAA6DA,cAA7D,EAA6EzB,mBAA7E,EAAkGuB,YAAlG,CAAvB;AACArB,MAAAA,kBAAkB,GAAG,KAAK0B,iBAAL,CAAuB5B,mBAAmB,GAAGyB,cAA7C,EAA6DA,cAA7D,EAA6EzB,mBAA7E,EAAkGuB,YAAlG,CAArB;;AACA,WAAK,IAAIR,QAAQ,GAAGd,oBAApB,EAA0Cc,QAAQ,IAAIb,kBAAtD,EAA0Ea,QAAQ,IAAI,CAAtF,EAAyF;AACrF;AACA;AACA;AACA,YAAIA,QAAQ,KAAKd,oBAAb,IAAsCc,QAAQ,GAAGb,kBAAX,IAAiCG,aAAa,CAACU,QAAQ,GAAG,CAAZ,CAAb,IAA+BV,aAAa,CAACU,QAAQ,GAAG,CAAZ,CAAvH,EAAwI;AACpI7E,UAAAA,aAAa,GAAGmE,aAAa,CAACU,QAAQ,GAAG,CAAZ,CAAb,GAA8B,CAA9C;AACH,SAFD,MAGK;AACD7E,UAAAA,aAAa,GAAGmE,aAAa,CAACU,QAAQ,GAAG,CAAZ,CAA7B;AACH;;AACD5E,QAAAA,aAAa,GAAGD,aAAa,IAAI6E,QAAQ,GAAGf,mBAAf,CAAb,GAAmDG,qBAAnE,CAVqF,CAWrF;;AACA,YAAI0B,iBAAiB,GAAG3F,aAAxB,CAZqF,CAarF;AACA;;AACA,eAAOA,aAAa,GAAGwC,aAAhB,IAAiCvC,aAAa,GAAGyC,aAAjD,IAAkE,KAAKT,gBAAL,CAAsBjC,aAAtB,EAAqCC,aAArC,CAAzE,EAA8H;AAC1HD,UAAAA,aAAa;AACbC,UAAAA,aAAa;AAChB;;AACDkE,QAAAA,aAAa,CAACU,QAAD,CAAb,GAA0B7E,aAA1B,CAnBqF,CAoBrF;AACA;AACA;;AACA,YAAIoE,WAAW,IAAIlE,IAAI,CAAC0F,GAAL,CAASf,QAAQ,GAAGnB,mBAApB,KAA4C6B,cAA/D,EAA+E;AAC3E,cAAIvF,aAAa,IAAIkE,aAAa,CAACW,QAAD,CAAlC,EAA8C;AAC1C7B,YAAAA,cAAc,CAAC,CAAD,CAAd,GAAoBhD,aAApB;AACAiD,YAAAA,cAAc,CAAC,CAAD,CAAd,GAAoBhD,aAApB;;AACA,gBAAI0F,iBAAiB,IAAIzB,aAAa,CAACW,QAAD,CAAlC,IAAgD;AAAK;AAAL,cAAmC,CAAnF,IAAwFU,cAAc,IAAK;AAAK;AAAL,cAAmC,CAAlJ,EAAsJ;AAClJ;AACA,qBAAO,KAAK9B,SAAL,CAAeC,mBAAf,EAAoCC,oBAApC,EAA0DC,kBAA1D,EAA8EC,qBAA9E,EAAqGC,mBAArG,EAA0HC,oBAA1H,EAAgJC,kBAAhJ,EAAoKC,qBAApK,EAA2LC,aAA3L,EAA0MC,aAA1M,EAAyNnE,aAAzN,EAAwOyC,WAAxO,EAAqPO,cAArP,EAAqQ/C,aAArQ,EAAoR0C,WAApR,EAAiSM,cAAjS,EAAiTmB,WAAjT,EAA8TxB,YAA9T,CAAP;AACH,aAHD,MAIK;AACD;AACA;AACA,qBAAO,IAAP;AACH;AACJ;AACJ;AACJ,OAlHsF,CAmHvF;;;AACA,UAAI2C,cAAc,IAAI;AAAK;AAA3B,QAAwD;AACpD;AACA;AACA,cAAIO,IAAI,GAAG,IAAI/H,UAAJ,CAAe6F,kBAAkB,GAAGD,oBAArB,GAA4C,CAA3D,CAAX;AACAmC,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUpC,mBAAmB,GAAGC,oBAAtB,GAA6C,CAAvD;AACA3E,UAAAA,OAAO,CAACM,KAAR,CAAc4E,aAAd,EAA6BP,oBAA7B,EAAmDmC,IAAnD,EAAyD,CAAzD,EAA4DlC,kBAAkB,GAAGD,oBAArB,GAA4C,CAAxG;AACA,eAAKjC,gBAAL,CAAsB5B,IAAtB,CAA2BgG,IAA3B;AACAA,UAAAA,IAAI,GAAG,IAAI/H,UAAJ,CAAeiG,kBAAkB,GAAGD,oBAArB,GAA4C,CAA3D,CAAP;AACA+B,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUhC,mBAAmB,GAAGC,oBAAtB,GAA6C,CAAvD;AACA/E,UAAAA,OAAO,CAACM,KAAR,CAAc6E,aAAd,EAA6BJ,oBAA7B,EAAmD+B,IAAnD,EAAyD,CAAzD,EAA4D9B,kBAAkB,GAAGD,oBAArB,GAA4C,CAAxG;AACA,eAAKpC,gBAAL,CAAsB7B,IAAtB,CAA2BgG,IAA3B;AACH;AACJ,KAnLqJ,CAoLtJ;AACA;;;AACA,WAAO,KAAKrC,SAAL,CAAeC,mBAAf,EAAoCC,oBAApC,EAA0DC,kBAA1D,EAA8EC,qBAA9E,EAAqGC,mBAArG,EAA0HC,oBAA1H,EAAgJC,kBAAhJ,EAAoKC,qBAApK,EAA2LC,aAA3L,EAA0MC,aAA1M,EAAyNnE,aAAzN,EAAwOyC,WAAxO,EAAqPO,cAArP,EAAqQ/C,aAArQ,EAAoR0C,WAApR,EAAiSM,cAAjS,EAAiTmB,WAAjT,EAA8TxB,YAA9T,CAAP;AACH,GAvLD;AAwLA;;;;;;;;;;AAQApE,EAAAA,OAAO,CAACZ,SAAR,CAAkBkF,eAAlB,GAAoC,UAAUpE,OAAV,EAAmB;AACnD;AACA,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,OAAO,CAACV,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACrC,UAAI8H,MAAM,GAAGrH,OAAO,CAACT,CAAD,CAApB;AACA,UAAI+H,YAAY,GAAI/H,CAAC,GAAGS,OAAO,CAACV,MAAR,GAAiB,CAAtB,GAA2BU,OAAO,CAACT,CAAC,GAAG,CAAL,CAAP,CAAeuE,aAA1C,GAA0D,KAAKjB,uBAAL,CAA6BvD,MAA1G;AACA,UAAIiI,YAAY,GAAIhI,CAAC,GAAGS,OAAO,CAACV,MAAR,GAAiB,CAAtB,GAA2BU,OAAO,CAACT,CAAC,GAAG,CAAL,CAAP,CAAeyE,aAA1C,GAA0D,KAAKjB,uBAAL,CAA6BzD,MAA1G;AACA,UAAIkI,aAAa,GAAGH,MAAM,CAACI,cAAP,GAAwB,CAA5C;AACA,UAAIC,aAAa,GAAGL,MAAM,CAACM,cAAP,GAAwB,CAA5C;;AACA,aAAON,MAAM,CAACvD,aAAP,GAAuBuD,MAAM,CAACI,cAA9B,GAA+CH,YAA/C,IACHD,MAAM,CAACrD,aAAP,GAAuBqD,MAAM,CAACM,cAA9B,GAA+CJ,YAD5C,KAEF,CAACC,aAAD,IAAkB,KAAK/D,wBAAL,CAA8B4D,MAAM,CAACvD,aAArC,EAAoDuD,MAAM,CAACvD,aAAP,GAAuBuD,MAAM,CAACI,cAAlF,CAFhB,MAGF,CAACC,aAAD,IAAkB,KAAK9D,wBAAL,CAA8ByD,MAAM,CAACrD,aAArC,EAAoDqD,MAAM,CAACrD,aAAP,GAAuBqD,MAAM,CAACM,cAAlF,CAHhB,CAAP,EAG2H;AACvHN,QAAAA,MAAM,CAACvD,aAAP;AACAuD,QAAAA,MAAM,CAACrD,aAAP;AACH;;AACD,UAAI4D,eAAe,GAAG,CAAC,IAAD,CAAtB;;AACA,UAAIrI,CAAC,GAAGS,OAAO,CAACV,MAAR,GAAiB,CAArB,IAA0B,KAAKuI,cAAL,CAAoB7H,OAAO,CAACT,CAAD,CAA3B,EAAgCS,OAAO,CAACT,CAAC,GAAG,CAAL,CAAvC,EAAgDqI,eAAhD,CAA9B,EAAgG;AAC5F5H,QAAAA,OAAO,CAACT,CAAD,CAAP,GAAaqI,eAAe,CAAC,CAAD,CAA5B;AACA5H,QAAAA,OAAO,CAAC8H,MAAR,CAAevI,CAAC,GAAG,CAAnB,EAAsB,CAAtB;AACAA,QAAAA,CAAC;AACD;AACH;AACJ,KAtBkD,CAuBnD;;;AACA,SAAK,IAAIA,CAAC,GAAGS,OAAO,CAACV,MAAR,GAAiB,CAA9B,EAAiCC,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;AAC1C,UAAI8H,MAAM,GAAGrH,OAAO,CAACT,CAAD,CAApB;AACA,UAAI+H,YAAY,GAAG,CAAnB;AACA,UAAIC,YAAY,GAAG,CAAnB;;AACA,UAAIhI,CAAC,GAAG,CAAR,EAAW;AACP,YAAIwI,UAAU,GAAG/H,OAAO,CAACT,CAAC,GAAG,CAAL,CAAxB;;AACA,YAAIwI,UAAU,CAACN,cAAX,GAA4B,CAAhC,EAAmC;AAC/BH,UAAAA,YAAY,GAAGS,UAAU,CAACjE,aAAX,GAA2BiE,UAAU,CAACN,cAArD;AACH;;AACD,YAAIM,UAAU,CAACJ,cAAX,GAA4B,CAAhC,EAAmC;AAC/BJ,UAAAA,YAAY,GAAGQ,UAAU,CAAC/D,aAAX,GAA2B+D,UAAU,CAACJ,cAArD;AACH;AACJ;;AACD,UAAIH,aAAa,GAAGH,MAAM,CAACI,cAAP,GAAwB,CAA5C;AACA,UAAIC,aAAa,GAAGL,MAAM,CAACM,cAAP,GAAwB,CAA5C;AACA,UAAIK,SAAS,GAAG,CAAhB;;AACA,UAAIC,SAAS,GAAG,KAAKC,cAAL,CAAoBb,MAAM,CAACvD,aAA3B,EAA0CuD,MAAM,CAACI,cAAjD,EAAiEJ,MAAM,CAACrD,aAAxE,EAAuFqD,MAAM,CAACM,cAA9F,CAAhB;;AACA,WAAK,IAAIf,KAAK,GAAG,CAAjB,GAAqBA,KAAK,EAA1B,EAA8B;AAC1B,YAAI9C,aAAa,GAAGuD,MAAM,CAACvD,aAAP,GAAuB8C,KAA3C;AACA,YAAI5C,aAAa,GAAGqD,MAAM,CAACrD,aAAP,GAAuB4C,KAA3C;;AACA,YAAI9C,aAAa,GAAGwD,YAAhB,IAAgCtD,aAAa,GAAGuD,YAApD,EAAkE;AAC9D;AACH;;AACD,YAAIC,aAAa,IAAI,CAAC,KAAK/D,wBAAL,CAA8BK,aAA9B,EAA6CA,aAAa,GAAGuD,MAAM,CAACI,cAApE,CAAtB,EAA2G;AACvG;AACH;;AACD,YAAIC,aAAa,IAAI,CAAC,KAAK9D,wBAAL,CAA8BI,aAA9B,EAA6CA,aAAa,GAAGqD,MAAM,CAACM,cAApE,CAAtB,EAA2G;AACvG;AACH;;AACD,YAAIQ,KAAK,GAAG,KAAKD,cAAL,CAAoBpE,aAApB,EAAmCuD,MAAM,CAACI,cAA1C,EAA0DzD,aAA1D,EAAyEqD,MAAM,CAACM,cAAhF,CAAZ;;AACA,YAAIQ,KAAK,GAAGF,SAAZ,EAAuB;AACnBA,UAAAA,SAAS,GAAGE,KAAZ;AACAH,UAAAA,SAAS,GAAGpB,KAAZ;AACH;AACJ;;AACDS,MAAAA,MAAM,CAACvD,aAAP,IAAwBkE,SAAxB;AACAX,MAAAA,MAAM,CAACrD,aAAP,IAAwBgE,SAAxB;AACH;;AACD,WAAOhI,OAAP;AACH,GA/DD;;AAgEAF,EAAAA,OAAO,CAACZ,SAAR,CAAkBkJ,mBAAlB,GAAwC,UAAUC,KAAV,EAAiB;AACrD,QAAIA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,KAAKxF,uBAAL,CAA6BvD,MAA7B,GAAsC,CAAjE,EAAoE;AAChE,aAAO,IAAP;AACH;;AACD,WAAQ,KAAKqD,WAAL,IAAoB,QAAQ2F,IAAR,CAAa,KAAK1F,uBAAL,CAA6ByF,KAA7B,CAAb,CAA5B;AACH,GALD;;AAMAvI,EAAAA,OAAO,CAACZ,SAAR,CAAkBqJ,yBAAlB,GAA8C,UAAUzE,aAAV,EAAyB2D,cAAzB,EAAyC;AACnF,QAAI,KAAKW,mBAAL,CAAyBtE,aAAzB,KAA2C,KAAKsE,mBAAL,CAAyBtE,aAAa,GAAG,CAAzC,CAA/C,EAA4F;AACxF,aAAO,IAAP;AACH;;AACD,QAAI2D,cAAc,GAAG,CAArB,EAAwB;AACpB,UAAI1D,WAAW,GAAGD,aAAa,GAAG2D,cAAlC;;AACA,UAAI,KAAKW,mBAAL,CAAyBrE,WAAW,GAAG,CAAvC,KAA6C,KAAKqE,mBAAL,CAAyBrE,WAAzB,CAAjD,EAAwF;AACpF,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAXD;;AAYAjE,EAAAA,OAAO,CAACZ,SAAR,CAAkBsJ,mBAAlB,GAAwC,UAAUH,KAAV,EAAiB;AACrD,QAAIA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,KAAKtF,uBAAL,CAA6BzD,MAA7B,GAAsC,CAAjE,EAAoE;AAChE,aAAO,IAAP;AACH;;AACD,WAAQ,KAAKqD,WAAL,IAAoB,QAAQ2F,IAAR,CAAa,KAAKxF,uBAAL,CAA6BuF,KAA7B,CAAb,CAA5B;AACH,GALD;;AAMAvI,EAAAA,OAAO,CAACZ,SAAR,CAAkBuJ,yBAAlB,GAA8C,UAAUzE,aAAV,EAAyB2D,cAAzB,EAAyC;AACnF,QAAI,KAAKa,mBAAL,CAAyBxE,aAAzB,KAA2C,KAAKwE,mBAAL,CAAyBxE,aAAa,GAAG,CAAzC,CAA/C,EAA4F;AACxF,aAAO,IAAP;AACH;;AACD,QAAI2D,cAAc,GAAG,CAArB,EAAwB;AACpB,UAAI1D,WAAW,GAAGD,aAAa,GAAG2D,cAAlC;;AACA,UAAI,KAAKa,mBAAL,CAAyBvE,WAAW,GAAG,CAAvC,KAA6C,KAAKuE,mBAAL,CAAyBvE,WAAzB,CAAjD,EAAwF;AACpF,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAXD;;AAYAnE,EAAAA,OAAO,CAACZ,SAAR,CAAkBgJ,cAAlB,GAAmC,UAAUpE,aAAV,EAAyB2D,cAAzB,EAAyCzD,aAAzC,EAAwD2D,cAAxD,EAAwE;AACvG,QAAIe,aAAa,GAAI,KAAKH,yBAAL,CAA+BzE,aAA/B,EAA8C2D,cAA9C,IAAgE,CAAhE,GAAoE,CAAzF;AACA,QAAIkB,aAAa,GAAI,KAAKF,yBAAL,CAA+BzE,aAA/B,EAA8C2D,cAA9C,IAAgE,CAAhE,GAAoE,CAAzF;AACA,WAAQe,aAAa,GAAGC,aAAxB;AACH,GAJD;AAKA;;;;;;;;;AAOA7I,EAAAA,OAAO,CAACZ,SAAR,CAAkB4F,kBAAlB,GAAuC,UAAU8D,IAAV,EAAgBC,KAAhB,EAAuB;AAC1D,QAAIjB,eAAe,GAAG,EAAtB;;AACA,QAAIgB,IAAI,CAACtJ,MAAL,KAAgB,CAAhB,IAAqBuJ,KAAK,CAACvJ,MAAN,KAAiB,CAA1C,EAA6C;AACzC,aAAQuJ,KAAK,CAACvJ,MAAN,GAAe,CAAhB,GAAqBuJ,KAArB,GAA6BD,IAApC;AACH,KAFD,MAGK,IAAI,KAAKf,cAAL,CAAoBe,IAAI,CAACA,IAAI,CAACtJ,MAAL,GAAc,CAAf,CAAxB,EAA2CuJ,KAAK,CAAC,CAAD,CAAhD,EAAqDjB,eAArD,CAAJ,EAA2E;AAC5E;AACA;AACA;AACA;AACA,UAAIpD,MAAM,GAAG,IAAIsE,KAAJ,CAAUF,IAAI,CAACtJ,MAAL,GAAcuJ,KAAK,CAACvJ,MAApB,GAA6B,CAAvC,CAAb;AACAgB,MAAAA,OAAO,CAACC,IAAR,CAAaqI,IAAb,EAAmB,CAAnB,EAAsBpE,MAAtB,EAA8B,CAA9B,EAAiCoE,IAAI,CAACtJ,MAAL,GAAc,CAA/C;AACAkF,MAAAA,MAAM,CAACoE,IAAI,CAACtJ,MAAL,GAAc,CAAf,CAAN,GAA0BsI,eAAe,CAAC,CAAD,CAAzC;AACAtH,MAAAA,OAAO,CAACC,IAAR,CAAasI,KAAb,EAAoB,CAApB,EAAuBrE,MAAvB,EAA+BoE,IAAI,CAACtJ,MAApC,EAA4CuJ,KAAK,CAACvJ,MAAN,GAAe,CAA3D;AACA,aAAOkF,MAAP;AACH,KAVI,MAWA;AACD,UAAIA,MAAM,GAAG,IAAIsE,KAAJ,CAAUF,IAAI,CAACtJ,MAAL,GAAcuJ,KAAK,CAACvJ,MAA9B,CAAb;AACAgB,MAAAA,OAAO,CAACC,IAAR,CAAaqI,IAAb,EAAmB,CAAnB,EAAsBpE,MAAtB,EAA8B,CAA9B,EAAiCoE,IAAI,CAACtJ,MAAtC;AACAgB,MAAAA,OAAO,CAACC,IAAR,CAAasI,KAAb,EAAoB,CAApB,EAAuBrE,MAAvB,EAA+BoE,IAAI,CAACtJ,MAApC,EAA4CuJ,KAAK,CAACvJ,MAAlD;AACA,aAAOkF,MAAP;AACH;AACJ,GAtBD;AAuBA;;;;;;;;;;AAQA1E,EAAAA,OAAO,CAACZ,SAAR,CAAkB2I,cAAlB,GAAmC,UAAUe,IAAV,EAAgBC,KAAhB,EAAuBjB,eAAvB,EAAwC;AACvE3H,IAAAA,KAAK,CAACC,MAAN,CAAa0I,IAAI,CAAC9E,aAAL,IAAsB+E,KAAK,CAAC/E,aAAzC,EAAwD,uDAAxD;AACA7D,IAAAA,KAAK,CAACC,MAAN,CAAa0I,IAAI,CAAC5E,aAAL,IAAsB6E,KAAK,CAAC7E,aAAzC,EAAwD,uDAAxD;;AACA,QAAI4E,IAAI,CAAC9E,aAAL,GAAqB8E,IAAI,CAACnB,cAA1B,IAA4CoB,KAAK,CAAC/E,aAAlD,IAAmE8E,IAAI,CAAC5E,aAAL,GAAqB4E,IAAI,CAACjB,cAA1B,IAA4CkB,KAAK,CAAC7E,aAAzH,EAAwI;AACpI,UAAIF,aAAa,GAAG8E,IAAI,CAAC9E,aAAzB;AACA,UAAI2D,cAAc,GAAGmB,IAAI,CAACnB,cAA1B;AACA,UAAIzD,aAAa,GAAG4E,IAAI,CAAC5E,aAAzB;AACA,UAAI2D,cAAc,GAAGiB,IAAI,CAACjB,cAA1B;;AACA,UAAIiB,IAAI,CAAC9E,aAAL,GAAqB8E,IAAI,CAACnB,cAA1B,IAA4CoB,KAAK,CAAC/E,aAAtD,EAAqE;AACjE2D,QAAAA,cAAc,GAAGoB,KAAK,CAAC/E,aAAN,GAAsB+E,KAAK,CAACpB,cAA5B,GAA6CmB,IAAI,CAAC9E,aAAnE;AACH;;AACD,UAAI8E,IAAI,CAAC5E,aAAL,GAAqB4E,IAAI,CAACjB,cAA1B,IAA4CkB,KAAK,CAAC7E,aAAtD,EAAqE;AACjE2D,QAAAA,cAAc,GAAGkB,KAAK,CAAC7E,aAAN,GAAsB6E,KAAK,CAAClB,cAA5B,GAA6CiB,IAAI,CAAC5E,aAAnE;AACH;;AACD4D,MAAAA,eAAe,CAAC,CAAD,CAAf,GAAqB,IAAI9I,UAAJ,CAAegF,aAAf,EAA8B2D,cAA9B,EAA8CzD,aAA9C,EAA6D2D,cAA7D,CAArB;AACA,aAAO,IAAP;AACH,KAbD,MAcK;AACDC,MAAAA,eAAe,CAAC,CAAD,CAAf,GAAqB,IAArB;AACA,aAAO,KAAP;AACH;AACJ,GArBD;AAsBA;;;;;;;;;;;;;;AAYA9H,EAAAA,OAAO,CAACZ,SAAR,CAAkB8H,iBAAlB,GAAsC,UAAUb,QAAV,EAAoBU,cAApB,EAAoCkC,iBAApC,EAAuDpC,YAAvD,EAAqE;AACvG,QAAIR,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,GAAGQ,YAAhC,EAA8C;AAC1C;AACA,aAAOR,QAAP;AACH,KAJsG,CAKvG;AACA;;;AACA,QAAI6C,cAAc,GAAGD,iBAArB;AACA,QAAIE,cAAc,GAAGtC,YAAY,GAAGoC,iBAAf,GAAmC,CAAxD;AACA,QAAIG,QAAQ,GAAIrC,cAAc,GAAG,CAAjB,KAAuB,CAAvC;;AACA,QAAIV,QAAQ,GAAG,CAAf,EAAkB;AACd,UAAIgD,cAAc,GAAIH,cAAc,GAAG,CAAjB,KAAuB,CAA7C;AACA,aAAQE,QAAQ,KAAKC,cAAd,GAAgC,CAAhC,GAAoC,CAA3C;AACH,KAHD,MAIK;AACD,UAAIC,cAAc,GAAIH,cAAc,GAAG,CAAjB,KAAuB,CAA7C;AACA,aAAQC,QAAQ,KAAKE,cAAd,GAAgCzC,YAAY,GAAG,CAA/C,GAAmDA,YAAY,GAAG,CAAzE;AACH;AACJ,GAlBD;;AAmBA,SAAO7G,OAAP;AACH,CAvpB4B,EAA7B;;AAwpBA,SAASA,OAAT","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { DiffChange } from './diffChange.js';\r\nimport { stringHash } from '../hash.js';\r\nvar StringDiffSequence = /** @class */ (function () {\r\n    function StringDiffSequence(source) {\r\n        this.source = source;\r\n    }\r\n    StringDiffSequence.prototype.getElements = function () {\r\n        var source = this.source;\r\n        var characters = new Int32Array(source.length);\r\n        for (var i = 0, len = source.length; i < len; i++) {\r\n            characters[i] = source.charCodeAt(i);\r\n        }\r\n        return characters;\r\n    };\r\n    return StringDiffSequence;\r\n}());\r\nexport { StringDiffSequence };\r\nexport function stringDiff(original, modified, pretty) {\r\n    return new LcsDiff(new StringDiffSequence(original), new StringDiffSequence(modified)).ComputeDiff(pretty).changes;\r\n}\r\n//\r\n// The code below has been ported from a C# implementation in VS\r\n//\r\nvar Debug = /** @class */ (function () {\r\n    function Debug() {\r\n    }\r\n    Debug.Assert = function (condition, message) {\r\n        if (!condition) {\r\n            throw new Error(message);\r\n        }\r\n    };\r\n    return Debug;\r\n}());\r\nexport { Debug };\r\nvar MyArray = /** @class */ (function () {\r\n    function MyArray() {\r\n    }\r\n    /**\r\n     * Copies a range of elements from an Array starting at the specified source index and pastes\r\n     * them to another Array starting at the specified destination index. The length and the indexes\r\n     * are specified as 64-bit integers.\r\n     * sourceArray:\r\n     *\t\tThe Array that contains the data to copy.\r\n     * sourceIndex:\r\n     *\t\tA 64-bit integer that represents the index in the sourceArray at which copying begins.\r\n     * destinationArray:\r\n     *\t\tThe Array that receives the data.\r\n     * destinationIndex:\r\n     *\t\tA 64-bit integer that represents the index in the destinationArray at which storing begins.\r\n     * length:\r\n     *\t\tA 64-bit integer that represents the number of elements to copy.\r\n     */\r\n    MyArray.Copy = function (sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\r\n        for (var i = 0; i < length; i++) {\r\n            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\r\n        }\r\n    };\r\n    MyArray.Copy2 = function (sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\r\n        for (var i = 0; i < length; i++) {\r\n            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\r\n        }\r\n    };\r\n    return MyArray;\r\n}());\r\nexport { MyArray };\r\n/**\r\n * A utility class which helps to create the set of DiffChanges from\r\n * a difference operation. This class accepts original DiffElements and\r\n * modified DiffElements that are involved in a particular change. The\r\n * MarktNextChange() method can be called to mark the separation between\r\n * distinct changes. At the end, the Changes property can be called to retrieve\r\n * the constructed changes.\r\n */\r\nvar DiffChangeHelper = /** @class */ (function () {\r\n    /**\r\n     * Constructs a new DiffChangeHelper for the given DiffSequences.\r\n     */\r\n    function DiffChangeHelper() {\r\n        this.m_changes = [];\r\n        this.m_originalStart = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\r\n        this.m_modifiedStart = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\r\n        this.m_originalCount = 0;\r\n        this.m_modifiedCount = 0;\r\n    }\r\n    /**\r\n     * Marks the beginning of the next change in the set of differences.\r\n     */\r\n    DiffChangeHelper.prototype.MarkNextChange = function () {\r\n        // Only add to the list if there is something to add\r\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\r\n            // Add the new change to our list\r\n            this.m_changes.push(new DiffChange(this.m_originalStart, this.m_originalCount, this.m_modifiedStart, this.m_modifiedCount));\r\n        }\r\n        // Reset for the next change\r\n        this.m_originalCount = 0;\r\n        this.m_modifiedCount = 0;\r\n        this.m_originalStart = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\r\n        this.m_modifiedStart = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\r\n    };\r\n    /**\r\n     * Adds the original element at the given position to the elements\r\n     * affected by the current change. The modified index gives context\r\n     * to the change position with respect to the original sequence.\r\n     * @param originalIndex The index of the original element to add.\r\n     * @param modifiedIndex The index of the modified element that provides corresponding position in the modified sequence.\r\n     */\r\n    DiffChangeHelper.prototype.AddOriginalElement = function (originalIndex, modifiedIndex) {\r\n        // The 'true' start index is the smallest of the ones we've seen\r\n        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\r\n        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\r\n        this.m_originalCount++;\r\n    };\r\n    /**\r\n     * Adds the modified element at the given position to the elements\r\n     * affected by the current change. The original index gives context\r\n     * to the change position with respect to the modified sequence.\r\n     * @param originalIndex The index of the original element that provides corresponding position in the original sequence.\r\n     * @param modifiedIndex The index of the modified element to add.\r\n     */\r\n    DiffChangeHelper.prototype.AddModifiedElement = function (originalIndex, modifiedIndex) {\r\n        // The 'true' start index is the smallest of the ones we've seen\r\n        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\r\n        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\r\n        this.m_modifiedCount++;\r\n    };\r\n    /**\r\n     * Retrieves all of the changes marked by the class.\r\n     */\r\n    DiffChangeHelper.prototype.getChanges = function () {\r\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\r\n            // Finish up on whatever is left\r\n            this.MarkNextChange();\r\n        }\r\n        return this.m_changes;\r\n    };\r\n    /**\r\n     * Retrieves all of the changes marked by the class in the reverse order\r\n     */\r\n    DiffChangeHelper.prototype.getReverseChanges = function () {\r\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\r\n            // Finish up on whatever is left\r\n            this.MarkNextChange();\r\n        }\r\n        this.m_changes.reverse();\r\n        return this.m_changes;\r\n    };\r\n    return DiffChangeHelper;\r\n}());\r\n/**\r\n * An implementation of the difference algorithm described in\r\n * \"An O(ND) Difference Algorithm and its variations\" by Eugene W. Myers\r\n */\r\nvar LcsDiff = /** @class */ (function () {\r\n    /**\r\n     * Constructs the DiffFinder\r\n     */\r\n    function LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate) {\r\n        if (continueProcessingPredicate === void 0) { continueProcessingPredicate = null; }\r\n        this.ContinueProcessingPredicate = continueProcessingPredicate;\r\n        var _a = LcsDiff._getElements(originalSequence), originalStringElements = _a[0], originalElementsOrHash = _a[1], originalHasStrings = _a[2];\r\n        var _b = LcsDiff._getElements(modifiedSequence), modifiedStringElements = _b[0], modifiedElementsOrHash = _b[1], modifiedHasStrings = _b[2];\r\n        this._hasStrings = (originalHasStrings && modifiedHasStrings);\r\n        this._originalStringElements = originalStringElements;\r\n        this._originalElementsOrHash = originalElementsOrHash;\r\n        this._modifiedStringElements = modifiedStringElements;\r\n        this._modifiedElementsOrHash = modifiedElementsOrHash;\r\n        this.m_forwardHistory = [];\r\n        this.m_reverseHistory = [];\r\n    }\r\n    LcsDiff._isStringArray = function (arr) {\r\n        return (arr.length > 0 && typeof arr[0] === 'string');\r\n    };\r\n    LcsDiff._getElements = function (sequence) {\r\n        var elements = sequence.getElements();\r\n        if (LcsDiff._isStringArray(elements)) {\r\n            var hashes = new Int32Array(elements.length);\r\n            for (var i = 0, len = elements.length; i < len; i++) {\r\n                hashes[i] = stringHash(elements[i], 0);\r\n            }\r\n            return [elements, hashes, true];\r\n        }\r\n        if (elements instanceof Int32Array) {\r\n            return [[], elements, false];\r\n        }\r\n        return [[], new Int32Array(elements), false];\r\n    };\r\n    LcsDiff.prototype.ElementsAreEqual = function (originalIndex, newIndex) {\r\n        if (this._originalElementsOrHash[originalIndex] !== this._modifiedElementsOrHash[newIndex]) {\r\n            return false;\r\n        }\r\n        return (this._hasStrings ? this._originalStringElements[originalIndex] === this._modifiedStringElements[newIndex] : true);\r\n    };\r\n    LcsDiff.prototype.OriginalElementsAreEqual = function (index1, index2) {\r\n        if (this._originalElementsOrHash[index1] !== this._originalElementsOrHash[index2]) {\r\n            return false;\r\n        }\r\n        return (this._hasStrings ? this._originalStringElements[index1] === this._originalStringElements[index2] : true);\r\n    };\r\n    LcsDiff.prototype.ModifiedElementsAreEqual = function (index1, index2) {\r\n        if (this._modifiedElementsOrHash[index1] !== this._modifiedElementsOrHash[index2]) {\r\n            return false;\r\n        }\r\n        return (this._hasStrings ? this._modifiedStringElements[index1] === this._modifiedStringElements[index2] : true);\r\n    };\r\n    LcsDiff.prototype.ComputeDiff = function (pretty) {\r\n        return this._ComputeDiff(0, this._originalElementsOrHash.length - 1, 0, this._modifiedElementsOrHash.length - 1, pretty);\r\n    };\r\n    /**\r\n     * Computes the differences between the original and modified input\r\n     * sequences on the bounded range.\r\n     * @returns An array of the differences between the two input sequences.\r\n     */\r\n    LcsDiff.prototype._ComputeDiff = function (originalStart, originalEnd, modifiedStart, modifiedEnd, pretty) {\r\n        var quitEarlyArr = [false];\r\n        var changes = this.ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr);\r\n        if (pretty) {\r\n            // We have to clean up the computed diff to be more intuitive\r\n            // but it turns out this cannot be done correctly until the entire set\r\n            // of diffs have been computed\r\n            changes = this.PrettifyChanges(changes);\r\n        }\r\n        return {\r\n            quitEarly: quitEarlyArr[0],\r\n            changes: changes\r\n        };\r\n    };\r\n    /**\r\n     * Private helper method which computes the differences on the bounded range\r\n     * recursively.\r\n     * @returns An array of the differences between the two input sequences.\r\n     */\r\n    LcsDiff.prototype.ComputeDiffRecursive = function (originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr) {\r\n        quitEarlyArr[0] = false;\r\n        // Find the start of the differences\r\n        while (originalStart <= originalEnd && modifiedStart <= modifiedEnd && this.ElementsAreEqual(originalStart, modifiedStart)) {\r\n            originalStart++;\r\n            modifiedStart++;\r\n        }\r\n        // Find the end of the differences\r\n        while (originalEnd >= originalStart && modifiedEnd >= modifiedStart && this.ElementsAreEqual(originalEnd, modifiedEnd)) {\r\n            originalEnd--;\r\n            modifiedEnd--;\r\n        }\r\n        // In the special case where we either have all insertions or all deletions or the sequences are identical\r\n        if (originalStart > originalEnd || modifiedStart > modifiedEnd) {\r\n            var changes = void 0;\r\n            if (modifiedStart <= modifiedEnd) {\r\n                Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');\r\n                // All insertions\r\n                changes = [\r\n                    new DiffChange(originalStart, 0, modifiedStart, modifiedEnd - modifiedStart + 1)\r\n                ];\r\n            }\r\n            else if (originalStart <= originalEnd) {\r\n                Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');\r\n                // All deletions\r\n                changes = [\r\n                    new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, 0)\r\n                ];\r\n            }\r\n            else {\r\n                Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');\r\n                Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');\r\n                // Identical sequences - No differences\r\n                changes = [];\r\n            }\r\n            return changes;\r\n        }\r\n        // This problem can be solved using the Divide-And-Conquer technique.\r\n        var midOriginalArr = [0];\r\n        var midModifiedArr = [0];\r\n        var result = this.ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr);\r\n        var midOriginal = midOriginalArr[0];\r\n        var midModified = midModifiedArr[0];\r\n        if (result !== null) {\r\n            // Result is not-null when there was enough memory to compute the changes while\r\n            // searching for the recursion point\r\n            return result;\r\n        }\r\n        else if (!quitEarlyArr[0]) {\r\n            // We can break the problem down recursively by finding the changes in the\r\n            // First Half:   (originalStart, modifiedStart) to (midOriginal, midModified)\r\n            // Second Half:  (midOriginal + 1, minModified + 1) to (originalEnd, modifiedEnd)\r\n            // NOTE: ComputeDiff() is inclusive, therefore the second range starts on the next point\r\n            var leftChanges = this.ComputeDiffRecursive(originalStart, midOriginal, modifiedStart, midModified, quitEarlyArr);\r\n            var rightChanges = [];\r\n            if (!quitEarlyArr[0]) {\r\n                rightChanges = this.ComputeDiffRecursive(midOriginal + 1, originalEnd, midModified + 1, modifiedEnd, quitEarlyArr);\r\n            }\r\n            else {\r\n                // We did't have time to finish the first half, so we don't have time to compute this half.\r\n                // Consider the entire rest of the sequence different.\r\n                rightChanges = [\r\n                    new DiffChange(midOriginal + 1, originalEnd - (midOriginal + 1) + 1, midModified + 1, modifiedEnd - (midModified + 1) + 1)\r\n                ];\r\n            }\r\n            return this.ConcatenateChanges(leftChanges, rightChanges);\r\n        }\r\n        // If we hit here, we quit early, and so can't return anything meaningful\r\n        return [\r\n            new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)\r\n        ];\r\n    };\r\n    LcsDiff.prototype.WALKTRACE = function (diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr) {\r\n        var forwardChanges = null;\r\n        var reverseChanges = null;\r\n        // First, walk backward through the forward diagonals history\r\n        var changeHelper = new DiffChangeHelper();\r\n        var diagonalMin = diagonalForwardStart;\r\n        var diagonalMax = diagonalForwardEnd;\r\n        var diagonalRelative = (midOriginalArr[0] - midModifiedArr[0]) - diagonalForwardOffset;\r\n        var lastOriginalIndex = -1073741824 /* MIN_SAFE_SMALL_INTEGER */;\r\n        var historyIndex = this.m_forwardHistory.length - 1;\r\n        do {\r\n            // Get the diagonal index from the relative diagonal number\r\n            var diagonal = diagonalRelative + diagonalForwardBase;\r\n            // Figure out where we came from\r\n            if (diagonal === diagonalMin || (diagonal < diagonalMax && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1])) {\r\n                // Vertical line (the element is an insert)\r\n                originalIndex = forwardPoints[diagonal + 1];\r\n                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\r\n                if (originalIndex < lastOriginalIndex) {\r\n                    changeHelper.MarkNextChange();\r\n                }\r\n                lastOriginalIndex = originalIndex;\r\n                changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex);\r\n                diagonalRelative = (diagonal + 1) - diagonalForwardBase; //Setup for the next iteration\r\n            }\r\n            else {\r\n                // Horizontal line (the element is a deletion)\r\n                originalIndex = forwardPoints[diagonal - 1] + 1;\r\n                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\r\n                if (originalIndex < lastOriginalIndex) {\r\n                    changeHelper.MarkNextChange();\r\n                }\r\n                lastOriginalIndex = originalIndex - 1;\r\n                changeHelper.AddOriginalElement(originalIndex, modifiedIndex + 1);\r\n                diagonalRelative = (diagonal - 1) - diagonalForwardBase; //Setup for the next iteration\r\n            }\r\n            if (historyIndex >= 0) {\r\n                forwardPoints = this.m_forwardHistory[historyIndex];\r\n                diagonalForwardBase = forwardPoints[0]; //We stored this in the first spot\r\n                diagonalMin = 1;\r\n                diagonalMax = forwardPoints.length - 1;\r\n            }\r\n        } while (--historyIndex >= -1);\r\n        // Ironically, we get the forward changes as the reverse of the\r\n        // order we added them since we technically added them backwards\r\n        forwardChanges = changeHelper.getReverseChanges();\r\n        if (quitEarlyArr[0]) {\r\n            // TODO: Calculate a partial from the reverse diagonals.\r\n            //       For now, just assume everything after the midOriginal/midModified point is a diff\r\n            var originalStartPoint = midOriginalArr[0] + 1;\r\n            var modifiedStartPoint = midModifiedArr[0] + 1;\r\n            if (forwardChanges !== null && forwardChanges.length > 0) {\r\n                var lastForwardChange = forwardChanges[forwardChanges.length - 1];\r\n                originalStartPoint = Math.max(originalStartPoint, lastForwardChange.getOriginalEnd());\r\n                modifiedStartPoint = Math.max(modifiedStartPoint, lastForwardChange.getModifiedEnd());\r\n            }\r\n            reverseChanges = [\r\n                new DiffChange(originalStartPoint, originalEnd - originalStartPoint + 1, modifiedStartPoint, modifiedEnd - modifiedStartPoint + 1)\r\n            ];\r\n        }\r\n        else {\r\n            // Now walk backward through the reverse diagonals history\r\n            changeHelper = new DiffChangeHelper();\r\n            diagonalMin = diagonalReverseStart;\r\n            diagonalMax = diagonalReverseEnd;\r\n            diagonalRelative = (midOriginalArr[0] - midModifiedArr[0]) - diagonalReverseOffset;\r\n            lastOriginalIndex = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\r\n            historyIndex = (deltaIsEven) ? this.m_reverseHistory.length - 1 : this.m_reverseHistory.length - 2;\r\n            do {\r\n                // Get the diagonal index from the relative diagonal number\r\n                var diagonal = diagonalRelative + diagonalReverseBase;\r\n                // Figure out where we came from\r\n                if (diagonal === diagonalMin || (diagonal < diagonalMax && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1])) {\r\n                    // Horizontal line (the element is a deletion))\r\n                    originalIndex = reversePoints[diagonal + 1] - 1;\r\n                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\r\n                    if (originalIndex > lastOriginalIndex) {\r\n                        changeHelper.MarkNextChange();\r\n                    }\r\n                    lastOriginalIndex = originalIndex + 1;\r\n                    changeHelper.AddOriginalElement(originalIndex + 1, modifiedIndex + 1);\r\n                    diagonalRelative = (diagonal + 1) - diagonalReverseBase; //Setup for the next iteration\r\n                }\r\n                else {\r\n                    // Vertical line (the element is an insertion)\r\n                    originalIndex = reversePoints[diagonal - 1];\r\n                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\r\n                    if (originalIndex > lastOriginalIndex) {\r\n                        changeHelper.MarkNextChange();\r\n                    }\r\n                    lastOriginalIndex = originalIndex;\r\n                    changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex + 1);\r\n                    diagonalRelative = (diagonal - 1) - diagonalReverseBase; //Setup for the next iteration\r\n                }\r\n                if (historyIndex >= 0) {\r\n                    reversePoints = this.m_reverseHistory[historyIndex];\r\n                    diagonalReverseBase = reversePoints[0]; //We stored this in the first spot\r\n                    diagonalMin = 1;\r\n                    diagonalMax = reversePoints.length - 1;\r\n                }\r\n            } while (--historyIndex >= -1);\r\n            // There are cases where the reverse history will find diffs that\r\n            // are correct, but not intuitive, so we need shift them.\r\n            reverseChanges = changeHelper.getChanges();\r\n        }\r\n        return this.ConcatenateChanges(forwardChanges, reverseChanges);\r\n    };\r\n    /**\r\n     * Given the range to compute the diff on, this method finds the point:\r\n     * (midOriginal, midModified)\r\n     * that exists in the middle of the LCS of the two sequences and\r\n     * is the point at which the LCS problem may be broken down recursively.\r\n     * This method will try to keep the LCS trace in memory. If the LCS recursion\r\n     * point is calculated and the full trace is available in memory, then this method\r\n     * will return the change list.\r\n     * @param originalStart The start bound of the original sequence range\r\n     * @param originalEnd The end bound of the original sequence range\r\n     * @param modifiedStart The start bound of the modified sequence range\r\n     * @param modifiedEnd The end bound of the modified sequence range\r\n     * @param midOriginal The middle point of the original sequence range\r\n     * @param midModified The middle point of the modified sequence range\r\n     * @returns The diff changes, if available, otherwise null\r\n     */\r\n    LcsDiff.prototype.ComputeRecursionPoint = function (originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr) {\r\n        var originalIndex = 0, modifiedIndex = 0;\r\n        var diagonalForwardStart = 0, diagonalForwardEnd = 0;\r\n        var diagonalReverseStart = 0, diagonalReverseEnd = 0;\r\n        // To traverse the edit graph and produce the proper LCS, our actual\r\n        // start position is just outside the given boundary\r\n        originalStart--;\r\n        modifiedStart--;\r\n        // We set these up to make the compiler happy, but they will\r\n        // be replaced before we return with the actual recursion point\r\n        midOriginalArr[0] = 0;\r\n        midModifiedArr[0] = 0;\r\n        // Clear out the history\r\n        this.m_forwardHistory = [];\r\n        this.m_reverseHistory = [];\r\n        // Each cell in the two arrays corresponds to a diagonal in the edit graph.\r\n        // The integer value in the cell represents the originalIndex of the furthest\r\n        // reaching point found so far that ends in that diagonal.\r\n        // The modifiedIndex can be computed mathematically from the originalIndex and the diagonal number.\r\n        var maxDifferences = (originalEnd - originalStart) + (modifiedEnd - modifiedStart);\r\n        var numDiagonals = maxDifferences + 1;\r\n        var forwardPoints = new Int32Array(numDiagonals);\r\n        var reversePoints = new Int32Array(numDiagonals);\r\n        // diagonalForwardBase: Index into forwardPoints of the diagonal which passes through (originalStart, modifiedStart)\r\n        // diagonalReverseBase: Index into reversePoints of the diagonal which passes through (originalEnd, modifiedEnd)\r\n        var diagonalForwardBase = (modifiedEnd - modifiedStart);\r\n        var diagonalReverseBase = (originalEnd - originalStart);\r\n        // diagonalForwardOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\r\n        //    diagonal number (relative to diagonalForwardBase)\r\n        // diagonalReverseOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\r\n        //    diagonal number (relative to diagonalReverseBase)\r\n        var diagonalForwardOffset = (originalStart - modifiedStart);\r\n        var diagonalReverseOffset = (originalEnd - modifiedEnd);\r\n        // delta: The difference between the end diagonal and the start diagonal. This is used to relate diagonal numbers\r\n        //   relative to the start diagonal with diagonal numbers relative to the end diagonal.\r\n        // The Even/Oddn-ness of this delta is important for determining when we should check for overlap\r\n        var delta = diagonalReverseBase - diagonalForwardBase;\r\n        var deltaIsEven = (delta % 2 === 0);\r\n        // Here we set up the start and end points as the furthest points found so far\r\n        // in both the forward and reverse directions, respectively\r\n        forwardPoints[diagonalForwardBase] = originalStart;\r\n        reversePoints[diagonalReverseBase] = originalEnd;\r\n        // Remember if we quit early, and thus need to do a best-effort result instead of a real result.\r\n        quitEarlyArr[0] = false;\r\n        // A couple of points:\r\n        // --With this method, we iterate on the number of differences between the two sequences.\r\n        //   The more differences there actually are, the longer this will take.\r\n        // --Also, as the number of differences increases, we have to search on diagonals further\r\n        //   away from the reference diagonal (which is diagonalForwardBase for forward, diagonalReverseBase for reverse).\r\n        // --We extend on even diagonals (relative to the reference diagonal) only when numDifferences\r\n        //   is even and odd diagonals only when numDifferences is odd.\r\n        for (var numDifferences = 1; numDifferences <= (maxDifferences / 2) + 1; numDifferences++) {\r\n            var furthestOriginalIndex = 0;\r\n            var furthestModifiedIndex = 0;\r\n            // Run the algorithm in the forward direction\r\n            diagonalForwardStart = this.ClipDiagonalBound(diagonalForwardBase - numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\r\n            diagonalForwardEnd = this.ClipDiagonalBound(diagonalForwardBase + numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\r\n            for (var diagonal = diagonalForwardStart; diagonal <= diagonalForwardEnd; diagonal += 2) {\r\n                // STEP 1: We extend the furthest reaching point in the present diagonal\r\n                // by looking at the diagonals above and below and picking the one whose point\r\n                // is further away from the start point (originalStart, modifiedStart)\r\n                if (diagonal === diagonalForwardStart || (diagonal < diagonalForwardEnd && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1])) {\r\n                    originalIndex = forwardPoints[diagonal + 1];\r\n                }\r\n                else {\r\n                    originalIndex = forwardPoints[diagonal - 1] + 1;\r\n                }\r\n                modifiedIndex = originalIndex - (diagonal - diagonalForwardBase) - diagonalForwardOffset;\r\n                // Save the current originalIndex so we can test for false overlap in step 3\r\n                var tempOriginalIndex = originalIndex;\r\n                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\r\n                // so long as the elements are equal.\r\n                while (originalIndex < originalEnd && modifiedIndex < modifiedEnd && this.ElementsAreEqual(originalIndex + 1, modifiedIndex + 1)) {\r\n                    originalIndex++;\r\n                    modifiedIndex++;\r\n                }\r\n                forwardPoints[diagonal] = originalIndex;\r\n                if (originalIndex + modifiedIndex > furthestOriginalIndex + furthestModifiedIndex) {\r\n                    furthestOriginalIndex = originalIndex;\r\n                    furthestModifiedIndex = modifiedIndex;\r\n                }\r\n                // STEP 3: If delta is odd (overlap first happens on forward when delta is odd)\r\n                // and diagonal is in the range of reverse diagonals computed for numDifferences-1\r\n                // (the previous iteration; we haven't computed reverse diagonals for numDifferences yet)\r\n                // then check for overlap.\r\n                if (!deltaIsEven && Math.abs(diagonal - diagonalReverseBase) <= (numDifferences - 1)) {\r\n                    if (originalIndex >= reversePoints[diagonal]) {\r\n                        midOriginalArr[0] = originalIndex;\r\n                        midModifiedArr[0] = modifiedIndex;\r\n                        if (tempOriginalIndex <= reversePoints[diagonal] && 1447 /* MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* MaxDifferencesHistory */ + 1)) {\r\n                            // BINGO! We overlapped, and we have the full trace in memory!\r\n                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\r\n                        }\r\n                        else {\r\n                            // Either false overlap, or we didn't have enough memory for the full trace\r\n                            // Just return the recursion point\r\n                            return null;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Check to see if we should be quitting early, before moving on to the next iteration.\r\n            var matchLengthOfLongest = ((furthestOriginalIndex - originalStart) + (furthestModifiedIndex - modifiedStart) - numDifferences) / 2;\r\n            if (this.ContinueProcessingPredicate !== null && !this.ContinueProcessingPredicate(furthestOriginalIndex, matchLengthOfLongest)) {\r\n                // We can't finish, so skip ahead to generating a result from what we have.\r\n                quitEarlyArr[0] = true;\r\n                // Use the furthest distance we got in the forward direction.\r\n                midOriginalArr[0] = furthestOriginalIndex;\r\n                midModifiedArr[0] = furthestModifiedIndex;\r\n                if (matchLengthOfLongest > 0 && 1447 /* MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* MaxDifferencesHistory */ + 1)) {\r\n                    // Enough of the history is in memory to walk it backwards\r\n                    return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\r\n                }\r\n                else {\r\n                    // We didn't actually remember enough of the history.\r\n                    //Since we are quiting the diff early, we need to shift back the originalStart and modified start\r\n                    //back into the boundary limits since we decremented their value above beyond the boundary limit.\r\n                    originalStart++;\r\n                    modifiedStart++;\r\n                    return [\r\n                        new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)\r\n                    ];\r\n                }\r\n            }\r\n            // Run the algorithm in the reverse direction\r\n            diagonalReverseStart = this.ClipDiagonalBound(diagonalReverseBase - numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\r\n            diagonalReverseEnd = this.ClipDiagonalBound(diagonalReverseBase + numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\r\n            for (var diagonal = diagonalReverseStart; diagonal <= diagonalReverseEnd; diagonal += 2) {\r\n                // STEP 1: We extend the furthest reaching point in the present diagonal\r\n                // by looking at the diagonals above and below and picking the one whose point\r\n                // is further away from the start point (originalEnd, modifiedEnd)\r\n                if (diagonal === diagonalReverseStart || (diagonal < diagonalReverseEnd && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1])) {\r\n                    originalIndex = reversePoints[diagonal + 1] - 1;\r\n                }\r\n                else {\r\n                    originalIndex = reversePoints[diagonal - 1];\r\n                }\r\n                modifiedIndex = originalIndex - (diagonal - diagonalReverseBase) - diagonalReverseOffset;\r\n                // Save the current originalIndex so we can test for false overlap\r\n                var tempOriginalIndex = originalIndex;\r\n                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\r\n                // as long as the elements are equal.\r\n                while (originalIndex > originalStart && modifiedIndex > modifiedStart && this.ElementsAreEqual(originalIndex, modifiedIndex)) {\r\n                    originalIndex--;\r\n                    modifiedIndex--;\r\n                }\r\n                reversePoints[diagonal] = originalIndex;\r\n                // STEP 4: If delta is even (overlap first happens on reverse when delta is even)\r\n                // and diagonal is in the range of forward diagonals computed for numDifferences\r\n                // then check for overlap.\r\n                if (deltaIsEven && Math.abs(diagonal - diagonalForwardBase) <= numDifferences) {\r\n                    if (originalIndex <= forwardPoints[diagonal]) {\r\n                        midOriginalArr[0] = originalIndex;\r\n                        midModifiedArr[0] = modifiedIndex;\r\n                        if (tempOriginalIndex >= forwardPoints[diagonal] && 1447 /* MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* MaxDifferencesHistory */ + 1)) {\r\n                            // BINGO! We overlapped, and we have the full trace in memory!\r\n                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\r\n                        }\r\n                        else {\r\n                            // Either false overlap, or we didn't have enough memory for the full trace\r\n                            // Just return the recursion point\r\n                            return null;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Save current vectors to history before the next iteration\r\n            if (numDifferences <= 1447 /* MaxDifferencesHistory */) {\r\n                // We are allocating space for one extra int, which we fill with\r\n                // the index of the diagonal base index\r\n                var temp = new Int32Array(diagonalForwardEnd - diagonalForwardStart + 2);\r\n                temp[0] = diagonalForwardBase - diagonalForwardStart + 1;\r\n                MyArray.Copy2(forwardPoints, diagonalForwardStart, temp, 1, diagonalForwardEnd - diagonalForwardStart + 1);\r\n                this.m_forwardHistory.push(temp);\r\n                temp = new Int32Array(diagonalReverseEnd - diagonalReverseStart + 2);\r\n                temp[0] = diagonalReverseBase - diagonalReverseStart + 1;\r\n                MyArray.Copy2(reversePoints, diagonalReverseStart, temp, 1, diagonalReverseEnd - diagonalReverseStart + 1);\r\n                this.m_reverseHistory.push(temp);\r\n            }\r\n        }\r\n        // If we got here, then we have the full trace in history. We just have to convert it to a change list\r\n        // NOTE: This part is a bit messy\r\n        return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\r\n    };\r\n    /**\r\n     * Shifts the given changes to provide a more intuitive diff.\r\n     * While the first element in a diff matches the first element after the diff,\r\n     * we shift the diff down.\r\n     *\r\n     * @param changes The list of changes to shift\r\n     * @returns The shifted changes\r\n     */\r\n    LcsDiff.prototype.PrettifyChanges = function (changes) {\r\n        // Shift all the changes down first\r\n        for (var i = 0; i < changes.length; i++) {\r\n            var change = changes[i];\r\n            var originalStop = (i < changes.length - 1) ? changes[i + 1].originalStart : this._originalElementsOrHash.length;\r\n            var modifiedStop = (i < changes.length - 1) ? changes[i + 1].modifiedStart : this._modifiedElementsOrHash.length;\r\n            var checkOriginal = change.originalLength > 0;\r\n            var checkModified = change.modifiedLength > 0;\r\n            while (change.originalStart + change.originalLength < originalStop &&\r\n                change.modifiedStart + change.modifiedLength < modifiedStop &&\r\n                (!checkOriginal || this.OriginalElementsAreEqual(change.originalStart, change.originalStart + change.originalLength)) &&\r\n                (!checkModified || this.ModifiedElementsAreEqual(change.modifiedStart, change.modifiedStart + change.modifiedLength))) {\r\n                change.originalStart++;\r\n                change.modifiedStart++;\r\n            }\r\n            var mergedChangeArr = [null];\r\n            if (i < changes.length - 1 && this.ChangesOverlap(changes[i], changes[i + 1], mergedChangeArr)) {\r\n                changes[i] = mergedChangeArr[0];\r\n                changes.splice(i + 1, 1);\r\n                i--;\r\n                continue;\r\n            }\r\n        }\r\n        // Shift changes back up until we hit empty or whitespace-only lines\r\n        for (var i = changes.length - 1; i >= 0; i--) {\r\n            var change = changes[i];\r\n            var originalStop = 0;\r\n            var modifiedStop = 0;\r\n            if (i > 0) {\r\n                var prevChange = changes[i - 1];\r\n                if (prevChange.originalLength > 0) {\r\n                    originalStop = prevChange.originalStart + prevChange.originalLength;\r\n                }\r\n                if (prevChange.modifiedLength > 0) {\r\n                    modifiedStop = prevChange.modifiedStart + prevChange.modifiedLength;\r\n                }\r\n            }\r\n            var checkOriginal = change.originalLength > 0;\r\n            var checkModified = change.modifiedLength > 0;\r\n            var bestDelta = 0;\r\n            var bestScore = this._boundaryScore(change.originalStart, change.originalLength, change.modifiedStart, change.modifiedLength);\r\n            for (var delta = 1;; delta++) {\r\n                var originalStart = change.originalStart - delta;\r\n                var modifiedStart = change.modifiedStart - delta;\r\n                if (originalStart < originalStop || modifiedStart < modifiedStop) {\r\n                    break;\r\n                }\r\n                if (checkOriginal && !this.OriginalElementsAreEqual(originalStart, originalStart + change.originalLength)) {\r\n                    break;\r\n                }\r\n                if (checkModified && !this.ModifiedElementsAreEqual(modifiedStart, modifiedStart + change.modifiedLength)) {\r\n                    break;\r\n                }\r\n                var score = this._boundaryScore(originalStart, change.originalLength, modifiedStart, change.modifiedLength);\r\n                if (score > bestScore) {\r\n                    bestScore = score;\r\n                    bestDelta = delta;\r\n                }\r\n            }\r\n            change.originalStart -= bestDelta;\r\n            change.modifiedStart -= bestDelta;\r\n        }\r\n        return changes;\r\n    };\r\n    LcsDiff.prototype._OriginalIsBoundary = function (index) {\r\n        if (index <= 0 || index >= this._originalElementsOrHash.length - 1) {\r\n            return true;\r\n        }\r\n        return (this._hasStrings && /^\\s*$/.test(this._originalStringElements[index]));\r\n    };\r\n    LcsDiff.prototype._OriginalRegionIsBoundary = function (originalStart, originalLength) {\r\n        if (this._OriginalIsBoundary(originalStart) || this._OriginalIsBoundary(originalStart - 1)) {\r\n            return true;\r\n        }\r\n        if (originalLength > 0) {\r\n            var originalEnd = originalStart + originalLength;\r\n            if (this._OriginalIsBoundary(originalEnd - 1) || this._OriginalIsBoundary(originalEnd)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    LcsDiff.prototype._ModifiedIsBoundary = function (index) {\r\n        if (index <= 0 || index >= this._modifiedElementsOrHash.length - 1) {\r\n            return true;\r\n        }\r\n        return (this._hasStrings && /^\\s*$/.test(this._modifiedStringElements[index]));\r\n    };\r\n    LcsDiff.prototype._ModifiedRegionIsBoundary = function (modifiedStart, modifiedLength) {\r\n        if (this._ModifiedIsBoundary(modifiedStart) || this._ModifiedIsBoundary(modifiedStart - 1)) {\r\n            return true;\r\n        }\r\n        if (modifiedLength > 0) {\r\n            var modifiedEnd = modifiedStart + modifiedLength;\r\n            if (this._ModifiedIsBoundary(modifiedEnd - 1) || this._ModifiedIsBoundary(modifiedEnd)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    LcsDiff.prototype._boundaryScore = function (originalStart, originalLength, modifiedStart, modifiedLength) {\r\n        var originalScore = (this._OriginalRegionIsBoundary(originalStart, originalLength) ? 1 : 0);\r\n        var modifiedScore = (this._ModifiedRegionIsBoundary(modifiedStart, modifiedLength) ? 1 : 0);\r\n        return (originalScore + modifiedScore);\r\n    };\r\n    /**\r\n     * Concatenates the two input DiffChange lists and returns the resulting\r\n     * list.\r\n     * @param The left changes\r\n     * @param The right changes\r\n     * @returns The concatenated list\r\n     */\r\n    LcsDiff.prototype.ConcatenateChanges = function (left, right) {\r\n        var mergedChangeArr = [];\r\n        if (left.length === 0 || right.length === 0) {\r\n            return (right.length > 0) ? right : left;\r\n        }\r\n        else if (this.ChangesOverlap(left[left.length - 1], right[0], mergedChangeArr)) {\r\n            // Since we break the problem down recursively, it is possible that we\r\n            // might recurse in the middle of a change thereby splitting it into\r\n            // two changes. Here in the combining stage, we detect and fuse those\r\n            // changes back together\r\n            var result = new Array(left.length + right.length - 1);\r\n            MyArray.Copy(left, 0, result, 0, left.length - 1);\r\n            result[left.length - 1] = mergedChangeArr[0];\r\n            MyArray.Copy(right, 1, result, left.length, right.length - 1);\r\n            return result;\r\n        }\r\n        else {\r\n            var result = new Array(left.length + right.length);\r\n            MyArray.Copy(left, 0, result, 0, left.length);\r\n            MyArray.Copy(right, 0, result, left.length, right.length);\r\n            return result;\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if the two changes overlap and can be merged into a single\r\n     * change\r\n     * @param left The left change\r\n     * @param right The right change\r\n     * @param mergedChange The merged change if the two overlap, null otherwise\r\n     * @returns True if the two changes overlap\r\n     */\r\n    LcsDiff.prototype.ChangesOverlap = function (left, right, mergedChangeArr) {\r\n        Debug.Assert(left.originalStart <= right.originalStart, 'Left change is not less than or equal to right change');\r\n        Debug.Assert(left.modifiedStart <= right.modifiedStart, 'Left change is not less than or equal to right change');\r\n        if (left.originalStart + left.originalLength >= right.originalStart || left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\r\n            var originalStart = left.originalStart;\r\n            var originalLength = left.originalLength;\r\n            var modifiedStart = left.modifiedStart;\r\n            var modifiedLength = left.modifiedLength;\r\n            if (left.originalStart + left.originalLength >= right.originalStart) {\r\n                originalLength = right.originalStart + right.originalLength - left.originalStart;\r\n            }\r\n            if (left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\r\n                modifiedLength = right.modifiedStart + right.modifiedLength - left.modifiedStart;\r\n            }\r\n            mergedChangeArr[0] = new DiffChange(originalStart, originalLength, modifiedStart, modifiedLength);\r\n            return true;\r\n        }\r\n        else {\r\n            mergedChangeArr[0] = null;\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Helper method used to clip a diagonal index to the range of valid\r\n     * diagonals. This also decides whether or not the diagonal index,\r\n     * if it exceeds the boundary, should be clipped to the boundary or clipped\r\n     * one inside the boundary depending on the Even/Odd status of the boundary\r\n     * and numDifferences.\r\n     * @param diagonal The index of the diagonal to clip.\r\n     * @param numDifferences The current number of differences being iterated upon.\r\n     * @param diagonalBaseIndex The base reference diagonal.\r\n     * @param numDiagonals The total number of diagonals.\r\n     * @returns The clipped diagonal index.\r\n     */\r\n    LcsDiff.prototype.ClipDiagonalBound = function (diagonal, numDifferences, diagonalBaseIndex, numDiagonals) {\r\n        if (diagonal >= 0 && diagonal < numDiagonals) {\r\n            // Nothing to clip, its in range\r\n            return diagonal;\r\n        }\r\n        // diagonalsBelow: The number of diagonals below the reference diagonal\r\n        // diagonalsAbove: The number of diagonals above the reference diagonal\r\n        var diagonalsBelow = diagonalBaseIndex;\r\n        var diagonalsAbove = numDiagonals - diagonalBaseIndex - 1;\r\n        var diffEven = (numDifferences % 2 === 0);\r\n        if (diagonal < 0) {\r\n            var lowerBoundEven = (diagonalsBelow % 2 === 0);\r\n            return (diffEven === lowerBoundEven) ? 0 : 1;\r\n        }\r\n        else {\r\n            var upperBoundEven = (diagonalsAbove % 2 === 0);\r\n            return (diffEven === upperBoundEven) ? numDiagonals - 1 : numDiagonals - 2;\r\n        }\r\n    };\r\n    return LcsDiff;\r\n}());\r\nexport { LcsDiff };\r\n"]},"metadata":{},"sourceType":"module"}