{"ast":null,"code":"var _jsxFileName = \"/Users/ifudata/eclipse-workspace/screen-web/src/components/Editor/LayerPanel/index.js\";\nimport React, { Component } from 'react';\nimport classnames from 'classnames';\nimport { connect } from 'react-redux';\nimport { sortModules } from '../../../store/actions/screen-actions';\nimport PanelTitle from '../../Common/PanelTitle';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\n\nclass LayerPanel extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getItemStyle = (isDragging, draggableStyle) => {\n      return {\n        background: isDragging ? \"#585858\" : \"none\",\n        ...draggableStyle\n      };\n    };\n\n    this.reorder = (list, startIndex, endIndex) => {\n      const result = Array.from(list);\n      const [removed] = result.splice(startIndex, 1);\n      result.splice(endIndex, 0, removed);\n      return result;\n    };\n\n    this.onDragEnd = result => {\n      if (!result.destination) {\n        return;\n      }\n\n      const items = this.reorder(this.props.layerList.toJS(), result.source.index, result.destination.index);\n      this.props.sortModules(items);\n    };\n  }\n\n  render() {\n    console.log(this.props.layerList.toJS());\n    return React.createElement(\"div\", {\n      className: classnames(\"layer-panel\", this.props.status),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(PanelTitle, {\n      icon: \"icon-layers\",\n      name: \"\\u56FE\\u5C42\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Droppable, {\n      droppableId: \"layerList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, (provided, snapshot) => {\n      return React.createElement(\"div\", Object.assign({\n        className: \"layer-list\",\n        ref: provided.innerRef\n      }, provided.droppableProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), this.props.layerList.map((item, index) => React.createElement(Draggable, {\n        key: item.get(\"id\"),\n        draggableId: item.get(\"id\"),\n        index: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n        ref: provided.innerRef\n      }, provided.draggableProps, provided.dragHandleProps, {\n        className: \"list-item\",\n        style: this.getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(\"i\", {\n        className: \"iconfont icon-china\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, item.get(\"name\"))))), provided.placeholder);\n    })));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    layerList: state.screenState.get(\"modules\")\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    sortModules(data) {\n      const action = sortModules(data);\n      dispatch(action);\n    }\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LayerPanel);","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/src/components/Editor/LayerPanel/index.js"],"names":["React","Component","classnames","connect","sortModules","PanelTitle","DragDropContext","Draggable","Droppable","LayerPanel","getItemStyle","isDragging","draggableStyle","background","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","onDragEnd","destination","items","props","layerList","toJS","source","index","render","console","log","status","provided","snapshot","innerRef","droppableProps","map","item","get","draggableProps","dragHandleProps","style","placeholder","mapStateToProps","state","ownProps","screenState","mapDispatchToProps","dispatch","data","action"],"mappings":"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","sourcesContent":["import React,{Component} from 'react'\nimport classnames from 'classnames'\nimport {connect} from 'react-redux'\nimport { sortModules } from '../../../store/actions/screen-actions'\nimport PanelTitle from '../../Common/PanelTitle'\nimport { DragDropContext,Draggable,Droppable } from 'react-beautiful-dnd'\nclass LayerPanel extends Component{\n    getItemStyle = (isDragging, draggableStyle) => {\n        return {\n            background: isDragging ? \"#585858\" : \"none\",\n            ...draggableStyle\n        }\n    };\n    reorder = (list, startIndex, endIndex) => {\n        const result = Array.from(list);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n        return result;\n    };\n    onDragEnd = (result)=>{\n        if (!result.destination) {\n            return;\n        }\n        const items = this.reorder(\n            this.props.layerList.toJS(),\n            result.source.index,\n            result.destination.index\n        );\n        this.props.sortModules(items)\n    }\n    render(){\n        console.log(this.props.layerList.toJS())\n        return(\n            <div className={classnames(\"layer-panel\",this.props.status)}>\n                <PanelTitle\n                    icon=\"icon-layers\"\n                    name=\"图层\"\n                />\n                <DragDropContext \n                    onDragEnd={this.onDragEnd}\n                >\n                    <Droppable \n                        droppableId=\"layerList\"\n                    >\n                        {(provided, snapshot) => {\n                            return <div \n                                className=\"layer-list\"\n                                ref={provided.innerRef}\n                                {...provided.droppableProps}\n                            > \n                                {this.props.layerList.map((item, index) => (\n                                    <Draggable key={item.get(\"id\")} draggableId={item.get(\"id\")} index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            className=\"list-item\"\n                                            style={this.getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}\n                                        >\n                                            <i className=\"iconfont icon-china\"></i>\n                                            <span>{item.get(\"name\")}</span>\n                                        </div>\n                                    )}\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                            </div>\n                        }}\n                    </Droppable>\n                </DragDropContext>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state,ownProps)=>{\n    return {\n        layerList:state.screenState.get(\"modules\")\n    }\n}\n\nconst mapDispatchToProps = dispatch=>{\n    return {\n        sortModules(data){\n            const action = sortModules(data)\n            dispatch(action)\n        }\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(LayerPanel);"]},"metadata":{},"sourceType":"module"}