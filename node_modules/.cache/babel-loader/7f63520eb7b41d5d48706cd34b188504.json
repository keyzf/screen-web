{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Schemas } from '../../../base/common/network.js';\nimport { DataUri, basenameOrAuthority } from '../../../base/common/resources.js';\nimport { PLAINTEXT_MODE_ID } from '../modes/modesRegistry.js';\nimport { FileKind } from '../../../platform/files/common/files.js';\nexport function getIconClasses(modelService, modeService, resource, fileKind) {\n  // we always set these base classes even if we do not have a path\n  var classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n\n  if (resource) {\n    // Get the path and name of the resource. For data-URIs, we need to parse specially\n    var name_1;\n\n    if (resource.scheme === Schemas.data) {\n      var metadata = DataUri.parseMetaData(resource);\n      name_1 = metadata.get(DataUri.META_DATA_LABEL);\n    } else {\n      name_1 = cssEscape(basenameOrAuthority(resource).toLowerCase());\n    } // Folders\n\n\n    if (fileKind === FileKind.FOLDER) {\n      classes.push(name_1 + \"-name-folder-icon\");\n    } // Files\n    else {\n        // Name & Extension(s)\n        if (name_1) {\n          classes.push(name_1 + \"-name-file-icon\");\n          var dotSegments = name_1.split('.');\n\n          for (var i = 1; i < dotSegments.length; i++) {\n            classes.push(dotSegments.slice(i).join('.') + \"-ext-file-icon\"); // add each combination of all found extensions if more than one\n          }\n\n          classes.push(\"ext-file-icon\"); // extra segment to increase file-ext score\n        } // Detected Mode\n\n\n        var detectedModeId = detectModeId(modelService, modeService, resource);\n\n        if (detectedModeId) {\n          classes.push(cssEscape(detectedModeId) + \"-lang-file-icon\");\n        }\n      }\n  }\n\n  return classes;\n}\nexport function detectModeId(modelService, modeService, resource) {\n  if (!resource) {\n    return null; // we need a resource at least\n  }\n\n  var modeId = null; // Data URI: check for encoded metadata\n\n  if (resource.scheme === Schemas.data) {\n    var metadata = DataUri.parseMetaData(resource);\n    var mime = metadata.get(DataUri.META_DATA_MIME);\n\n    if (mime) {\n      modeId = modeService.getModeId(mime);\n    }\n  } // Any other URI: check for model if existing\n  else {\n      var model = modelService.getModel(resource);\n\n      if (model) {\n        modeId = model.getModeId();\n      }\n    } // only take if the mode is specific (aka no just plain text)\n\n\n  if (modeId && modeId !== PLAINTEXT_MODE_ID) {\n    return modeId;\n  } // otherwise fallback to path based detection\n\n\n  return modeService.getModeIdByFilepathOrFirstLine(resource);\n}\nexport function cssEscape(val) {\n  return val.replace(/\\s/g, '\\\\$&'); // make sure to not introduce CSS classes from files that contain whitespace\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/services/getIconClasses.js"],"names":["Schemas","DataUri","basenameOrAuthority","PLAINTEXT_MODE_ID","FileKind","getIconClasses","modelService","modeService","resource","fileKind","classes","ROOT_FOLDER","FOLDER","name_1","scheme","data","metadata","parseMetaData","get","META_DATA_LABEL","cssEscape","toLowerCase","push","dotSegments","split","i","length","slice","join","detectedModeId","detectModeId","modeId","mime","META_DATA_MIME","getModeId","model","getModel","getModeIdByFilepathOrFirstLine","val","replace"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Schemas } from '../../../base/common/network.js';\r\nimport { DataUri, basenameOrAuthority } from '../../../base/common/resources.js';\r\nimport { PLAINTEXT_MODE_ID } from '../modes/modesRegistry.js';\r\nimport { FileKind } from '../../../platform/files/common/files.js';\r\nexport function getIconClasses(modelService, modeService, resource, fileKind) {\r\n    // we always set these base classes even if we do not have a path\r\n    var classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\r\n    if (resource) {\r\n        // Get the path and name of the resource. For data-URIs, we need to parse specially\r\n        var name_1;\r\n        if (resource.scheme === Schemas.data) {\r\n            var metadata = DataUri.parseMetaData(resource);\r\n            name_1 = metadata.get(DataUri.META_DATA_LABEL);\r\n        }\r\n        else {\r\n            name_1 = cssEscape(basenameOrAuthority(resource).toLowerCase());\r\n        }\r\n        // Folders\r\n        if (fileKind === FileKind.FOLDER) {\r\n            classes.push(name_1 + \"-name-folder-icon\");\r\n        }\r\n        // Files\r\n        else {\r\n            // Name & Extension(s)\r\n            if (name_1) {\r\n                classes.push(name_1 + \"-name-file-icon\");\r\n                var dotSegments = name_1.split('.');\r\n                for (var i = 1; i < dotSegments.length; i++) {\r\n                    classes.push(dotSegments.slice(i).join('.') + \"-ext-file-icon\"); // add each combination of all found extensions if more than one\r\n                }\r\n                classes.push(\"ext-file-icon\"); // extra segment to increase file-ext score\r\n            }\r\n            // Detected Mode\r\n            var detectedModeId = detectModeId(modelService, modeService, resource);\r\n            if (detectedModeId) {\r\n                classes.push(cssEscape(detectedModeId) + \"-lang-file-icon\");\r\n            }\r\n        }\r\n    }\r\n    return classes;\r\n}\r\nexport function detectModeId(modelService, modeService, resource) {\r\n    if (!resource) {\r\n        return null; // we need a resource at least\r\n    }\r\n    var modeId = null;\r\n    // Data URI: check for encoded metadata\r\n    if (resource.scheme === Schemas.data) {\r\n        var metadata = DataUri.parseMetaData(resource);\r\n        var mime = metadata.get(DataUri.META_DATA_MIME);\r\n        if (mime) {\r\n            modeId = modeService.getModeId(mime);\r\n        }\r\n    }\r\n    // Any other URI: check for model if existing\r\n    else {\r\n        var model = modelService.getModel(resource);\r\n        if (model) {\r\n            modeId = model.getModeId();\r\n        }\r\n    }\r\n    // only take if the mode is specific (aka no just plain text)\r\n    if (modeId && modeId !== PLAINTEXT_MODE_ID) {\r\n        return modeId;\r\n    }\r\n    // otherwise fallback to path based detection\r\n    return modeService.getModeIdByFilepathOrFirstLine(resource);\r\n}\r\nexport function cssEscape(val) {\r\n    return val.replace(/\\s/g, '\\\\$&'); // make sure to not introduce CSS classes from files that contain whitespace\r\n}\r\n"]},"metadata":{},"sourceType":"module"}