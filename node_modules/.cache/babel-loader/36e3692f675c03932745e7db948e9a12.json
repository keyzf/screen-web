{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as nls from '../../../nls.js';\nimport { IntervalTimer } from '../../../base/common/async.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\n\nvar AbstractKeybindingService =\n/** @class */\nfunction (_super) {\n  __extends(AbstractKeybindingService, _super);\n\n  function AbstractKeybindingService(_contextKeyService, _commandService, _telemetryService, _notificationService) {\n    var _this = _super.call(this) || this;\n\n    _this._contextKeyService = _contextKeyService;\n    _this._commandService = _commandService;\n    _this._telemetryService = _telemetryService;\n    _this._notificationService = _notificationService;\n    _this._onDidUpdateKeybindings = _this._register(new Emitter());\n    _this._currentChord = null;\n    _this._currentChordChecker = new IntervalTimer();\n    _this._currentChordStatusMessage = null;\n    return _this;\n  }\n\n  Object.defineProperty(AbstractKeybindingService.prototype, \"onDidUpdateKeybindings\", {\n    get: function () {\n      return this._onDidUpdateKeybindings ? this._onDidUpdateKeybindings.event : Event.None; // Sinon stubbing walks properties on prototype\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AbstractKeybindingService.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n  };\n\n  AbstractKeybindingService.prototype.getKeybindings = function () {\n    return this._getResolver().getKeybindings();\n  };\n\n  AbstractKeybindingService.prototype.lookupKeybinding = function (commandId) {\n    var result = this._getResolver().lookupPrimaryKeybinding(commandId);\n\n    if (!result) {\n      return undefined;\n    }\n\n    return result.resolvedKeybinding;\n  };\n\n  AbstractKeybindingService.prototype.softDispatch = function (e, target) {\n    var keybinding = this.resolveKeyboardEvent(e);\n\n    if (keybinding.isChord()) {\n      console.warn('Unexpected keyboard event mapped to a chord');\n      return null;\n    }\n\n    var firstPart = keybinding.getDispatchParts()[0];\n\n    if (firstPart === null) {\n      // cannot be dispatched, probably only modifier keys\n      return null;\n    }\n\n    var contextValue = this._contextKeyService.getContext(target);\n\n    var currentChord = this._currentChord ? this._currentChord.keypress : null;\n    return this._getResolver().resolve(contextValue, currentChord, firstPart);\n  };\n\n  AbstractKeybindingService.prototype._enterChordMode = function (firstPart, keypressLabel) {\n    var _this = this;\n\n    this._currentChord = {\n      keypress: firstPart,\n      label: keypressLabel\n    };\n    this._currentChordStatusMessage = this._notificationService.status(nls.localize('first.chord', \"({0}) was pressed. Waiting for second key of chord...\", keypressLabel));\n    var chordEnterTime = Date.now();\n\n    this._currentChordChecker.cancelAndSet(function () {\n      if (!_this._documentHasFocus()) {\n        // Focus has been lost => leave chord mode\n        _this._leaveChordMode();\n\n        return;\n      }\n\n      if (Date.now() - chordEnterTime > 5000) {\n        // 5 seconds elapsed => leave chord mode\n        _this._leaveChordMode();\n      }\n    }, 500);\n  };\n\n  AbstractKeybindingService.prototype._leaveChordMode = function () {\n    if (this._currentChordStatusMessage) {\n      this._currentChordStatusMessage.dispose();\n\n      this._currentChordStatusMessage = null;\n    }\n\n    this._currentChordChecker.cancel();\n\n    this._currentChord = null;\n  };\n\n  AbstractKeybindingService.prototype._dispatch = function (e, target) {\n    return this._doDispatch(this.resolveKeyboardEvent(e), target);\n  };\n\n  AbstractKeybindingService.prototype._doDispatch = function (keybinding, target) {\n    var _this = this;\n\n    var shouldPreventDefault = false;\n\n    if (keybinding.isChord()) {\n      console.warn('Unexpected keyboard event mapped to a chord');\n      return false;\n    }\n\n    var firstPart = keybinding.getDispatchParts()[0];\n\n    if (firstPart === null) {\n      // cannot be dispatched, probably only modifier keys\n      return shouldPreventDefault;\n    }\n\n    var contextValue = this._contextKeyService.getContext(target);\n\n    var currentChord = this._currentChord ? this._currentChord.keypress : null;\n    var keypressLabel = keybinding.getLabel();\n\n    var resolveResult = this._getResolver().resolve(contextValue, currentChord, firstPart);\n\n    if (resolveResult && resolveResult.enterChord) {\n      shouldPreventDefault = true;\n\n      this._enterChordMode(firstPart, keypressLabel);\n\n      return shouldPreventDefault;\n    }\n\n    if (this._currentChord) {\n      if (!resolveResult || !resolveResult.commandId) {\n        this._notificationService.status(nls.localize('missing.chord', \"The key combination ({0}, {1}) is not a command.\", this._currentChord.label, keypressLabel), {\n          hideAfter: 10 * 1000\n          /* 10s */\n\n        });\n\n        shouldPreventDefault = true;\n      }\n    }\n\n    this._leaveChordMode();\n\n    if (resolveResult && resolveResult.commandId) {\n      if (!resolveResult.bubble) {\n        shouldPreventDefault = true;\n      }\n\n      if (typeof resolveResult.commandArgs === 'undefined') {\n        this._commandService.executeCommand(resolveResult.commandId).then(undefined, function (err) {\n          return _this._notificationService.warn(err);\n        });\n      } else {\n        this._commandService.executeCommand(resolveResult.commandId, resolveResult.commandArgs).then(undefined, function (err) {\n          return _this._notificationService.warn(err);\n        });\n      }\n\n      this._telemetryService.publicLog2('workbenchActionExecuted', {\n        id: resolveResult.commandId,\n        from: 'keybinding'\n      });\n    }\n\n    return shouldPreventDefault;\n  };\n\n  AbstractKeybindingService.prototype.mightProducePrintableCharacter = function (event) {\n    if (event.ctrlKey || event.metaKey) {\n      // ignore ctrl/cmd-combination but not shift/alt-combinatios\n      return false;\n    } // weak check for certain ranges. this is properly implemented in a subclass\n    // with access to the KeyboardMapperFactory.\n\n\n    if (event.keyCode >= 31\n    /* KEY_A */\n    && event.keyCode <= 56\n    /* KEY_Z */\n    || event.keyCode >= 21\n    /* KEY_0 */\n    && event.keyCode <= 30\n    /* KEY_9 */\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return AbstractKeybindingService;\n}(Disposable);\n\nexport { AbstractKeybindingService };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/platform/keybinding/common/abstractKeybindingService.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","nls","IntervalTimer","Emitter","Event","Disposable","AbstractKeybindingService","_super","_contextKeyService","_commandService","_telemetryService","_notificationService","_this","call","_onDidUpdateKeybindings","_register","_currentChord","_currentChordChecker","_currentChordStatusMessage","defineProperty","get","event","None","enumerable","configurable","dispose","getKeybindings","_getResolver","lookupKeybinding","commandId","result","lookupPrimaryKeybinding","undefined","resolvedKeybinding","softDispatch","e","target","keybinding","resolveKeyboardEvent","isChord","console","warn","firstPart","getDispatchParts","contextValue","getContext","currentChord","keypress","resolve","_enterChordMode","keypressLabel","label","status","localize","chordEnterTime","Date","now","cancelAndSet","_documentHasFocus","_leaveChordMode","cancel","_dispatch","_doDispatch","shouldPreventDefault","getLabel","resolveResult","enterChord","hideAfter","bubble","commandArgs","executeCommand","then","err","publicLog2","id","from","mightProducePrintableCharacter","ctrlKey","metaKey","keyCode"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as nls from '../../../nls.js';\r\nimport { IntervalTimer } from '../../../base/common/async.js';\r\nimport { Emitter, Event } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nvar AbstractKeybindingService = /** @class */ (function (_super) {\r\n    __extends(AbstractKeybindingService, _super);\r\n    function AbstractKeybindingService(_contextKeyService, _commandService, _telemetryService, _notificationService) {\r\n        var _this = _super.call(this) || this;\r\n        _this._contextKeyService = _contextKeyService;\r\n        _this._commandService = _commandService;\r\n        _this._telemetryService = _telemetryService;\r\n        _this._notificationService = _notificationService;\r\n        _this._onDidUpdateKeybindings = _this._register(new Emitter());\r\n        _this._currentChord = null;\r\n        _this._currentChordChecker = new IntervalTimer();\r\n        _this._currentChordStatusMessage = null;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(AbstractKeybindingService.prototype, \"onDidUpdateKeybindings\", {\r\n        get: function () {\r\n            return this._onDidUpdateKeybindings ? this._onDidUpdateKeybindings.event : Event.None; // Sinon stubbing walks properties on prototype\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    AbstractKeybindingService.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    AbstractKeybindingService.prototype.getKeybindings = function () {\r\n        return this._getResolver().getKeybindings();\r\n    };\r\n    AbstractKeybindingService.prototype.lookupKeybinding = function (commandId) {\r\n        var result = this._getResolver().lookupPrimaryKeybinding(commandId);\r\n        if (!result) {\r\n            return undefined;\r\n        }\r\n        return result.resolvedKeybinding;\r\n    };\r\n    AbstractKeybindingService.prototype.softDispatch = function (e, target) {\r\n        var keybinding = this.resolveKeyboardEvent(e);\r\n        if (keybinding.isChord()) {\r\n            console.warn('Unexpected keyboard event mapped to a chord');\r\n            return null;\r\n        }\r\n        var firstPart = keybinding.getDispatchParts()[0];\r\n        if (firstPart === null) {\r\n            // cannot be dispatched, probably only modifier keys\r\n            return null;\r\n        }\r\n        var contextValue = this._contextKeyService.getContext(target);\r\n        var currentChord = this._currentChord ? this._currentChord.keypress : null;\r\n        return this._getResolver().resolve(contextValue, currentChord, firstPart);\r\n    };\r\n    AbstractKeybindingService.prototype._enterChordMode = function (firstPart, keypressLabel) {\r\n        var _this = this;\r\n        this._currentChord = {\r\n            keypress: firstPart,\r\n            label: keypressLabel\r\n        };\r\n        this._currentChordStatusMessage = this._notificationService.status(nls.localize('first.chord', \"({0}) was pressed. Waiting for second key of chord...\", keypressLabel));\r\n        var chordEnterTime = Date.now();\r\n        this._currentChordChecker.cancelAndSet(function () {\r\n            if (!_this._documentHasFocus()) {\r\n                // Focus has been lost => leave chord mode\r\n                _this._leaveChordMode();\r\n                return;\r\n            }\r\n            if (Date.now() - chordEnterTime > 5000) {\r\n                // 5 seconds elapsed => leave chord mode\r\n                _this._leaveChordMode();\r\n            }\r\n        }, 500);\r\n    };\r\n    AbstractKeybindingService.prototype._leaveChordMode = function () {\r\n        if (this._currentChordStatusMessage) {\r\n            this._currentChordStatusMessage.dispose();\r\n            this._currentChordStatusMessage = null;\r\n        }\r\n        this._currentChordChecker.cancel();\r\n        this._currentChord = null;\r\n    };\r\n    AbstractKeybindingService.prototype._dispatch = function (e, target) {\r\n        return this._doDispatch(this.resolveKeyboardEvent(e), target);\r\n    };\r\n    AbstractKeybindingService.prototype._doDispatch = function (keybinding, target) {\r\n        var _this = this;\r\n        var shouldPreventDefault = false;\r\n        if (keybinding.isChord()) {\r\n            console.warn('Unexpected keyboard event mapped to a chord');\r\n            return false;\r\n        }\r\n        var firstPart = keybinding.getDispatchParts()[0];\r\n        if (firstPart === null) {\r\n            // cannot be dispatched, probably only modifier keys\r\n            return shouldPreventDefault;\r\n        }\r\n        var contextValue = this._contextKeyService.getContext(target);\r\n        var currentChord = this._currentChord ? this._currentChord.keypress : null;\r\n        var keypressLabel = keybinding.getLabel();\r\n        var resolveResult = this._getResolver().resolve(contextValue, currentChord, firstPart);\r\n        if (resolveResult && resolveResult.enterChord) {\r\n            shouldPreventDefault = true;\r\n            this._enterChordMode(firstPart, keypressLabel);\r\n            return shouldPreventDefault;\r\n        }\r\n        if (this._currentChord) {\r\n            if (!resolveResult || !resolveResult.commandId) {\r\n                this._notificationService.status(nls.localize('missing.chord', \"The key combination ({0}, {1}) is not a command.\", this._currentChord.label, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });\r\n                shouldPreventDefault = true;\r\n            }\r\n        }\r\n        this._leaveChordMode();\r\n        if (resolveResult && resolveResult.commandId) {\r\n            if (!resolveResult.bubble) {\r\n                shouldPreventDefault = true;\r\n            }\r\n            if (typeof resolveResult.commandArgs === 'undefined') {\r\n                this._commandService.executeCommand(resolveResult.commandId).then(undefined, function (err) { return _this._notificationService.warn(err); });\r\n            }\r\n            else {\r\n                this._commandService.executeCommand(resolveResult.commandId, resolveResult.commandArgs).then(undefined, function (err) { return _this._notificationService.warn(err); });\r\n            }\r\n            this._telemetryService.publicLog2('workbenchActionExecuted', { id: resolveResult.commandId, from: 'keybinding' });\r\n        }\r\n        return shouldPreventDefault;\r\n    };\r\n    AbstractKeybindingService.prototype.mightProducePrintableCharacter = function (event) {\r\n        if (event.ctrlKey || event.metaKey) {\r\n            // ignore ctrl/cmd-combination but not shift/alt-combinatios\r\n            return false;\r\n        }\r\n        // weak check for certain ranges. this is properly implemented in a subclass\r\n        // with access to the KeyboardMapperFactory.\r\n        if ((event.keyCode >= 31 /* KEY_A */ && event.keyCode <= 56 /* KEY_Z */)\r\n            || (event.keyCode >= 21 /* KEY_0 */ && event.keyCode <= 30 /* KEY_9 */)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    return AbstractKeybindingService;\r\n}(Disposable));\r\nexport { AbstractKeybindingService };\r\n"]},"metadata":{},"sourceType":"module"}