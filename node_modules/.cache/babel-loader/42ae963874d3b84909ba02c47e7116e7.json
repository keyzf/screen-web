{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { ModelDecorationOptions } from '../model/textModel.js';\nimport * as viewEvents from '../view/viewEvents.js';\nimport { PrefixSumIndexOfResult } from './prefixSumComputer.js';\nimport { ViewLineData } from './viewModel.js';\n\nvar OutputPosition =\n/** @class */\nfunction () {\n  function OutputPosition(outputLineIndex, outputOffset) {\n    this.outputLineIndex = outputLineIndex;\n    this.outputOffset = outputOffset;\n  }\n\n  return OutputPosition;\n}();\n\nexport { OutputPosition };\n\nvar LineBreakData =\n/** @class */\nfunction () {\n  function LineBreakData(breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength) {\n    this.breakOffsets = breakOffsets;\n    this.breakOffsetsVisibleColumn = breakOffsetsVisibleColumn;\n    this.wrappedTextIndentLength = wrappedTextIndentLength;\n  }\n\n  LineBreakData.getInputOffsetOfOutputPosition = function (breakOffsets, outputLineIndex, outputOffset) {\n    if (outputLineIndex === 0) {\n      return outputOffset;\n    } else {\n      return breakOffsets[outputLineIndex - 1] + outputOffset;\n    }\n  };\n\n  LineBreakData.getOutputPositionOfInputOffset = function (breakOffsets, inputOffset) {\n    var low = 0;\n    var high = breakOffsets.length - 1;\n    var mid = 0;\n    var midStart = 0;\n\n    while (low <= high) {\n      mid = low + (high - low) / 2 | 0;\n      var midStop = breakOffsets[mid];\n      midStart = mid > 0 ? breakOffsets[mid - 1] : 0;\n\n      if (inputOffset < midStart) {\n        high = mid - 1;\n      } else if (inputOffset >= midStop) {\n        low = mid + 1;\n      } else {\n        break;\n      }\n    }\n\n    return new OutputPosition(mid, inputOffset - midStart);\n  };\n\n  return LineBreakData;\n}();\n\nexport { LineBreakData };\n\nvar CoordinatesConverter =\n/** @class */\nfunction () {\n  function CoordinatesConverter(lines) {\n    this._lines = lines;\n  } // View -> Model conversion and related methods\n\n\n  CoordinatesConverter.prototype.convertViewPositionToModelPosition = function (viewPosition) {\n    return this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\n  };\n\n  CoordinatesConverter.prototype.convertViewRangeToModelRange = function (viewRange) {\n    return this._lines.convertViewRangeToModelRange(viewRange);\n  };\n\n  CoordinatesConverter.prototype.validateViewPosition = function (viewPosition, expectedModelPosition) {\n    return this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\n  };\n\n  CoordinatesConverter.prototype.validateViewRange = function (viewRange, expectedModelRange) {\n    return this._lines.validateViewRange(viewRange, expectedModelRange);\n  }; // Model -> View conversion and related methods\n\n\n  CoordinatesConverter.prototype.convertModelPositionToViewPosition = function (modelPosition) {\n    return this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column);\n  };\n\n  CoordinatesConverter.prototype.convertModelRangeToViewRange = function (modelRange) {\n    return this._lines.convertModelRangeToViewRange(modelRange);\n  };\n\n  CoordinatesConverter.prototype.modelPositionIsVisible = function (modelPosition) {\n    return this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\n  };\n\n  return CoordinatesConverter;\n}();\n\nexport { CoordinatesConverter };\n\nvar LineNumberMapper =\n/** @class */\nfunction () {\n  function LineNumberMapper(viewLineCounts) {\n    this._counts = viewLineCounts;\n    this._isValid = false;\n    this._validEndIndex = -1;\n    this._modelToView = [];\n    this._viewToModel = [];\n  }\n\n  LineNumberMapper.prototype._invalidate = function (index) {\n    this._isValid = false;\n    this._validEndIndex = Math.min(this._validEndIndex, index - 1);\n  };\n\n  LineNumberMapper.prototype._ensureValid = function () {\n    if (this._isValid) {\n      return;\n    }\n\n    for (var i = this._validEndIndex + 1, len = this._counts.length; i < len; i++) {\n      var viewLineCount = this._counts[i];\n      var viewLinesAbove = i > 0 ? this._modelToView[i - 1] : 0;\n      this._modelToView[i] = viewLinesAbove + viewLineCount;\n\n      for (var j = 0; j < viewLineCount; j++) {\n        this._viewToModel[viewLinesAbove + j] = i;\n      }\n    } // trim things\n\n\n    this._modelToView.length = this._counts.length;\n    this._viewToModel.length = this._modelToView[this._modelToView.length - 1]; // mark as valid\n\n    this._isValid = true;\n    this._validEndIndex = this._counts.length - 1;\n  };\n\n  LineNumberMapper.prototype.changeValue = function (index, value) {\n    if (this._counts[index] === value) {\n      // no change\n      return;\n    }\n\n    this._counts[index] = value;\n\n    this._invalidate(index);\n  };\n\n  LineNumberMapper.prototype.removeValues = function (start, deleteCount) {\n    this._counts.splice(start, deleteCount);\n\n    this._invalidate(start);\n  };\n\n  LineNumberMapper.prototype.insertValues = function (insertIndex, insertArr) {\n    this._counts = arrays.arrayInsert(this._counts, insertIndex, insertArr);\n\n    this._invalidate(insertIndex);\n  };\n\n  LineNumberMapper.prototype.getTotalValue = function () {\n    this._ensureValid();\n\n    return this._viewToModel.length;\n  };\n\n  LineNumberMapper.prototype.getAccumulatedValue = function (index) {\n    this._ensureValid();\n\n    return this._modelToView[index];\n  };\n\n  LineNumberMapper.prototype.getIndexOf = function (accumulatedValue) {\n    this._ensureValid();\n\n    var modelLineIndex = this._viewToModel[accumulatedValue];\n    var viewLinesAbove = modelLineIndex > 0 ? this._modelToView[modelLineIndex - 1] : 0;\n    return new PrefixSumIndexOfResult(modelLineIndex, accumulatedValue - viewLinesAbove);\n  };\n\n  return LineNumberMapper;\n}();\n\nvar SplitLinesCollection =\n/** @class */\nfunction () {\n  function SplitLinesCollection(model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, tabSize, wrappingStrategy, wrappingColumn, wrappingIndent) {\n    this.model = model;\n    this._validModelVersionId = -1;\n    this._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\n    this._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\n    this.fontInfo = fontInfo;\n    this.tabSize = tabSize;\n    this.wrappingStrategy = wrappingStrategy;\n    this.wrappingColumn = wrappingColumn;\n    this.wrappingIndent = wrappingIndent;\n\n    this._constructLines(\n    /*resetHiddenAreas*/\n    true, null);\n  }\n\n  SplitLinesCollection.prototype.dispose = function () {\n    this.hiddenAreasIds = this.model.deltaDecorations(this.hiddenAreasIds, []);\n  };\n\n  SplitLinesCollection.prototype.createCoordinatesConverter = function () {\n    return new CoordinatesConverter(this);\n  };\n\n  SplitLinesCollection.prototype._constructLines = function (resetHiddenAreas, previousLineBreaks) {\n    var _this = this;\n\n    this.lines = [];\n\n    if (resetHiddenAreas) {\n      this.hiddenAreasIds = [];\n    }\n\n    var linesContent = this.model.getLinesContent();\n    var lineCount = linesContent.length;\n    var lineBreaksComputer = this.createLineBreaksComputer();\n\n    for (var i = 0; i < lineCount; i++) {\n      lineBreaksComputer.addRequest(linesContent[i], previousLineBreaks ? previousLineBreaks[i] : null);\n    }\n\n    var linesBreaks = lineBreaksComputer.finalize();\n    var values = [];\n    var hiddenAreas = this.hiddenAreasIds.map(function (areaId) {\n      return _this.model.getDecorationRange(areaId);\n    }).sort(Range.compareRangesUsingStarts);\n    var hiddenAreaStart = 1,\n        hiddenAreaEnd = 0;\n    var hiddenAreaIdx = -1;\n    var nextLineNumberToUpdateHiddenArea = hiddenAreaIdx + 1 < hiddenAreas.length ? hiddenAreaEnd + 1 : lineCount + 2;\n\n    for (var i = 0; i < lineCount; i++) {\n      var lineNumber = i + 1;\n\n      if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n        hiddenAreaIdx++;\n        hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n        hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n        nextLineNumberToUpdateHiddenArea = hiddenAreaIdx + 1 < hiddenAreas.length ? hiddenAreaEnd + 1 : lineCount + 2;\n      }\n\n      var isInHiddenArea = lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd;\n      var line = createSplitLine(linesBreaks[i], !isInHiddenArea);\n      values[i] = line.getViewLineCount();\n      this.lines[i] = line;\n    }\n\n    this._validModelVersionId = this.model.getVersionId();\n    this.prefixSumComputer = new LineNumberMapper(values);\n  };\n\n  SplitLinesCollection.prototype.getHiddenAreas = function () {\n    var _this = this;\n\n    return this.hiddenAreasIds.map(function (decId) {\n      return _this.model.getDecorationRange(decId);\n    });\n  };\n\n  SplitLinesCollection.prototype._reduceRanges = function (_ranges) {\n    var _this = this;\n\n    if (_ranges.length === 0) {\n      return [];\n    }\n\n    var ranges = _ranges.map(function (r) {\n      return _this.model.validateRange(r);\n    }).sort(Range.compareRangesUsingStarts);\n\n    var result = [];\n    var currentRangeStart = ranges[0].startLineNumber;\n    var currentRangeEnd = ranges[0].endLineNumber;\n\n    for (var i = 1, len = ranges.length; i < len; i++) {\n      var range = ranges[i];\n\n      if (range.startLineNumber > currentRangeEnd + 1) {\n        result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n        currentRangeStart = range.startLineNumber;\n        currentRangeEnd = range.endLineNumber;\n      } else if (range.endLineNumber > currentRangeEnd) {\n        currentRangeEnd = range.endLineNumber;\n      }\n    }\n\n    result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n    return result;\n  };\n\n  SplitLinesCollection.prototype.setHiddenAreas = function (_ranges) {\n    var _this = this;\n\n    var newRanges = this._reduceRanges(_ranges); // BEGIN TODO@Martin: Please stop calling this method on each model change!\n\n\n    var oldRanges = this.hiddenAreasIds.map(function (areaId) {\n      return _this.model.getDecorationRange(areaId);\n    }).sort(Range.compareRangesUsingStarts);\n\n    if (newRanges.length === oldRanges.length) {\n      var hasDifference = false;\n\n      for (var i = 0; i < newRanges.length; i++) {\n        if (!newRanges[i].equalsRange(oldRanges[i])) {\n          hasDifference = true;\n          break;\n        }\n      }\n\n      if (!hasDifference) {\n        return false;\n      }\n    } // END TODO@Martin: Please stop calling this method on each model change!\n\n\n    var newDecorations = [];\n\n    for (var _i = 0, newRanges_1 = newRanges; _i < newRanges_1.length; _i++) {\n      var newRange = newRanges_1[_i];\n      newDecorations.push({\n        range: newRange,\n        options: ModelDecorationOptions.EMPTY\n      });\n    }\n\n    this.hiddenAreasIds = this.model.deltaDecorations(this.hiddenAreasIds, newDecorations);\n    var hiddenAreas = newRanges;\n    var hiddenAreaStart = 1,\n        hiddenAreaEnd = 0;\n    var hiddenAreaIdx = -1;\n    var nextLineNumberToUpdateHiddenArea = hiddenAreaIdx + 1 < hiddenAreas.length ? hiddenAreaEnd + 1 : this.lines.length + 2;\n    var hasVisibleLine = false;\n\n    for (var i = 0; i < this.lines.length; i++) {\n      var lineNumber = i + 1;\n\n      if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n        hiddenAreaIdx++;\n        hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n        hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n        nextLineNumberToUpdateHiddenArea = hiddenAreaIdx + 1 < hiddenAreas.length ? hiddenAreaEnd + 1 : this.lines.length + 2;\n      }\n\n      var lineChanged = false;\n\n      if (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\n        // Line should be hidden\n        if (this.lines[i].isVisible()) {\n          this.lines[i] = this.lines[i].setVisible(false);\n          lineChanged = true;\n        }\n      } else {\n        hasVisibleLine = true; // Line should be visible\n\n        if (!this.lines[i].isVisible()) {\n          this.lines[i] = this.lines[i].setVisible(true);\n          lineChanged = true;\n        }\n      }\n\n      if (lineChanged) {\n        var newOutputLineCount = this.lines[i].getViewLineCount();\n        this.prefixSumComputer.changeValue(i, newOutputLineCount);\n      }\n    }\n\n    if (!hasVisibleLine) {\n      // Cannot have everything be hidden => reveal everything!\n      this.setHiddenAreas([]);\n    }\n\n    return true;\n  };\n\n  SplitLinesCollection.prototype.modelPositionIsVisible = function (modelLineNumber, _modelColumn) {\n    if (modelLineNumber < 1 || modelLineNumber > this.lines.length) {\n      // invalid arguments\n      return false;\n    }\n\n    return this.lines[modelLineNumber - 1].isVisible();\n  };\n\n  SplitLinesCollection.prototype.setTabSize = function (newTabSize) {\n    if (this.tabSize === newTabSize) {\n      return false;\n    }\n\n    this.tabSize = newTabSize;\n\n    this._constructLines(\n    /*resetHiddenAreas*/\n    false, null);\n\n    return true;\n  };\n\n  SplitLinesCollection.prototype.setWrappingSettings = function (fontInfo, wrappingStrategy, wrappingColumn, wrappingIndent) {\n    var equalFontInfo = this.fontInfo.equals(fontInfo);\n    var equalWrappingStrategy = this.wrappingStrategy === wrappingStrategy;\n    var equalWrappingColumn = this.wrappingColumn === wrappingColumn;\n    var equalWrappingIndent = this.wrappingIndent === wrappingIndent;\n\n    if (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent) {\n      return false;\n    }\n\n    var onlyWrappingColumnChanged = equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent;\n    this.fontInfo = fontInfo;\n    this.wrappingStrategy = wrappingStrategy;\n    this.wrappingColumn = wrappingColumn;\n    this.wrappingIndent = wrappingIndent;\n    var previousLineBreaks = null;\n\n    if (onlyWrappingColumnChanged) {\n      previousLineBreaks = [];\n\n      for (var i = 0, len = this.lines.length; i < len; i++) {\n        previousLineBreaks[i] = this.lines[i].getLineBreakData();\n      }\n    }\n\n    this._constructLines(\n    /*resetHiddenAreas*/\n    false, previousLineBreaks);\n\n    return true;\n  };\n\n  SplitLinesCollection.prototype.createLineBreaksComputer = function () {\n    var lineBreaksComputerFactory = this.wrappingStrategy === 'advanced' ? this._domLineBreaksComputerFactory : this._monospaceLineBreaksComputerFactory;\n    return lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent);\n  };\n\n  SplitLinesCollection.prototype.onModelFlushed = function () {\n    this._constructLines(\n    /*resetHiddenAreas*/\n    true, null);\n  };\n\n  SplitLinesCollection.prototype.onModelLinesDeleted = function (versionId, fromLineNumber, toLineNumber) {\n    if (versionId <= this._validModelVersionId) {\n      // Here we check for versionId in case the lines were reconstructed in the meantime.\n      // We don't want to apply stale change events on top of a newer read model state.\n      return null;\n    }\n\n    var outputFromLineNumber = fromLineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(fromLineNumber - 2) + 1;\n    var outputToLineNumber = this.prefixSumComputer.getAccumulatedValue(toLineNumber - 1);\n    this.lines.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n    this.prefixSumComputer.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n    return new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\n  };\n\n  SplitLinesCollection.prototype.onModelLinesInserted = function (versionId, fromLineNumber, _toLineNumber, lineBreaks) {\n    if (versionId <= this._validModelVersionId) {\n      // Here we check for versionId in case the lines were reconstructed in the meantime.\n      // We don't want to apply stale change events on top of a newer read model state.\n      return null;\n    }\n\n    var hiddenAreas = this.getHiddenAreas();\n    var isInHiddenArea = false;\n    var testPosition = new Position(fromLineNumber, 1);\n\n    for (var _i = 0, hiddenAreas_1 = hiddenAreas; _i < hiddenAreas_1.length; _i++) {\n      var hiddenArea = hiddenAreas_1[_i];\n\n      if (hiddenArea.containsPosition(testPosition)) {\n        isInHiddenArea = true;\n        break;\n      }\n    }\n\n    var outputFromLineNumber = fromLineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(fromLineNumber - 2) + 1;\n    var totalOutputLineCount = 0;\n    var insertLines = [];\n    var insertPrefixSumValues = [];\n\n    for (var i = 0, len = lineBreaks.length; i < len; i++) {\n      var line = createSplitLine(lineBreaks[i], !isInHiddenArea);\n      insertLines.push(line);\n      var outputLineCount = line.getViewLineCount();\n      totalOutputLineCount += outputLineCount;\n      insertPrefixSumValues[i] = outputLineCount;\n    } // TODO@Alex: use arrays.arrayInsert\n\n\n    this.lines = this.lines.slice(0, fromLineNumber - 1).concat(insertLines).concat(this.lines.slice(fromLineNumber - 1));\n    this.prefixSumComputer.insertValues(fromLineNumber - 1, insertPrefixSumValues);\n    return new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\n  };\n\n  SplitLinesCollection.prototype.onModelLineChanged = function (versionId, lineNumber, lineBreakData) {\n    if (versionId <= this._validModelVersionId) {\n      // Here we check for versionId in case the lines were reconstructed in the meantime.\n      // We don't want to apply stale change events on top of a newer read model state.\n      return [false, null, null, null];\n    }\n\n    var lineIndex = lineNumber - 1;\n    var oldOutputLineCount = this.lines[lineIndex].getViewLineCount();\n    var isVisible = this.lines[lineIndex].isVisible();\n    var line = createSplitLine(lineBreakData, isVisible);\n    this.lines[lineIndex] = line;\n    var newOutputLineCount = this.lines[lineIndex].getViewLineCount();\n    var lineMappingChanged = false;\n    var changeFrom = 0;\n    var changeTo = -1;\n    var insertFrom = 0;\n    var insertTo = -1;\n    var deleteFrom = 0;\n    var deleteTo = -1;\n\n    if (oldOutputLineCount > newOutputLineCount) {\n      changeFrom = lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1;\n      changeTo = changeFrom + newOutputLineCount - 1;\n      deleteFrom = changeTo + 1;\n      deleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\n      lineMappingChanged = true;\n    } else if (oldOutputLineCount < newOutputLineCount) {\n      changeFrom = lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1;\n      changeTo = changeFrom + oldOutputLineCount - 1;\n      insertFrom = changeTo + 1;\n      insertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\n      lineMappingChanged = true;\n    } else {\n      changeFrom = lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1;\n      changeTo = changeFrom + newOutputLineCount - 1;\n    }\n\n    this.prefixSumComputer.changeValue(lineIndex, newOutputLineCount);\n    var viewLinesChangedEvent = changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo) : null;\n    var viewLinesInsertedEvent = insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null;\n    var viewLinesDeletedEvent = deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null;\n    return [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\n  };\n\n  SplitLinesCollection.prototype.acceptVersionId = function (versionId) {\n    this._validModelVersionId = versionId;\n\n    if (this.lines.length === 1 && !this.lines[0].isVisible()) {\n      // At least one line must be visible => reset hidden areas\n      this.setHiddenAreas([]);\n    }\n  };\n\n  SplitLinesCollection.prototype.getViewLineCount = function () {\n    return this.prefixSumComputer.getTotalValue();\n  };\n\n  SplitLinesCollection.prototype._toValidViewLineNumber = function (viewLineNumber) {\n    if (viewLineNumber < 1) {\n      return 1;\n    }\n\n    var viewLineCount = this.getViewLineCount();\n\n    if (viewLineNumber > viewLineCount) {\n      return viewLineCount;\n    }\n\n    return viewLineNumber | 0;\n  };\n\n  SplitLinesCollection.prototype.getActiveIndentGuide = function (viewLineNumber, minLineNumber, maxLineNumber) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    minLineNumber = this._toValidViewLineNumber(minLineNumber);\n    maxLineNumber = this._toValidViewLineNumber(maxLineNumber);\n    var modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\n    var modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\n    var modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\n    var result = this.model.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\n    var viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\n    var viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\n    return {\n      startLineNumber: viewStartPosition.lineNumber,\n      endLineNumber: viewEndPosition.lineNumber,\n      indent: result.indent\n    };\n  };\n\n  SplitLinesCollection.prototype.getViewLinesIndentGuides = function (viewStartLineNumber, viewEndLineNumber) {\n    viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n    viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n    var modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\n    var modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\n    var result = [];\n    var resultRepeatCount = [];\n    var resultRepeatOption = [];\n    var modelStartLineIndex = modelStart.lineNumber - 1;\n    var modelEndLineIndex = modelEnd.lineNumber - 1;\n    var reqStart = null;\n\n    for (var modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n      var line = this.lines[modelLineIndex];\n\n      if (line.isVisible()) {\n        var viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n        var viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\n        var count = viewLineEndIndex - viewLineStartIndex + 1;\n        var option = 0\n        /* BlockNone */\n        ;\n\n        if (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\n          // wrapped lines should block indent guides\n          option = viewLineStartIndex === 0 ? 1\n          /* BlockSubsequent */\n          : 2\n          /* BlockAll */\n          ;\n        }\n\n        resultRepeatCount.push(count);\n        resultRepeatOption.push(option); // merge into previous request\n\n        if (reqStart === null) {\n          reqStart = new Position(modelLineIndex + 1, 0);\n        }\n      } else {\n        // hit invisible line => flush request\n        if (reqStart !== null) {\n          result = result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\n          reqStart = null;\n        }\n      }\n    }\n\n    if (reqStart !== null) {\n      result = result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\n      reqStart = null;\n    }\n\n    var viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n    var viewIndents = new Array(viewLineCount);\n    var currIndex = 0;\n\n    for (var i = 0, len = result.length; i < len; i++) {\n      var value = result[i];\n      var count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\n      var option = resultRepeatOption[i];\n      var blockAtIndex = void 0;\n\n      if (option === 2\n      /* BlockAll */\n      ) {\n          blockAtIndex = 0;\n        } else if (option === 1\n      /* BlockSubsequent */\n      ) {\n          blockAtIndex = 1;\n        } else {\n        blockAtIndex = count;\n      }\n\n      for (var j = 0; j < count; j++) {\n        if (j === blockAtIndex) {\n          value = 0;\n        }\n\n        viewIndents[currIndex++] = value;\n      }\n    }\n\n    return viewIndents;\n  };\n\n  SplitLinesCollection.prototype.getViewLineContent = function (viewLineNumber) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    return this.lines[lineIndex].getViewLineContent(this.model, lineIndex + 1, remainder);\n  };\n\n  SplitLinesCollection.prototype.getViewLineLength = function (viewLineNumber) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    return this.lines[lineIndex].getViewLineLength(this.model, lineIndex + 1, remainder);\n  };\n\n  SplitLinesCollection.prototype.getViewLineMinColumn = function (viewLineNumber) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    return this.lines[lineIndex].getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n  };\n\n  SplitLinesCollection.prototype.getViewLineMaxColumn = function (viewLineNumber) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    return this.lines[lineIndex].getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n  };\n\n  SplitLinesCollection.prototype.getViewLineData = function (viewLineNumber) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    return this.lines[lineIndex].getViewLineData(this.model, lineIndex + 1, remainder);\n  };\n\n  SplitLinesCollection.prototype.getViewLinesData = function (viewStartLineNumber, viewEndLineNumber, needed) {\n    viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n    viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n    var start = this.prefixSumComputer.getIndexOf(viewStartLineNumber - 1);\n    var viewLineNumber = viewStartLineNumber;\n    var startModelLineIndex = start.index;\n    var startRemainder = start.remainder;\n    var result = [];\n\n    for (var modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\n      var line = this.lines[modelLineIndex];\n\n      if (!line.isVisible()) {\n        continue;\n      }\n\n      var fromViewLineIndex = modelLineIndex === startModelLineIndex ? startRemainder : 0;\n      var remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\n      var lastLine = false;\n\n      if (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\n        lastLine = true;\n        remainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\n      }\n\n      var toViewLineIndex = fromViewLineIndex + remainingViewLineCount;\n      line.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, toViewLineIndex, viewLineNumber - viewStartLineNumber, needed, result);\n      viewLineNumber += remainingViewLineCount;\n\n      if (lastLine) {\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  SplitLinesCollection.prototype.validateViewPosition = function (viewLineNumber, viewColumn, expectedModelPosition) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    var line = this.lines[lineIndex];\n    var minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n    var maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n\n    if (viewColumn < minColumn) {\n      viewColumn = minColumn;\n    }\n\n    if (viewColumn > maxColumn) {\n      viewColumn = maxColumn;\n    }\n\n    var computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\n    var computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\n\n    if (computedModelPosition.equals(expectedModelPosition)) {\n      return new Position(viewLineNumber, viewColumn);\n    }\n\n    return this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\n  };\n\n  SplitLinesCollection.prototype.validateViewRange = function (viewRange, expectedModelRange) {\n    var validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\n    var validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\n    return new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\n  };\n\n  SplitLinesCollection.prototype.convertViewPositionToModelPosition = function (viewLineNumber, viewColumn) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    var inputColumn = this.lines[lineIndex].getModelColumnOfViewPosition(remainder, viewColumn); // console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\n\n    return this.model.validatePosition(new Position(lineIndex + 1, inputColumn));\n  };\n\n  SplitLinesCollection.prototype.convertViewRangeToModelRange = function (viewRange) {\n    var start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\n    var end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\n    return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n  };\n\n  SplitLinesCollection.prototype.convertModelPositionToViewPosition = function (_modelLineNumber, _modelColumn) {\n    var validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\n    var inputLineNumber = validPosition.lineNumber;\n    var inputColumn = validPosition.column;\n    var lineIndex = inputLineNumber - 1,\n        lineIndexChanged = false;\n\n    while (lineIndex > 0 && !this.lines[lineIndex].isVisible()) {\n      lineIndex--;\n      lineIndexChanged = true;\n    }\n\n    if (lineIndex === 0 && !this.lines[lineIndex].isVisible()) {\n      // Could not reach a real line\n      // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\n      return new Position(1, 1);\n    }\n\n    var deltaLineNumber = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\n    var r;\n\n    if (lineIndexChanged) {\n      r = this.lines[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n    } else {\n      r = this.lines[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn);\n    } // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\n\n\n    return r;\n  };\n\n  SplitLinesCollection.prototype.convertModelRangeToViewRange = function (modelRange) {\n    var start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn);\n    var end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn);\n\n    if (modelRange.startLineNumber === modelRange.endLineNumber && start.lineNumber !== end.lineNumber) {\n      // This is a single line range that ends up taking more lines due to wrapping\n      if (end.column === this.getViewLineMinColumn(end.lineNumber)) {\n        // the end column lands on the first column of the next line\n        return new Range(start.lineNumber, start.column, end.lineNumber - 1, this.getViewLineMaxColumn(end.lineNumber - 1));\n      }\n    }\n\n    return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n  };\n\n  SplitLinesCollection.prototype._getViewLineNumberForModelPosition = function (inputLineNumber, inputColumn) {\n    var lineIndex = inputLineNumber - 1;\n\n    if (this.lines[lineIndex].isVisible()) {\n      // this model line is visible\n      var deltaLineNumber_1 = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\n      return this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber_1, inputColumn);\n    } // this model line is not visible\n\n\n    while (lineIndex > 0 && !this.lines[lineIndex].isVisible()) {\n      lineIndex--;\n    }\n\n    if (lineIndex === 0 && !this.lines[lineIndex].isVisible()) {\n      // Could not reach a real line\n      return 1;\n    }\n\n    var deltaLineNumber = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\n    return this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n  };\n\n  SplitLinesCollection.prototype.getAllOverviewRulerDecorations = function (ownerId, filterOutValidation, theme) {\n    var decorations = this.model.getOverviewRulerDecorations(ownerId, filterOutValidation);\n    var result = new OverviewRulerDecorations();\n\n    for (var _i = 0, decorations_1 = decorations; _i < decorations_1.length; _i++) {\n      var decoration = decorations_1[_i];\n      var opts = decoration.options.overviewRuler;\n      var lane = opts ? opts.position : 0;\n\n      if (lane === 0) {\n        continue;\n      }\n\n      var color = opts.getColor(theme);\n\n      var viewStartLineNumber = this._getViewLineNumberForModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n\n      var viewEndLineNumber = this._getViewLineNumberForModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n\n      result.accept(color, viewStartLineNumber, viewEndLineNumber, lane);\n    }\n\n    return result.result;\n  };\n\n  SplitLinesCollection.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\n    var modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\n    var modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\n\n    if (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\n      // most likely there are no hidden lines => fast path\n      // fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\n      return this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation);\n    }\n\n    var result = [];\n    var modelStartLineIndex = modelStart.lineNumber - 1;\n    var modelEndLineIndex = modelEnd.lineNumber - 1;\n    var reqStart = null;\n\n    for (var modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n      var line = this.lines[modelLineIndex];\n\n      if (line.isVisible()) {\n        // merge into previous request\n        if (reqStart === null) {\n          reqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n        }\n      } else {\n        // hit invisible line => flush request\n        if (reqStart !== null) {\n          var maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\n          result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation));\n          reqStart = null;\n        }\n      }\n    }\n\n    if (reqStart !== null) {\n      result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation));\n      reqStart = null;\n    }\n\n    result.sort(function (a, b) {\n      var res = Range.compareRangesUsingStarts(a.range, b.range);\n\n      if (res === 0) {\n        if (a.id < b.id) {\n          return -1;\n        }\n\n        if (a.id > b.id) {\n          return 1;\n        }\n\n        return 0;\n      }\n\n      return res;\n    }); // Eliminate duplicate decorations that might have intersected our visible ranges multiple times\n\n    var finalResult = [],\n        finalResultLen = 0;\n    var prevDecId = null;\n\n    for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\n      var dec = result_1[_i];\n      var decId = dec.id;\n\n      if (prevDecId === decId) {\n        // skip\n        continue;\n      }\n\n      prevDecId = decId;\n      finalResult[finalResultLen++] = dec;\n    }\n\n    return finalResult;\n  };\n\n  return SplitLinesCollection;\n}();\n\nexport { SplitLinesCollection };\n\nvar VisibleIdentitySplitLine =\n/** @class */\nfunction () {\n  function VisibleIdentitySplitLine() {}\n\n  VisibleIdentitySplitLine.prototype.isVisible = function () {\n    return true;\n  };\n\n  VisibleIdentitySplitLine.prototype.setVisible = function (isVisible) {\n    if (isVisible) {\n      return this;\n    }\n\n    return InvisibleIdentitySplitLine.INSTANCE;\n  };\n\n  VisibleIdentitySplitLine.prototype.getLineBreakData = function () {\n    return null;\n  };\n\n  VisibleIdentitySplitLine.prototype.getViewLineCount = function () {\n    return 1;\n  };\n\n  VisibleIdentitySplitLine.prototype.getViewLineContent = function (model, modelLineNumber, _outputLineIndex) {\n    return model.getLineContent(modelLineNumber);\n  };\n\n  VisibleIdentitySplitLine.prototype.getViewLineLength = function (model, modelLineNumber, _outputLineIndex) {\n    return model.getLineLength(modelLineNumber);\n  };\n\n  VisibleIdentitySplitLine.prototype.getViewLineMinColumn = function (model, modelLineNumber, _outputLineIndex) {\n    return model.getLineMinColumn(modelLineNumber);\n  };\n\n  VisibleIdentitySplitLine.prototype.getViewLineMaxColumn = function (model, modelLineNumber, _outputLineIndex) {\n    return model.getLineMaxColumn(modelLineNumber);\n  };\n\n  VisibleIdentitySplitLine.prototype.getViewLineData = function (model, modelLineNumber, _outputLineIndex) {\n    var lineTokens = model.getLineTokens(modelLineNumber);\n    var lineContent = lineTokens.getLineContent();\n    return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate());\n  };\n\n  VisibleIdentitySplitLine.prototype.getViewLinesData = function (model, modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, globalStartIndex, needed, result) {\n    if (!needed[globalStartIndex]) {\n      result[globalStartIndex] = null;\n      return;\n    }\n\n    result[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\n  };\n\n  VisibleIdentitySplitLine.prototype.getModelColumnOfViewPosition = function (_outputLineIndex, outputColumn) {\n    return outputColumn;\n  };\n\n  VisibleIdentitySplitLine.prototype.getViewPositionOfModelPosition = function (deltaLineNumber, inputColumn) {\n    return new Position(deltaLineNumber, inputColumn);\n  };\n\n  VisibleIdentitySplitLine.prototype.getViewLineNumberOfModelPosition = function (deltaLineNumber, _inputColumn) {\n    return deltaLineNumber;\n  };\n\n  VisibleIdentitySplitLine.INSTANCE = new VisibleIdentitySplitLine();\n  return VisibleIdentitySplitLine;\n}();\n\nvar InvisibleIdentitySplitLine =\n/** @class */\nfunction () {\n  function InvisibleIdentitySplitLine() {}\n\n  InvisibleIdentitySplitLine.prototype.isVisible = function () {\n    return false;\n  };\n\n  InvisibleIdentitySplitLine.prototype.setVisible = function (isVisible) {\n    if (!isVisible) {\n      return this;\n    }\n\n    return VisibleIdentitySplitLine.INSTANCE;\n  };\n\n  InvisibleIdentitySplitLine.prototype.getLineBreakData = function () {\n    return null;\n  };\n\n  InvisibleIdentitySplitLine.prototype.getViewLineCount = function () {\n    return 0;\n  };\n\n  InvisibleIdentitySplitLine.prototype.getViewLineContent = function (_model, _modelLineNumber, _outputLineIndex) {\n    throw new Error('Not supported');\n  };\n\n  InvisibleIdentitySplitLine.prototype.getViewLineLength = function (_model, _modelLineNumber, _outputLineIndex) {\n    throw new Error('Not supported');\n  };\n\n  InvisibleIdentitySplitLine.prototype.getViewLineMinColumn = function (_model, _modelLineNumber, _outputLineIndex) {\n    throw new Error('Not supported');\n  };\n\n  InvisibleIdentitySplitLine.prototype.getViewLineMaxColumn = function (_model, _modelLineNumber, _outputLineIndex) {\n    throw new Error('Not supported');\n  };\n\n  InvisibleIdentitySplitLine.prototype.getViewLineData = function (_model, _modelLineNumber, _outputLineIndex) {\n    throw new Error('Not supported');\n  };\n\n  InvisibleIdentitySplitLine.prototype.getViewLinesData = function (_model, _modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, _globalStartIndex, _needed, _result) {\n    throw new Error('Not supported');\n  };\n\n  InvisibleIdentitySplitLine.prototype.getModelColumnOfViewPosition = function (_outputLineIndex, _outputColumn) {\n    throw new Error('Not supported');\n  };\n\n  InvisibleIdentitySplitLine.prototype.getViewPositionOfModelPosition = function (_deltaLineNumber, _inputColumn) {\n    throw new Error('Not supported');\n  };\n\n  InvisibleIdentitySplitLine.prototype.getViewLineNumberOfModelPosition = function (_deltaLineNumber, _inputColumn) {\n    throw new Error('Not supported');\n  };\n\n  InvisibleIdentitySplitLine.INSTANCE = new InvisibleIdentitySplitLine();\n  return InvisibleIdentitySplitLine;\n}();\n\nvar SplitLine =\n/** @class */\nfunction () {\n  function SplitLine(lineBreakData, isVisible) {\n    this._lineBreakData = lineBreakData;\n    this._isVisible = isVisible;\n  }\n\n  SplitLine.prototype.isVisible = function () {\n    return this._isVisible;\n  };\n\n  SplitLine.prototype.setVisible = function (isVisible) {\n    this._isVisible = isVisible;\n    return this;\n  };\n\n  SplitLine.prototype.getLineBreakData = function () {\n    return this._lineBreakData;\n  };\n\n  SplitLine.prototype.getViewLineCount = function () {\n    if (!this._isVisible) {\n      return 0;\n    }\n\n    return this._lineBreakData.breakOffsets.length;\n  };\n\n  SplitLine.prototype.getInputStartOffsetOfOutputLineIndex = function (outputLineIndex) {\n    return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex, 0);\n  };\n\n  SplitLine.prototype.getInputEndOffsetOfOutputLineIndex = function (model, modelLineNumber, outputLineIndex) {\n    if (outputLineIndex + 1 === this._lineBreakData.breakOffsets.length) {\n      return model.getLineMaxColumn(modelLineNumber) - 1;\n    }\n\n    return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex + 1, 0);\n  };\n\n  SplitLine.prototype.getViewLineContent = function (model, modelLineNumber, outputLineIndex) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n\n    var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\n    var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\n    var r = model.getValueInRange({\n      startLineNumber: modelLineNumber,\n      startColumn: startOffset + 1,\n      endLineNumber: modelLineNumber,\n      endColumn: endOffset + 1\n    });\n\n    if (outputLineIndex > 0) {\n      r = spaces(this._lineBreakData.wrappedTextIndentLength) + r;\n    }\n\n    return r;\n  };\n\n  SplitLine.prototype.getViewLineLength = function (model, modelLineNumber, outputLineIndex) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n\n    var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\n    var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\n    var r = endOffset - startOffset;\n\n    if (outputLineIndex > 0) {\n      r = this._lineBreakData.wrappedTextIndentLength + r;\n    }\n\n    return r;\n  };\n\n  SplitLine.prototype.getViewLineMinColumn = function (_model, _modelLineNumber, outputLineIndex) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n\n    if (outputLineIndex > 0) {\n      return this._lineBreakData.wrappedTextIndentLength + 1;\n    }\n\n    return 1;\n  };\n\n  SplitLine.prototype.getViewLineMaxColumn = function (model, modelLineNumber, outputLineIndex) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n\n    return this.getViewLineContent(model, modelLineNumber, outputLineIndex).length + 1;\n  };\n\n  SplitLine.prototype.getViewLineData = function (model, modelLineNumber, outputLineIndex) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n\n    var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\n    var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\n    var lineContent = model.getValueInRange({\n      startLineNumber: modelLineNumber,\n      startColumn: startOffset + 1,\n      endLineNumber: modelLineNumber,\n      endColumn: endOffset + 1\n    });\n\n    if (outputLineIndex > 0) {\n      lineContent = spaces(this._lineBreakData.wrappedTextIndentLength) + lineContent;\n    }\n\n    var minColumn = outputLineIndex > 0 ? this._lineBreakData.wrappedTextIndentLength + 1 : 1;\n    var maxColumn = lineContent.length + 1;\n    var continuesWithWrappedLine = outputLineIndex + 1 < this.getViewLineCount();\n    var deltaStartIndex = 0;\n\n    if (outputLineIndex > 0) {\n      deltaStartIndex = this._lineBreakData.wrappedTextIndentLength;\n    }\n\n    var lineTokens = model.getLineTokens(modelLineNumber);\n    var startVisibleColumn = outputLineIndex === 0 ? 0 : this._lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1];\n    return new ViewLineData(lineContent, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, lineTokens.sliceAndInflate(startOffset, endOffset, deltaStartIndex));\n  };\n\n  SplitLine.prototype.getViewLinesData = function (model, modelLineNumber, fromOuputLineIndex, toOutputLineIndex, globalStartIndex, needed, result) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n\n    for (var outputLineIndex = fromOuputLineIndex; outputLineIndex < toOutputLineIndex; outputLineIndex++) {\n      var globalIndex = globalStartIndex + outputLineIndex - fromOuputLineIndex;\n\n      if (!needed[globalIndex]) {\n        result[globalIndex] = null;\n        continue;\n      }\n\n      result[globalIndex] = this.getViewLineData(model, modelLineNumber, outputLineIndex);\n    }\n  };\n\n  SplitLine.prototype.getModelColumnOfViewPosition = function (outputLineIndex, outputColumn) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n\n    var adjustedColumn = outputColumn - 1;\n\n    if (outputLineIndex > 0) {\n      if (adjustedColumn < this._lineBreakData.wrappedTextIndentLength) {\n        adjustedColumn = 0;\n      } else {\n        adjustedColumn -= this._lineBreakData.wrappedTextIndentLength;\n      }\n    }\n\n    return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex, adjustedColumn) + 1;\n  };\n\n  SplitLine.prototype.getViewPositionOfModelPosition = function (deltaLineNumber, inputColumn) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n\n    var r = LineBreakData.getOutputPositionOfInputOffset(this._lineBreakData.breakOffsets, inputColumn - 1);\n    var outputLineIndex = r.outputLineIndex;\n    var outputColumn = r.outputOffset + 1;\n\n    if (outputLineIndex > 0) {\n      outputColumn += this._lineBreakData.wrappedTextIndentLength;\n    } //\t\tconsole.log('in -> out ' + deltaLineNumber + ',' + inputColumn + ' ===> ' + (deltaLineNumber+outputLineIndex) + ',' + outputColumn);\n\n\n    return new Position(deltaLineNumber + outputLineIndex, outputColumn);\n  };\n\n  SplitLine.prototype.getViewLineNumberOfModelPosition = function (deltaLineNumber, inputColumn) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n\n    var r = LineBreakData.getOutputPositionOfInputOffset(this._lineBreakData.breakOffsets, inputColumn - 1);\n    return deltaLineNumber + r.outputLineIndex;\n  };\n\n  return SplitLine;\n}();\n\nexport { SplitLine };\nvar _spaces = [''];\n\nfunction spaces(count) {\n  if (count >= _spaces.length) {\n    for (var i = 1; i <= count; i++) {\n      _spaces[i] = _makeSpaces(i);\n    }\n  }\n\n  return _spaces[count];\n}\n\nfunction _makeSpaces(count) {\n  return new Array(count + 1).join(' ');\n}\n\nfunction createSplitLine(lineBreakData, isVisible) {\n  if (lineBreakData === null) {\n    // No mapping needed\n    if (isVisible) {\n      return VisibleIdentitySplitLine.INSTANCE;\n    }\n\n    return InvisibleIdentitySplitLine.INSTANCE;\n  } else {\n    return new SplitLine(lineBreakData, isVisible);\n  }\n}\n\nvar IdentityCoordinatesConverter =\n/** @class */\nfunction () {\n  function IdentityCoordinatesConverter(lines) {\n    this._lines = lines;\n  }\n\n  IdentityCoordinatesConverter.prototype._validPosition = function (pos) {\n    return this._lines.model.validatePosition(pos);\n  };\n\n  IdentityCoordinatesConverter.prototype._validRange = function (range) {\n    return this._lines.model.validateRange(range);\n  }; // View -> Model conversion and related methods\n\n\n  IdentityCoordinatesConverter.prototype.convertViewPositionToModelPosition = function (viewPosition) {\n    return this._validPosition(viewPosition);\n  };\n\n  IdentityCoordinatesConverter.prototype.convertViewRangeToModelRange = function (viewRange) {\n    return this._validRange(viewRange);\n  };\n\n  IdentityCoordinatesConverter.prototype.validateViewPosition = function (_viewPosition, expectedModelPosition) {\n    return this._validPosition(expectedModelPosition);\n  };\n\n  IdentityCoordinatesConverter.prototype.validateViewRange = function (_viewRange, expectedModelRange) {\n    return this._validRange(expectedModelRange);\n  }; // Model -> View conversion and related methods\n\n\n  IdentityCoordinatesConverter.prototype.convertModelPositionToViewPosition = function (modelPosition) {\n    return this._validPosition(modelPosition);\n  };\n\n  IdentityCoordinatesConverter.prototype.convertModelRangeToViewRange = function (modelRange) {\n    return this._validRange(modelRange);\n  };\n\n  IdentityCoordinatesConverter.prototype.modelPositionIsVisible = function (modelPosition) {\n    var lineCount = this._lines.model.getLineCount();\n\n    if (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\n      // invalid arguments\n      return false;\n    }\n\n    return true;\n  };\n\n  return IdentityCoordinatesConverter;\n}();\n\nexport { IdentityCoordinatesConverter };\n\nvar IdentityLinesCollection =\n/** @class */\nfunction () {\n  function IdentityLinesCollection(model) {\n    this.model = model;\n  }\n\n  IdentityLinesCollection.prototype.dispose = function () {};\n\n  IdentityLinesCollection.prototype.createCoordinatesConverter = function () {\n    return new IdentityCoordinatesConverter(this);\n  };\n\n  IdentityLinesCollection.prototype.getHiddenAreas = function () {\n    return [];\n  };\n\n  IdentityLinesCollection.prototype.setHiddenAreas = function (_ranges) {\n    return false;\n  };\n\n  IdentityLinesCollection.prototype.setTabSize = function (_newTabSize) {\n    return false;\n  };\n\n  IdentityLinesCollection.prototype.setWrappingSettings = function (_fontInfo, _wrappingStrategy, _wrappingColumn, _wrappingIndent) {\n    return false;\n  };\n\n  IdentityLinesCollection.prototype.createLineBreaksComputer = function () {\n    var result = [];\n    return {\n      addRequest: function (lineText, previousLineBreakData) {\n        result.push(null);\n      },\n      finalize: function () {\n        return result;\n      }\n    };\n  };\n\n  IdentityLinesCollection.prototype.onModelFlushed = function () {};\n\n  IdentityLinesCollection.prototype.onModelLinesDeleted = function (_versionId, fromLineNumber, toLineNumber) {\n    return new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\n  };\n\n  IdentityLinesCollection.prototype.onModelLinesInserted = function (_versionId, fromLineNumber, toLineNumber, lineBreaks) {\n    return new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\n  };\n\n  IdentityLinesCollection.prototype.onModelLineChanged = function (_versionId, lineNumber, lineBreakData) {\n    return [false, new viewEvents.ViewLinesChangedEvent(lineNumber, lineNumber), null, null];\n  };\n\n  IdentityLinesCollection.prototype.acceptVersionId = function (_versionId) {};\n\n  IdentityLinesCollection.prototype.getViewLineCount = function () {\n    return this.model.getLineCount();\n  };\n\n  IdentityLinesCollection.prototype.getActiveIndentGuide = function (viewLineNumber, _minLineNumber, _maxLineNumber) {\n    return {\n      startLineNumber: viewLineNumber,\n      endLineNumber: viewLineNumber,\n      indent: 0\n    };\n  };\n\n  IdentityLinesCollection.prototype.getViewLinesIndentGuides = function (viewStartLineNumber, viewEndLineNumber) {\n    var viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n    var result = new Array(viewLineCount);\n\n    for (var i = 0; i < viewLineCount; i++) {\n      result[i] = 0;\n    }\n\n    return result;\n  };\n\n  IdentityLinesCollection.prototype.getViewLineContent = function (viewLineNumber) {\n    return this.model.getLineContent(viewLineNumber);\n  };\n\n  IdentityLinesCollection.prototype.getViewLineLength = function (viewLineNumber) {\n    return this.model.getLineLength(viewLineNumber);\n  };\n\n  IdentityLinesCollection.prototype.getViewLineMinColumn = function (viewLineNumber) {\n    return this.model.getLineMinColumn(viewLineNumber);\n  };\n\n  IdentityLinesCollection.prototype.getViewLineMaxColumn = function (viewLineNumber) {\n    return this.model.getLineMaxColumn(viewLineNumber);\n  };\n\n  IdentityLinesCollection.prototype.getViewLineData = function (viewLineNumber) {\n    var lineTokens = this.model.getLineTokens(viewLineNumber);\n    var lineContent = lineTokens.getLineContent();\n    return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate());\n  };\n\n  IdentityLinesCollection.prototype.getViewLinesData = function (viewStartLineNumber, viewEndLineNumber, needed) {\n    var lineCount = this.model.getLineCount();\n    viewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\n    viewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\n    var result = [];\n\n    for (var lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\n      var idx = lineNumber - viewStartLineNumber;\n\n      if (!needed[idx]) {\n        result[idx] = null;\n      }\n\n      result[idx] = this.getViewLineData(lineNumber);\n    }\n\n    return result;\n  };\n\n  IdentityLinesCollection.prototype.getAllOverviewRulerDecorations = function (ownerId, filterOutValidation, theme) {\n    var decorations = this.model.getOverviewRulerDecorations(ownerId, filterOutValidation);\n    var result = new OverviewRulerDecorations();\n\n    for (var _i = 0, decorations_2 = decorations; _i < decorations_2.length; _i++) {\n      var decoration = decorations_2[_i];\n      var opts = decoration.options.overviewRuler;\n      var lane = opts ? opts.position : 0;\n\n      if (lane === 0) {\n        continue;\n      }\n\n      var color = opts.getColor(theme);\n      var viewStartLineNumber = decoration.range.startLineNumber;\n      var viewEndLineNumber = decoration.range.endLineNumber;\n      result.accept(color, viewStartLineNumber, viewEndLineNumber, lane);\n    }\n\n    return result.result;\n  };\n\n  IdentityLinesCollection.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\n    return this.model.getDecorationsInRange(range, ownerId, filterOutValidation);\n  };\n\n  return IdentityLinesCollection;\n}();\n\nexport { IdentityLinesCollection };\n\nvar OverviewRulerDecorations =\n/** @class */\nfunction () {\n  function OverviewRulerDecorations() {\n    this.result = Object.create(null);\n  }\n\n  OverviewRulerDecorations.prototype.accept = function (color, startLineNumber, endLineNumber, lane) {\n    var prev = this.result[color];\n\n    if (prev) {\n      var prevLane = prev[prev.length - 3];\n      var prevEndLineNumber = prev[prev.length - 1];\n\n      if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n        // merge into prev\n        if (endLineNumber > prevEndLineNumber) {\n          prev[prev.length - 1] = endLineNumber;\n        }\n\n        return;\n      } // push\n\n\n      prev.push(lane, startLineNumber, endLineNumber);\n    } else {\n      this.result[color] = [lane, startLineNumber, endLineNumber];\n    }\n  };\n\n  return OverviewRulerDecorations;\n}();","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/viewModel/splitLinesCollection.js"],"names":["arrays","Position","Range","ModelDecorationOptions","viewEvents","PrefixSumIndexOfResult","ViewLineData","OutputPosition","outputLineIndex","outputOffset","LineBreakData","breakOffsets","breakOffsetsVisibleColumn","wrappedTextIndentLength","getInputOffsetOfOutputPosition","getOutputPositionOfInputOffset","inputOffset","low","high","length","mid","midStart","midStop","CoordinatesConverter","lines","_lines","prototype","convertViewPositionToModelPosition","viewPosition","lineNumber","column","convertViewRangeToModelRange","viewRange","validateViewPosition","expectedModelPosition","validateViewRange","expectedModelRange","convertModelPositionToViewPosition","modelPosition","convertModelRangeToViewRange","modelRange","modelPositionIsVisible","LineNumberMapper","viewLineCounts","_counts","_isValid","_validEndIndex","_modelToView","_viewToModel","_invalidate","index","Math","min","_ensureValid","i","len","viewLineCount","viewLinesAbove","j","changeValue","value","removeValues","start","deleteCount","splice","insertValues","insertIndex","insertArr","arrayInsert","getTotalValue","getAccumulatedValue","getIndexOf","accumulatedValue","modelLineIndex","SplitLinesCollection","model","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","fontInfo","tabSize","wrappingStrategy","wrappingColumn","wrappingIndent","_validModelVersionId","_domLineBreaksComputerFactory","_monospaceLineBreaksComputerFactory","_constructLines","dispose","hiddenAreasIds","deltaDecorations","createCoordinatesConverter","resetHiddenAreas","previousLineBreaks","_this","linesContent","getLinesContent","lineCount","lineBreaksComputer","createLineBreaksComputer","addRequest","linesBreaks","finalize","values","hiddenAreas","map","areaId","getDecorationRange","sort","compareRangesUsingStarts","hiddenAreaStart","hiddenAreaEnd","hiddenAreaIdx","nextLineNumberToUpdateHiddenArea","startLineNumber","endLineNumber","isInHiddenArea","line","createSplitLine","getViewLineCount","getVersionId","prefixSumComputer","getHiddenAreas","decId","_reduceRanges","_ranges","ranges","r","validateRange","result","currentRangeStart","currentRangeEnd","range","push","setHiddenAreas","newRanges","oldRanges","hasDifference","equalsRange","newDecorations","_i","newRanges_1","newRange","options","EMPTY","hasVisibleLine","lineChanged","isVisible","setVisible","newOutputLineCount","modelLineNumber","_modelColumn","setTabSize","newTabSize","setWrappingSettings","equalFontInfo","equals","equalWrappingStrategy","equalWrappingColumn","equalWrappingIndent","onlyWrappingColumnChanged","getLineBreakData","lineBreaksComputerFactory","onModelFlushed","onModelLinesDeleted","versionId","fromLineNumber","toLineNumber","outputFromLineNumber","outputToLineNumber","ViewLinesDeletedEvent","onModelLinesInserted","_toLineNumber","lineBreaks","testPosition","hiddenAreas_1","hiddenArea","containsPosition","totalOutputLineCount","insertLines","insertPrefixSumValues","outputLineCount","slice","concat","ViewLinesInsertedEvent","onModelLineChanged","lineBreakData","lineIndex","oldOutputLineCount","lineMappingChanged","changeFrom","changeTo","insertFrom","insertTo","deleteFrom","deleteTo","viewLinesChangedEvent","ViewLinesChangedEvent","viewLinesInsertedEvent","viewLinesDeletedEvent","acceptVersionId","_toValidViewLineNumber","viewLineNumber","getActiveIndentGuide","minLineNumber","maxLineNumber","getViewLineMinColumn","modelMinPosition","modelMaxPosition","viewStartPosition","viewEndPosition","getLineMaxColumn","indent","getViewLinesIndentGuides","viewStartLineNumber","viewEndLineNumber","modelStart","modelEnd","getViewLineMaxColumn","resultRepeatCount","resultRepeatOption","modelStartLineIndex","modelEndLineIndex","reqStart","viewLineStartIndex","getViewLineNumberOfModelPosition","viewLineEndIndex","count","option","getLinesIndentGuides","viewIndents","Array","currIndex","blockAtIndex","getViewLineContent","remainder","getViewLineLength","getViewLineData","getViewLinesData","needed","startModelLineIndex","startRemainder","getLineCount","fromViewLineIndex","remainingViewLineCount","lastLine","toViewLineIndex","viewColumn","minColumn","maxColumn","computedModelColumn","getModelColumnOfViewPosition","computedModelPosition","validatePosition","validViewStart","startColumn","getStartPosition","validViewEnd","endColumn","getEndPosition","inputColumn","end","_modelLineNumber","validPosition","inputLineNumber","lineIndexChanged","deltaLineNumber","getViewPositionOfModelPosition","_getViewLineNumberForModelPosition","deltaLineNumber_1","getAllOverviewRulerDecorations","ownerId","filterOutValidation","theme","decorations","getOverviewRulerDecorations","OverviewRulerDecorations","decorations_1","decoration","opts","overviewRuler","lane","position","color","getColor","accept","getDecorationsInRange","maxLineColumn","a","b","res","id","finalResult","finalResultLen","prevDecId","result_1","dec","VisibleIdentitySplitLine","InvisibleIdentitySplitLine","INSTANCE","_outputLineIndex","getLineContent","getLineLength","getLineMinColumn","lineTokens","getLineTokens","lineContent","inflate","_fromOuputLineIndex","_toOutputLineIndex","globalStartIndex","outputColumn","_inputColumn","_model","Error","_globalStartIndex","_needed","_result","_outputColumn","_deltaLineNumber","SplitLine","_lineBreakData","_isVisible","getInputStartOffsetOfOutputLineIndex","getInputEndOffsetOfOutputLineIndex","startOffset","endOffset","getValueInRange","spaces","continuesWithWrappedLine","deltaStartIndex","startVisibleColumn","sliceAndInflate","fromOuputLineIndex","toOutputLineIndex","globalIndex","adjustedColumn","_spaces","_makeSpaces","join","IdentityCoordinatesConverter","_validPosition","pos","_validRange","_viewPosition","_viewRange","IdentityLinesCollection","_newTabSize","_fontInfo","_wrappingStrategy","_wrappingColumn","_wrappingIndent","lineText","previousLineBreakData","_versionId","_minLineNumber","_maxLineNumber","max","idx","decorations_2","Object","create","prev","prevLane","prevEndLineNumber"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as arrays from '../../../base/common/arrays.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { ModelDecorationOptions } from '../model/textModel.js';\r\nimport * as viewEvents from '../view/viewEvents.js';\r\nimport { PrefixSumIndexOfResult } from './prefixSumComputer.js';\r\nimport { ViewLineData } from './viewModel.js';\r\nvar OutputPosition = /** @class */ (function () {\r\n    function OutputPosition(outputLineIndex, outputOffset) {\r\n        this.outputLineIndex = outputLineIndex;\r\n        this.outputOffset = outputOffset;\r\n    }\r\n    return OutputPosition;\r\n}());\r\nexport { OutputPosition };\r\nvar LineBreakData = /** @class */ (function () {\r\n    function LineBreakData(breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength) {\r\n        this.breakOffsets = breakOffsets;\r\n        this.breakOffsetsVisibleColumn = breakOffsetsVisibleColumn;\r\n        this.wrappedTextIndentLength = wrappedTextIndentLength;\r\n    }\r\n    LineBreakData.getInputOffsetOfOutputPosition = function (breakOffsets, outputLineIndex, outputOffset) {\r\n        if (outputLineIndex === 0) {\r\n            return outputOffset;\r\n        }\r\n        else {\r\n            return breakOffsets[outputLineIndex - 1] + outputOffset;\r\n        }\r\n    };\r\n    LineBreakData.getOutputPositionOfInputOffset = function (breakOffsets, inputOffset) {\r\n        var low = 0;\r\n        var high = breakOffsets.length - 1;\r\n        var mid = 0;\r\n        var midStart = 0;\r\n        while (low <= high) {\r\n            mid = low + ((high - low) / 2) | 0;\r\n            var midStop = breakOffsets[mid];\r\n            midStart = mid > 0 ? breakOffsets[mid - 1] : 0;\r\n            if (inputOffset < midStart) {\r\n                high = mid - 1;\r\n            }\r\n            else if (inputOffset >= midStop) {\r\n                low = mid + 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return new OutputPosition(mid, inputOffset - midStart);\r\n    };\r\n    return LineBreakData;\r\n}());\r\nexport { LineBreakData };\r\nvar CoordinatesConverter = /** @class */ (function () {\r\n    function CoordinatesConverter(lines) {\r\n        this._lines = lines;\r\n    }\r\n    // View -> Model conversion and related methods\r\n    CoordinatesConverter.prototype.convertViewPositionToModelPosition = function (viewPosition) {\r\n        return this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\r\n    };\r\n    CoordinatesConverter.prototype.convertViewRangeToModelRange = function (viewRange) {\r\n        return this._lines.convertViewRangeToModelRange(viewRange);\r\n    };\r\n    CoordinatesConverter.prototype.validateViewPosition = function (viewPosition, expectedModelPosition) {\r\n        return this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\r\n    };\r\n    CoordinatesConverter.prototype.validateViewRange = function (viewRange, expectedModelRange) {\r\n        return this._lines.validateViewRange(viewRange, expectedModelRange);\r\n    };\r\n    // Model -> View conversion and related methods\r\n    CoordinatesConverter.prototype.convertModelPositionToViewPosition = function (modelPosition) {\r\n        return this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column);\r\n    };\r\n    CoordinatesConverter.prototype.convertModelRangeToViewRange = function (modelRange) {\r\n        return this._lines.convertModelRangeToViewRange(modelRange);\r\n    };\r\n    CoordinatesConverter.prototype.modelPositionIsVisible = function (modelPosition) {\r\n        return this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\r\n    };\r\n    return CoordinatesConverter;\r\n}());\r\nexport { CoordinatesConverter };\r\nvar LineNumberMapper = /** @class */ (function () {\r\n    function LineNumberMapper(viewLineCounts) {\r\n        this._counts = viewLineCounts;\r\n        this._isValid = false;\r\n        this._validEndIndex = -1;\r\n        this._modelToView = [];\r\n        this._viewToModel = [];\r\n    }\r\n    LineNumberMapper.prototype._invalidate = function (index) {\r\n        this._isValid = false;\r\n        this._validEndIndex = Math.min(this._validEndIndex, index - 1);\r\n    };\r\n    LineNumberMapper.prototype._ensureValid = function () {\r\n        if (this._isValid) {\r\n            return;\r\n        }\r\n        for (var i = this._validEndIndex + 1, len = this._counts.length; i < len; i++) {\r\n            var viewLineCount = this._counts[i];\r\n            var viewLinesAbove = (i > 0 ? this._modelToView[i - 1] : 0);\r\n            this._modelToView[i] = viewLinesAbove + viewLineCount;\r\n            for (var j = 0; j < viewLineCount; j++) {\r\n                this._viewToModel[viewLinesAbove + j] = i;\r\n            }\r\n        }\r\n        // trim things\r\n        this._modelToView.length = this._counts.length;\r\n        this._viewToModel.length = this._modelToView[this._modelToView.length - 1];\r\n        // mark as valid\r\n        this._isValid = true;\r\n        this._validEndIndex = this._counts.length - 1;\r\n    };\r\n    LineNumberMapper.prototype.changeValue = function (index, value) {\r\n        if (this._counts[index] === value) {\r\n            // no change\r\n            return;\r\n        }\r\n        this._counts[index] = value;\r\n        this._invalidate(index);\r\n    };\r\n    LineNumberMapper.prototype.removeValues = function (start, deleteCount) {\r\n        this._counts.splice(start, deleteCount);\r\n        this._invalidate(start);\r\n    };\r\n    LineNumberMapper.prototype.insertValues = function (insertIndex, insertArr) {\r\n        this._counts = arrays.arrayInsert(this._counts, insertIndex, insertArr);\r\n        this._invalidate(insertIndex);\r\n    };\r\n    LineNumberMapper.prototype.getTotalValue = function () {\r\n        this._ensureValid();\r\n        return this._viewToModel.length;\r\n    };\r\n    LineNumberMapper.prototype.getAccumulatedValue = function (index) {\r\n        this._ensureValid();\r\n        return this._modelToView[index];\r\n    };\r\n    LineNumberMapper.prototype.getIndexOf = function (accumulatedValue) {\r\n        this._ensureValid();\r\n        var modelLineIndex = this._viewToModel[accumulatedValue];\r\n        var viewLinesAbove = (modelLineIndex > 0 ? this._modelToView[modelLineIndex - 1] : 0);\r\n        return new PrefixSumIndexOfResult(modelLineIndex, accumulatedValue - viewLinesAbove);\r\n    };\r\n    return LineNumberMapper;\r\n}());\r\nvar SplitLinesCollection = /** @class */ (function () {\r\n    function SplitLinesCollection(model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, tabSize, wrappingStrategy, wrappingColumn, wrappingIndent) {\r\n        this.model = model;\r\n        this._validModelVersionId = -1;\r\n        this._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\r\n        this._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\r\n        this.fontInfo = fontInfo;\r\n        this.tabSize = tabSize;\r\n        this.wrappingStrategy = wrappingStrategy;\r\n        this.wrappingColumn = wrappingColumn;\r\n        this.wrappingIndent = wrappingIndent;\r\n        this._constructLines(/*resetHiddenAreas*/ true, null);\r\n    }\r\n    SplitLinesCollection.prototype.dispose = function () {\r\n        this.hiddenAreasIds = this.model.deltaDecorations(this.hiddenAreasIds, []);\r\n    };\r\n    SplitLinesCollection.prototype.createCoordinatesConverter = function () {\r\n        return new CoordinatesConverter(this);\r\n    };\r\n    SplitLinesCollection.prototype._constructLines = function (resetHiddenAreas, previousLineBreaks) {\r\n        var _this = this;\r\n        this.lines = [];\r\n        if (resetHiddenAreas) {\r\n            this.hiddenAreasIds = [];\r\n        }\r\n        var linesContent = this.model.getLinesContent();\r\n        var lineCount = linesContent.length;\r\n        var lineBreaksComputer = this.createLineBreaksComputer();\r\n        for (var i = 0; i < lineCount; i++) {\r\n            lineBreaksComputer.addRequest(linesContent[i], previousLineBreaks ? previousLineBreaks[i] : null);\r\n        }\r\n        var linesBreaks = lineBreaksComputer.finalize();\r\n        var values = [];\r\n        var hiddenAreas = this.hiddenAreasIds.map(function (areaId) { return _this.model.getDecorationRange(areaId); }).sort(Range.compareRangesUsingStarts);\r\n        var hiddenAreaStart = 1, hiddenAreaEnd = 0;\r\n        var hiddenAreaIdx = -1;\r\n        var nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\r\n        for (var i = 0; i < lineCount; i++) {\r\n            var lineNumber = i + 1;\r\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\r\n                hiddenAreaIdx++;\r\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\r\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\r\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\r\n            }\r\n            var isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\r\n            var line = createSplitLine(linesBreaks[i], !isInHiddenArea);\r\n            values[i] = line.getViewLineCount();\r\n            this.lines[i] = line;\r\n        }\r\n        this._validModelVersionId = this.model.getVersionId();\r\n        this.prefixSumComputer = new LineNumberMapper(values);\r\n    };\r\n    SplitLinesCollection.prototype.getHiddenAreas = function () {\r\n        var _this = this;\r\n        return this.hiddenAreasIds.map(function (decId) {\r\n            return _this.model.getDecorationRange(decId);\r\n        });\r\n    };\r\n    SplitLinesCollection.prototype._reduceRanges = function (_ranges) {\r\n        var _this = this;\r\n        if (_ranges.length === 0) {\r\n            return [];\r\n        }\r\n        var ranges = _ranges.map(function (r) { return _this.model.validateRange(r); }).sort(Range.compareRangesUsingStarts);\r\n        var result = [];\r\n        var currentRangeStart = ranges[0].startLineNumber;\r\n        var currentRangeEnd = ranges[0].endLineNumber;\r\n        for (var i = 1, len = ranges.length; i < len; i++) {\r\n            var range = ranges[i];\r\n            if (range.startLineNumber > currentRangeEnd + 1) {\r\n                result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\r\n                currentRangeStart = range.startLineNumber;\r\n                currentRangeEnd = range.endLineNumber;\r\n            }\r\n            else if (range.endLineNumber > currentRangeEnd) {\r\n                currentRangeEnd = range.endLineNumber;\r\n            }\r\n        }\r\n        result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\r\n        return result;\r\n    };\r\n    SplitLinesCollection.prototype.setHiddenAreas = function (_ranges) {\r\n        var _this = this;\r\n        var newRanges = this._reduceRanges(_ranges);\r\n        // BEGIN TODO@Martin: Please stop calling this method on each model change!\r\n        var oldRanges = this.hiddenAreasIds.map(function (areaId) { return _this.model.getDecorationRange(areaId); }).sort(Range.compareRangesUsingStarts);\r\n        if (newRanges.length === oldRanges.length) {\r\n            var hasDifference = false;\r\n            for (var i = 0; i < newRanges.length; i++) {\r\n                if (!newRanges[i].equalsRange(oldRanges[i])) {\r\n                    hasDifference = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!hasDifference) {\r\n                return false;\r\n            }\r\n        }\r\n        // END TODO@Martin: Please stop calling this method on each model change!\r\n        var newDecorations = [];\r\n        for (var _i = 0, newRanges_1 = newRanges; _i < newRanges_1.length; _i++) {\r\n            var newRange = newRanges_1[_i];\r\n            newDecorations.push({\r\n                range: newRange,\r\n                options: ModelDecorationOptions.EMPTY\r\n            });\r\n        }\r\n        this.hiddenAreasIds = this.model.deltaDecorations(this.hiddenAreasIds, newDecorations);\r\n        var hiddenAreas = newRanges;\r\n        var hiddenAreaStart = 1, hiddenAreaEnd = 0;\r\n        var hiddenAreaIdx = -1;\r\n        var nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.lines.length + 2;\r\n        var hasVisibleLine = false;\r\n        for (var i = 0; i < this.lines.length; i++) {\r\n            var lineNumber = i + 1;\r\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\r\n                hiddenAreaIdx++;\r\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\r\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\r\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.lines.length + 2;\r\n            }\r\n            var lineChanged = false;\r\n            if (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\r\n                // Line should be hidden\r\n                if (this.lines[i].isVisible()) {\r\n                    this.lines[i] = this.lines[i].setVisible(false);\r\n                    lineChanged = true;\r\n                }\r\n            }\r\n            else {\r\n                hasVisibleLine = true;\r\n                // Line should be visible\r\n                if (!this.lines[i].isVisible()) {\r\n                    this.lines[i] = this.lines[i].setVisible(true);\r\n                    lineChanged = true;\r\n                }\r\n            }\r\n            if (lineChanged) {\r\n                var newOutputLineCount = this.lines[i].getViewLineCount();\r\n                this.prefixSumComputer.changeValue(i, newOutputLineCount);\r\n            }\r\n        }\r\n        if (!hasVisibleLine) {\r\n            // Cannot have everything be hidden => reveal everything!\r\n            this.setHiddenAreas([]);\r\n        }\r\n        return true;\r\n    };\r\n    SplitLinesCollection.prototype.modelPositionIsVisible = function (modelLineNumber, _modelColumn) {\r\n        if (modelLineNumber < 1 || modelLineNumber > this.lines.length) {\r\n            // invalid arguments\r\n            return false;\r\n        }\r\n        return this.lines[modelLineNumber - 1].isVisible();\r\n    };\r\n    SplitLinesCollection.prototype.setTabSize = function (newTabSize) {\r\n        if (this.tabSize === newTabSize) {\r\n            return false;\r\n        }\r\n        this.tabSize = newTabSize;\r\n        this._constructLines(/*resetHiddenAreas*/ false, null);\r\n        return true;\r\n    };\r\n    SplitLinesCollection.prototype.setWrappingSettings = function (fontInfo, wrappingStrategy, wrappingColumn, wrappingIndent) {\r\n        var equalFontInfo = this.fontInfo.equals(fontInfo);\r\n        var equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\r\n        var equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\r\n        var equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\r\n        if (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent) {\r\n            return false;\r\n        }\r\n        var onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent);\r\n        this.fontInfo = fontInfo;\r\n        this.wrappingStrategy = wrappingStrategy;\r\n        this.wrappingColumn = wrappingColumn;\r\n        this.wrappingIndent = wrappingIndent;\r\n        var previousLineBreaks = null;\r\n        if (onlyWrappingColumnChanged) {\r\n            previousLineBreaks = [];\r\n            for (var i = 0, len = this.lines.length; i < len; i++) {\r\n                previousLineBreaks[i] = this.lines[i].getLineBreakData();\r\n            }\r\n        }\r\n        this._constructLines(/*resetHiddenAreas*/ false, previousLineBreaks);\r\n        return true;\r\n    };\r\n    SplitLinesCollection.prototype.createLineBreaksComputer = function () {\r\n        var lineBreaksComputerFactory = (this.wrappingStrategy === 'advanced'\r\n            ? this._domLineBreaksComputerFactory\r\n            : this._monospaceLineBreaksComputerFactory);\r\n        return lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent);\r\n    };\r\n    SplitLinesCollection.prototype.onModelFlushed = function () {\r\n        this._constructLines(/*resetHiddenAreas*/ true, null);\r\n    };\r\n    SplitLinesCollection.prototype.onModelLinesDeleted = function (versionId, fromLineNumber, toLineNumber) {\r\n        if (versionId <= this._validModelVersionId) {\r\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\r\n            // We don't want to apply stale change events on top of a newer read model state.\r\n            return null;\r\n        }\r\n        var outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(fromLineNumber - 2) + 1);\r\n        var outputToLineNumber = this.prefixSumComputer.getAccumulatedValue(toLineNumber - 1);\r\n        this.lines.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\r\n        this.prefixSumComputer.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\r\n        return new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\r\n    };\r\n    SplitLinesCollection.prototype.onModelLinesInserted = function (versionId, fromLineNumber, _toLineNumber, lineBreaks) {\r\n        if (versionId <= this._validModelVersionId) {\r\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\r\n            // We don't want to apply stale change events on top of a newer read model state.\r\n            return null;\r\n        }\r\n        var hiddenAreas = this.getHiddenAreas();\r\n        var isInHiddenArea = false;\r\n        var testPosition = new Position(fromLineNumber, 1);\r\n        for (var _i = 0, hiddenAreas_1 = hiddenAreas; _i < hiddenAreas_1.length; _i++) {\r\n            var hiddenArea = hiddenAreas_1[_i];\r\n            if (hiddenArea.containsPosition(testPosition)) {\r\n                isInHiddenArea = true;\r\n                break;\r\n            }\r\n        }\r\n        var outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(fromLineNumber - 2) + 1);\r\n        var totalOutputLineCount = 0;\r\n        var insertLines = [];\r\n        var insertPrefixSumValues = [];\r\n        for (var i = 0, len = lineBreaks.length; i < len; i++) {\r\n            var line = createSplitLine(lineBreaks[i], !isInHiddenArea);\r\n            insertLines.push(line);\r\n            var outputLineCount = line.getViewLineCount();\r\n            totalOutputLineCount += outputLineCount;\r\n            insertPrefixSumValues[i] = outputLineCount;\r\n        }\r\n        // TODO@Alex: use arrays.arrayInsert\r\n        this.lines = this.lines.slice(0, fromLineNumber - 1).concat(insertLines).concat(this.lines.slice(fromLineNumber - 1));\r\n        this.prefixSumComputer.insertValues(fromLineNumber - 1, insertPrefixSumValues);\r\n        return new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\r\n    };\r\n    SplitLinesCollection.prototype.onModelLineChanged = function (versionId, lineNumber, lineBreakData) {\r\n        if (versionId <= this._validModelVersionId) {\r\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\r\n            // We don't want to apply stale change events on top of a newer read model state.\r\n            return [false, null, null, null];\r\n        }\r\n        var lineIndex = lineNumber - 1;\r\n        var oldOutputLineCount = this.lines[lineIndex].getViewLineCount();\r\n        var isVisible = this.lines[lineIndex].isVisible();\r\n        var line = createSplitLine(lineBreakData, isVisible);\r\n        this.lines[lineIndex] = line;\r\n        var newOutputLineCount = this.lines[lineIndex].getViewLineCount();\r\n        var lineMappingChanged = false;\r\n        var changeFrom = 0;\r\n        var changeTo = -1;\r\n        var insertFrom = 0;\r\n        var insertTo = -1;\r\n        var deleteFrom = 0;\r\n        var deleteTo = -1;\r\n        if (oldOutputLineCount > newOutputLineCount) {\r\n            changeFrom = (lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1);\r\n            changeTo = changeFrom + newOutputLineCount - 1;\r\n            deleteFrom = changeTo + 1;\r\n            deleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\r\n            lineMappingChanged = true;\r\n        }\r\n        else if (oldOutputLineCount < newOutputLineCount) {\r\n            changeFrom = (lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1);\r\n            changeTo = changeFrom + oldOutputLineCount - 1;\r\n            insertFrom = changeTo + 1;\r\n            insertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\r\n            lineMappingChanged = true;\r\n        }\r\n        else {\r\n            changeFrom = (lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1);\r\n            changeTo = changeFrom + newOutputLineCount - 1;\r\n        }\r\n        this.prefixSumComputer.changeValue(lineIndex, newOutputLineCount);\r\n        var viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo) : null);\r\n        var viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\r\n        var viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\r\n        return [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\r\n    };\r\n    SplitLinesCollection.prototype.acceptVersionId = function (versionId) {\r\n        this._validModelVersionId = versionId;\r\n        if (this.lines.length === 1 && !this.lines[0].isVisible()) {\r\n            // At least one line must be visible => reset hidden areas\r\n            this.setHiddenAreas([]);\r\n        }\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineCount = function () {\r\n        return this.prefixSumComputer.getTotalValue();\r\n    };\r\n    SplitLinesCollection.prototype._toValidViewLineNumber = function (viewLineNumber) {\r\n        if (viewLineNumber < 1) {\r\n            return 1;\r\n        }\r\n        var viewLineCount = this.getViewLineCount();\r\n        if (viewLineNumber > viewLineCount) {\r\n            return viewLineCount;\r\n        }\r\n        return viewLineNumber | 0;\r\n    };\r\n    SplitLinesCollection.prototype.getActiveIndentGuide = function (viewLineNumber, minLineNumber, maxLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        minLineNumber = this._toValidViewLineNumber(minLineNumber);\r\n        maxLineNumber = this._toValidViewLineNumber(maxLineNumber);\r\n        var modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\r\n        var modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\r\n        var modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\r\n        var result = this.model.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\r\n        var viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\r\n        var viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\r\n        return {\r\n            startLineNumber: viewStartPosition.lineNumber,\r\n            endLineNumber: viewEndPosition.lineNumber,\r\n            indent: result.indent\r\n        };\r\n    };\r\n    SplitLinesCollection.prototype.getViewLinesIndentGuides = function (viewStartLineNumber, viewEndLineNumber) {\r\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\r\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\r\n        var modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\r\n        var modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\r\n        var result = [];\r\n        var resultRepeatCount = [];\r\n        var resultRepeatOption = [];\r\n        var modelStartLineIndex = modelStart.lineNumber - 1;\r\n        var modelEndLineIndex = modelEnd.lineNumber - 1;\r\n        var reqStart = null;\r\n        for (var modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\r\n            var line = this.lines[modelLineIndex];\r\n            if (line.isVisible()) {\r\n                var viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\r\n                var viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\r\n                var count = viewLineEndIndex - viewLineStartIndex + 1;\r\n                var option = 0 /* BlockNone */;\r\n                if (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\r\n                    // wrapped lines should block indent guides\r\n                    option = (viewLineStartIndex === 0 ? 1 /* BlockSubsequent */ : 2 /* BlockAll */);\r\n                }\r\n                resultRepeatCount.push(count);\r\n                resultRepeatOption.push(option);\r\n                // merge into previous request\r\n                if (reqStart === null) {\r\n                    reqStart = new Position(modelLineIndex + 1, 0);\r\n                }\r\n            }\r\n            else {\r\n                // hit invisible line => flush request\r\n                if (reqStart !== null) {\r\n                    result = result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\r\n                    reqStart = null;\r\n                }\r\n            }\r\n        }\r\n        if (reqStart !== null) {\r\n            result = result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\r\n            reqStart = null;\r\n        }\r\n        var viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\r\n        var viewIndents = new Array(viewLineCount);\r\n        var currIndex = 0;\r\n        for (var i = 0, len = result.length; i < len; i++) {\r\n            var value = result[i];\r\n            var count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\r\n            var option = resultRepeatOption[i];\r\n            var blockAtIndex = void 0;\r\n            if (option === 2 /* BlockAll */) {\r\n                blockAtIndex = 0;\r\n            }\r\n            else if (option === 1 /* BlockSubsequent */) {\r\n                blockAtIndex = 1;\r\n            }\r\n            else {\r\n                blockAtIndex = count;\r\n            }\r\n            for (var j = 0; j < count; j++) {\r\n                if (j === blockAtIndex) {\r\n                    value = 0;\r\n                }\r\n                viewIndents[currIndex++] = value;\r\n            }\r\n        }\r\n        return viewIndents;\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineContent = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineContent(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineLength = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineLength(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineMinColumn = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineMinColumn(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineMaxColumn = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineData = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineData(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLinesData = function (viewStartLineNumber, viewEndLineNumber, needed) {\r\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\r\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\r\n        var start = this.prefixSumComputer.getIndexOf(viewStartLineNumber - 1);\r\n        var viewLineNumber = viewStartLineNumber;\r\n        var startModelLineIndex = start.index;\r\n        var startRemainder = start.remainder;\r\n        var result = [];\r\n        for (var modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\r\n            var line = this.lines[modelLineIndex];\r\n            if (!line.isVisible()) {\r\n                continue;\r\n            }\r\n            var fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\r\n            var remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\r\n            var lastLine = false;\r\n            if (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\r\n                lastLine = true;\r\n                remainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\r\n            }\r\n            var toViewLineIndex = fromViewLineIndex + remainingViewLineCount;\r\n            line.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, toViewLineIndex, viewLineNumber - viewStartLineNumber, needed, result);\r\n            viewLineNumber += remainingViewLineCount;\r\n            if (lastLine) {\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SplitLinesCollection.prototype.validateViewPosition = function (viewLineNumber, viewColumn, expectedModelPosition) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        var line = this.lines[lineIndex];\r\n        var minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\r\n        var maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\r\n        if (viewColumn < minColumn) {\r\n            viewColumn = minColumn;\r\n        }\r\n        if (viewColumn > maxColumn) {\r\n            viewColumn = maxColumn;\r\n        }\r\n        var computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\r\n        var computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\r\n        if (computedModelPosition.equals(expectedModelPosition)) {\r\n            return new Position(viewLineNumber, viewColumn);\r\n        }\r\n        return this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\r\n    };\r\n    SplitLinesCollection.prototype.validateViewRange = function (viewRange, expectedModelRange) {\r\n        var validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\r\n        var validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\r\n        return new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\r\n    };\r\n    SplitLinesCollection.prototype.convertViewPositionToModelPosition = function (viewLineNumber, viewColumn) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        var inputColumn = this.lines[lineIndex].getModelColumnOfViewPosition(remainder, viewColumn);\r\n        // console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\r\n        return this.model.validatePosition(new Position(lineIndex + 1, inputColumn));\r\n    };\r\n    SplitLinesCollection.prototype.convertViewRangeToModelRange = function (viewRange) {\r\n        var start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\r\n        var end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\r\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n    };\r\n    SplitLinesCollection.prototype.convertModelPositionToViewPosition = function (_modelLineNumber, _modelColumn) {\r\n        var validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\r\n        var inputLineNumber = validPosition.lineNumber;\r\n        var inputColumn = validPosition.column;\r\n        var lineIndex = inputLineNumber - 1, lineIndexChanged = false;\r\n        while (lineIndex > 0 && !this.lines[lineIndex].isVisible()) {\r\n            lineIndex--;\r\n            lineIndexChanged = true;\r\n        }\r\n        if (lineIndex === 0 && !this.lines[lineIndex].isVisible()) {\r\n            // Could not reach a real line\r\n            // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\r\n            return new Position(1, 1);\r\n        }\r\n        var deltaLineNumber = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\r\n        var r;\r\n        if (lineIndexChanged) {\r\n            r = this.lines[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\r\n        }\r\n        else {\r\n            r = this.lines[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn);\r\n        }\r\n        // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\r\n        return r;\r\n    };\r\n    SplitLinesCollection.prototype.convertModelRangeToViewRange = function (modelRange) {\r\n        var start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn);\r\n        var end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn);\r\n        if (modelRange.startLineNumber === modelRange.endLineNumber && start.lineNumber !== end.lineNumber) {\r\n            // This is a single line range that ends up taking more lines due to wrapping\r\n            if (end.column === this.getViewLineMinColumn(end.lineNumber)) {\r\n                // the end column lands on the first column of the next line\r\n                return new Range(start.lineNumber, start.column, end.lineNumber - 1, this.getViewLineMaxColumn(end.lineNumber - 1));\r\n            }\r\n        }\r\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n    };\r\n    SplitLinesCollection.prototype._getViewLineNumberForModelPosition = function (inputLineNumber, inputColumn) {\r\n        var lineIndex = inputLineNumber - 1;\r\n        if (this.lines[lineIndex].isVisible()) {\r\n            // this model line is visible\r\n            var deltaLineNumber_1 = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\r\n            return this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber_1, inputColumn);\r\n        }\r\n        // this model line is not visible\r\n        while (lineIndex > 0 && !this.lines[lineIndex].isVisible()) {\r\n            lineIndex--;\r\n        }\r\n        if (lineIndex === 0 && !this.lines[lineIndex].isVisible()) {\r\n            // Could not reach a real line\r\n            return 1;\r\n        }\r\n        var deltaLineNumber = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\r\n        return this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\r\n    };\r\n    SplitLinesCollection.prototype.getAllOverviewRulerDecorations = function (ownerId, filterOutValidation, theme) {\r\n        var decorations = this.model.getOverviewRulerDecorations(ownerId, filterOutValidation);\r\n        var result = new OverviewRulerDecorations();\r\n        for (var _i = 0, decorations_1 = decorations; _i < decorations_1.length; _i++) {\r\n            var decoration = decorations_1[_i];\r\n            var opts = decoration.options.overviewRuler;\r\n            var lane = opts ? opts.position : 0;\r\n            if (lane === 0) {\r\n                continue;\r\n            }\r\n            var color = opts.getColor(theme);\r\n            var viewStartLineNumber = this._getViewLineNumberForModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\r\n            var viewEndLineNumber = this._getViewLineNumberForModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\r\n            result.accept(color, viewStartLineNumber, viewEndLineNumber, lane);\r\n        }\r\n        return result.result;\r\n    };\r\n    SplitLinesCollection.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\r\n        var modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\r\n        var modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\r\n        if (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\r\n            // most likely there are no hidden lines => fast path\r\n            // fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\r\n            return this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation);\r\n        }\r\n        var result = [];\r\n        var modelStartLineIndex = modelStart.lineNumber - 1;\r\n        var modelEndLineIndex = modelEnd.lineNumber - 1;\r\n        var reqStart = null;\r\n        for (var modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\r\n            var line = this.lines[modelLineIndex];\r\n            if (line.isVisible()) {\r\n                // merge into previous request\r\n                if (reqStart === null) {\r\n                    reqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\r\n                }\r\n            }\r\n            else {\r\n                // hit invisible line => flush request\r\n                if (reqStart !== null) {\r\n                    var maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\r\n                    result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation));\r\n                    reqStart = null;\r\n                }\r\n            }\r\n        }\r\n        if (reqStart !== null) {\r\n            result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation));\r\n            reqStart = null;\r\n        }\r\n        result.sort(function (a, b) {\r\n            var res = Range.compareRangesUsingStarts(a.range, b.range);\r\n            if (res === 0) {\r\n                if (a.id < b.id) {\r\n                    return -1;\r\n                }\r\n                if (a.id > b.id) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            }\r\n            return res;\r\n        });\r\n        // Eliminate duplicate decorations that might have intersected our visible ranges multiple times\r\n        var finalResult = [], finalResultLen = 0;\r\n        var prevDecId = null;\r\n        for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\r\n            var dec = result_1[_i];\r\n            var decId = dec.id;\r\n            if (prevDecId === decId) {\r\n                // skip\r\n                continue;\r\n            }\r\n            prevDecId = decId;\r\n            finalResult[finalResultLen++] = dec;\r\n        }\r\n        return finalResult;\r\n    };\r\n    return SplitLinesCollection;\r\n}());\r\nexport { SplitLinesCollection };\r\nvar VisibleIdentitySplitLine = /** @class */ (function () {\r\n    function VisibleIdentitySplitLine() {\r\n    }\r\n    VisibleIdentitySplitLine.prototype.isVisible = function () {\r\n        return true;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.setVisible = function (isVisible) {\r\n        if (isVisible) {\r\n            return this;\r\n        }\r\n        return InvisibleIdentitySplitLine.INSTANCE;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getLineBreakData = function () {\r\n        return null;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineCount = function () {\r\n        return 1;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineContent = function (model, modelLineNumber, _outputLineIndex) {\r\n        return model.getLineContent(modelLineNumber);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineLength = function (model, modelLineNumber, _outputLineIndex) {\r\n        return model.getLineLength(modelLineNumber);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineMinColumn = function (model, modelLineNumber, _outputLineIndex) {\r\n        return model.getLineMinColumn(modelLineNumber);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineMaxColumn = function (model, modelLineNumber, _outputLineIndex) {\r\n        return model.getLineMaxColumn(modelLineNumber);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineData = function (model, modelLineNumber, _outputLineIndex) {\r\n        var lineTokens = model.getLineTokens(modelLineNumber);\r\n        var lineContent = lineTokens.getLineContent();\r\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate());\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLinesData = function (model, modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, globalStartIndex, needed, result) {\r\n        if (!needed[globalStartIndex]) {\r\n            result[globalStartIndex] = null;\r\n            return;\r\n        }\r\n        result[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getModelColumnOfViewPosition = function (_outputLineIndex, outputColumn) {\r\n        return outputColumn;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewPositionOfModelPosition = function (deltaLineNumber, inputColumn) {\r\n        return new Position(deltaLineNumber, inputColumn);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineNumberOfModelPosition = function (deltaLineNumber, _inputColumn) {\r\n        return deltaLineNumber;\r\n    };\r\n    VisibleIdentitySplitLine.INSTANCE = new VisibleIdentitySplitLine();\r\n    return VisibleIdentitySplitLine;\r\n}());\r\nvar InvisibleIdentitySplitLine = /** @class */ (function () {\r\n    function InvisibleIdentitySplitLine() {\r\n    }\r\n    InvisibleIdentitySplitLine.prototype.isVisible = function () {\r\n        return false;\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.setVisible = function (isVisible) {\r\n        if (!isVisible) {\r\n            return this;\r\n        }\r\n        return VisibleIdentitySplitLine.INSTANCE;\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getLineBreakData = function () {\r\n        return null;\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineCount = function () {\r\n        return 0;\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineContent = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineLength = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineMinColumn = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineMaxColumn = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineData = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLinesData = function (_model, _modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, _globalStartIndex, _needed, _result) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getModelColumnOfViewPosition = function (_outputLineIndex, _outputColumn) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewPositionOfModelPosition = function (_deltaLineNumber, _inputColumn) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineNumberOfModelPosition = function (_deltaLineNumber, _inputColumn) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.INSTANCE = new InvisibleIdentitySplitLine();\r\n    return InvisibleIdentitySplitLine;\r\n}());\r\nvar SplitLine = /** @class */ (function () {\r\n    function SplitLine(lineBreakData, isVisible) {\r\n        this._lineBreakData = lineBreakData;\r\n        this._isVisible = isVisible;\r\n    }\r\n    SplitLine.prototype.isVisible = function () {\r\n        return this._isVisible;\r\n    };\r\n    SplitLine.prototype.setVisible = function (isVisible) {\r\n        this._isVisible = isVisible;\r\n        return this;\r\n    };\r\n    SplitLine.prototype.getLineBreakData = function () {\r\n        return this._lineBreakData;\r\n    };\r\n    SplitLine.prototype.getViewLineCount = function () {\r\n        if (!this._isVisible) {\r\n            return 0;\r\n        }\r\n        return this._lineBreakData.breakOffsets.length;\r\n    };\r\n    SplitLine.prototype.getInputStartOffsetOfOutputLineIndex = function (outputLineIndex) {\r\n        return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex, 0);\r\n    };\r\n    SplitLine.prototype.getInputEndOffsetOfOutputLineIndex = function (model, modelLineNumber, outputLineIndex) {\r\n        if (outputLineIndex + 1 === this._lineBreakData.breakOffsets.length) {\r\n            return model.getLineMaxColumn(modelLineNumber) - 1;\r\n        }\r\n        return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex + 1, 0);\r\n    };\r\n    SplitLine.prototype.getViewLineContent = function (model, modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\r\n        var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\r\n        var r = model.getValueInRange({\r\n            startLineNumber: modelLineNumber,\r\n            startColumn: startOffset + 1,\r\n            endLineNumber: modelLineNumber,\r\n            endColumn: endOffset + 1\r\n        });\r\n        if (outputLineIndex > 0) {\r\n            r = spaces(this._lineBreakData.wrappedTextIndentLength) + r;\r\n        }\r\n        return r;\r\n    };\r\n    SplitLine.prototype.getViewLineLength = function (model, modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\r\n        var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\r\n        var r = endOffset - startOffset;\r\n        if (outputLineIndex > 0) {\r\n            r = this._lineBreakData.wrappedTextIndentLength + r;\r\n        }\r\n        return r;\r\n    };\r\n    SplitLine.prototype.getViewLineMinColumn = function (_model, _modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        if (outputLineIndex > 0) {\r\n            return this._lineBreakData.wrappedTextIndentLength + 1;\r\n        }\r\n        return 1;\r\n    };\r\n    SplitLine.prototype.getViewLineMaxColumn = function (model, modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        return this.getViewLineContent(model, modelLineNumber, outputLineIndex).length + 1;\r\n    };\r\n    SplitLine.prototype.getViewLineData = function (model, modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\r\n        var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\r\n        var lineContent = model.getValueInRange({\r\n            startLineNumber: modelLineNumber,\r\n            startColumn: startOffset + 1,\r\n            endLineNumber: modelLineNumber,\r\n            endColumn: endOffset + 1\r\n        });\r\n        if (outputLineIndex > 0) {\r\n            lineContent = spaces(this._lineBreakData.wrappedTextIndentLength) + lineContent;\r\n        }\r\n        var minColumn = (outputLineIndex > 0 ? this._lineBreakData.wrappedTextIndentLength + 1 : 1);\r\n        var maxColumn = lineContent.length + 1;\r\n        var continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\r\n        var deltaStartIndex = 0;\r\n        if (outputLineIndex > 0) {\r\n            deltaStartIndex = this._lineBreakData.wrappedTextIndentLength;\r\n        }\r\n        var lineTokens = model.getLineTokens(modelLineNumber);\r\n        var startVisibleColumn = (outputLineIndex === 0 ? 0 : this._lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\r\n        return new ViewLineData(lineContent, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, lineTokens.sliceAndInflate(startOffset, endOffset, deltaStartIndex));\r\n    };\r\n    SplitLine.prototype.getViewLinesData = function (model, modelLineNumber, fromOuputLineIndex, toOutputLineIndex, globalStartIndex, needed, result) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        for (var outputLineIndex = fromOuputLineIndex; outputLineIndex < toOutputLineIndex; outputLineIndex++) {\r\n            var globalIndex = globalStartIndex + outputLineIndex - fromOuputLineIndex;\r\n            if (!needed[globalIndex]) {\r\n                result[globalIndex] = null;\r\n                continue;\r\n            }\r\n            result[globalIndex] = this.getViewLineData(model, modelLineNumber, outputLineIndex);\r\n        }\r\n    };\r\n    SplitLine.prototype.getModelColumnOfViewPosition = function (outputLineIndex, outputColumn) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var adjustedColumn = outputColumn - 1;\r\n        if (outputLineIndex > 0) {\r\n            if (adjustedColumn < this._lineBreakData.wrappedTextIndentLength) {\r\n                adjustedColumn = 0;\r\n            }\r\n            else {\r\n                adjustedColumn -= this._lineBreakData.wrappedTextIndentLength;\r\n            }\r\n        }\r\n        return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex, adjustedColumn) + 1;\r\n    };\r\n    SplitLine.prototype.getViewPositionOfModelPosition = function (deltaLineNumber, inputColumn) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var r = LineBreakData.getOutputPositionOfInputOffset(this._lineBreakData.breakOffsets, inputColumn - 1);\r\n        var outputLineIndex = r.outputLineIndex;\r\n        var outputColumn = r.outputOffset + 1;\r\n        if (outputLineIndex > 0) {\r\n            outputColumn += this._lineBreakData.wrappedTextIndentLength;\r\n        }\r\n        //\t\tconsole.log('in -> out ' + deltaLineNumber + ',' + inputColumn + ' ===> ' + (deltaLineNumber+outputLineIndex) + ',' + outputColumn);\r\n        return new Position(deltaLineNumber + outputLineIndex, outputColumn);\r\n    };\r\n    SplitLine.prototype.getViewLineNumberOfModelPosition = function (deltaLineNumber, inputColumn) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var r = LineBreakData.getOutputPositionOfInputOffset(this._lineBreakData.breakOffsets, inputColumn - 1);\r\n        return (deltaLineNumber + r.outputLineIndex);\r\n    };\r\n    return SplitLine;\r\n}());\r\nexport { SplitLine };\r\nvar _spaces = [''];\r\nfunction spaces(count) {\r\n    if (count >= _spaces.length) {\r\n        for (var i = 1; i <= count; i++) {\r\n            _spaces[i] = _makeSpaces(i);\r\n        }\r\n    }\r\n    return _spaces[count];\r\n}\r\nfunction _makeSpaces(count) {\r\n    return new Array(count + 1).join(' ');\r\n}\r\nfunction createSplitLine(lineBreakData, isVisible) {\r\n    if (lineBreakData === null) {\r\n        // No mapping needed\r\n        if (isVisible) {\r\n            return VisibleIdentitySplitLine.INSTANCE;\r\n        }\r\n        return InvisibleIdentitySplitLine.INSTANCE;\r\n    }\r\n    else {\r\n        return new SplitLine(lineBreakData, isVisible);\r\n    }\r\n}\r\nvar IdentityCoordinatesConverter = /** @class */ (function () {\r\n    function IdentityCoordinatesConverter(lines) {\r\n        this._lines = lines;\r\n    }\r\n    IdentityCoordinatesConverter.prototype._validPosition = function (pos) {\r\n        return this._lines.model.validatePosition(pos);\r\n    };\r\n    IdentityCoordinatesConverter.prototype._validRange = function (range) {\r\n        return this._lines.model.validateRange(range);\r\n    };\r\n    // View -> Model conversion and related methods\r\n    IdentityCoordinatesConverter.prototype.convertViewPositionToModelPosition = function (viewPosition) {\r\n        return this._validPosition(viewPosition);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.convertViewRangeToModelRange = function (viewRange) {\r\n        return this._validRange(viewRange);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.validateViewPosition = function (_viewPosition, expectedModelPosition) {\r\n        return this._validPosition(expectedModelPosition);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.validateViewRange = function (_viewRange, expectedModelRange) {\r\n        return this._validRange(expectedModelRange);\r\n    };\r\n    // Model -> View conversion and related methods\r\n    IdentityCoordinatesConverter.prototype.convertModelPositionToViewPosition = function (modelPosition) {\r\n        return this._validPosition(modelPosition);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.convertModelRangeToViewRange = function (modelRange) {\r\n        return this._validRange(modelRange);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.modelPositionIsVisible = function (modelPosition) {\r\n        var lineCount = this._lines.model.getLineCount();\r\n        if (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\r\n            // invalid arguments\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    return IdentityCoordinatesConverter;\r\n}());\r\nexport { IdentityCoordinatesConverter };\r\nvar IdentityLinesCollection = /** @class */ (function () {\r\n    function IdentityLinesCollection(model) {\r\n        this.model = model;\r\n    }\r\n    IdentityLinesCollection.prototype.dispose = function () {\r\n    };\r\n    IdentityLinesCollection.prototype.createCoordinatesConverter = function () {\r\n        return new IdentityCoordinatesConverter(this);\r\n    };\r\n    IdentityLinesCollection.prototype.getHiddenAreas = function () {\r\n        return [];\r\n    };\r\n    IdentityLinesCollection.prototype.setHiddenAreas = function (_ranges) {\r\n        return false;\r\n    };\r\n    IdentityLinesCollection.prototype.setTabSize = function (_newTabSize) {\r\n        return false;\r\n    };\r\n    IdentityLinesCollection.prototype.setWrappingSettings = function (_fontInfo, _wrappingStrategy, _wrappingColumn, _wrappingIndent) {\r\n        return false;\r\n    };\r\n    IdentityLinesCollection.prototype.createLineBreaksComputer = function () {\r\n        var result = [];\r\n        return {\r\n            addRequest: function (lineText, previousLineBreakData) {\r\n                result.push(null);\r\n            },\r\n            finalize: function () {\r\n                return result;\r\n            }\r\n        };\r\n    };\r\n    IdentityLinesCollection.prototype.onModelFlushed = function () {\r\n    };\r\n    IdentityLinesCollection.prototype.onModelLinesDeleted = function (_versionId, fromLineNumber, toLineNumber) {\r\n        return new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.onModelLinesInserted = function (_versionId, fromLineNumber, toLineNumber, lineBreaks) {\r\n        return new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.onModelLineChanged = function (_versionId, lineNumber, lineBreakData) {\r\n        return [false, new viewEvents.ViewLinesChangedEvent(lineNumber, lineNumber), null, null];\r\n    };\r\n    IdentityLinesCollection.prototype.acceptVersionId = function (_versionId) {\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineCount = function () {\r\n        return this.model.getLineCount();\r\n    };\r\n    IdentityLinesCollection.prototype.getActiveIndentGuide = function (viewLineNumber, _minLineNumber, _maxLineNumber) {\r\n        return {\r\n            startLineNumber: viewLineNumber,\r\n            endLineNumber: viewLineNumber,\r\n            indent: 0\r\n        };\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLinesIndentGuides = function (viewStartLineNumber, viewEndLineNumber) {\r\n        var viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\r\n        var result = new Array(viewLineCount);\r\n        for (var i = 0; i < viewLineCount; i++) {\r\n            result[i] = 0;\r\n        }\r\n        return result;\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineContent = function (viewLineNumber) {\r\n        return this.model.getLineContent(viewLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineLength = function (viewLineNumber) {\r\n        return this.model.getLineLength(viewLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineMinColumn = function (viewLineNumber) {\r\n        return this.model.getLineMinColumn(viewLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineMaxColumn = function (viewLineNumber) {\r\n        return this.model.getLineMaxColumn(viewLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineData = function (viewLineNumber) {\r\n        var lineTokens = this.model.getLineTokens(viewLineNumber);\r\n        var lineContent = lineTokens.getLineContent();\r\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate());\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLinesData = function (viewStartLineNumber, viewEndLineNumber, needed) {\r\n        var lineCount = this.model.getLineCount();\r\n        viewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\r\n        viewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\r\n        var result = [];\r\n        for (var lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\r\n            var idx = lineNumber - viewStartLineNumber;\r\n            if (!needed[idx]) {\r\n                result[idx] = null;\r\n            }\r\n            result[idx] = this.getViewLineData(lineNumber);\r\n        }\r\n        return result;\r\n    };\r\n    IdentityLinesCollection.prototype.getAllOverviewRulerDecorations = function (ownerId, filterOutValidation, theme) {\r\n        var decorations = this.model.getOverviewRulerDecorations(ownerId, filterOutValidation);\r\n        var result = new OverviewRulerDecorations();\r\n        for (var _i = 0, decorations_2 = decorations; _i < decorations_2.length; _i++) {\r\n            var decoration = decorations_2[_i];\r\n            var opts = decoration.options.overviewRuler;\r\n            var lane = opts ? opts.position : 0;\r\n            if (lane === 0) {\r\n                continue;\r\n            }\r\n            var color = opts.getColor(theme);\r\n            var viewStartLineNumber = decoration.range.startLineNumber;\r\n            var viewEndLineNumber = decoration.range.endLineNumber;\r\n            result.accept(color, viewStartLineNumber, viewEndLineNumber, lane);\r\n        }\r\n        return result.result;\r\n    };\r\n    IdentityLinesCollection.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\r\n        return this.model.getDecorationsInRange(range, ownerId, filterOutValidation);\r\n    };\r\n    return IdentityLinesCollection;\r\n}());\r\nexport { IdentityLinesCollection };\r\nvar OverviewRulerDecorations = /** @class */ (function () {\r\n    function OverviewRulerDecorations() {\r\n        this.result = Object.create(null);\r\n    }\r\n    OverviewRulerDecorations.prototype.accept = function (color, startLineNumber, endLineNumber, lane) {\r\n        var prev = this.result[color];\r\n        if (prev) {\r\n            var prevLane = prev[prev.length - 3];\r\n            var prevEndLineNumber = prev[prev.length - 1];\r\n            if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\r\n                // merge into prev\r\n                if (endLineNumber > prevEndLineNumber) {\r\n                    prev[prev.length - 1] = endLineNumber;\r\n                }\r\n                return;\r\n            }\r\n            // push\r\n            prev.push(lane, startLineNumber, endLineNumber);\r\n        }\r\n        else {\r\n            this.result[color] = [lane, startLineNumber, endLineNumber];\r\n        }\r\n    };\r\n    return OverviewRulerDecorations;\r\n}());\r\n"]},"metadata":{},"sourceType":"module"}