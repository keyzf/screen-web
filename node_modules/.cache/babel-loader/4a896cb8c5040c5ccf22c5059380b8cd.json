{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { startsWith } from '../../../base/common/strings.js';\n\nvar CodeActionKind =\n/** @class */\nfunction () {\n  function CodeActionKind(value) {\n    this.value = value;\n  }\n\n  CodeActionKind.prototype.equals = function (other) {\n    return this.value === other.value;\n  };\n\n  CodeActionKind.prototype.contains = function (other) {\n    return this.equals(other) || this.value === '' || startsWith(other.value, this.value + CodeActionKind.sep);\n  };\n\n  CodeActionKind.prototype.intersects = function (other) {\n    return this.contains(other) || other.contains(this);\n  };\n\n  CodeActionKind.prototype.append = function (part) {\n    return new CodeActionKind(this.value + CodeActionKind.sep + part);\n  };\n\n  CodeActionKind.sep = '.';\n  CodeActionKind.None = new CodeActionKind('@@none@@'); // Special code action that contains nothing\n\n  CodeActionKind.Empty = new CodeActionKind('');\n  CodeActionKind.QuickFix = new CodeActionKind('quickfix');\n  CodeActionKind.Refactor = new CodeActionKind('refactor');\n  CodeActionKind.Source = new CodeActionKind('source');\n  CodeActionKind.SourceOrganizeImports = CodeActionKind.Source.append('organizeImports');\n  CodeActionKind.SourceFixAll = CodeActionKind.Source.append('fixAll');\n  return CodeActionKind;\n}();\n\nexport { CodeActionKind };\nexport function mayIncludeActionsOfKind(filter, providedKind) {\n  // A provided kind may be a subset or superset of our filtered kind.\n  if (filter.include && !filter.include.intersects(providedKind)) {\n    return false;\n  }\n\n  if (filter.excludes) {\n    if (filter.excludes.some(function (exclude) {\n      return excludesAction(providedKind, exclude, filter.include);\n    })) {\n      return false;\n    }\n  } // Don't return source actions unless they are explicitly requested\n\n\n  if (!filter.includeSourceActions && CodeActionKind.Source.contains(providedKind)) {\n    return false;\n  }\n\n  return true;\n}\nexport function filtersAction(filter, action) {\n  var actionKind = action.kind ? new CodeActionKind(action.kind) : undefined; // Filter out actions by kind\n\n  if (filter.include) {\n    if (!actionKind || !filter.include.contains(actionKind)) {\n      return false;\n    }\n  }\n\n  if (filter.excludes) {\n    if (actionKind && filter.excludes.some(function (exclude) {\n      return excludesAction(actionKind, exclude, filter.include);\n    })) {\n      return false;\n    }\n  } // Don't return source actions unless they are explicitly requested\n\n\n  if (!filter.includeSourceActions) {\n    if (actionKind && CodeActionKind.Source.contains(actionKind)) {\n      return false;\n    }\n  }\n\n  if (filter.onlyIncludePreferredActions) {\n    if (!action.isPreferred) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction excludesAction(providedKind, exclude, include) {\n  if (!exclude.contains(providedKind)) {\n    return false;\n  }\n\n  if (include && exclude.contains(include)) {\n    // The include is more specific, don't filter out\n    return false;\n  }\n\n  return true;\n}\n\nvar CodeActionCommandArgs =\n/** @class */\nfunction () {\n  function CodeActionCommandArgs(kind, apply, preferred) {\n    this.kind = kind;\n    this.apply = apply;\n    this.preferred = preferred;\n  }\n\n  CodeActionCommandArgs.fromUser = function (arg, defaults) {\n    if (!arg || typeof arg !== 'object') {\n      return new CodeActionCommandArgs(defaults.kind, defaults.apply, false);\n    }\n\n    return new CodeActionCommandArgs(CodeActionCommandArgs.getKindFromUser(arg, defaults.kind), CodeActionCommandArgs.getApplyFromUser(arg, defaults.apply), CodeActionCommandArgs.getPreferredUser(arg));\n  };\n\n  CodeActionCommandArgs.getApplyFromUser = function (arg, defaultAutoApply) {\n    switch (typeof arg.apply === 'string' ? arg.apply.toLowerCase() : '') {\n      case 'first':\n        return \"first\"\n        /* First */\n        ;\n\n      case 'never':\n        return \"never\"\n        /* Never */\n        ;\n\n      case 'ifsingle':\n        return \"ifSingle\"\n        /* IfSingle */\n        ;\n\n      default:\n        return defaultAutoApply;\n    }\n  };\n\n  CodeActionCommandArgs.getKindFromUser = function (arg, defaultKind) {\n    return typeof arg.kind === 'string' ? new CodeActionKind(arg.kind) : defaultKind;\n  };\n\n  CodeActionCommandArgs.getPreferredUser = function (arg) {\n    return typeof arg.preferred === 'boolean' ? arg.preferred : false;\n  };\n\n  return CodeActionCommandArgs;\n}();\n\nexport { CodeActionCommandArgs };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/types.js"],"names":["startsWith","CodeActionKind","value","prototype","equals","other","contains","sep","intersects","append","part","None","Empty","QuickFix","Refactor","Source","SourceOrganizeImports","SourceFixAll","mayIncludeActionsOfKind","filter","providedKind","include","excludes","some","exclude","excludesAction","includeSourceActions","filtersAction","action","actionKind","kind","undefined","onlyIncludePreferredActions","isPreferred","CodeActionCommandArgs","apply","preferred","fromUser","arg","defaults","getKindFromUser","getApplyFromUser","getPreferredUser","defaultAutoApply","toLowerCase","defaultKind"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { startsWith } from '../../../base/common/strings.js';\r\nvar CodeActionKind = /** @class */ (function () {\r\n    function CodeActionKind(value) {\r\n        this.value = value;\r\n    }\r\n    CodeActionKind.prototype.equals = function (other) {\r\n        return this.value === other.value;\r\n    };\r\n    CodeActionKind.prototype.contains = function (other) {\r\n        return this.equals(other) || this.value === '' || startsWith(other.value, this.value + CodeActionKind.sep);\r\n    };\r\n    CodeActionKind.prototype.intersects = function (other) {\r\n        return this.contains(other) || other.contains(this);\r\n    };\r\n    CodeActionKind.prototype.append = function (part) {\r\n        return new CodeActionKind(this.value + CodeActionKind.sep + part);\r\n    };\r\n    CodeActionKind.sep = '.';\r\n    CodeActionKind.None = new CodeActionKind('@@none@@'); // Special code action that contains nothing\r\n    CodeActionKind.Empty = new CodeActionKind('');\r\n    CodeActionKind.QuickFix = new CodeActionKind('quickfix');\r\n    CodeActionKind.Refactor = new CodeActionKind('refactor');\r\n    CodeActionKind.Source = new CodeActionKind('source');\r\n    CodeActionKind.SourceOrganizeImports = CodeActionKind.Source.append('organizeImports');\r\n    CodeActionKind.SourceFixAll = CodeActionKind.Source.append('fixAll');\r\n    return CodeActionKind;\r\n}());\r\nexport { CodeActionKind };\r\nexport function mayIncludeActionsOfKind(filter, providedKind) {\r\n    // A provided kind may be a subset or superset of our filtered kind.\r\n    if (filter.include && !filter.include.intersects(providedKind)) {\r\n        return false;\r\n    }\r\n    if (filter.excludes) {\r\n        if (filter.excludes.some(function (exclude) { return excludesAction(providedKind, exclude, filter.include); })) {\r\n            return false;\r\n        }\r\n    }\r\n    // Don't return source actions unless they are explicitly requested\r\n    if (!filter.includeSourceActions && CodeActionKind.Source.contains(providedKind)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexport function filtersAction(filter, action) {\r\n    var actionKind = action.kind ? new CodeActionKind(action.kind) : undefined;\r\n    // Filter out actions by kind\r\n    if (filter.include) {\r\n        if (!actionKind || !filter.include.contains(actionKind)) {\r\n            return false;\r\n        }\r\n    }\r\n    if (filter.excludes) {\r\n        if (actionKind && filter.excludes.some(function (exclude) { return excludesAction(actionKind, exclude, filter.include); })) {\r\n            return false;\r\n        }\r\n    }\r\n    // Don't return source actions unless they are explicitly requested\r\n    if (!filter.includeSourceActions) {\r\n        if (actionKind && CodeActionKind.Source.contains(actionKind)) {\r\n            return false;\r\n        }\r\n    }\r\n    if (filter.onlyIncludePreferredActions) {\r\n        if (!action.isPreferred) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction excludesAction(providedKind, exclude, include) {\r\n    if (!exclude.contains(providedKind)) {\r\n        return false;\r\n    }\r\n    if (include && exclude.contains(include)) {\r\n        // The include is more specific, don't filter out\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nvar CodeActionCommandArgs = /** @class */ (function () {\r\n    function CodeActionCommandArgs(kind, apply, preferred) {\r\n        this.kind = kind;\r\n        this.apply = apply;\r\n        this.preferred = preferred;\r\n    }\r\n    CodeActionCommandArgs.fromUser = function (arg, defaults) {\r\n        if (!arg || typeof arg !== 'object') {\r\n            return new CodeActionCommandArgs(defaults.kind, defaults.apply, false);\r\n        }\r\n        return new CodeActionCommandArgs(CodeActionCommandArgs.getKindFromUser(arg, defaults.kind), CodeActionCommandArgs.getApplyFromUser(arg, defaults.apply), CodeActionCommandArgs.getPreferredUser(arg));\r\n    };\r\n    CodeActionCommandArgs.getApplyFromUser = function (arg, defaultAutoApply) {\r\n        switch (typeof arg.apply === 'string' ? arg.apply.toLowerCase() : '') {\r\n            case 'first': return \"first\" /* First */;\r\n            case 'never': return \"never\" /* Never */;\r\n            case 'ifsingle': return \"ifSingle\" /* IfSingle */;\r\n            default: return defaultAutoApply;\r\n        }\r\n    };\r\n    CodeActionCommandArgs.getKindFromUser = function (arg, defaultKind) {\r\n        return typeof arg.kind === 'string'\r\n            ? new CodeActionKind(arg.kind)\r\n            : defaultKind;\r\n    };\r\n    CodeActionCommandArgs.getPreferredUser = function (arg) {\r\n        return typeof arg.preferred === 'boolean'\r\n            ? arg.preferred\r\n            : false;\r\n    };\r\n    return CodeActionCommandArgs;\r\n}());\r\nexport { CodeActionCommandArgs };\r\n"]},"metadata":{},"sourceType":"module"}