{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\n/**\r\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\r\n */\n\nvar Range =\n/** @class */\nfunction () {\n  function Range(startLineNumber, startColumn, endLineNumber, endColumn) {\n    if (startLineNumber > endLineNumber || startLineNumber === endLineNumber && startColumn > endColumn) {\n      this.startLineNumber = endLineNumber;\n      this.startColumn = endColumn;\n      this.endLineNumber = startLineNumber;\n      this.endColumn = startColumn;\n    } else {\n      this.startLineNumber = startLineNumber;\n      this.startColumn = startColumn;\n      this.endLineNumber = endLineNumber;\n      this.endColumn = endColumn;\n    }\n  }\n  /**\r\n   * Test if this range is empty.\r\n   */\n\n\n  Range.prototype.isEmpty = function () {\n    return Range.isEmpty(this);\n  };\n  /**\r\n   * Test if `range` is empty.\r\n   */\n\n\n  Range.isEmpty = function (range) {\n    return range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn;\n  };\n  /**\r\n   * Test if position is in this range. If the position is at the edges, will return true.\r\n   */\n\n\n  Range.prototype.containsPosition = function (position) {\n    return Range.containsPosition(this, position);\n  };\n  /**\r\n   * Test if `position` is in `range`. If the position is at the edges, will return true.\r\n   */\n\n\n  Range.containsPosition = function (range, position) {\n    if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n      return false;\n    }\n\n    if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\n      return false;\n    }\n\n    if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Test if range is in this range. If the range is equal to this range, will return true.\r\n   */\n\n\n  Range.prototype.containsRange = function (range) {\n    return Range.containsRange(this, range);\n  };\n  /**\r\n   * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\r\n   */\n\n\n  Range.containsRange = function (range, otherRange) {\n    if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n      return false;\n    }\n\n    if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n      return false;\n    }\n\n    if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\n      return false;\n    }\n\n    if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\r\n   */\n\n\n  Range.prototype.strictContainsRange = function (range) {\n    return Range.strictContainsRange(this, range);\n  };\n  /**\r\n   * Test if `otherRange` is strinctly in `range` (must start after, and end before). If the ranges are equal, will return false.\r\n   */\n\n\n  Range.strictContainsRange = function (range, otherRange) {\n    if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n      return false;\n    }\n\n    if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n      return false;\n    }\n\n    if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\n      return false;\n    }\n\n    if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * A reunion of the two ranges.\r\n   * The smallest position will be used as the start point, and the largest one as the end point.\r\n   */\n\n\n  Range.prototype.plusRange = function (range) {\n    return Range.plusRange(this, range);\n  };\n  /**\r\n   * A reunion of the two ranges.\r\n   * The smallest position will be used as the start point, and the largest one as the end point.\r\n   */\n\n\n  Range.plusRange = function (a, b) {\n    var startLineNumber;\n    var startColumn;\n    var endLineNumber;\n    var endColumn;\n\n    if (b.startLineNumber < a.startLineNumber) {\n      startLineNumber = b.startLineNumber;\n      startColumn = b.startColumn;\n    } else if (b.startLineNumber === a.startLineNumber) {\n      startLineNumber = b.startLineNumber;\n      startColumn = Math.min(b.startColumn, a.startColumn);\n    } else {\n      startLineNumber = a.startLineNumber;\n      startColumn = a.startColumn;\n    }\n\n    if (b.endLineNumber > a.endLineNumber) {\n      endLineNumber = b.endLineNumber;\n      endColumn = b.endColumn;\n    } else if (b.endLineNumber === a.endLineNumber) {\n      endLineNumber = b.endLineNumber;\n      endColumn = Math.max(b.endColumn, a.endColumn);\n    } else {\n      endLineNumber = a.endLineNumber;\n      endColumn = a.endColumn;\n    }\n\n    return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n  };\n  /**\r\n   * A intersection of the two ranges.\r\n   */\n\n\n  Range.prototype.intersectRanges = function (range) {\n    return Range.intersectRanges(this, range);\n  };\n  /**\r\n   * A intersection of the two ranges.\r\n   */\n\n\n  Range.intersectRanges = function (a, b) {\n    var resultStartLineNumber = a.startLineNumber;\n    var resultStartColumn = a.startColumn;\n    var resultEndLineNumber = a.endLineNumber;\n    var resultEndColumn = a.endColumn;\n    var otherStartLineNumber = b.startLineNumber;\n    var otherStartColumn = b.startColumn;\n    var otherEndLineNumber = b.endLineNumber;\n    var otherEndColumn = b.endColumn;\n\n    if (resultStartLineNumber < otherStartLineNumber) {\n      resultStartLineNumber = otherStartLineNumber;\n      resultStartColumn = otherStartColumn;\n    } else if (resultStartLineNumber === otherStartLineNumber) {\n      resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\n    }\n\n    if (resultEndLineNumber > otherEndLineNumber) {\n      resultEndLineNumber = otherEndLineNumber;\n      resultEndColumn = otherEndColumn;\n    } else if (resultEndLineNumber === otherEndLineNumber) {\n      resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\n    } // Check if selection is now empty\n\n\n    if (resultStartLineNumber > resultEndLineNumber) {\n      return null;\n    }\n\n    if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\n      return null;\n    }\n\n    return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\n  };\n  /**\r\n   * Test if this range equals other.\r\n   */\n\n\n  Range.prototype.equalsRange = function (other) {\n    return Range.equalsRange(this, other);\n  };\n  /**\r\n   * Test if range `a` equals `b`.\r\n   */\n\n\n  Range.equalsRange = function (a, b) {\n    return !!a && !!b && a.startLineNumber === b.startLineNumber && a.startColumn === b.startColumn && a.endLineNumber === b.endLineNumber && a.endColumn === b.endColumn;\n  };\n  /**\r\n   * Return the end position (which will be after or equal to the start position)\r\n   */\n\n\n  Range.prototype.getEndPosition = function () {\n    return new Position(this.endLineNumber, this.endColumn);\n  };\n  /**\r\n   * Return the start position (which will be before or equal to the end position)\r\n   */\n\n\n  Range.prototype.getStartPosition = function () {\n    return new Position(this.startLineNumber, this.startColumn);\n  };\n  /**\r\n   * Transform to a user presentable string representation.\r\n   */\n\n\n  Range.prototype.toString = function () {\n    return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\n  };\n  /**\r\n   * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\r\n   */\n\n\n  Range.prototype.setEndPosition = function (endLineNumber, endColumn) {\n    return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n  };\n  /**\r\n   * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\r\n   */\n\n\n  Range.prototype.setStartPosition = function (startLineNumber, startColumn) {\n    return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n  };\n  /**\r\n   * Create a new empty range using this range's start position.\r\n   */\n\n\n  Range.prototype.collapseToStart = function () {\n    return Range.collapseToStart(this);\n  };\n  /**\r\n   * Create a new empty range using this range's start position.\r\n   */\n\n\n  Range.collapseToStart = function (range) {\n    return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n  }; // ---\n\n\n  Range.fromPositions = function (start, end) {\n    if (end === void 0) {\n      end = start;\n    }\n\n    return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n  };\n\n  Range.lift = function (range) {\n    if (!range) {\n      return null;\n    }\n\n    return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n  };\n  /**\r\n   * Test if `obj` is an `IRange`.\r\n   */\n\n\n  Range.isIRange = function (obj) {\n    return obj && typeof obj.startLineNumber === 'number' && typeof obj.startColumn === 'number' && typeof obj.endLineNumber === 'number' && typeof obj.endColumn === 'number';\n  };\n  /**\r\n   * Test if the two ranges are touching in any way.\r\n   */\n\n\n  Range.areIntersectingOrTouching = function (a, b) {\n    // Check if `a` is before `b`\n    if (a.endLineNumber < b.startLineNumber || a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn) {\n      return false;\n    } // Check if `b` is before `a`\n\n\n    if (b.endLineNumber < a.startLineNumber || b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn) {\n      return false;\n    } // These ranges must intersect\n\n\n    return true;\n  };\n  /**\r\n   * Test if the two ranges are intersecting. If the ranges are touching it returns true.\r\n   */\n\n\n  Range.areIntersecting = function (a, b) {\n    // Check if `a` is before `b`\n    if (a.endLineNumber < b.startLineNumber || a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn) {\n      return false;\n    } // Check if `b` is before `a`\n\n\n    if (b.endLineNumber < a.startLineNumber || b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn) {\n      return false;\n    } // These ranges must intersect\n\n\n    return true;\n  };\n  /**\r\n   * A function that compares ranges, useful for sorting ranges\r\n   * It will first compare ranges on the startPosition and then on the endPosition\r\n   */\n\n\n  Range.compareRangesUsingStarts = function (a, b) {\n    if (a && b) {\n      var aStartLineNumber = a.startLineNumber | 0;\n      var bStartLineNumber = b.startLineNumber | 0;\n\n      if (aStartLineNumber === bStartLineNumber) {\n        var aStartColumn = a.startColumn | 0;\n        var bStartColumn = b.startColumn | 0;\n\n        if (aStartColumn === bStartColumn) {\n          var aEndLineNumber = a.endLineNumber | 0;\n          var bEndLineNumber = b.endLineNumber | 0;\n\n          if (aEndLineNumber === bEndLineNumber) {\n            var aEndColumn = a.endColumn | 0;\n            var bEndColumn = b.endColumn | 0;\n            return aEndColumn - bEndColumn;\n          }\n\n          return aEndLineNumber - bEndLineNumber;\n        }\n\n        return aStartColumn - bStartColumn;\n      }\n\n      return aStartLineNumber - bStartLineNumber;\n    }\n\n    var aExists = a ? 1 : 0;\n    var bExists = b ? 1 : 0;\n    return aExists - bExists;\n  };\n  /**\r\n   * A function that compares ranges, useful for sorting ranges\r\n   * It will first compare ranges on the endPosition and then on the startPosition\r\n   */\n\n\n  Range.compareRangesUsingEnds = function (a, b) {\n    if (a.endLineNumber === b.endLineNumber) {\n      if (a.endColumn === b.endColumn) {\n        if (a.startLineNumber === b.startLineNumber) {\n          return a.startColumn - b.startColumn;\n        }\n\n        return a.startLineNumber - b.startLineNumber;\n      }\n\n      return a.endColumn - b.endColumn;\n    }\n\n    return a.endLineNumber - b.endLineNumber;\n  };\n  /**\r\n   * Test if the range spans multiple lines.\r\n   */\n\n\n  Range.spansMultipleLines = function (range) {\n    return range.endLineNumber > range.startLineNumber;\n  };\n\n  return Range;\n}();\n\nexport { Range };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/core/range.js"],"names":["Position","Range","startLineNumber","startColumn","endLineNumber","endColumn","prototype","isEmpty","range","containsPosition","position","lineNumber","column","containsRange","otherRange","strictContainsRange","plusRange","a","b","Math","min","max","intersectRanges","resultStartLineNumber","resultStartColumn","resultEndLineNumber","resultEndColumn","otherStartLineNumber","otherStartColumn","otherEndLineNumber","otherEndColumn","equalsRange","other","getEndPosition","getStartPosition","toString","setEndPosition","setStartPosition","collapseToStart","fromPositions","start","end","lift","isIRange","obj","areIntersectingOrTouching","areIntersecting","compareRangesUsingStarts","aStartLineNumber","bStartLineNumber","aStartColumn","bStartColumn","aEndLineNumber","bEndLineNumber","aEndColumn","bEndColumn","aExists","bExists","compareRangesUsingEnds","spansMultipleLines"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Position } from './position.js';\r\n/**\r\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\r\n */\r\nvar Range = /** @class */ (function () {\r\n    function Range(startLineNumber, startColumn, endLineNumber, endColumn) {\r\n        if ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\r\n            this.startLineNumber = endLineNumber;\r\n            this.startColumn = endColumn;\r\n            this.endLineNumber = startLineNumber;\r\n            this.endColumn = startColumn;\r\n        }\r\n        else {\r\n            this.startLineNumber = startLineNumber;\r\n            this.startColumn = startColumn;\r\n            this.endLineNumber = endLineNumber;\r\n            this.endColumn = endColumn;\r\n        }\r\n    }\r\n    /**\r\n     * Test if this range is empty.\r\n     */\r\n    Range.prototype.isEmpty = function () {\r\n        return Range.isEmpty(this);\r\n    };\r\n    /**\r\n     * Test if `range` is empty.\r\n     */\r\n    Range.isEmpty = function (range) {\r\n        return (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\r\n    };\r\n    /**\r\n     * Test if position is in this range. If the position is at the edges, will return true.\r\n     */\r\n    Range.prototype.containsPosition = function (position) {\r\n        return Range.containsPosition(this, position);\r\n    };\r\n    /**\r\n     * Test if `position` is in `range`. If the position is at the edges, will return true.\r\n     */\r\n    Range.containsPosition = function (range, position) {\r\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\r\n            return false;\r\n        }\r\n        if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\r\n            return false;\r\n        }\r\n        if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Test if range is in this range. If the range is equal to this range, will return true.\r\n     */\r\n    Range.prototype.containsRange = function (range) {\r\n        return Range.containsRange(this, range);\r\n    };\r\n    /**\r\n     * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\r\n     */\r\n    Range.containsRange = function (range, otherRange) {\r\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\r\n            return false;\r\n        }\r\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\r\n     */\r\n    Range.prototype.strictContainsRange = function (range) {\r\n        return Range.strictContainsRange(this, range);\r\n    };\r\n    /**\r\n     * Test if `otherRange` is strinctly in `range` (must start after, and end before). If the ranges are equal, will return false.\r\n     */\r\n    Range.strictContainsRange = function (range, otherRange) {\r\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\r\n            return false;\r\n        }\r\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * A reunion of the two ranges.\r\n     * The smallest position will be used as the start point, and the largest one as the end point.\r\n     */\r\n    Range.prototype.plusRange = function (range) {\r\n        return Range.plusRange(this, range);\r\n    };\r\n    /**\r\n     * A reunion of the two ranges.\r\n     * The smallest position will be used as the start point, and the largest one as the end point.\r\n     */\r\n    Range.plusRange = function (a, b) {\r\n        var startLineNumber;\r\n        var startColumn;\r\n        var endLineNumber;\r\n        var endColumn;\r\n        if (b.startLineNumber < a.startLineNumber) {\r\n            startLineNumber = b.startLineNumber;\r\n            startColumn = b.startColumn;\r\n        }\r\n        else if (b.startLineNumber === a.startLineNumber) {\r\n            startLineNumber = b.startLineNumber;\r\n            startColumn = Math.min(b.startColumn, a.startColumn);\r\n        }\r\n        else {\r\n            startLineNumber = a.startLineNumber;\r\n            startColumn = a.startColumn;\r\n        }\r\n        if (b.endLineNumber > a.endLineNumber) {\r\n            endLineNumber = b.endLineNumber;\r\n            endColumn = b.endColumn;\r\n        }\r\n        else if (b.endLineNumber === a.endLineNumber) {\r\n            endLineNumber = b.endLineNumber;\r\n            endColumn = Math.max(b.endColumn, a.endColumn);\r\n        }\r\n        else {\r\n            endLineNumber = a.endLineNumber;\r\n            endColumn = a.endColumn;\r\n        }\r\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n    };\r\n    /**\r\n     * A intersection of the two ranges.\r\n     */\r\n    Range.prototype.intersectRanges = function (range) {\r\n        return Range.intersectRanges(this, range);\r\n    };\r\n    /**\r\n     * A intersection of the two ranges.\r\n     */\r\n    Range.intersectRanges = function (a, b) {\r\n        var resultStartLineNumber = a.startLineNumber;\r\n        var resultStartColumn = a.startColumn;\r\n        var resultEndLineNumber = a.endLineNumber;\r\n        var resultEndColumn = a.endColumn;\r\n        var otherStartLineNumber = b.startLineNumber;\r\n        var otherStartColumn = b.startColumn;\r\n        var otherEndLineNumber = b.endLineNumber;\r\n        var otherEndColumn = b.endColumn;\r\n        if (resultStartLineNumber < otherStartLineNumber) {\r\n            resultStartLineNumber = otherStartLineNumber;\r\n            resultStartColumn = otherStartColumn;\r\n        }\r\n        else if (resultStartLineNumber === otherStartLineNumber) {\r\n            resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\r\n        }\r\n        if (resultEndLineNumber > otherEndLineNumber) {\r\n            resultEndLineNumber = otherEndLineNumber;\r\n            resultEndColumn = otherEndColumn;\r\n        }\r\n        else if (resultEndLineNumber === otherEndLineNumber) {\r\n            resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\r\n        }\r\n        // Check if selection is now empty\r\n        if (resultStartLineNumber > resultEndLineNumber) {\r\n            return null;\r\n        }\r\n        if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\r\n            return null;\r\n        }\r\n        return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\r\n    };\r\n    /**\r\n     * Test if this range equals other.\r\n     */\r\n    Range.prototype.equalsRange = function (other) {\r\n        return Range.equalsRange(this, other);\r\n    };\r\n    /**\r\n     * Test if range `a` equals `b`.\r\n     */\r\n    Range.equalsRange = function (a, b) {\r\n        return (!!a &&\r\n            !!b &&\r\n            a.startLineNumber === b.startLineNumber &&\r\n            a.startColumn === b.startColumn &&\r\n            a.endLineNumber === b.endLineNumber &&\r\n            a.endColumn === b.endColumn);\r\n    };\r\n    /**\r\n     * Return the end position (which will be after or equal to the start position)\r\n     */\r\n    Range.prototype.getEndPosition = function () {\r\n        return new Position(this.endLineNumber, this.endColumn);\r\n    };\r\n    /**\r\n     * Return the start position (which will be before or equal to the end position)\r\n     */\r\n    Range.prototype.getStartPosition = function () {\r\n        return new Position(this.startLineNumber, this.startColumn);\r\n    };\r\n    /**\r\n     * Transform to a user presentable string representation.\r\n     */\r\n    Range.prototype.toString = function () {\r\n        return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\r\n    };\r\n    /**\r\n     * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\r\n     */\r\n    Range.prototype.setEndPosition = function (endLineNumber, endColumn) {\r\n        return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\r\n    };\r\n    /**\r\n     * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\r\n     */\r\n    Range.prototype.setStartPosition = function (startLineNumber, startColumn) {\r\n        return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\r\n    };\r\n    /**\r\n     * Create a new empty range using this range's start position.\r\n     */\r\n    Range.prototype.collapseToStart = function () {\r\n        return Range.collapseToStart(this);\r\n    };\r\n    /**\r\n     * Create a new empty range using this range's start position.\r\n     */\r\n    Range.collapseToStart = function (range) {\r\n        return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\r\n    };\r\n    // ---\r\n    Range.fromPositions = function (start, end) {\r\n        if (end === void 0) { end = start; }\r\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n    };\r\n    Range.lift = function (range) {\r\n        if (!range) {\r\n            return null;\r\n        }\r\n        return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n    };\r\n    /**\r\n     * Test if `obj` is an `IRange`.\r\n     */\r\n    Range.isIRange = function (obj) {\r\n        return (obj\r\n            && (typeof obj.startLineNumber === 'number')\r\n            && (typeof obj.startColumn === 'number')\r\n            && (typeof obj.endLineNumber === 'number')\r\n            && (typeof obj.endColumn === 'number'));\r\n    };\r\n    /**\r\n     * Test if the two ranges are touching in any way.\r\n     */\r\n    Range.areIntersectingOrTouching = function (a, b) {\r\n        // Check if `a` is before `b`\r\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\r\n            return false;\r\n        }\r\n        // Check if `b` is before `a`\r\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\r\n            return false;\r\n        }\r\n        // These ranges must intersect\r\n        return true;\r\n    };\r\n    /**\r\n     * Test if the two ranges are intersecting. If the ranges are touching it returns true.\r\n     */\r\n    Range.areIntersecting = function (a, b) {\r\n        // Check if `a` is before `b`\r\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn)) {\r\n            return false;\r\n        }\r\n        // Check if `b` is before `a`\r\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn)) {\r\n            return false;\r\n        }\r\n        // These ranges must intersect\r\n        return true;\r\n    };\r\n    /**\r\n     * A function that compares ranges, useful for sorting ranges\r\n     * It will first compare ranges on the startPosition and then on the endPosition\r\n     */\r\n    Range.compareRangesUsingStarts = function (a, b) {\r\n        if (a && b) {\r\n            var aStartLineNumber = a.startLineNumber | 0;\r\n            var bStartLineNumber = b.startLineNumber | 0;\r\n            if (aStartLineNumber === bStartLineNumber) {\r\n                var aStartColumn = a.startColumn | 0;\r\n                var bStartColumn = b.startColumn | 0;\r\n                if (aStartColumn === bStartColumn) {\r\n                    var aEndLineNumber = a.endLineNumber | 0;\r\n                    var bEndLineNumber = b.endLineNumber | 0;\r\n                    if (aEndLineNumber === bEndLineNumber) {\r\n                        var aEndColumn = a.endColumn | 0;\r\n                        var bEndColumn = b.endColumn | 0;\r\n                        return aEndColumn - bEndColumn;\r\n                    }\r\n                    return aEndLineNumber - bEndLineNumber;\r\n                }\r\n                return aStartColumn - bStartColumn;\r\n            }\r\n            return aStartLineNumber - bStartLineNumber;\r\n        }\r\n        var aExists = (a ? 1 : 0);\r\n        var bExists = (b ? 1 : 0);\r\n        return aExists - bExists;\r\n    };\r\n    /**\r\n     * A function that compares ranges, useful for sorting ranges\r\n     * It will first compare ranges on the endPosition and then on the startPosition\r\n     */\r\n    Range.compareRangesUsingEnds = function (a, b) {\r\n        if (a.endLineNumber === b.endLineNumber) {\r\n            if (a.endColumn === b.endColumn) {\r\n                if (a.startLineNumber === b.startLineNumber) {\r\n                    return a.startColumn - b.startColumn;\r\n                }\r\n                return a.startLineNumber - b.startLineNumber;\r\n            }\r\n            return a.endColumn - b.endColumn;\r\n        }\r\n        return a.endLineNumber - b.endLineNumber;\r\n    };\r\n    /**\r\n     * Test if the range spans multiple lines.\r\n     */\r\n    Range.spansMultipleLines = function (range) {\r\n        return range.endLineNumber > range.startLineNumber;\r\n    };\r\n    return Range;\r\n}());\r\nexport { Range };\r\n"]},"metadata":{},"sourceType":"module"}