{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as nls from '../../../nls.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { BlockCommentCommand } from './blockCommentCommand.js';\nimport { LineCommentCommand } from './lineCommentCommand.js';\n\nvar CommentLineAction =\n/** @class */\nfunction (_super) {\n  __extends(CommentLineAction, _super);\n\n  function CommentLineAction(type, opts) {\n    var _this = _super.call(this, opts) || this;\n\n    _this._type = type;\n    return _this;\n  }\n\n  CommentLineAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var model = editor.getModel();\n    var commands = [];\n    var selections = editor.getSelections();\n    var modelOptions = model.getOptions();\n    var commentsOptions = editor.getOption(13\n    /* comments */\n    );\n\n    for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n      var selection = selections_1[_i];\n      commands.push(new LineCommentCommand(selection, modelOptions.tabSize, this._type, commentsOptions.insertSpace));\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  };\n\n  return CommentLineAction;\n}(EditorAction);\n\nvar ToggleCommentLineAction =\n/** @class */\nfunction (_super) {\n  __extends(ToggleCommentLineAction, _super);\n\n  function ToggleCommentLineAction() {\n    return _super.call(this, 0\n    /* Toggle */\n    , {\n      id: 'editor.action.commentLine',\n      label: nls.localize('comment.line', \"Toggle Line Comment\"),\n      alias: 'Toggle Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 85\n        /* US_SLASH */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        menuId: 17\n        /* MenubarEditMenu */\n        ,\n        group: '5_insert',\n        title: nls.localize({\n          key: 'miToggleLineComment',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Toggle Line Comment\"),\n        order: 1\n      }\n    }) || this;\n  }\n\n  return ToggleCommentLineAction;\n}(CommentLineAction);\n\nvar AddLineCommentAction =\n/** @class */\nfunction (_super) {\n  __extends(AddLineCommentAction, _super);\n\n  function AddLineCommentAction() {\n    return _super.call(this, 1\n    /* ForceAdd */\n    , {\n      id: 'editor.action.addCommentLine',\n      label: nls.localize('comment.line.add', \"Add Line Comment\"),\n      alias: 'Add Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KEY_K */\n        , 2048\n        /* CtrlCmd */\n        | 33\n        /* KEY_C */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  return AddLineCommentAction;\n}(CommentLineAction);\n\nvar RemoveLineCommentAction =\n/** @class */\nfunction (_super) {\n  __extends(RemoveLineCommentAction, _super);\n\n  function RemoveLineCommentAction() {\n    return _super.call(this, 2\n    /* ForceRemove */\n    , {\n      id: 'editor.action.removeCommentLine',\n      label: nls.localize('comment.line.remove', \"Remove Line Comment\"),\n      alias: 'Remove Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KEY_K */\n        , 2048\n        /* CtrlCmd */\n        | 51\n        /* KEY_U */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  return RemoveLineCommentAction;\n}(CommentLineAction);\n\nvar BlockCommentAction =\n/** @class */\nfunction (_super) {\n  __extends(BlockCommentAction, _super);\n\n  function BlockCommentAction() {\n    return _super.call(this, {\n      id: 'editor.action.blockComment',\n      label: nls.localize('comment.block', \"Toggle Block Comment\"),\n      alias: 'Toggle Block Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024\n        /* Shift */\n        | 512\n        /* Alt */\n        | 31\n        /* KEY_A */\n        ,\n        linux: {\n          primary: 2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 31\n          /* KEY_A */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        menuId: 17\n        /* MenubarEditMenu */\n        ,\n        group: '5_insert',\n        title: nls.localize({\n          key: 'miToggleBlockComment',\n          comment: ['&& denotes a mnemonic']\n        }, \"Toggle &&Block Comment\"),\n        order: 2\n      }\n    }) || this;\n  }\n\n  BlockCommentAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var commentsOptions = editor.getOption(13\n    /* comments */\n    );\n    var commands = [];\n    var selections = editor.getSelections();\n\n    for (var _i = 0, selections_2 = selections; _i < selections_2.length; _i++) {\n      var selection = selections_2[_i];\n      commands.push(new BlockCommentCommand(selection, commentsOptions.insertSpace));\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  };\n\n  return BlockCommentAction;\n}(EditorAction);\n\nregisterEditorAction(ToggleCommentLineAction);\nregisterEditorAction(AddLineCommentAction);\nregisterEditorAction(RemoveLineCommentAction);\nregisterEditorAction(BlockCommentAction);","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/contrib/comment/comment.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","nls","KeyChord","EditorAction","registerEditorAction","EditorContextKeys","BlockCommentCommand","LineCommentCommand","CommentLineAction","_super","type","opts","_this","call","_type","run","accessor","editor","hasModel","model","getModel","commands","selections","getSelections","modelOptions","getOptions","commentsOptions","getOption","_i","selections_1","length","selection","push","tabSize","insertSpace","pushUndoStop","executeCommands","id","ToggleCommentLineAction","label","localize","alias","precondition","writable","kbOpts","kbExpr","editorTextFocus","primary","weight","menuOpts","menuId","group","title","key","comment","order","AddLineCommentAction","RemoveLineCommentAction","BlockCommentAction","linux","selections_2"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as nls from '../../../nls.js';\r\nimport { KeyChord } from '../../../base/common/keyCodes.js';\r\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { BlockCommentCommand } from './blockCommentCommand.js';\r\nimport { LineCommentCommand } from './lineCommentCommand.js';\r\nvar CommentLineAction = /** @class */ (function (_super) {\r\n    __extends(CommentLineAction, _super);\r\n    function CommentLineAction(type, opts) {\r\n        var _this = _super.call(this, opts) || this;\r\n        _this._type = type;\r\n        return _this;\r\n    }\r\n    CommentLineAction.prototype.run = function (accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        var model = editor.getModel();\r\n        var commands = [];\r\n        var selections = editor.getSelections();\r\n        var modelOptions = model.getOptions();\r\n        var commentsOptions = editor.getOption(13 /* comments */);\r\n        for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\r\n            var selection = selections_1[_i];\r\n            commands.push(new LineCommentCommand(selection, modelOptions.tabSize, this._type, commentsOptions.insertSpace));\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    };\r\n    return CommentLineAction;\r\n}(EditorAction));\r\nvar ToggleCommentLineAction = /** @class */ (function (_super) {\r\n    __extends(ToggleCommentLineAction, _super);\r\n    function ToggleCommentLineAction() {\r\n        return _super.call(this, 0 /* Toggle */, {\r\n            id: 'editor.action.commentLine',\r\n            label: nls.localize('comment.line', \"Toggle Line Comment\"),\r\n            alias: 'Toggle Line Comment',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 2048 /* CtrlCmd */ | 85 /* US_SLASH */,\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: 17 /* MenubarEditMenu */,\r\n                group: '5_insert',\r\n                title: nls.localize({ key: 'miToggleLineComment', comment: ['&& denotes a mnemonic'] }, \"&&Toggle Line Comment\"),\r\n                order: 1\r\n            }\r\n        }) || this;\r\n    }\r\n    return ToggleCommentLineAction;\r\n}(CommentLineAction));\r\nvar AddLineCommentAction = /** @class */ (function (_super) {\r\n    __extends(AddLineCommentAction, _super);\r\n    function AddLineCommentAction() {\r\n        return _super.call(this, 1 /* ForceAdd */, {\r\n            id: 'editor.action.addCommentLine',\r\n            label: nls.localize('comment.line.add', \"Add Line Comment\"),\r\n            alias: 'Add Line Comment',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 33 /* KEY_C */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        }) || this;\r\n    }\r\n    return AddLineCommentAction;\r\n}(CommentLineAction));\r\nvar RemoveLineCommentAction = /** @class */ (function (_super) {\r\n    __extends(RemoveLineCommentAction, _super);\r\n    function RemoveLineCommentAction() {\r\n        return _super.call(this, 2 /* ForceRemove */, {\r\n            id: 'editor.action.removeCommentLine',\r\n            label: nls.localize('comment.line.remove', \"Remove Line Comment\"),\r\n            alias: 'Remove Line Comment',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 51 /* KEY_U */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        }) || this;\r\n    }\r\n    return RemoveLineCommentAction;\r\n}(CommentLineAction));\r\nvar BlockCommentAction = /** @class */ (function (_super) {\r\n    __extends(BlockCommentAction, _super);\r\n    function BlockCommentAction() {\r\n        return _super.call(this, {\r\n            id: 'editor.action.blockComment',\r\n            label: nls.localize('comment.block', \"Toggle Block Comment\"),\r\n            alias: 'Toggle Block Comment',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 1024 /* Shift */ | 512 /* Alt */ | 31 /* KEY_A */,\r\n                linux: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 31 /* KEY_A */ },\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: 17 /* MenubarEditMenu */,\r\n                group: '5_insert',\r\n                title: nls.localize({ key: 'miToggleBlockComment', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Block Comment\"),\r\n                order: 2\r\n            }\r\n        }) || this;\r\n    }\r\n    BlockCommentAction.prototype.run = function (accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        var commentsOptions = editor.getOption(13 /* comments */);\r\n        var commands = [];\r\n        var selections = editor.getSelections();\r\n        for (var _i = 0, selections_2 = selections; _i < selections_2.length; _i++) {\r\n            var selection = selections_2[_i];\r\n            commands.push(new BlockCommentCommand(selection, commentsOptions.insertSpace));\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    };\r\n    return BlockCommentAction;\r\n}(EditorAction));\r\nregisterEditorAction(ToggleCommentLineAction);\r\nregisterEditorAction(AddLineCommentAction);\r\nregisterEditorAction(RemoveLineCommentAction);\r\nregisterEditorAction(BlockCommentAction);\r\n"]},"metadata":{},"sourceType":"module"}