{"ast":null,"code":"var memoizeId = 0;\nexport function createMemoizer() {\n  var memoizeKeyPrefix = \"$memoize\" + memoizeId++;\n  var self = undefined;\n\n  var result = function memoize(target, key, descriptor) {\n    var fnKey = null;\n    var fn = null;\n\n    if (typeof descriptor.value === 'function') {\n      fnKey = 'value';\n      fn = descriptor.value;\n\n      if (fn.length !== 0) {\n        console.warn('Memoize should only be used in functions with zero parameters');\n      }\n    } else if (typeof descriptor.get === 'function') {\n      fnKey = 'get';\n      fn = descriptor.get;\n    }\n\n    if (!fn) {\n      throw new Error('not supported');\n    }\n\n    var memoizeKey = memoizeKeyPrefix + \":\" + key;\n\n    descriptor[fnKey] = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      self = this;\n\n      if (!this.hasOwnProperty(memoizeKey)) {\n        Object.defineProperty(this, memoizeKey, {\n          configurable: true,\n          enumerable: false,\n          writable: true,\n          value: fn.apply(this, args)\n        });\n      }\n\n      return this[memoizeKey];\n    };\n  };\n\n  result.clear = function () {\n    if (typeof self === 'undefined') {\n      return;\n    }\n\n    Object.getOwnPropertyNames(self).forEach(function (property) {\n      if (property.indexOf(memoizeKeyPrefix) === 0) {\n        delete self[property];\n      }\n    });\n  };\n\n  return result;\n}\nexport function memoize(target, key, descriptor) {\n  return createMemoizer()(target, key, descriptor);\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/base/common/decorators.js"],"names":["memoizeId","createMemoizer","memoizeKeyPrefix","self","undefined","result","memoize","target","key","descriptor","fnKey","fn","value","length","console","warn","get","Error","memoizeKey","args","_i","arguments","hasOwnProperty","Object","defineProperty","configurable","enumerable","writable","apply","clear","getOwnPropertyNames","forEach","property","indexOf"],"mappings":"AAAA,IAAIA,SAAS,GAAG,CAAhB;AACA,OAAO,SAASC,cAAT,GAA0B;AAC7B,MAAIC,gBAAgB,GAAG,aAAaF,SAAS,EAA7C;AACA,MAAIG,IAAI,GAAGC,SAAX;;AACA,MAAIC,MAAM,GAAG,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,GAAzB,EAA8BC,UAA9B,EAA0C;AACnD,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,EAAE,GAAG,IAAT;;AACA,QAAI,OAAOF,UAAU,CAACG,KAAlB,KAA4B,UAAhC,EAA4C;AACxCF,MAAAA,KAAK,GAAG,OAAR;AACAC,MAAAA,EAAE,GAAGF,UAAU,CAACG,KAAhB;;AACA,UAAID,EAAE,CAACE,MAAH,KAAc,CAAlB,EAAqB;AACjBC,QAAAA,OAAO,CAACC,IAAR,CAAa,+DAAb;AACH;AACJ,KAND,MAOK,IAAI,OAAON,UAAU,CAACO,GAAlB,KAA0B,UAA9B,EAA0C;AAC3CN,MAAAA,KAAK,GAAG,KAAR;AACAC,MAAAA,EAAE,GAAGF,UAAU,CAACO,GAAhB;AACH;;AACD,QAAI,CAACL,EAAL,EAAS;AACL,YAAM,IAAIM,KAAJ,CAAU,eAAV,CAAN;AACH;;AACD,QAAIC,UAAU,GAAGhB,gBAAgB,GAAG,GAAnB,GAAyBM,GAA1C;;AACAC,IAAAA,UAAU,CAACC,KAAD,CAAV,GAAoB,YAAY;AAC5B,UAAIS,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACR,MAAhC,EAAwCO,EAAE,EAA1C,EAA8C;AAC1CD,QAAAA,IAAI,CAACC,EAAD,CAAJ,GAAWC,SAAS,CAACD,EAAD,CAApB;AACH;;AACDjB,MAAAA,IAAI,GAAG,IAAP;;AACA,UAAI,CAAC,KAAKmB,cAAL,CAAoBJ,UAApB,CAAL,EAAsC;AAClCK,QAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BN,UAA5B,EAAwC;AACpCO,UAAAA,YAAY,EAAE,IADsB;AAEpCC,UAAAA,UAAU,EAAE,KAFwB;AAGpCC,UAAAA,QAAQ,EAAE,IAH0B;AAIpCf,UAAAA,KAAK,EAAED,EAAE,CAACiB,KAAH,CAAS,IAAT,EAAeT,IAAf;AAJ6B,SAAxC;AAMH;;AACD,aAAO,KAAKD,UAAL,CAAP;AACH,KAfD;AAgBH,GAlCD;;AAmCAb,EAAAA,MAAM,CAACwB,KAAP,GAAe,YAAY;AACvB,QAAI,OAAO1B,IAAP,KAAgB,WAApB,EAAiC;AAC7B;AACH;;AACDoB,IAAAA,MAAM,CAACO,mBAAP,CAA2B3B,IAA3B,EAAiC4B,OAAjC,CAAyC,UAAUC,QAAV,EAAoB;AACzD,UAAIA,QAAQ,CAACC,OAAT,CAAiB/B,gBAAjB,MAAuC,CAA3C,EAA8C;AAC1C,eAAOC,IAAI,CAAC6B,QAAD,CAAX;AACH;AACJ,KAJD;AAKH,GATD;;AAUA,SAAO3B,MAAP;AACH;AACD,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,GAAzB,EAA8BC,UAA9B,EAA0C;AAC7C,SAAOR,cAAc,GAAGM,MAAH,EAAWC,GAAX,EAAgBC,UAAhB,CAArB;AACH","sourcesContent":["var memoizeId = 0;\r\nexport function createMemoizer() {\r\n    var memoizeKeyPrefix = \"$memoize\" + memoizeId++;\r\n    var self = undefined;\r\n    var result = function memoize(target, key, descriptor) {\r\n        var fnKey = null;\r\n        var fn = null;\r\n        if (typeof descriptor.value === 'function') {\r\n            fnKey = 'value';\r\n            fn = descriptor.value;\r\n            if (fn.length !== 0) {\r\n                console.warn('Memoize should only be used in functions with zero parameters');\r\n            }\r\n        }\r\n        else if (typeof descriptor.get === 'function') {\r\n            fnKey = 'get';\r\n            fn = descriptor.get;\r\n        }\r\n        if (!fn) {\r\n            throw new Error('not supported');\r\n        }\r\n        var memoizeKey = memoizeKeyPrefix + \":\" + key;\r\n        descriptor[fnKey] = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            self = this;\r\n            if (!this.hasOwnProperty(memoizeKey)) {\r\n                Object.defineProperty(this, memoizeKey, {\r\n                    configurable: true,\r\n                    enumerable: false,\r\n                    writable: true,\r\n                    value: fn.apply(this, args)\r\n                });\r\n            }\r\n            return this[memoizeKey];\r\n        };\r\n    };\r\n    result.clear = function () {\r\n        if (typeof self === 'undefined') {\r\n            return;\r\n        }\r\n        Object.getOwnPropertyNames(self).forEach(function (property) {\r\n            if (property.indexOf(memoizeKeyPrefix) === 0) {\r\n                delete self[property];\r\n            }\r\n        });\r\n    };\r\n    return result;\r\n}\r\nexport function memoize(target, key, descriptor) {\r\n    return createMemoizer()(target, key, descriptor);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}