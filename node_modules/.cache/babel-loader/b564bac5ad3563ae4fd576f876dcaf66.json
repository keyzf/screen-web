{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nexport var createStringBuilder;\n\nif (typeof TextDecoder !== 'undefined') {\n  createStringBuilder = function (capacity) {\n    return new StringBuilder(capacity);\n  };\n} else {\n  createStringBuilder = function (capacity) {\n    return new CompatStringBuilder();\n  };\n}\n\nvar StringBuilder =\n/** @class */\nfunction () {\n  function StringBuilder(capacity) {\n    this._decoder = new TextDecoder('UTF-16LE');\n    this._capacity = capacity | 0;\n    this._buffer = new Uint16Array(this._capacity);\n    this._completedStrings = null;\n    this._bufferLength = 0;\n  }\n\n  StringBuilder.prototype.reset = function () {\n    this._completedStrings = null;\n    this._bufferLength = 0;\n  };\n\n  StringBuilder.prototype.build = function () {\n    if (this._completedStrings !== null) {\n      this._flushBuffer();\n\n      return this._completedStrings.join('');\n    }\n\n    return this._buildBuffer();\n  };\n\n  StringBuilder.prototype._buildBuffer = function () {\n    if (this._bufferLength === 0) {\n      return '';\n    }\n\n    var view = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);\n    return this._decoder.decode(view);\n  };\n\n  StringBuilder.prototype._flushBuffer = function () {\n    var bufferString = this._buildBuffer();\n\n    this._bufferLength = 0;\n\n    if (this._completedStrings === null) {\n      this._completedStrings = [bufferString];\n    } else {\n      this._completedStrings[this._completedStrings.length] = bufferString;\n    }\n  };\n\n  StringBuilder.prototype.write1 = function (charCode) {\n    var remainingSpace = this._capacity - this._bufferLength;\n\n    if (remainingSpace <= 1) {\n      if (remainingSpace === 0 || strings.isHighSurrogate(charCode)) {\n        this._flushBuffer();\n      }\n    }\n\n    this._buffer[this._bufferLength++] = charCode;\n  };\n\n  StringBuilder.prototype.appendASCII = function (charCode) {\n    if (this._bufferLength === this._capacity) {\n      // buffer is full\n      this._flushBuffer();\n    }\n\n    this._buffer[this._bufferLength++] = charCode;\n  };\n\n  StringBuilder.prototype.appendASCIIString = function (str) {\n    var strLen = str.length;\n\n    if (this._bufferLength + strLen >= this._capacity) {\n      // This string does not fit in the remaining buffer space\n      this._flushBuffer();\n\n      this._completedStrings[this._completedStrings.length] = str;\n      return;\n    }\n\n    for (var i = 0; i < strLen; i++) {\n      this._buffer[this._bufferLength++] = str.charCodeAt(i);\n    }\n  };\n\n  return StringBuilder;\n}();\n\nvar CompatStringBuilder =\n/** @class */\nfunction () {\n  function CompatStringBuilder() {\n    this._pieces = [];\n    this._piecesLen = 0;\n  }\n\n  CompatStringBuilder.prototype.reset = function () {\n    this._pieces = [];\n    this._piecesLen = 0;\n  };\n\n  CompatStringBuilder.prototype.build = function () {\n    return this._pieces.join('');\n  };\n\n  CompatStringBuilder.prototype.write1 = function (charCode) {\n    this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n  };\n\n  CompatStringBuilder.prototype.appendASCII = function (charCode) {\n    this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n  };\n\n  CompatStringBuilder.prototype.appendASCIIString = function (str) {\n    this._pieces[this._piecesLen++] = str;\n  };\n\n  return CompatStringBuilder;\n}();","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/core/stringBuilder.js"],"names":["strings","createStringBuilder","TextDecoder","capacity","StringBuilder","CompatStringBuilder","_decoder","_capacity","_buffer","Uint16Array","_completedStrings","_bufferLength","prototype","reset","build","_flushBuffer","join","_buildBuffer","view","buffer","decode","bufferString","length","write1","charCode","remainingSpace","isHighSurrogate","appendASCII","appendASCIIString","str","strLen","i","charCodeAt","_pieces","_piecesLen","String","fromCharCode"],"mappings":"AAAA;;;;AAIA,OAAO,KAAKA,OAAZ,MAAyB,iCAAzB;AACA,OAAO,IAAIC,mBAAJ;;AACP,IAAI,OAAOC,WAAP,KAAuB,WAA3B,EAAwC;AACpCD,EAAAA,mBAAmB,GAAG,UAAUE,QAAV,EAAoB;AAAE,WAAO,IAAIC,aAAJ,CAAkBD,QAAlB,CAAP;AAAqC,GAAjF;AACH,CAFD,MAGK;AACDF,EAAAA,mBAAmB,GAAG,UAAUE,QAAV,EAAoB;AAAE,WAAO,IAAIE,mBAAJ,EAAP;AAAmC,GAA/E;AACH;;AACD,IAAID,aAAa;AAAG;AAAe,YAAY;AAC3C,WAASA,aAAT,CAAuBD,QAAvB,EAAiC;AAC7B,SAAKG,QAAL,GAAgB,IAAIJ,WAAJ,CAAgB,UAAhB,CAAhB;AACA,SAAKK,SAAL,GAAiBJ,QAAQ,GAAG,CAA5B;AACA,SAAKK,OAAL,GAAe,IAAIC,WAAJ,CAAgB,KAAKF,SAArB,CAAf;AACA,SAAKG,iBAAL,GAAyB,IAAzB;AACA,SAAKC,aAAL,GAAqB,CAArB;AACH;;AACDP,EAAAA,aAAa,CAACQ,SAAd,CAAwBC,KAAxB,GAAgC,YAAY;AACxC,SAAKH,iBAAL,GAAyB,IAAzB;AACA,SAAKC,aAAL,GAAqB,CAArB;AACH,GAHD;;AAIAP,EAAAA,aAAa,CAACQ,SAAd,CAAwBE,KAAxB,GAAgC,YAAY;AACxC,QAAI,KAAKJ,iBAAL,KAA2B,IAA/B,EAAqC;AACjC,WAAKK,YAAL;;AACA,aAAO,KAAKL,iBAAL,CAAuBM,IAAvB,CAA4B,EAA5B,CAAP;AACH;;AACD,WAAO,KAAKC,YAAL,EAAP;AACH,GAND;;AAOAb,EAAAA,aAAa,CAACQ,SAAd,CAAwBK,YAAxB,GAAuC,YAAY;AAC/C,QAAI,KAAKN,aAAL,KAAuB,CAA3B,EAA8B;AAC1B,aAAO,EAAP;AACH;;AACD,QAAIO,IAAI,GAAG,IAAIT,WAAJ,CAAgB,KAAKD,OAAL,CAAaW,MAA7B,EAAqC,CAArC,EAAwC,KAAKR,aAA7C,CAAX;AACA,WAAO,KAAKL,QAAL,CAAcc,MAAd,CAAqBF,IAArB,CAAP;AACH,GAND;;AAOAd,EAAAA,aAAa,CAACQ,SAAd,CAAwBG,YAAxB,GAAuC,YAAY;AAC/C,QAAIM,YAAY,GAAG,KAAKJ,YAAL,EAAnB;;AACA,SAAKN,aAAL,GAAqB,CAArB;;AACA,QAAI,KAAKD,iBAAL,KAA2B,IAA/B,EAAqC;AACjC,WAAKA,iBAAL,GAAyB,CAACW,YAAD,CAAzB;AACH,KAFD,MAGK;AACD,WAAKX,iBAAL,CAAuB,KAAKA,iBAAL,CAAuBY,MAA9C,IAAwDD,YAAxD;AACH;AACJ,GATD;;AAUAjB,EAAAA,aAAa,CAACQ,SAAd,CAAwBW,MAAxB,GAAiC,UAAUC,QAAV,EAAoB;AACjD,QAAIC,cAAc,GAAG,KAAKlB,SAAL,GAAiB,KAAKI,aAA3C;;AACA,QAAIc,cAAc,IAAI,CAAtB,EAAyB;AACrB,UAAIA,cAAc,KAAK,CAAnB,IAAwBzB,OAAO,CAAC0B,eAAR,CAAwBF,QAAxB,CAA5B,EAA+D;AAC3D,aAAKT,YAAL;AACH;AACJ;;AACD,SAAKP,OAAL,CAAa,KAAKG,aAAL,EAAb,IAAqCa,QAArC;AACH,GARD;;AASApB,EAAAA,aAAa,CAACQ,SAAd,CAAwBe,WAAxB,GAAsC,UAAUH,QAAV,EAAoB;AACtD,QAAI,KAAKb,aAAL,KAAuB,KAAKJ,SAAhC,EAA2C;AACvC;AACA,WAAKQ,YAAL;AACH;;AACD,SAAKP,OAAL,CAAa,KAAKG,aAAL,EAAb,IAAqCa,QAArC;AACH,GAND;;AAOApB,EAAAA,aAAa,CAACQ,SAAd,CAAwBgB,iBAAxB,GAA4C,UAAUC,GAAV,EAAe;AACvD,QAAIC,MAAM,GAAGD,GAAG,CAACP,MAAjB;;AACA,QAAI,KAAKX,aAAL,GAAqBmB,MAArB,IAA+B,KAAKvB,SAAxC,EAAmD;AAC/C;AACA,WAAKQ,YAAL;;AACA,WAAKL,iBAAL,CAAuB,KAAKA,iBAAL,CAAuBY,MAA9C,IAAwDO,GAAxD;AACA;AACH;;AACD,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC7B,WAAKvB,OAAL,CAAa,KAAKG,aAAL,EAAb,IAAqCkB,GAAG,CAACG,UAAJ,CAAeD,CAAf,CAArC;AACH;AACJ,GAXD;;AAYA,SAAO3B,aAAP;AACH,CAjEkC,EAAnC;;AAkEA,IAAIC,mBAAmB;AAAG;AAAe,YAAY;AACjD,WAASA,mBAAT,GAA+B;AAC3B,SAAK4B,OAAL,GAAe,EAAf;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACH;;AACD7B,EAAAA,mBAAmB,CAACO,SAApB,CAA8BC,KAA9B,GAAsC,YAAY;AAC9C,SAAKoB,OAAL,GAAe,EAAf;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACH,GAHD;;AAIA7B,EAAAA,mBAAmB,CAACO,SAApB,CAA8BE,KAA9B,GAAsC,YAAY;AAC9C,WAAO,KAAKmB,OAAL,CAAajB,IAAb,CAAkB,EAAlB,CAAP;AACH,GAFD;;AAGAX,EAAAA,mBAAmB,CAACO,SAApB,CAA8BW,MAA9B,GAAuC,UAAUC,QAAV,EAAoB;AACvD,SAAKS,OAAL,CAAa,KAAKC,UAAL,EAAb,IAAkCC,MAAM,CAACC,YAAP,CAAoBZ,QAApB,CAAlC;AACH,GAFD;;AAGAnB,EAAAA,mBAAmB,CAACO,SAApB,CAA8Be,WAA9B,GAA4C,UAAUH,QAAV,EAAoB;AAC5D,SAAKS,OAAL,CAAa,KAAKC,UAAL,EAAb,IAAkCC,MAAM,CAACC,YAAP,CAAoBZ,QAApB,CAAlC;AACH,GAFD;;AAGAnB,EAAAA,mBAAmB,CAACO,SAApB,CAA8BgB,iBAA9B,GAAkD,UAAUC,GAAV,EAAe;AAC7D,SAAKI,OAAL,CAAa,KAAKC,UAAL,EAAb,IAAkCL,GAAlC;AACH,GAFD;;AAGA,SAAOxB,mBAAP;AACH,CAtBwC,EAAzC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nexport var createStringBuilder;\r\nif (typeof TextDecoder !== 'undefined') {\r\n    createStringBuilder = function (capacity) { return new StringBuilder(capacity); };\r\n}\r\nelse {\r\n    createStringBuilder = function (capacity) { return new CompatStringBuilder(); };\r\n}\r\nvar StringBuilder = /** @class */ (function () {\r\n    function StringBuilder(capacity) {\r\n        this._decoder = new TextDecoder('UTF-16LE');\r\n        this._capacity = capacity | 0;\r\n        this._buffer = new Uint16Array(this._capacity);\r\n        this._completedStrings = null;\r\n        this._bufferLength = 0;\r\n    }\r\n    StringBuilder.prototype.reset = function () {\r\n        this._completedStrings = null;\r\n        this._bufferLength = 0;\r\n    };\r\n    StringBuilder.prototype.build = function () {\r\n        if (this._completedStrings !== null) {\r\n            this._flushBuffer();\r\n            return this._completedStrings.join('');\r\n        }\r\n        return this._buildBuffer();\r\n    };\r\n    StringBuilder.prototype._buildBuffer = function () {\r\n        if (this._bufferLength === 0) {\r\n            return '';\r\n        }\r\n        var view = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);\r\n        return this._decoder.decode(view);\r\n    };\r\n    StringBuilder.prototype._flushBuffer = function () {\r\n        var bufferString = this._buildBuffer();\r\n        this._bufferLength = 0;\r\n        if (this._completedStrings === null) {\r\n            this._completedStrings = [bufferString];\r\n        }\r\n        else {\r\n            this._completedStrings[this._completedStrings.length] = bufferString;\r\n        }\r\n    };\r\n    StringBuilder.prototype.write1 = function (charCode) {\r\n        var remainingSpace = this._capacity - this._bufferLength;\r\n        if (remainingSpace <= 1) {\r\n            if (remainingSpace === 0 || strings.isHighSurrogate(charCode)) {\r\n                this._flushBuffer();\r\n            }\r\n        }\r\n        this._buffer[this._bufferLength++] = charCode;\r\n    };\r\n    StringBuilder.prototype.appendASCII = function (charCode) {\r\n        if (this._bufferLength === this._capacity) {\r\n            // buffer is full\r\n            this._flushBuffer();\r\n        }\r\n        this._buffer[this._bufferLength++] = charCode;\r\n    };\r\n    StringBuilder.prototype.appendASCIIString = function (str) {\r\n        var strLen = str.length;\r\n        if (this._bufferLength + strLen >= this._capacity) {\r\n            // This string does not fit in the remaining buffer space\r\n            this._flushBuffer();\r\n            this._completedStrings[this._completedStrings.length] = str;\r\n            return;\r\n        }\r\n        for (var i = 0; i < strLen; i++) {\r\n            this._buffer[this._bufferLength++] = str.charCodeAt(i);\r\n        }\r\n    };\r\n    return StringBuilder;\r\n}());\r\nvar CompatStringBuilder = /** @class */ (function () {\r\n    function CompatStringBuilder() {\r\n        this._pieces = [];\r\n        this._piecesLen = 0;\r\n    }\r\n    CompatStringBuilder.prototype.reset = function () {\r\n        this._pieces = [];\r\n        this._piecesLen = 0;\r\n    };\r\n    CompatStringBuilder.prototype.build = function () {\r\n        return this._pieces.join('');\r\n    };\r\n    CompatStringBuilder.prototype.write1 = function (charCode) {\r\n        this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\r\n    };\r\n    CompatStringBuilder.prototype.appendASCII = function (charCode) {\r\n        this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\r\n    };\r\n    CompatStringBuilder.prototype.appendASCIIString = function (str) {\r\n        this._pieces[this._piecesLen++] = str;\r\n    };\r\n    return CompatStringBuilder;\r\n}());\r\n"]},"metadata":{},"sourceType":"module"}