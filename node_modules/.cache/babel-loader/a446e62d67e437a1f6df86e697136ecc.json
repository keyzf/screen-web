{"ast":null,"code":"import { Registry } from '../../registry/common/platform.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { Extensions } from './configurationRegistry.js';\nexport var IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n  var root = Object.create(null);\n\n  for (var key in properties) {\n    addToValueTree(root, key, properties[key], conflictReporter);\n  }\n\n  return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n  var segments = key.split('.');\n  var last = segments.pop();\n  var curr = settingsTreeRoot;\n\n  for (var i = 0; i < segments.length; i++) {\n    var s = segments[i];\n    var obj = curr[s];\n\n    switch (typeof obj) {\n      case 'undefined':\n        obj = curr[s] = Object.create(null);\n        break;\n\n      case 'object':\n        break;\n\n      default:\n        conflictReporter(\"Ignoring \" + key + \" as \" + segments.slice(0, i + 1).join('.') + \" is \" + JSON.stringify(obj));\n        return;\n    }\n\n    curr = obj;\n  }\n\n  if (typeof curr === 'object') {\n    curr[last] = value; // workaround https://github.com/Microsoft/vscode/issues/13606\n  } else {\n    conflictReporter(\"Ignoring \" + key + \" as \" + segments.join('.') + \" is \" + JSON.stringify(curr));\n  }\n}\nexport function removeFromValueTree(valueTree, key) {\n  var segments = key.split('.');\n  doRemoveFromValueTree(valueTree, segments);\n}\n\nfunction doRemoveFromValueTree(valueTree, segments) {\n  var first = segments.shift();\n\n  if (segments.length === 0) {\n    // Reached last segment\n    delete valueTree[first];\n    return;\n  }\n\n  if (Object.keys(valueTree).indexOf(first) !== -1) {\n    var value = valueTree[first];\n\n    if (typeof value === 'object' && !Array.isArray(value)) {\n      doRemoveFromValueTree(value, segments);\n\n      if (Object.keys(value).length === 0) {\n        delete valueTree[first];\n      }\n    }\n  }\n}\n/**\r\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\r\n */\n\n\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n  function accessSetting(config, path) {\n    var current = config;\n\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n      var component = path_1[_i];\n\n      if (typeof current !== 'object' || current === null) {\n        return undefined;\n      }\n\n      current = current[component];\n    }\n\n    return current;\n  }\n\n  var path = settingPath.split('.');\n  var result = accessSetting(config, path);\n  return typeof result === 'undefined' ? defaultValue : result;\n}\nexport function getConfigurationKeys() {\n  var properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n  return Object.keys(properties);\n}\nexport function getDefaultValues() {\n  var valueTreeRoot = Object.create(null);\n  var properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n\n  for (var key in properties) {\n    var value = properties[key].default;\n    addToValueTree(valueTreeRoot, key, value, function (message) {\n      return console.error(\"Conflict in default settings: \" + message);\n    });\n  }\n\n  return valueTreeRoot;\n}\nexport function overrideIdentifierFromKey(key) {\n  return key.substring(1, key.length - 1);\n}\nexport function getMigratedSettingValue(configurationService, currentSettingName, legacySettingName) {\n  var setting = configurationService.inspect(currentSettingName);\n  var legacySetting = configurationService.inspect(legacySettingName);\n\n  if (typeof setting.userValue !== 'undefined' || typeof setting.workspaceValue !== 'undefined' || typeof setting.workspaceFolderValue !== 'undefined') {\n    return setting.value;\n  } else if (typeof legacySetting.userValue !== 'undefined' || typeof legacySetting.workspaceValue !== 'undefined' || typeof legacySetting.workspaceFolderValue !== 'undefined') {\n    return legacySetting.value;\n  } else {\n    return setting.defaultValue;\n  }\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js"],"names":["Registry","createDecorator","Extensions","IConfigurationService","toValuesTree","properties","conflictReporter","root","Object","create","key","addToValueTree","settingsTreeRoot","value","segments","split","last","pop","curr","i","length","s","obj","slice","join","JSON","stringify","removeFromValueTree","valueTree","doRemoveFromValueTree","first","shift","keys","indexOf","Array","isArray","getConfigurationValue","config","settingPath","defaultValue","accessSetting","path","current","_i","path_1","component","undefined","result","getConfigurationKeys","as","Configuration","getConfigurationProperties","getDefaultValues","valueTreeRoot","default","message","console","error","overrideIdentifierFromKey","substring","getMigratedSettingValue","configurationService","currentSettingName","legacySettingName","setting","inspect","legacySetting","userValue","workspaceValue","workspaceFolderValue"],"mappings":"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","sourcesContent":["import { Registry } from '../../registry/common/platform.js';\r\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\r\nimport { Extensions } from './configurationRegistry.js';\r\nexport var IConfigurationService = createDecorator('configurationService');\r\nexport function toValuesTree(properties, conflictReporter) {\r\n    var root = Object.create(null);\r\n    for (var key in properties) {\r\n        addToValueTree(root, key, properties[key], conflictReporter);\r\n    }\r\n    return root;\r\n}\r\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\r\n    var segments = key.split('.');\r\n    var last = segments.pop();\r\n    var curr = settingsTreeRoot;\r\n    for (var i = 0; i < segments.length; i++) {\r\n        var s = segments[i];\r\n        var obj = curr[s];\r\n        switch (typeof obj) {\r\n            case 'undefined':\r\n                obj = curr[s] = Object.create(null);\r\n                break;\r\n            case 'object':\r\n                break;\r\n            default:\r\n                conflictReporter(\"Ignoring \" + key + \" as \" + segments.slice(0, i + 1).join('.') + \" is \" + JSON.stringify(obj));\r\n                return;\r\n        }\r\n        curr = obj;\r\n    }\r\n    if (typeof curr === 'object') {\r\n        curr[last] = value; // workaround https://github.com/Microsoft/vscode/issues/13606\r\n    }\r\n    else {\r\n        conflictReporter(\"Ignoring \" + key + \" as \" + segments.join('.') + \" is \" + JSON.stringify(curr));\r\n    }\r\n}\r\nexport function removeFromValueTree(valueTree, key) {\r\n    var segments = key.split('.');\r\n    doRemoveFromValueTree(valueTree, segments);\r\n}\r\nfunction doRemoveFromValueTree(valueTree, segments) {\r\n    var first = segments.shift();\r\n    if (segments.length === 0) {\r\n        // Reached last segment\r\n        delete valueTree[first];\r\n        return;\r\n    }\r\n    if (Object.keys(valueTree).indexOf(first) !== -1) {\r\n        var value = valueTree[first];\r\n        if (typeof value === 'object' && !Array.isArray(value)) {\r\n            doRemoveFromValueTree(value, segments);\r\n            if (Object.keys(value).length === 0) {\r\n                delete valueTree[first];\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\r\n */\r\nexport function getConfigurationValue(config, settingPath, defaultValue) {\r\n    function accessSetting(config, path) {\r\n        var current = config;\r\n        for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\r\n            var component = path_1[_i];\r\n            if (typeof current !== 'object' || current === null) {\r\n                return undefined;\r\n            }\r\n            current = current[component];\r\n        }\r\n        return current;\r\n    }\r\n    var path = settingPath.split('.');\r\n    var result = accessSetting(config, path);\r\n    return typeof result === 'undefined' ? defaultValue : result;\r\n}\r\nexport function getConfigurationKeys() {\r\n    var properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\r\n    return Object.keys(properties);\r\n}\r\nexport function getDefaultValues() {\r\n    var valueTreeRoot = Object.create(null);\r\n    var properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\r\n    for (var key in properties) {\r\n        var value = properties[key].default;\r\n        addToValueTree(valueTreeRoot, key, value, function (message) { return console.error(\"Conflict in default settings: \" + message); });\r\n    }\r\n    return valueTreeRoot;\r\n}\r\nexport function overrideIdentifierFromKey(key) {\r\n    return key.substring(1, key.length - 1);\r\n}\r\nexport function getMigratedSettingValue(configurationService, currentSettingName, legacySettingName) {\r\n    var setting = configurationService.inspect(currentSettingName);\r\n    var legacySetting = configurationService.inspect(legacySettingName);\r\n    if (typeof setting.userValue !== 'undefined' || typeof setting.workspaceValue !== 'undefined' || typeof setting.workspaceFolderValue !== 'undefined') {\r\n        return setting.value;\r\n    }\r\n    else if (typeof legacySetting.userValue !== 'undefined' || typeof legacySetting.workspaceValue !== 'undefined' || typeof legacySetting.workspaceFolderValue !== 'undefined') {\r\n        return legacySetting.value;\r\n    }\r\n    else {\r\n        return setting.defaultValue;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}