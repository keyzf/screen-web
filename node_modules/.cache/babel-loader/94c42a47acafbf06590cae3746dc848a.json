{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { Iterator } from '../../../common/iterator.js';\nimport { Event } from '../../../common/event.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { ObjectTreeModel } from './objectTreeModel.js';\n\nfunction noCompress(element) {\n  var elements = [element.element];\n  var incompressible = element.incompressible || false;\n  return {\n    element: {\n      elements: elements,\n      incompressible: incompressible\n    },\n    children: Iterator.map(Iterator.from(element.children), noCompress),\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n} // Exported only for test reasons, do not use directly\n\n\nexport function compress(element) {\n  var elements = [element.element];\n  var incompressible = element.incompressible || false;\n  var childrenIterator;\n  var children;\n\n  while (true) {\n    childrenIterator = Iterator.from(element.children);\n    children = Iterator.collect(childrenIterator, 2);\n\n    if (children.length !== 1) {\n      break;\n    }\n\n    element = children[0];\n\n    if (element.incompressible) {\n      break;\n    }\n\n    elements.push(element.element);\n  }\n\n  return {\n    element: {\n      elements: elements,\n      incompressible: incompressible\n    },\n    children: Iterator.map(Iterator.concat(Iterator.fromArray(children), childrenIterator), compress),\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\n\nfunction _decompress(element, index) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  var children;\n\n  if (index < element.element.elements.length - 1) {\n    children = Iterator.single(_decompress(element, index + 1));\n  } else {\n    children = Iterator.map(Iterator.from(element.children), function (el) {\n      return _decompress(el, 0);\n    });\n  }\n\n  if (index === 0 && element.element.incompressible) {\n    return {\n      element: element.element.elements[index],\n      children: children,\n      incompressible: true,\n      collapsible: element.collapsible,\n      collapsed: element.collapsed\n    };\n  }\n\n  return {\n    element: element.element.elements[index],\n    children: children,\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n} // Exported only for test reasons, do not use directly\n\n\nexport function decompress(element) {\n  return _decompress(element, 0);\n}\n\nfunction splice(treeElement, element, children) {\n  if (treeElement.element === element) {\n    return __assign(__assign({}, treeElement), {\n      children: children\n    });\n  }\n\n  return __assign(__assign({}, treeElement), {\n    children: Iterator.map(Iterator.from(treeElement.children), function (e) {\n      return splice(e, element, children);\n    })\n  });\n} // Exported only for test reasons, do not use directly\n\n\nvar CompressedObjectTreeModel =\n/** @class */\nfunction () {\n  function CompressedObjectTreeModel(user, list, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.user = user;\n    this.nodes = new Map();\n    this.model = new ObjectTreeModel(user, list, options);\n    this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n  }\n\n  Object.defineProperty(CompressedObjectTreeModel.prototype, \"onDidSplice\", {\n    get: function () {\n      return this.model.onDidSplice;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CompressedObjectTreeModel.prototype, \"onDidChangeCollapseState\", {\n    get: function () {\n      return this.model.onDidChangeCollapseState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CompressedObjectTreeModel.prototype.setChildren = function (element, children) {\n    if (element === null) {\n      var compressedChildren = Iterator.map(Iterator.from(children), this.enabled ? compress : noCompress);\n\n      this._setChildren(null, compressedChildren);\n\n      return;\n    }\n\n    var compressedNode = this.nodes.get(element);\n\n    if (!compressedNode) {\n      throw new Error('Unknown compressed tree node');\n    }\n\n    var node = this.model.getNode(compressedNode);\n    var compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n    var parent = this.model.getNode(compressedParentNode);\n    var decompressedElement = decompress(node);\n    var splicedElement = splice(decompressedElement, element, Iterator.from(children));\n    var recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n    var parentChildren = parent.children.map(function (child) {\n      return child === node ? recompressedElement : child;\n    });\n\n    this._setChildren(parent.element, parentChildren);\n  };\n\n  CompressedObjectTreeModel.prototype.setCompressionEnabled = function (enabled) {\n    if (enabled === this.enabled) {\n      return;\n    }\n\n    this.enabled = enabled;\n    var root = this.model.getNode();\n    var rootChildren = Iterator.from(root.children);\n    var decompressedRootChildren = Iterator.map(rootChildren, decompress);\n    var recompressedRootChildren = Iterator.map(decompressedRootChildren, enabled ? compress : noCompress);\n\n    this._setChildren(null, recompressedRootChildren);\n  };\n\n  CompressedObjectTreeModel.prototype._setChildren = function (node, children) {\n    var _this = this;\n\n    var insertedElements = new Set();\n\n    var _onDidCreateNode = function (node) {\n      for (var _i = 0, _a = node.element.elements; _i < _a.length; _i++) {\n        var element = _a[_i];\n        insertedElements.add(element);\n\n        _this.nodes.set(element, node.element);\n      }\n    };\n\n    var _onDidDeleteNode = function (node) {\n      for (var _i = 0, _a = node.element.elements; _i < _a.length; _i++) {\n        var element = _a[_i];\n\n        if (!insertedElements.has(element)) {\n          _this.nodes.delete(element);\n        }\n      }\n    };\n\n    this.model.setChildren(node, children, _onDidCreateNode, _onDidDeleteNode);\n  };\n\n  CompressedObjectTreeModel.prototype.has = function (element) {\n    return this.nodes.has(element);\n  };\n\n  CompressedObjectTreeModel.prototype.getListIndex = function (location) {\n    var node = this.getCompressedNode(location);\n    return this.model.getListIndex(node);\n  };\n\n  CompressedObjectTreeModel.prototype.getListRenderCount = function (location) {\n    var node = this.getCompressedNode(location);\n    return this.model.getListRenderCount(node);\n  };\n\n  CompressedObjectTreeModel.prototype.getNode = function (location) {\n    if (typeof location === 'undefined') {\n      return this.model.getNode();\n    }\n\n    var node = this.getCompressedNode(location);\n    return this.model.getNode(node);\n  }; // TODO: review this\n\n\n  CompressedObjectTreeModel.prototype.getNodeLocation = function (node) {\n    var compressedNode = this.model.getNodeLocation(node);\n\n    if (compressedNode === null) {\n      return null;\n    }\n\n    return compressedNode.elements[compressedNode.elements.length - 1];\n  }; // TODO: review this\n\n\n  CompressedObjectTreeModel.prototype.getParentNodeLocation = function (location) {\n    var compressedNode = this.getCompressedNode(location);\n    var parentNode = this.model.getParentNodeLocation(compressedNode);\n\n    if (parentNode === null) {\n      return null;\n    }\n\n    return parentNode.elements[parentNode.elements.length - 1];\n  };\n\n  CompressedObjectTreeModel.prototype.isCollapsible = function (location) {\n    var compressedNode = this.getCompressedNode(location);\n    return this.model.isCollapsible(compressedNode);\n  };\n\n  CompressedObjectTreeModel.prototype.setCollapsible = function (location, collapsible) {\n    var compressedNode = this.getCompressedNode(location);\n    return this.model.setCollapsible(compressedNode, collapsible);\n  };\n\n  CompressedObjectTreeModel.prototype.isCollapsed = function (location) {\n    var compressedNode = this.getCompressedNode(location);\n    return this.model.isCollapsed(compressedNode);\n  };\n\n  CompressedObjectTreeModel.prototype.setCollapsed = function (location, collapsed, recursive) {\n    var compressedNode = this.getCompressedNode(location);\n    return this.model.setCollapsed(compressedNode, collapsed, recursive);\n  };\n\n  CompressedObjectTreeModel.prototype.expandTo = function (location) {\n    var compressedNode = this.getCompressedNode(location);\n    this.model.expandTo(compressedNode);\n  };\n\n  CompressedObjectTreeModel.prototype.rerender = function (location) {\n    var compressedNode = this.getCompressedNode(location);\n    this.model.rerender(compressedNode);\n  };\n\n  CompressedObjectTreeModel.prototype.refilter = function () {\n    this.model.refilter();\n  };\n\n  CompressedObjectTreeModel.prototype.getCompressedNode = function (element) {\n    if (element === null) {\n      return null;\n    }\n\n    var node = this.nodes.get(element);\n\n    if (!node) {\n      throw new TreeError(this.user, \"Tree element not found: \" + element);\n    }\n\n    return node;\n  };\n\n  return CompressedObjectTreeModel;\n}();\n\nexport { CompressedObjectTreeModel };\nexport var DefaultElementMapper = function (elements) {\n  return elements[elements.length - 1];\n};\n\nvar CompressedTreeNodeWrapper =\n/** @class */\nfunction () {\n  function CompressedTreeNodeWrapper(unwrapper, node) {\n    this.unwrapper = unwrapper;\n    this.node = node;\n  }\n\n  Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"element\", {\n    get: function () {\n      return this.node.element === null ? null : this.unwrapper(this.node.element);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"children\", {\n    get: function () {\n      var _this = this;\n\n      return this.node.children.map(function (node) {\n        return new CompressedTreeNodeWrapper(_this.unwrapper, node);\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"depth\", {\n    get: function () {\n      return this.node.depth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"visibleChildrenCount\", {\n    get: function () {\n      return this.node.visibleChildrenCount;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"visibleChildIndex\", {\n    get: function () {\n      return this.node.visibleChildIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"collapsible\", {\n    get: function () {\n      return this.node.collapsible;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"collapsed\", {\n    get: function () {\n      return this.node.collapsed;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"visible\", {\n    get: function () {\n      return this.node.visible;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"filterData\", {\n    get: function () {\n      return this.node.filterData;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CompressedTreeNodeWrapper;\n}();\n\nfunction mapList(nodeMapper, list) {\n  return {\n    splice: function (start, deleteCount, toInsert) {\n      list.splice(start, deleteCount, toInsert.map(function (node) {\n        return nodeMapper.map(node);\n      }));\n    }\n  };\n}\n\nfunction mapOptions(compressedNodeUnwrapper, options) {\n  return __assign(__assign({}, options), {\n    sorter: options.sorter && {\n      compare: function (node, otherNode) {\n        return options.sorter.compare(node.elements[0], otherNode.elements[0]);\n      }\n    },\n    identityProvider: options.identityProvider && {\n      getId: function (node) {\n        return options.identityProvider.getId(compressedNodeUnwrapper(node));\n      }\n    },\n    filter: options.filter && {\n      filter: function (node, parentVisibility) {\n        return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\n      }\n    }\n  });\n}\n\nvar CompressibleObjectTreeModel =\n/** @class */\nfunction () {\n  function CompressibleObjectTreeModel(user, list, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.elementMapper = options.elementMapper || DefaultElementMapper;\n\n    var compressedNodeUnwrapper = function (node) {\n      return _this.elementMapper(node.elements);\n    };\n\n    this.nodeMapper = new WeakMapper(function (node) {\n      return new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node);\n    });\n    this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\n  }\n\n  Object.defineProperty(CompressibleObjectTreeModel.prototype, \"onDidSplice\", {\n    get: function () {\n      var _this = this;\n\n      return Event.map(this.model.onDidSplice, function (_a) {\n        var insertedNodes = _a.insertedNodes,\n            deletedNodes = _a.deletedNodes;\n        return {\n          insertedNodes: insertedNodes.map(function (node) {\n            return _this.nodeMapper.map(node);\n          }),\n          deletedNodes: deletedNodes.map(function (node) {\n            return _this.nodeMapper.map(node);\n          })\n        };\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CompressibleObjectTreeModel.prototype, \"onDidChangeCollapseState\", {\n    get: function () {\n      var _this = this;\n\n      return Event.map(this.model.onDidChangeCollapseState, function (_a) {\n        var node = _a.node,\n            deep = _a.deep;\n        return {\n          node: _this.nodeMapper.map(node),\n          deep: deep\n        };\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CompressibleObjectTreeModel.prototype.setChildren = function (element, children) {\n    this.model.setChildren(element, children);\n  };\n\n  CompressibleObjectTreeModel.prototype.setCompressionEnabled = function (enabled) {\n    this.model.setCompressionEnabled(enabled);\n  };\n\n  CompressibleObjectTreeModel.prototype.has = function (location) {\n    return this.model.has(location);\n  };\n\n  CompressibleObjectTreeModel.prototype.getListIndex = function (location) {\n    return this.model.getListIndex(location);\n  };\n\n  CompressibleObjectTreeModel.prototype.getListRenderCount = function (location) {\n    return this.model.getListRenderCount(location);\n  };\n\n  CompressibleObjectTreeModel.prototype.getNode = function (location) {\n    return this.nodeMapper.map(this.model.getNode(location));\n  };\n\n  CompressibleObjectTreeModel.prototype.getNodeLocation = function (node) {\n    return node.element;\n  };\n\n  CompressibleObjectTreeModel.prototype.getParentNodeLocation = function (location) {\n    return this.model.getParentNodeLocation(location);\n  };\n\n  CompressibleObjectTreeModel.prototype.isCollapsible = function (location) {\n    return this.model.isCollapsible(location);\n  };\n\n  CompressibleObjectTreeModel.prototype.setCollapsible = function (location, collapsed) {\n    return this.model.setCollapsible(location, collapsed);\n  };\n\n  CompressibleObjectTreeModel.prototype.isCollapsed = function (location) {\n    return this.model.isCollapsed(location);\n  };\n\n  CompressibleObjectTreeModel.prototype.setCollapsed = function (location, collapsed, recursive) {\n    return this.model.setCollapsed(location, collapsed, recursive);\n  };\n\n  CompressibleObjectTreeModel.prototype.expandTo = function (location) {\n    return this.model.expandTo(location);\n  };\n\n  CompressibleObjectTreeModel.prototype.rerender = function (location) {\n    return this.model.rerender(location);\n  };\n\n  CompressibleObjectTreeModel.prototype.refilter = function () {\n    return this.model.refilter();\n  };\n\n  CompressibleObjectTreeModel.prototype.getCompressedTreeNode = function (location) {\n    if (location === void 0) {\n      location = null;\n    }\n\n    return this.model.getNode(location);\n  };\n\n  return CompressibleObjectTreeModel;\n}();\n\nexport { CompressibleObjectTreeModel };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/compressedObjectTreeModel.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","Iterator","Event","TreeError","WeakMapper","ObjectTreeModel","noCompress","element","elements","incompressible","children","map","from","collapsible","collapsed","compress","childrenIterator","collect","push","concat","fromArray","_decompress","index","single","el","decompress","splice","treeElement","e","CompressedObjectTreeModel","user","list","options","nodes","Map","model","enabled","compressionEnabled","defineProperty","get","onDidSplice","enumerable","configurable","onDidChangeCollapseState","setChildren","compressedChildren","_setChildren","compressedNode","Error","node","getNode","compressedParentNode","getParentNodeLocation","parent","decompressedElement","splicedElement","recompressedElement","parentChildren","child","setCompressionEnabled","root","rootChildren","decompressedRootChildren","recompressedRootChildren","_this","insertedElements","Set","_onDidCreateNode","_i","_a","add","set","_onDidDeleteNode","has","delete","getListIndex","location","getCompressedNode","getListRenderCount","getNodeLocation","parentNode","isCollapsible","setCollapsible","isCollapsed","setCollapsed","recursive","expandTo","rerender","refilter","DefaultElementMapper","CompressedTreeNodeWrapper","unwrapper","depth","visibleChildrenCount","visibleChildIndex","visible","filterData","mapList","nodeMapper","start","deleteCount","toInsert","mapOptions","compressedNodeUnwrapper","sorter","compare","otherNode","identityProvider","getId","filter","parentVisibility","CompressibleObjectTreeModel","elementMapper","insertedNodes","deletedNodes","deep","getCompressedTreeNode"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport { Iterator } from '../../../common/iterator.js';\r\nimport { Event } from '../../../common/event.js';\r\nimport { TreeError, WeakMapper } from './tree.js';\r\nimport { ObjectTreeModel } from './objectTreeModel.js';\r\nfunction noCompress(element) {\r\n    var elements = [element.element];\r\n    var incompressible = element.incompressible || false;\r\n    return {\r\n        element: { elements: elements, incompressible: incompressible },\r\n        children: Iterator.map(Iterator.from(element.children), noCompress),\r\n        collapsible: element.collapsible,\r\n        collapsed: element.collapsed\r\n    };\r\n}\r\n// Exported only for test reasons, do not use directly\r\nexport function compress(element) {\r\n    var elements = [element.element];\r\n    var incompressible = element.incompressible || false;\r\n    var childrenIterator;\r\n    var children;\r\n    while (true) {\r\n        childrenIterator = Iterator.from(element.children);\r\n        children = Iterator.collect(childrenIterator, 2);\r\n        if (children.length !== 1) {\r\n            break;\r\n        }\r\n        element = children[0];\r\n        if (element.incompressible) {\r\n            break;\r\n        }\r\n        elements.push(element.element);\r\n    }\r\n    return {\r\n        element: { elements: elements, incompressible: incompressible },\r\n        children: Iterator.map(Iterator.concat(Iterator.fromArray(children), childrenIterator), compress),\r\n        collapsible: element.collapsible,\r\n        collapsed: element.collapsed\r\n    };\r\n}\r\nfunction _decompress(element, index) {\r\n    if (index === void 0) { index = 0; }\r\n    var children;\r\n    if (index < element.element.elements.length - 1) {\r\n        children = Iterator.single(_decompress(element, index + 1));\r\n    }\r\n    else {\r\n        children = Iterator.map(Iterator.from(element.children), function (el) { return _decompress(el, 0); });\r\n    }\r\n    if (index === 0 && element.element.incompressible) {\r\n        return {\r\n            element: element.element.elements[index],\r\n            children: children,\r\n            incompressible: true,\r\n            collapsible: element.collapsible,\r\n            collapsed: element.collapsed\r\n        };\r\n    }\r\n    return {\r\n        element: element.element.elements[index],\r\n        children: children,\r\n        collapsible: element.collapsible,\r\n        collapsed: element.collapsed\r\n    };\r\n}\r\n// Exported only for test reasons, do not use directly\r\nexport function decompress(element) {\r\n    return _decompress(element, 0);\r\n}\r\nfunction splice(treeElement, element, children) {\r\n    if (treeElement.element === element) {\r\n        return __assign(__assign({}, treeElement), { children: children });\r\n    }\r\n    return __assign(__assign({}, treeElement), { children: Iterator.map(Iterator.from(treeElement.children), function (e) { return splice(e, element, children); }) });\r\n}\r\n// Exported only for test reasons, do not use directly\r\nvar CompressedObjectTreeModel = /** @class */ (function () {\r\n    function CompressedObjectTreeModel(user, list, options) {\r\n        if (options === void 0) { options = {}; }\r\n        this.user = user;\r\n        this.nodes = new Map();\r\n        this.model = new ObjectTreeModel(user, list, options);\r\n        this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\r\n    }\r\n    Object.defineProperty(CompressedObjectTreeModel.prototype, \"onDidSplice\", {\r\n        get: function () { return this.model.onDidSplice; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompressedObjectTreeModel.prototype, \"onDidChangeCollapseState\", {\r\n        get: function () { return this.model.onDidChangeCollapseState; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CompressedObjectTreeModel.prototype.setChildren = function (element, children) {\r\n        if (element === null) {\r\n            var compressedChildren = Iterator.map(Iterator.from(children), this.enabled ? compress : noCompress);\r\n            this._setChildren(null, compressedChildren);\r\n            return;\r\n        }\r\n        var compressedNode = this.nodes.get(element);\r\n        if (!compressedNode) {\r\n            throw new Error('Unknown compressed tree node');\r\n        }\r\n        var node = this.model.getNode(compressedNode);\r\n        var compressedParentNode = this.model.getParentNodeLocation(compressedNode);\r\n        var parent = this.model.getNode(compressedParentNode);\r\n        var decompressedElement = decompress(node);\r\n        var splicedElement = splice(decompressedElement, element, Iterator.from(children));\r\n        var recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\r\n        var parentChildren = parent.children\r\n            .map(function (child) { return child === node ? recompressedElement : child; });\r\n        this._setChildren(parent.element, parentChildren);\r\n    };\r\n    CompressedObjectTreeModel.prototype.setCompressionEnabled = function (enabled) {\r\n        if (enabled === this.enabled) {\r\n            return;\r\n        }\r\n        this.enabled = enabled;\r\n        var root = this.model.getNode();\r\n        var rootChildren = Iterator.from(root.children);\r\n        var decompressedRootChildren = Iterator.map(rootChildren, decompress);\r\n        var recompressedRootChildren = Iterator.map(decompressedRootChildren, enabled ? compress : noCompress);\r\n        this._setChildren(null, recompressedRootChildren);\r\n    };\r\n    CompressedObjectTreeModel.prototype._setChildren = function (node, children) {\r\n        var _this = this;\r\n        var insertedElements = new Set();\r\n        var _onDidCreateNode = function (node) {\r\n            for (var _i = 0, _a = node.element.elements; _i < _a.length; _i++) {\r\n                var element = _a[_i];\r\n                insertedElements.add(element);\r\n                _this.nodes.set(element, node.element);\r\n            }\r\n        };\r\n        var _onDidDeleteNode = function (node) {\r\n            for (var _i = 0, _a = node.element.elements; _i < _a.length; _i++) {\r\n                var element = _a[_i];\r\n                if (!insertedElements.has(element)) {\r\n                    _this.nodes.delete(element);\r\n                }\r\n            }\r\n        };\r\n        this.model.setChildren(node, children, _onDidCreateNode, _onDidDeleteNode);\r\n    };\r\n    CompressedObjectTreeModel.prototype.has = function (element) {\r\n        return this.nodes.has(element);\r\n    };\r\n    CompressedObjectTreeModel.prototype.getListIndex = function (location) {\r\n        var node = this.getCompressedNode(location);\r\n        return this.model.getListIndex(node);\r\n    };\r\n    CompressedObjectTreeModel.prototype.getListRenderCount = function (location) {\r\n        var node = this.getCompressedNode(location);\r\n        return this.model.getListRenderCount(node);\r\n    };\r\n    CompressedObjectTreeModel.prototype.getNode = function (location) {\r\n        if (typeof location === 'undefined') {\r\n            return this.model.getNode();\r\n        }\r\n        var node = this.getCompressedNode(location);\r\n        return this.model.getNode(node);\r\n    };\r\n    // TODO: review this\r\n    CompressedObjectTreeModel.prototype.getNodeLocation = function (node) {\r\n        var compressedNode = this.model.getNodeLocation(node);\r\n        if (compressedNode === null) {\r\n            return null;\r\n        }\r\n        return compressedNode.elements[compressedNode.elements.length - 1];\r\n    };\r\n    // TODO: review this\r\n    CompressedObjectTreeModel.prototype.getParentNodeLocation = function (location) {\r\n        var compressedNode = this.getCompressedNode(location);\r\n        var parentNode = this.model.getParentNodeLocation(compressedNode);\r\n        if (parentNode === null) {\r\n            return null;\r\n        }\r\n        return parentNode.elements[parentNode.elements.length - 1];\r\n    };\r\n    CompressedObjectTreeModel.prototype.isCollapsible = function (location) {\r\n        var compressedNode = this.getCompressedNode(location);\r\n        return this.model.isCollapsible(compressedNode);\r\n    };\r\n    CompressedObjectTreeModel.prototype.setCollapsible = function (location, collapsible) {\r\n        var compressedNode = this.getCompressedNode(location);\r\n        return this.model.setCollapsible(compressedNode, collapsible);\r\n    };\r\n    CompressedObjectTreeModel.prototype.isCollapsed = function (location) {\r\n        var compressedNode = this.getCompressedNode(location);\r\n        return this.model.isCollapsed(compressedNode);\r\n    };\r\n    CompressedObjectTreeModel.prototype.setCollapsed = function (location, collapsed, recursive) {\r\n        var compressedNode = this.getCompressedNode(location);\r\n        return this.model.setCollapsed(compressedNode, collapsed, recursive);\r\n    };\r\n    CompressedObjectTreeModel.prototype.expandTo = function (location) {\r\n        var compressedNode = this.getCompressedNode(location);\r\n        this.model.expandTo(compressedNode);\r\n    };\r\n    CompressedObjectTreeModel.prototype.rerender = function (location) {\r\n        var compressedNode = this.getCompressedNode(location);\r\n        this.model.rerender(compressedNode);\r\n    };\r\n    CompressedObjectTreeModel.prototype.refilter = function () {\r\n        this.model.refilter();\r\n    };\r\n    CompressedObjectTreeModel.prototype.getCompressedNode = function (element) {\r\n        if (element === null) {\r\n            return null;\r\n        }\r\n        var node = this.nodes.get(element);\r\n        if (!node) {\r\n            throw new TreeError(this.user, \"Tree element not found: \" + element);\r\n        }\r\n        return node;\r\n    };\r\n    return CompressedObjectTreeModel;\r\n}());\r\nexport { CompressedObjectTreeModel };\r\nexport var DefaultElementMapper = function (elements) { return elements[elements.length - 1]; };\r\nvar CompressedTreeNodeWrapper = /** @class */ (function () {\r\n    function CompressedTreeNodeWrapper(unwrapper, node) {\r\n        this.unwrapper = unwrapper;\r\n        this.node = node;\r\n    }\r\n    Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"element\", {\r\n        get: function () { return this.node.element === null ? null : this.unwrapper(this.node.element); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"children\", {\r\n        get: function () {\r\n            var _this = this;\r\n            return this.node.children.map(function (node) { return new CompressedTreeNodeWrapper(_this.unwrapper, node); });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"depth\", {\r\n        get: function () { return this.node.depth; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"visibleChildrenCount\", {\r\n        get: function () { return this.node.visibleChildrenCount; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"visibleChildIndex\", {\r\n        get: function () { return this.node.visibleChildIndex; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"collapsible\", {\r\n        get: function () { return this.node.collapsible; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"collapsed\", {\r\n        get: function () { return this.node.collapsed; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"visible\", {\r\n        get: function () { return this.node.visible; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompressedTreeNodeWrapper.prototype, \"filterData\", {\r\n        get: function () { return this.node.filterData; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CompressedTreeNodeWrapper;\r\n}());\r\nfunction mapList(nodeMapper, list) {\r\n    return {\r\n        splice: function (start, deleteCount, toInsert) {\r\n            list.splice(start, deleteCount, toInsert.map(function (node) { return nodeMapper.map(node); }));\r\n        }\r\n    };\r\n}\r\nfunction mapOptions(compressedNodeUnwrapper, options) {\r\n    return __assign(__assign({}, options), { sorter: options.sorter && {\r\n            compare: function (node, otherNode) {\r\n                return options.sorter.compare(node.elements[0], otherNode.elements[0]);\r\n            }\r\n        }, identityProvider: options.identityProvider && {\r\n            getId: function (node) {\r\n                return options.identityProvider.getId(compressedNodeUnwrapper(node));\r\n            }\r\n        }, filter: options.filter && {\r\n            filter: function (node, parentVisibility) {\r\n                return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\r\n            }\r\n        } });\r\n}\r\nvar CompressibleObjectTreeModel = /** @class */ (function () {\r\n    function CompressibleObjectTreeModel(user, list, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        this.elementMapper = options.elementMapper || DefaultElementMapper;\r\n        var compressedNodeUnwrapper = function (node) { return _this.elementMapper(node.elements); };\r\n        this.nodeMapper = new WeakMapper(function (node) { return new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node); });\r\n        this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\r\n    }\r\n    Object.defineProperty(CompressibleObjectTreeModel.prototype, \"onDidSplice\", {\r\n        get: function () {\r\n            var _this = this;\r\n            return Event.map(this.model.onDidSplice, function (_a) {\r\n                var insertedNodes = _a.insertedNodes, deletedNodes = _a.deletedNodes;\r\n                return ({\r\n                    insertedNodes: insertedNodes.map(function (node) { return _this.nodeMapper.map(node); }),\r\n                    deletedNodes: deletedNodes.map(function (node) { return _this.nodeMapper.map(node); }),\r\n                });\r\n            });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompressibleObjectTreeModel.prototype, \"onDidChangeCollapseState\", {\r\n        get: function () {\r\n            var _this = this;\r\n            return Event.map(this.model.onDidChangeCollapseState, function (_a) {\r\n                var node = _a.node, deep = _a.deep;\r\n                return ({\r\n                    node: _this.nodeMapper.map(node),\r\n                    deep: deep\r\n                });\r\n            });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CompressibleObjectTreeModel.prototype.setChildren = function (element, children) {\r\n        this.model.setChildren(element, children);\r\n    };\r\n    CompressibleObjectTreeModel.prototype.setCompressionEnabled = function (enabled) {\r\n        this.model.setCompressionEnabled(enabled);\r\n    };\r\n    CompressibleObjectTreeModel.prototype.has = function (location) {\r\n        return this.model.has(location);\r\n    };\r\n    CompressibleObjectTreeModel.prototype.getListIndex = function (location) {\r\n        return this.model.getListIndex(location);\r\n    };\r\n    CompressibleObjectTreeModel.prototype.getListRenderCount = function (location) {\r\n        return this.model.getListRenderCount(location);\r\n    };\r\n    CompressibleObjectTreeModel.prototype.getNode = function (location) {\r\n        return this.nodeMapper.map(this.model.getNode(location));\r\n    };\r\n    CompressibleObjectTreeModel.prototype.getNodeLocation = function (node) {\r\n        return node.element;\r\n    };\r\n    CompressibleObjectTreeModel.prototype.getParentNodeLocation = function (location) {\r\n        return this.model.getParentNodeLocation(location);\r\n    };\r\n    CompressibleObjectTreeModel.prototype.isCollapsible = function (location) {\r\n        return this.model.isCollapsible(location);\r\n    };\r\n    CompressibleObjectTreeModel.prototype.setCollapsible = function (location, collapsed) {\r\n        return this.model.setCollapsible(location, collapsed);\r\n    };\r\n    CompressibleObjectTreeModel.prototype.isCollapsed = function (location) {\r\n        return this.model.isCollapsed(location);\r\n    };\r\n    CompressibleObjectTreeModel.prototype.setCollapsed = function (location, collapsed, recursive) {\r\n        return this.model.setCollapsed(location, collapsed, recursive);\r\n    };\r\n    CompressibleObjectTreeModel.prototype.expandTo = function (location) {\r\n        return this.model.expandTo(location);\r\n    };\r\n    CompressibleObjectTreeModel.prototype.rerender = function (location) {\r\n        return this.model.rerender(location);\r\n    };\r\n    CompressibleObjectTreeModel.prototype.refilter = function () {\r\n        return this.model.refilter();\r\n    };\r\n    CompressibleObjectTreeModel.prototype.getCompressedTreeNode = function (location) {\r\n        if (location === void 0) { location = null; }\r\n        return this.model.getNode(location);\r\n    };\r\n    return CompressibleObjectTreeModel;\r\n}());\r\nexport { CompressibleObjectTreeModel };\r\n"]},"metadata":{},"sourceType":"module"}