{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './standalone-tokens.css';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { OpenerService } from '../../browser/services/openerService.js';\nimport { DiffNavigator } from '../../browser/widget/diffNavigator.js';\nimport { EditorOptions, ConfigurationChangedEvent } from '../../common/config/editorOptions.js';\nimport { BareFontInfo, FontInfo } from '../../common/config/fontInfo.js';\nimport { EditorType } from '../../common/editorCommon.js';\nimport { FindMatch, TextModelResolvedOptions } from '../../common/model.js';\nimport * as modes from '../../common/modes.js';\nimport { NULL_STATE, nullTokenize } from '../../common/modes/nullMode.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\nimport { ITextModelService } from '../../common/services/resolverService.js';\nimport { createWebWorker as actualCreateWebWorker } from '../../common/services/webWorker.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { Colorizer } from './colorizer.js';\nimport { SimpleEditorModelResolverService } from './simpleServices.js';\nimport { StandaloneDiffEditor, StandaloneEditor } from './standaloneCodeEditor.js';\nimport { DynamicStandaloneServices, StaticServices } from './standaloneServices.js';\nimport { IStandaloneThemeService } from '../common/standaloneThemeService.js';\nimport { ICommandService } from '../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IContextViewService, IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nimport { clearAllFontInfos } from '../../browser/config/configuration.js';\nimport { IEditorProgressService } from '../../../platform/progress/common/progress.js';\n\nfunction withAllStandaloneServices(domElement, override, callback) {\n  var services = new DynamicStandaloneServices(domElement, override);\n  var simpleEditorModelResolverService = null;\n\n  if (!services.has(ITextModelService)) {\n    simpleEditorModelResolverService = new SimpleEditorModelResolverService(StaticServices.modelService.get());\n    services.set(ITextModelService, simpleEditorModelResolverService);\n  }\n\n  if (!services.has(IOpenerService)) {\n    services.set(IOpenerService, new OpenerService(services.get(ICodeEditorService), services.get(ICommandService)));\n  }\n\n  var result = callback(services);\n\n  if (simpleEditorModelResolverService) {\n    simpleEditorModelResolverService.setEditor(result);\n  }\n\n  return result;\n}\n/**\r\n * Create a new editor under `domElement`.\r\n * `domElement` should be empty (not contain other dom nodes).\r\n * The editor will read the size of `domElement`.\r\n */\n\n\nexport function create(domElement, options, override) {\n  return withAllStandaloneServices(domElement, override || {}, function (services) {\n    return new StandaloneEditor(domElement, options, services, services.get(IInstantiationService), services.get(ICodeEditorService), services.get(ICommandService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IAccessibilityService));\n  });\n}\n/**\r\n * Emitted when an editor is created.\r\n * Creating a diff editor might cause this listener to be invoked with the two editors.\r\n * @event\r\n */\n\nexport function onDidCreateEditor(listener) {\n  return StaticServices.codeEditorService.get().onCodeEditorAdd(function (editor) {\n    listener(editor);\n  });\n}\n/**\r\n * Create a new diff editor under `domElement`.\r\n * `domElement` should be empty (not contain other dom nodes).\r\n * The editor will read the size of `domElement`.\r\n */\n\nexport function createDiffEditor(domElement, options, override) {\n  return withAllStandaloneServices(domElement, override || {}, function (services) {\n    return new StandaloneDiffEditor(domElement, options, services, services.get(IInstantiationService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IEditorWorkerService), services.get(ICodeEditorService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IContextMenuService), services.get(IEditorProgressService), null);\n  });\n}\nexport function createDiffNavigator(diffEditor, opts) {\n  return new DiffNavigator(diffEditor, opts);\n}\n\nfunction doCreateModel(value, languageSelection, uri) {\n  return StaticServices.modelService.get().createModel(value, languageSelection, uri);\n}\n/**\r\n * Create a new editor model.\r\n * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\r\n */\n\n\nexport function createModel(value, language, uri) {\n  value = value || '';\n\n  if (!language) {\n    var firstLF = value.indexOf('\\n');\n    var firstLine = value;\n\n    if (firstLF !== -1) {\n      firstLine = value.substring(0, firstLF);\n    }\n\n    return doCreateModel(value, StaticServices.modeService.get().createByFilepathOrFirstLine(uri || null, firstLine), uri);\n  }\n\n  return doCreateModel(value, StaticServices.modeService.get().create(language), uri);\n}\n/**\r\n * Change the language for a model.\r\n */\n\nexport function setModelLanguage(model, languageId) {\n  StaticServices.modelService.get().setMode(model, StaticServices.modeService.get().create(languageId));\n}\n/**\r\n * Set the markers for a model.\r\n */\n\nexport function setModelMarkers(model, owner, markers) {\n  if (model) {\n    StaticServices.markerService.get().changeOne(owner, model.uri, markers);\n  }\n}\n/**\r\n * Get markers for owner and/or resource\r\n *\r\n * @returns list of markers\r\n */\n\nexport function getModelMarkers(filter) {\n  return StaticServices.markerService.get().read(filter);\n}\n/**\r\n * Get the model that has `uri` if it exists.\r\n */\n\nexport function getModel(uri) {\n  return StaticServices.modelService.get().getModel(uri);\n}\n/**\r\n * Get all the created models.\r\n */\n\nexport function getModels() {\n  return StaticServices.modelService.get().getModels();\n}\n/**\r\n * Emitted when a model is created.\r\n * @event\r\n */\n\nexport function onDidCreateModel(listener) {\n  return StaticServices.modelService.get().onModelAdded(listener);\n}\n/**\r\n * Emitted right before a model is disposed.\r\n * @event\r\n */\n\nexport function onWillDisposeModel(listener) {\n  return StaticServices.modelService.get().onModelRemoved(listener);\n}\n/**\r\n * Emitted when a different language is set to a model.\r\n * @event\r\n */\n\nexport function onDidChangeModelLanguage(listener) {\n  return StaticServices.modelService.get().onModelModeChanged(function (e) {\n    listener({\n      model: e.model,\n      oldLanguage: e.oldModeId\n    });\n  });\n}\n/**\r\n * Create a new web worker that has model syncing capabilities built in.\r\n * Specify an AMD module to load that will `create` an object that will be proxied.\r\n */\n\nexport function createWebWorker(opts) {\n  return actualCreateWebWorker(StaticServices.modelService.get(), opts);\n}\n/**\r\n * Colorize the contents of `domNode` using attribute `data-lang`.\r\n */\n\nexport function colorizeElement(domNode, options) {\n  return Colorizer.colorizeElement(StaticServices.standaloneThemeService.get(), StaticServices.modeService.get(), domNode, options);\n}\n/**\r\n * Colorize `text` using language `languageId`.\r\n */\n\nexport function colorize(text, languageId, options) {\n  return Colorizer.colorize(StaticServices.modeService.get(), text, languageId, options);\n}\n/**\r\n * Colorize a line in a model.\r\n */\n\nexport function colorizeModelLine(model, lineNumber, tabSize) {\n  if (tabSize === void 0) {\n    tabSize = 4;\n  }\n\n  return Colorizer.colorizeModelLine(model, lineNumber, tabSize);\n}\n/**\r\n * @internal\r\n */\n\nfunction getSafeTokenizationSupport(language) {\n  var tokenizationSupport = modes.TokenizationRegistry.get(language);\n\n  if (tokenizationSupport) {\n    return tokenizationSupport;\n  }\n\n  return {\n    getInitialState: function () {\n      return NULL_STATE;\n    },\n    tokenize: function (line, state, deltaOffset) {\n      return nullTokenize(language, line, state, deltaOffset);\n    }\n  };\n}\n/**\r\n * Tokenize `text` using language `languageId`\r\n */\n\n\nexport function tokenize(text, languageId) {\n  var modeService = StaticServices.modeService.get(); // Needed in order to get the mode registered for subsequent look-ups\n\n  modeService.triggerMode(languageId);\n  var tokenizationSupport = getSafeTokenizationSupport(languageId);\n  var lines = text.split(/\\r\\n|\\r|\\n/);\n  var result = [];\n  var state = tokenizationSupport.getInitialState();\n\n  for (var i = 0, len = lines.length; i < len; i++) {\n    var line = lines[i];\n    var tokenizationResult = tokenizationSupport.tokenize(line, state, 0);\n    result[i] = tokenizationResult.tokens;\n    state = tokenizationResult.endState;\n  }\n\n  return result;\n}\n/**\r\n * Define a new theme or update an existing theme.\r\n */\n\nexport function defineTheme(themeName, themeData) {\n  StaticServices.standaloneThemeService.get().defineTheme(themeName, themeData);\n}\n/**\r\n * Switches to a theme.\r\n */\n\nexport function setTheme(themeName) {\n  StaticServices.standaloneThemeService.get().setTheme(themeName);\n}\n/**\r\n * Clears all cached font measurements and triggers re-measurement.\r\n */\n\nexport function remeasureFonts() {\n  clearAllFontInfos();\n}\n/**\r\n * @internal\r\n */\n\nexport function createMonacoEditorAPI() {\n  return {\n    // methods\n    create: create,\n    onDidCreateEditor: onDidCreateEditor,\n    createDiffEditor: createDiffEditor,\n    createDiffNavigator: createDiffNavigator,\n    createModel: createModel,\n    setModelLanguage: setModelLanguage,\n    setModelMarkers: setModelMarkers,\n    getModelMarkers: getModelMarkers,\n    getModels: getModels,\n    getModel: getModel,\n    onDidCreateModel: onDidCreateModel,\n    onWillDisposeModel: onWillDisposeModel,\n    onDidChangeModelLanguage: onDidChangeModelLanguage,\n    createWebWorker: createWebWorker,\n    colorizeElement: colorizeElement,\n    colorize: colorize,\n    colorizeModelLine: colorizeModelLine,\n    tokenize: tokenize,\n    defineTheme: defineTheme,\n    setTheme: setTheme,\n    remeasureFonts: remeasureFonts,\n    // enums\n    AccessibilitySupport: standaloneEnums.AccessibilitySupport,\n    ContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,\n    CursorChangeReason: standaloneEnums.CursorChangeReason,\n    DefaultEndOfLine: standaloneEnums.DefaultEndOfLine,\n    EditorAutoIndentStrategy: standaloneEnums.EditorAutoIndentStrategy,\n    EditorOption: standaloneEnums.EditorOption,\n    EndOfLinePreference: standaloneEnums.EndOfLinePreference,\n    EndOfLineSequence: standaloneEnums.EndOfLineSequence,\n    MinimapPosition: standaloneEnums.MinimapPosition,\n    MouseTargetType: standaloneEnums.MouseTargetType,\n    OverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,\n    OverviewRulerLane: standaloneEnums.OverviewRulerLane,\n    RenderLineNumbersType: standaloneEnums.RenderLineNumbersType,\n    RenderMinimap: standaloneEnums.RenderMinimap,\n    ScrollbarVisibility: standaloneEnums.ScrollbarVisibility,\n    ScrollType: standaloneEnums.ScrollType,\n    TextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,\n    TextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,\n    TrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,\n    WrappingIndent: standaloneEnums.WrappingIndent,\n    // classes\n    ConfigurationChangedEvent: ConfigurationChangedEvent,\n    BareFontInfo: BareFontInfo,\n    FontInfo: FontInfo,\n    TextModelResolvedOptions: TextModelResolvedOptions,\n    FindMatch: FindMatch,\n    // vars\n    EditorType: EditorType,\n    EditorOptions: EditorOptions\n  };\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneEditor.js"],"names":["ICodeEditorService","OpenerService","DiffNavigator","EditorOptions","ConfigurationChangedEvent","BareFontInfo","FontInfo","EditorType","FindMatch","TextModelResolvedOptions","modes","NULL_STATE","nullTokenize","IEditorWorkerService","ITextModelService","createWebWorker","actualCreateWebWorker","standaloneEnums","Colorizer","SimpleEditorModelResolverService","StandaloneDiffEditor","StandaloneEditor","DynamicStandaloneServices","StaticServices","IStandaloneThemeService","ICommandService","IConfigurationService","IContextKeyService","IContextViewService","IContextMenuService","IInstantiationService","IKeybindingService","INotificationService","IOpenerService","IAccessibilityService","clearAllFontInfos","IEditorProgressService","withAllStandaloneServices","domElement","override","callback","services","simpleEditorModelResolverService","has","modelService","get","set","result","setEditor","create","options","onDidCreateEditor","listener","codeEditorService","onCodeEditorAdd","editor","createDiffEditor","createDiffNavigator","diffEditor","opts","doCreateModel","value","languageSelection","uri","createModel","language","firstLF","indexOf","firstLine","substring","modeService","createByFilepathOrFirstLine","setModelLanguage","model","languageId","setMode","setModelMarkers","owner","markers","markerService","changeOne","getModelMarkers","filter","read","getModel","getModels","onDidCreateModel","onModelAdded","onWillDisposeModel","onModelRemoved","onDidChangeModelLanguage","onModelModeChanged","e","oldLanguage","oldModeId","colorizeElement","domNode","standaloneThemeService","colorize","text","colorizeModelLine","lineNumber","tabSize","getSafeTokenizationSupport","tokenizationSupport","TokenizationRegistry","getInitialState","tokenize","line","state","deltaOffset","triggerMode","lines","split","i","len","length","tokenizationResult","tokens","endState","defineTheme","themeName","themeData","setTheme","remeasureFonts","createMonacoEditorAPI","AccessibilitySupport","ContentWidgetPositionPreference","CursorChangeReason","DefaultEndOfLine","EditorAutoIndentStrategy","EditorOption","EndOfLinePreference","EndOfLineSequence","MinimapPosition","MouseTargetType","OverlayWidgetPositionPreference","OverviewRulerLane","RenderLineNumbersType","RenderMinimap","ScrollbarVisibility","ScrollType","TextEditorCursorBlinkingStyle","TextEditorCursorStyle","TrackedRangeStickiness","WrappingIndent"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './standalone-tokens.css';\r\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\r\nimport { OpenerService } from '../../browser/services/openerService.js';\r\nimport { DiffNavigator } from '../../browser/widget/diffNavigator.js';\r\nimport { EditorOptions, ConfigurationChangedEvent } from '../../common/config/editorOptions.js';\r\nimport { BareFontInfo, FontInfo } from '../../common/config/fontInfo.js';\r\nimport { EditorType } from '../../common/editorCommon.js';\r\nimport { FindMatch, TextModelResolvedOptions } from '../../common/model.js';\r\nimport * as modes from '../../common/modes.js';\r\nimport { NULL_STATE, nullTokenize } from '../../common/modes/nullMode.js';\r\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\r\nimport { ITextModelService } from '../../common/services/resolverService.js';\r\nimport { createWebWorker as actualCreateWebWorker } from '../../common/services/webWorker.js';\r\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\r\nimport { Colorizer } from './colorizer.js';\r\nimport { SimpleEditorModelResolverService } from './simpleServices.js';\r\nimport { StandaloneDiffEditor, StandaloneEditor } from './standaloneCodeEditor.js';\r\nimport { DynamicStandaloneServices, StaticServices } from './standaloneServices.js';\r\nimport { IStandaloneThemeService } from '../common/standaloneThemeService.js';\r\nimport { ICommandService } from '../../../platform/commands/common/commands.js';\r\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\r\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\r\nimport { IContextViewService, IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\r\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\r\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\r\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\r\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\r\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\r\nimport { clearAllFontInfos } from '../../browser/config/configuration.js';\r\nimport { IEditorProgressService } from '../../../platform/progress/common/progress.js';\r\nfunction withAllStandaloneServices(domElement, override, callback) {\r\n    var services = new DynamicStandaloneServices(domElement, override);\r\n    var simpleEditorModelResolverService = null;\r\n    if (!services.has(ITextModelService)) {\r\n        simpleEditorModelResolverService = new SimpleEditorModelResolverService(StaticServices.modelService.get());\r\n        services.set(ITextModelService, simpleEditorModelResolverService);\r\n    }\r\n    if (!services.has(IOpenerService)) {\r\n        services.set(IOpenerService, new OpenerService(services.get(ICodeEditorService), services.get(ICommandService)));\r\n    }\r\n    var result = callback(services);\r\n    if (simpleEditorModelResolverService) {\r\n        simpleEditorModelResolverService.setEditor(result);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Create a new editor under `domElement`.\r\n * `domElement` should be empty (not contain other dom nodes).\r\n * The editor will read the size of `domElement`.\r\n */\r\nexport function create(domElement, options, override) {\r\n    return withAllStandaloneServices(domElement, override || {}, function (services) {\r\n        return new StandaloneEditor(domElement, options, services, services.get(IInstantiationService), services.get(ICodeEditorService), services.get(ICommandService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IAccessibilityService));\r\n    });\r\n}\r\n/**\r\n * Emitted when an editor is created.\r\n * Creating a diff editor might cause this listener to be invoked with the two editors.\r\n * @event\r\n */\r\nexport function onDidCreateEditor(listener) {\r\n    return StaticServices.codeEditorService.get().onCodeEditorAdd(function (editor) {\r\n        listener(editor);\r\n    });\r\n}\r\n/**\r\n * Create a new diff editor under `domElement`.\r\n * `domElement` should be empty (not contain other dom nodes).\r\n * The editor will read the size of `domElement`.\r\n */\r\nexport function createDiffEditor(domElement, options, override) {\r\n    return withAllStandaloneServices(domElement, override || {}, function (services) {\r\n        return new StandaloneDiffEditor(domElement, options, services, services.get(IInstantiationService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IEditorWorkerService), services.get(ICodeEditorService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IContextMenuService), services.get(IEditorProgressService), null);\r\n    });\r\n}\r\nexport function createDiffNavigator(diffEditor, opts) {\r\n    return new DiffNavigator(diffEditor, opts);\r\n}\r\nfunction doCreateModel(value, languageSelection, uri) {\r\n    return StaticServices.modelService.get().createModel(value, languageSelection, uri);\r\n}\r\n/**\r\n * Create a new editor model.\r\n * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\r\n */\r\nexport function createModel(value, language, uri) {\r\n    value = value || '';\r\n    if (!language) {\r\n        var firstLF = value.indexOf('\\n');\r\n        var firstLine = value;\r\n        if (firstLF !== -1) {\r\n            firstLine = value.substring(0, firstLF);\r\n        }\r\n        return doCreateModel(value, StaticServices.modeService.get().createByFilepathOrFirstLine(uri || null, firstLine), uri);\r\n    }\r\n    return doCreateModel(value, StaticServices.modeService.get().create(language), uri);\r\n}\r\n/**\r\n * Change the language for a model.\r\n */\r\nexport function setModelLanguage(model, languageId) {\r\n    StaticServices.modelService.get().setMode(model, StaticServices.modeService.get().create(languageId));\r\n}\r\n/**\r\n * Set the markers for a model.\r\n */\r\nexport function setModelMarkers(model, owner, markers) {\r\n    if (model) {\r\n        StaticServices.markerService.get().changeOne(owner, model.uri, markers);\r\n    }\r\n}\r\n/**\r\n * Get markers for owner and/or resource\r\n *\r\n * @returns list of markers\r\n */\r\nexport function getModelMarkers(filter) {\r\n    return StaticServices.markerService.get().read(filter);\r\n}\r\n/**\r\n * Get the model that has `uri` if it exists.\r\n */\r\nexport function getModel(uri) {\r\n    return StaticServices.modelService.get().getModel(uri);\r\n}\r\n/**\r\n * Get all the created models.\r\n */\r\nexport function getModels() {\r\n    return StaticServices.modelService.get().getModels();\r\n}\r\n/**\r\n * Emitted when a model is created.\r\n * @event\r\n */\r\nexport function onDidCreateModel(listener) {\r\n    return StaticServices.modelService.get().onModelAdded(listener);\r\n}\r\n/**\r\n * Emitted right before a model is disposed.\r\n * @event\r\n */\r\nexport function onWillDisposeModel(listener) {\r\n    return StaticServices.modelService.get().onModelRemoved(listener);\r\n}\r\n/**\r\n * Emitted when a different language is set to a model.\r\n * @event\r\n */\r\nexport function onDidChangeModelLanguage(listener) {\r\n    return StaticServices.modelService.get().onModelModeChanged(function (e) {\r\n        listener({\r\n            model: e.model,\r\n            oldLanguage: e.oldModeId\r\n        });\r\n    });\r\n}\r\n/**\r\n * Create a new web worker that has model syncing capabilities built in.\r\n * Specify an AMD module to load that will `create` an object that will be proxied.\r\n */\r\nexport function createWebWorker(opts) {\r\n    return actualCreateWebWorker(StaticServices.modelService.get(), opts);\r\n}\r\n/**\r\n * Colorize the contents of `domNode` using attribute `data-lang`.\r\n */\r\nexport function colorizeElement(domNode, options) {\r\n    return Colorizer.colorizeElement(StaticServices.standaloneThemeService.get(), StaticServices.modeService.get(), domNode, options);\r\n}\r\n/**\r\n * Colorize `text` using language `languageId`.\r\n */\r\nexport function colorize(text, languageId, options) {\r\n    return Colorizer.colorize(StaticServices.modeService.get(), text, languageId, options);\r\n}\r\n/**\r\n * Colorize a line in a model.\r\n */\r\nexport function colorizeModelLine(model, lineNumber, tabSize) {\r\n    if (tabSize === void 0) { tabSize = 4; }\r\n    return Colorizer.colorizeModelLine(model, lineNumber, tabSize);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction getSafeTokenizationSupport(language) {\r\n    var tokenizationSupport = modes.TokenizationRegistry.get(language);\r\n    if (tokenizationSupport) {\r\n        return tokenizationSupport;\r\n    }\r\n    return {\r\n        getInitialState: function () { return NULL_STATE; },\r\n        tokenize: function (line, state, deltaOffset) { return nullTokenize(language, line, state, deltaOffset); }\r\n    };\r\n}\r\n/**\r\n * Tokenize `text` using language `languageId`\r\n */\r\nexport function tokenize(text, languageId) {\r\n    var modeService = StaticServices.modeService.get();\r\n    // Needed in order to get the mode registered for subsequent look-ups\r\n    modeService.triggerMode(languageId);\r\n    var tokenizationSupport = getSafeTokenizationSupport(languageId);\r\n    var lines = text.split(/\\r\\n|\\r|\\n/);\r\n    var result = [];\r\n    var state = tokenizationSupport.getInitialState();\r\n    for (var i = 0, len = lines.length; i < len; i++) {\r\n        var line = lines[i];\r\n        var tokenizationResult = tokenizationSupport.tokenize(line, state, 0);\r\n        result[i] = tokenizationResult.tokens;\r\n        state = tokenizationResult.endState;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Define a new theme or update an existing theme.\r\n */\r\nexport function defineTheme(themeName, themeData) {\r\n    StaticServices.standaloneThemeService.get().defineTheme(themeName, themeData);\r\n}\r\n/**\r\n * Switches to a theme.\r\n */\r\nexport function setTheme(themeName) {\r\n    StaticServices.standaloneThemeService.get().setTheme(themeName);\r\n}\r\n/**\r\n * Clears all cached font measurements and triggers re-measurement.\r\n */\r\nexport function remeasureFonts() {\r\n    clearAllFontInfos();\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport function createMonacoEditorAPI() {\r\n    return {\r\n        // methods\r\n        create: create,\r\n        onDidCreateEditor: onDidCreateEditor,\r\n        createDiffEditor: createDiffEditor,\r\n        createDiffNavigator: createDiffNavigator,\r\n        createModel: createModel,\r\n        setModelLanguage: setModelLanguage,\r\n        setModelMarkers: setModelMarkers,\r\n        getModelMarkers: getModelMarkers,\r\n        getModels: getModels,\r\n        getModel: getModel,\r\n        onDidCreateModel: onDidCreateModel,\r\n        onWillDisposeModel: onWillDisposeModel,\r\n        onDidChangeModelLanguage: onDidChangeModelLanguage,\r\n        createWebWorker: createWebWorker,\r\n        colorizeElement: colorizeElement,\r\n        colorize: colorize,\r\n        colorizeModelLine: colorizeModelLine,\r\n        tokenize: tokenize,\r\n        defineTheme: defineTheme,\r\n        setTheme: setTheme,\r\n        remeasureFonts: remeasureFonts,\r\n        // enums\r\n        AccessibilitySupport: standaloneEnums.AccessibilitySupport,\r\n        ContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,\r\n        CursorChangeReason: standaloneEnums.CursorChangeReason,\r\n        DefaultEndOfLine: standaloneEnums.DefaultEndOfLine,\r\n        EditorAutoIndentStrategy: standaloneEnums.EditorAutoIndentStrategy,\r\n        EditorOption: standaloneEnums.EditorOption,\r\n        EndOfLinePreference: standaloneEnums.EndOfLinePreference,\r\n        EndOfLineSequence: standaloneEnums.EndOfLineSequence,\r\n        MinimapPosition: standaloneEnums.MinimapPosition,\r\n        MouseTargetType: standaloneEnums.MouseTargetType,\r\n        OverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,\r\n        OverviewRulerLane: standaloneEnums.OverviewRulerLane,\r\n        RenderLineNumbersType: standaloneEnums.RenderLineNumbersType,\r\n        RenderMinimap: standaloneEnums.RenderMinimap,\r\n        ScrollbarVisibility: standaloneEnums.ScrollbarVisibility,\r\n        ScrollType: standaloneEnums.ScrollType,\r\n        TextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,\r\n        TextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,\r\n        TrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,\r\n        WrappingIndent: standaloneEnums.WrappingIndent,\r\n        // classes\r\n        ConfigurationChangedEvent: ConfigurationChangedEvent,\r\n        BareFontInfo: BareFontInfo,\r\n        FontInfo: FontInfo,\r\n        TextModelResolvedOptions: TextModelResolvedOptions,\r\n        FindMatch: FindMatch,\r\n        // vars\r\n        EditorType: EditorType,\r\n        EditorOptions: EditorOptions\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}