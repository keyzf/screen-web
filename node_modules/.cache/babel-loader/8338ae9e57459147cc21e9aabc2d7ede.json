{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar SpacesDiffResult =\n/** @class */\nfunction () {\n  function SpacesDiffResult() {\n    this.spacesDiff = 0;\n    this.looksLikeAlignment = false;\n  }\n\n  return SpacesDiffResult;\n}();\n/**\r\n * Compute the diff in spaces between two line's indentation.\r\n */\n\n\nfunction spacesDiff(a, aLength, b, bLength, result) {\n  result.spacesDiff = 0;\n  result.looksLikeAlignment = false; // This can go both ways (e.g.):\n  //  - a: \"\\t\"\n  //  - b: \"\\t    \"\n  //  => This should count 1 tab and 4 spaces\n\n  var i;\n\n  for (i = 0; i < aLength && i < bLength; i++) {\n    var aCharCode = a.charCodeAt(i);\n    var bCharCode = b.charCodeAt(i);\n\n    if (aCharCode !== bCharCode) {\n      break;\n    }\n  }\n\n  var aSpacesCnt = 0,\n      aTabsCount = 0;\n\n  for (var j = i; j < aLength; j++) {\n    var aCharCode = a.charCodeAt(j);\n\n    if (aCharCode === 32\n    /* Space */\n    ) {\n        aSpacesCnt++;\n      } else {\n      aTabsCount++;\n    }\n  }\n\n  var bSpacesCnt = 0,\n      bTabsCount = 0;\n\n  for (var j = i; j < bLength; j++) {\n    var bCharCode = b.charCodeAt(j);\n\n    if (bCharCode === 32\n    /* Space */\n    ) {\n        bSpacesCnt++;\n      } else {\n      bTabsCount++;\n    }\n  }\n\n  if (aSpacesCnt > 0 && aTabsCount > 0) {\n    return;\n  }\n\n  if (bSpacesCnt > 0 && bTabsCount > 0) {\n    return;\n  }\n\n  var tabsDiff = Math.abs(aTabsCount - bTabsCount);\n  var spacesDiff = Math.abs(aSpacesCnt - bSpacesCnt);\n\n  if (tabsDiff === 0) {\n    // check if the indentation difference might be caused by alignment reasons\n    // sometime folks like to align their code, but this should not be used as a hint\n    result.spacesDiff = spacesDiff;\n\n    if (spacesDiff > 0 && 0 <= bSpacesCnt - 1 && bSpacesCnt - 1 < a.length && bSpacesCnt < b.length) {\n      if (b.charCodeAt(bSpacesCnt) !== 32\n      /* Space */\n      && a.charCodeAt(bSpacesCnt - 1) === 32\n      /* Space */\n      ) {\n          if (a.charCodeAt(a.length - 1) === 44\n          /* Comma */\n          ) {\n              // This looks like an alignment desire: e.g.\n              // const a = b + c,\n              //       d = b - c;\n              result.looksLikeAlignment = true;\n            }\n        }\n    }\n\n    return;\n  }\n\n  if (spacesDiff % tabsDiff === 0) {\n    result.spacesDiff = spacesDiff / tabsDiff;\n    return;\n  }\n}\n\nexport function guessIndentation(source, defaultTabSize, defaultInsertSpaces) {\n  // Look at most at the first 10k lines\n  var linesCount = Math.min(source.getLineCount(), 10000);\n  var linesIndentedWithTabsCount = 0; // number of lines that contain at least one tab in indentation\n\n  var linesIndentedWithSpacesCount = 0; // number of lines that contain only spaces in indentation\n\n  var previousLineText = ''; // content of latest line that contained non-whitespace chars\n\n  var previousLineIndentation = 0; // index at which latest line contained the first non-whitespace char\n\n  var ALLOWED_TAB_SIZE_GUESSES = [2, 4, 6, 8, 3, 5, 7]; // prefer even guesses for `tabSize`, limit to [2, 8].\n\n  var MAX_ALLOWED_TAB_SIZE_GUESS = 8; // max(ALLOWED_TAB_SIZE_GUESSES) = 8\n\n  var spacesDiffCount = [0, 0, 0, 0, 0, 0, 0, 0, 0]; // `tabSize` scores\n\n  var tmp = new SpacesDiffResult();\n\n  for (var lineNumber = 1; lineNumber <= linesCount; lineNumber++) {\n    var currentLineLength = source.getLineLength(lineNumber);\n    var currentLineText = source.getLineContent(lineNumber); // if the text buffer is chunk based, so long lines are cons-string, v8 will flattern the string when we check charCode.\n    // checking charCode on chunks directly is cheaper.\n\n    var useCurrentLineText = currentLineLength <= 65536;\n    var currentLineHasContent = false; // does `currentLineText` contain non-whitespace chars\n\n    var currentLineIndentation = 0; // index at which `currentLineText` contains the first non-whitespace char\n\n    var currentLineSpacesCount = 0; // count of spaces found in `currentLineText` indentation\n\n    var currentLineTabsCount = 0; // count of tabs found in `currentLineText` indentation\n\n    for (var j = 0, lenJ = currentLineLength; j < lenJ; j++) {\n      var charCode = useCurrentLineText ? currentLineText.charCodeAt(j) : source.getLineCharCode(lineNumber, j);\n\n      if (charCode === 9\n      /* Tab */\n      ) {\n          currentLineTabsCount++;\n        } else if (charCode === 32\n      /* Space */\n      ) {\n          currentLineSpacesCount++;\n        } else {\n        // Hit non whitespace character on this line\n        currentLineHasContent = true;\n        currentLineIndentation = j;\n        break;\n      }\n    } // Ignore empty or only whitespace lines\n\n\n    if (!currentLineHasContent) {\n      continue;\n    }\n\n    if (currentLineTabsCount > 0) {\n      linesIndentedWithTabsCount++;\n    } else if (currentLineSpacesCount > 1) {\n      linesIndentedWithSpacesCount++;\n    }\n\n    spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation, tmp);\n\n    if (tmp.looksLikeAlignment) {\n      // if defaultInsertSpaces === true && the spaces count == tabSize, we may want to count it as valid indentation\n      //\n      // - item1\n      //   - item2\n      //\n      // otherwise skip this line entirely\n      //\n      // const a = 1,\n      //       b = 2;\n      if (!(defaultInsertSpaces && defaultTabSize === tmp.spacesDiff)) {\n        continue;\n      }\n    }\n\n    var currentSpacesDiff = tmp.spacesDiff;\n\n    if (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {\n      spacesDiffCount[currentSpacesDiff]++;\n    }\n\n    previousLineText = currentLineText;\n    previousLineIndentation = currentLineIndentation;\n  }\n\n  var insertSpaces = defaultInsertSpaces;\n\n  if (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {\n    insertSpaces = linesIndentedWithTabsCount < linesIndentedWithSpacesCount;\n  }\n\n  var tabSize = defaultTabSize; // Guess tabSize only if inserting spaces...\n\n  if (insertSpaces) {\n    var tabSizeScore_1 = insertSpaces ? 0 : 0.1 * linesCount; // console.log(\"score threshold: \" + tabSizeScore);\n\n    ALLOWED_TAB_SIZE_GUESSES.forEach(function (possibleTabSize) {\n      var possibleTabSizeScore = spacesDiffCount[possibleTabSize];\n\n      if (possibleTabSizeScore > tabSizeScore_1) {\n        tabSizeScore_1 = possibleTabSizeScore;\n        tabSize = possibleTabSize;\n      }\n    }); // Let a tabSize of 2 win even if it is not the maximum\n    // (only in case 4 was guessed)\n\n    if (tabSize === 4 && spacesDiffCount[4] > 0 && spacesDiffCount[2] > 0 && spacesDiffCount[2] >= spacesDiffCount[4] / 2) {\n      tabSize = 2;\n    }\n  } // console.log('--------------------------');\n  // console.log('linesIndentedWithTabsCount: ' + linesIndentedWithTabsCount + ', linesIndentedWithSpacesCount: ' + linesIndentedWithSpacesCount);\n  // console.log('spacesDiffCount: ' + spacesDiffCount);\n  // console.log('tabSize: ' + tabSize + ', tabSizeScore: ' + tabSizeScore);\n\n\n  return {\n    insertSpaces: insertSpaces,\n    tabSize: tabSize\n  };\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/model/indentationGuesser.js"],"names":["SpacesDiffResult","spacesDiff","looksLikeAlignment","a","aLength","b","bLength","result","i","aCharCode","charCodeAt","bCharCode","aSpacesCnt","aTabsCount","j","bSpacesCnt","bTabsCount","tabsDiff","Math","abs","length","guessIndentation","source","defaultTabSize","defaultInsertSpaces","linesCount","min","getLineCount","linesIndentedWithTabsCount","linesIndentedWithSpacesCount","previousLineText","previousLineIndentation","ALLOWED_TAB_SIZE_GUESSES","MAX_ALLOWED_TAB_SIZE_GUESS","spacesDiffCount","tmp","lineNumber","currentLineLength","getLineLength","currentLineText","getLineContent","useCurrentLineText","currentLineHasContent","currentLineIndentation","currentLineSpacesCount","currentLineTabsCount","lenJ","charCode","getLineCharCode","currentSpacesDiff","insertSpaces","tabSize","tabSizeScore_1","forEach","possibleTabSize","possibleTabSizeScore"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar SpacesDiffResult = /** @class */ (function () {\r\n    function SpacesDiffResult() {\r\n        this.spacesDiff = 0;\r\n        this.looksLikeAlignment = false;\r\n    }\r\n    return SpacesDiffResult;\r\n}());\r\n/**\r\n * Compute the diff in spaces between two line's indentation.\r\n */\r\nfunction spacesDiff(a, aLength, b, bLength, result) {\r\n    result.spacesDiff = 0;\r\n    result.looksLikeAlignment = false;\r\n    // This can go both ways (e.g.):\r\n    //  - a: \"\\t\"\r\n    //  - b: \"\\t    \"\r\n    //  => This should count 1 tab and 4 spaces\r\n    var i;\r\n    for (i = 0; i < aLength && i < bLength; i++) {\r\n        var aCharCode = a.charCodeAt(i);\r\n        var bCharCode = b.charCodeAt(i);\r\n        if (aCharCode !== bCharCode) {\r\n            break;\r\n        }\r\n    }\r\n    var aSpacesCnt = 0, aTabsCount = 0;\r\n    for (var j = i; j < aLength; j++) {\r\n        var aCharCode = a.charCodeAt(j);\r\n        if (aCharCode === 32 /* Space */) {\r\n            aSpacesCnt++;\r\n        }\r\n        else {\r\n            aTabsCount++;\r\n        }\r\n    }\r\n    var bSpacesCnt = 0, bTabsCount = 0;\r\n    for (var j = i; j < bLength; j++) {\r\n        var bCharCode = b.charCodeAt(j);\r\n        if (bCharCode === 32 /* Space */) {\r\n            bSpacesCnt++;\r\n        }\r\n        else {\r\n            bTabsCount++;\r\n        }\r\n    }\r\n    if (aSpacesCnt > 0 && aTabsCount > 0) {\r\n        return;\r\n    }\r\n    if (bSpacesCnt > 0 && bTabsCount > 0) {\r\n        return;\r\n    }\r\n    var tabsDiff = Math.abs(aTabsCount - bTabsCount);\r\n    var spacesDiff = Math.abs(aSpacesCnt - bSpacesCnt);\r\n    if (tabsDiff === 0) {\r\n        // check if the indentation difference might be caused by alignment reasons\r\n        // sometime folks like to align their code, but this should not be used as a hint\r\n        result.spacesDiff = spacesDiff;\r\n        if (spacesDiff > 0 && 0 <= bSpacesCnt - 1 && bSpacesCnt - 1 < a.length && bSpacesCnt < b.length) {\r\n            if (b.charCodeAt(bSpacesCnt) !== 32 /* Space */ && a.charCodeAt(bSpacesCnt - 1) === 32 /* Space */) {\r\n                if (a.charCodeAt(a.length - 1) === 44 /* Comma */) {\r\n                    // This looks like an alignment desire: e.g.\r\n                    // const a = b + c,\r\n                    //       d = b - c;\r\n                    result.looksLikeAlignment = true;\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    if (spacesDiff % tabsDiff === 0) {\r\n        result.spacesDiff = spacesDiff / tabsDiff;\r\n        return;\r\n    }\r\n}\r\nexport function guessIndentation(source, defaultTabSize, defaultInsertSpaces) {\r\n    // Look at most at the first 10k lines\r\n    var linesCount = Math.min(source.getLineCount(), 10000);\r\n    var linesIndentedWithTabsCount = 0; // number of lines that contain at least one tab in indentation\r\n    var linesIndentedWithSpacesCount = 0; // number of lines that contain only spaces in indentation\r\n    var previousLineText = ''; // content of latest line that contained non-whitespace chars\r\n    var previousLineIndentation = 0; // index at which latest line contained the first non-whitespace char\r\n    var ALLOWED_TAB_SIZE_GUESSES = [2, 4, 6, 8, 3, 5, 7]; // prefer even guesses for `tabSize`, limit to [2, 8].\r\n    var MAX_ALLOWED_TAB_SIZE_GUESS = 8; // max(ALLOWED_TAB_SIZE_GUESSES) = 8\r\n    var spacesDiffCount = [0, 0, 0, 0, 0, 0, 0, 0, 0]; // `tabSize` scores\r\n    var tmp = new SpacesDiffResult();\r\n    for (var lineNumber = 1; lineNumber <= linesCount; lineNumber++) {\r\n        var currentLineLength = source.getLineLength(lineNumber);\r\n        var currentLineText = source.getLineContent(lineNumber);\r\n        // if the text buffer is chunk based, so long lines are cons-string, v8 will flattern the string when we check charCode.\r\n        // checking charCode on chunks directly is cheaper.\r\n        var useCurrentLineText = (currentLineLength <= 65536);\r\n        var currentLineHasContent = false; // does `currentLineText` contain non-whitespace chars\r\n        var currentLineIndentation = 0; // index at which `currentLineText` contains the first non-whitespace char\r\n        var currentLineSpacesCount = 0; // count of spaces found in `currentLineText` indentation\r\n        var currentLineTabsCount = 0; // count of tabs found in `currentLineText` indentation\r\n        for (var j = 0, lenJ = currentLineLength; j < lenJ; j++) {\r\n            var charCode = (useCurrentLineText ? currentLineText.charCodeAt(j) : source.getLineCharCode(lineNumber, j));\r\n            if (charCode === 9 /* Tab */) {\r\n                currentLineTabsCount++;\r\n            }\r\n            else if (charCode === 32 /* Space */) {\r\n                currentLineSpacesCount++;\r\n            }\r\n            else {\r\n                // Hit non whitespace character on this line\r\n                currentLineHasContent = true;\r\n                currentLineIndentation = j;\r\n                break;\r\n            }\r\n        }\r\n        // Ignore empty or only whitespace lines\r\n        if (!currentLineHasContent) {\r\n            continue;\r\n        }\r\n        if (currentLineTabsCount > 0) {\r\n            linesIndentedWithTabsCount++;\r\n        }\r\n        else if (currentLineSpacesCount > 1) {\r\n            linesIndentedWithSpacesCount++;\r\n        }\r\n        spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation, tmp);\r\n        if (tmp.looksLikeAlignment) {\r\n            // if defaultInsertSpaces === true && the spaces count == tabSize, we may want to count it as valid indentation\r\n            //\r\n            // - item1\r\n            //   - item2\r\n            //\r\n            // otherwise skip this line entirely\r\n            //\r\n            // const a = 1,\r\n            //       b = 2;\r\n            if (!(defaultInsertSpaces && defaultTabSize === tmp.spacesDiff)) {\r\n                continue;\r\n            }\r\n        }\r\n        var currentSpacesDiff = tmp.spacesDiff;\r\n        if (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {\r\n            spacesDiffCount[currentSpacesDiff]++;\r\n        }\r\n        previousLineText = currentLineText;\r\n        previousLineIndentation = currentLineIndentation;\r\n    }\r\n    var insertSpaces = defaultInsertSpaces;\r\n    if (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {\r\n        insertSpaces = (linesIndentedWithTabsCount < linesIndentedWithSpacesCount);\r\n    }\r\n    var tabSize = defaultTabSize;\r\n    // Guess tabSize only if inserting spaces...\r\n    if (insertSpaces) {\r\n        var tabSizeScore_1 = (insertSpaces ? 0 : 0.1 * linesCount);\r\n        // console.log(\"score threshold: \" + tabSizeScore);\r\n        ALLOWED_TAB_SIZE_GUESSES.forEach(function (possibleTabSize) {\r\n            var possibleTabSizeScore = spacesDiffCount[possibleTabSize];\r\n            if (possibleTabSizeScore > tabSizeScore_1) {\r\n                tabSizeScore_1 = possibleTabSizeScore;\r\n                tabSize = possibleTabSize;\r\n            }\r\n        });\r\n        // Let a tabSize of 2 win even if it is not the maximum\r\n        // (only in case 4 was guessed)\r\n        if (tabSize === 4 && spacesDiffCount[4] > 0 && spacesDiffCount[2] > 0 && spacesDiffCount[2] >= spacesDiffCount[4] / 2) {\r\n            tabSize = 2;\r\n        }\r\n    }\r\n    // console.log('--------------------------');\r\n    // console.log('linesIndentedWithTabsCount: ' + linesIndentedWithTabsCount + ', linesIndentedWithSpacesCount: ' + linesIndentedWithSpacesCount);\r\n    // console.log('spacesDiffCount: ' + spacesDiffCount);\r\n    // console.log('tabSize: ' + tabSize + ', tabSizeScore: ' + tabSizeScore);\r\n    return {\r\n        insertSpaces: insertSpaces,\r\n        tabSize: tabSize\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}