{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { conf as tsConf, language as tsLanguage } from '../typescript/typescript.js'; // Allow for running under nodejs/requirejs in tests\n\nvar _monaco = typeof monaco === 'undefined' ? self.monaco : monaco;\n\nexport var conf = tsConf;\nexport var language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: 'invalid',\n  tokenPostfix: '.js',\n  keywords: ['break', 'case', 'catch', 'class', 'continue', 'const', 'constructor', 'debugger', 'default', 'delete', 'do', 'else', 'export', 'extends', 'false', 'finally', 'for', 'from', 'function', 'get', 'if', 'import', 'in', 'instanceof', 'let', 'new', 'null', 'return', 'set', 'super', 'switch', 'symbol', 'this', 'throw', 'true', 'try', 'typeof', 'undefined', 'var', 'void', 'while', 'with', 'yield', 'async', 'await', 'of'],\n  typeKeywords: [],\n  operators: tsLanguage.operators,\n  symbols: tsLanguage.symbols,\n  escapes: tsLanguage.escapes,\n  digits: tsLanguage.digits,\n  octaldigits: tsLanguage.octaldigits,\n  binarydigits: tsLanguage.binarydigits,\n  hexdigits: tsLanguage.hexdigits,\n  regexpctl: tsLanguage.regexpctl,\n  regexpesc: tsLanguage.regexpesc,\n  tokenizer: tsLanguage.tokenizer\n};","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/basic-languages/javascript/javascript.js"],"names":["conf","tsConf","language","tsLanguage","_monaco","monaco","self","defaultToken","tokenPostfix","keywords","typeKeywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","regexpctl","regexpesc","tokenizer"],"mappings":"AAAA;;;;AAIA;;AACA,SAASA,IAAI,IAAIC,MAAjB,EAAyBC,QAAQ,IAAIC,UAArC,QAAuD,6BAAvD,C,CACA;;AACA,IAAIC,OAAO,GAAI,OAAOC,MAAP,KAAkB,WAAlB,GAAgCC,IAAI,CAACD,MAArC,GAA8CA,MAA7D;;AACA,OAAO,IAAIL,IAAI,GAAGC,MAAX;AACP,OAAO,IAAIC,QAAQ,GAAG;AAClB;AACAK,EAAAA,YAAY,EAAE,SAFI;AAGlBC,EAAAA,YAAY,EAAE,KAHI;AAIlBC,EAAAA,QAAQ,EAAE,CACN,OADM,EACG,MADH,EACW,OADX,EACoB,OADpB,EAC6B,UAD7B,EACyC,OADzC,EAEN,aAFM,EAES,UAFT,EAEqB,SAFrB,EAEgC,QAFhC,EAE0C,IAF1C,EAEgD,MAFhD,EAGN,QAHM,EAGI,SAHJ,EAGe,OAHf,EAGwB,SAHxB,EAGmC,KAHnC,EAG0C,MAH1C,EAGkD,UAHlD,EAIN,KAJM,EAIC,IAJD,EAIO,QAJP,EAIiB,IAJjB,EAIuB,YAJvB,EAIqC,KAJrC,EAI4C,KAJ5C,EAImD,MAJnD,EAKN,QALM,EAKI,KALJ,EAKW,OALX,EAKoB,QALpB,EAK8B,QAL9B,EAKwC,MALxC,EAKgD,OALhD,EAKyD,MALzD,EAMN,KANM,EAMC,QAND,EAMW,WANX,EAMwB,KANxB,EAM+B,MAN/B,EAMuC,OANvC,EAMgD,MANhD,EAMwD,OANxD,EAON,OAPM,EAOG,OAPH,EAOY,IAPZ,CAJQ;AAalBC,EAAAA,YAAY,EAAE,EAbI;AAclBC,EAAAA,SAAS,EAAER,UAAU,CAACQ,SAdJ;AAelBC,EAAAA,OAAO,EAAET,UAAU,CAACS,OAfF;AAgBlBC,EAAAA,OAAO,EAAEV,UAAU,CAACU,OAhBF;AAiBlBC,EAAAA,MAAM,EAAEX,UAAU,CAACW,MAjBD;AAkBlBC,EAAAA,WAAW,EAAEZ,UAAU,CAACY,WAlBN;AAmBlBC,EAAAA,YAAY,EAAEb,UAAU,CAACa,YAnBP;AAoBlBC,EAAAA,SAAS,EAAEd,UAAU,CAACc,SApBJ;AAqBlBC,EAAAA,SAAS,EAAEf,UAAU,CAACe,SArBJ;AAsBlBC,EAAAA,SAAS,EAAEhB,UAAU,CAACgB,SAtBJ;AAuBlBC,EAAAA,SAAS,EAAEjB,UAAU,CAACiB;AAvBJ,CAAf","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nimport { conf as tsConf, language as tsLanguage } from '../typescript/typescript.js';\r\n// Allow for running under nodejs/requirejs in tests\r\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\r\nexport var conf = tsConf;\r\nexport var language = {\r\n    // Set defaultToken to invalid to see what you do not tokenize yet\r\n    defaultToken: 'invalid',\r\n    tokenPostfix: '.js',\r\n    keywords: [\r\n        'break', 'case', 'catch', 'class', 'continue', 'const',\r\n        'constructor', 'debugger', 'default', 'delete', 'do', 'else',\r\n        'export', 'extends', 'false', 'finally', 'for', 'from', 'function',\r\n        'get', 'if', 'import', 'in', 'instanceof', 'let', 'new', 'null',\r\n        'return', 'set', 'super', 'switch', 'symbol', 'this', 'throw', 'true',\r\n        'try', 'typeof', 'undefined', 'var', 'void', 'while', 'with', 'yield',\r\n        'async', 'await', 'of'\r\n    ],\r\n    typeKeywords: [],\r\n    operators: tsLanguage.operators,\r\n    symbols: tsLanguage.symbols,\r\n    escapes: tsLanguage.escapes,\r\n    digits: tsLanguage.digits,\r\n    octaldigits: tsLanguage.octaldigits,\r\n    binarydigits: tsLanguage.binarydigits,\r\n    hexdigits: tsLanguage.hexdigits,\r\n    regexpctl: tsLanguage.regexpctl,\r\n    regexpesc: tsLanguage.regexpesc,\r\n    tokenizer: tsLanguage.tokenizer,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}