{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as browser from '../../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RangeUtil } from './rangeUtil.js';\nimport { HorizontalRange, VisibleRanges } from '../../../common/view/renderingContext.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { CharacterMapping, RenderLineInput, renderViewLine, LineRange } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { HIGH_CONTRAST } from '../../../../platform/theme/common/themeService.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\n\nvar canUseFastRenderedViewLine = function () {\n  if (platform.isNative) {\n    // In VSCode we know very well when the zoom level changes\n    return true;\n  }\n\n  if (platform.isLinux || browser.isFirefox || browser.isSafari) {\n    // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n    // --\n    // Even though we read character widths correctly, having read them at a specific zoom level\n    // does not mean they are the same at the current zoom level.\n    // --\n    // This could be improved if we ever figure out how to get an event when browsers zoom,\n    // but until then we have to stick with reading client rects.\n    // --\n    // The same has been observed with Firefox on Windows7\n    // --\n    // The same has been oversved with Safari\n    return false;\n  }\n\n  return true;\n}();\n\nvar alwaysRenderInlineSelection = browser.isEdgeOrIE;\n\nvar DomReadingContext =\n/** @class */\nfunction () {\n  function DomReadingContext(domNode, endNode) {\n    this._domNode = domNode;\n    this._clientRectDeltaLeft = 0;\n    this._clientRectDeltaLeftRead = false;\n    this.endNode = endNode;\n  }\n\n  Object.defineProperty(DomReadingContext.prototype, \"clientRectDeltaLeft\", {\n    get: function () {\n      if (!this._clientRectDeltaLeftRead) {\n        this._clientRectDeltaLeftRead = true;\n        this._clientRectDeltaLeft = this._domNode.getBoundingClientRect().left;\n      }\n\n      return this._clientRectDeltaLeft;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DomReadingContext;\n}();\n\nexport { DomReadingContext };\n\nvar ViewLineOptions =\n/** @class */\nfunction () {\n  function ViewLineOptions(config, themeType) {\n    this.themeType = themeType;\n    var options = config.options;\n    var fontInfo = options.get(34\n    /* fontInfo */\n    );\n    this.renderWhitespace = options.get(74\n    /* renderWhitespace */\n    );\n    this.renderControlCharacters = options.get(69\n    /* renderControlCharacters */\n    );\n    this.spaceWidth = fontInfo.spaceWidth;\n    this.middotWidth = fontInfo.middotWidth;\n    this.useMonospaceOptimizations = fontInfo.isMonospace && !options.get(23\n    /* disableMonospaceOptimizations */\n    );\n    this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n    this.lineHeight = options.get(49\n    /* lineHeight */\n    );\n    this.stopRenderingLineAfter = options.get(88\n    /* stopRenderingLineAfter */\n    );\n    this.fontLigatures = options.get(35\n    /* fontLigatures */\n    );\n  }\n\n  ViewLineOptions.prototype.equals = function (other) {\n    return this.themeType === other.themeType && this.renderWhitespace === other.renderWhitespace && this.renderControlCharacters === other.renderControlCharacters && this.spaceWidth === other.spaceWidth && this.middotWidth === other.middotWidth && this.useMonospaceOptimizations === other.useMonospaceOptimizations && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow && this.lineHeight === other.lineHeight && this.stopRenderingLineAfter === other.stopRenderingLineAfter && this.fontLigatures === other.fontLigatures;\n  };\n\n  return ViewLineOptions;\n}();\n\nexport { ViewLineOptions };\n\nvar ViewLine =\n/** @class */\nfunction () {\n  function ViewLine(options) {\n    this._options = options;\n    this._isMaybeInvalid = true;\n    this._renderedViewLine = null;\n  } // --- begin IVisibleLineData\n\n\n  ViewLine.prototype.getDomNode = function () {\n    if (this._renderedViewLine && this._renderedViewLine.domNode) {\n      return this._renderedViewLine.domNode.domNode;\n    }\n\n    return null;\n  };\n\n  ViewLine.prototype.setDomNode = function (domNode) {\n    if (this._renderedViewLine) {\n      this._renderedViewLine.domNode = createFastDomNode(domNode);\n    } else {\n      throw new Error('I have no rendered view line to set the dom node to...');\n    }\n  };\n\n  ViewLine.prototype.onContentChanged = function () {\n    this._isMaybeInvalid = true;\n  };\n\n  ViewLine.prototype.onTokensChanged = function () {\n    this._isMaybeInvalid = true;\n  };\n\n  ViewLine.prototype.onDecorationsChanged = function () {\n    this._isMaybeInvalid = true;\n  };\n\n  ViewLine.prototype.onOptionsChanged = function (newOptions) {\n    this._isMaybeInvalid = true;\n    this._options = newOptions;\n  };\n\n  ViewLine.prototype.onSelectionChanged = function () {\n    if (alwaysRenderInlineSelection || this._options.themeType === HIGH_CONTRAST || this._options.renderWhitespace === 'selection') {\n      this._isMaybeInvalid = true;\n      return true;\n    }\n\n    return false;\n  };\n\n  ViewLine.prototype.renderLine = function (lineNumber, deltaTop, viewportData, sb) {\n    if (this._isMaybeInvalid === false) {\n      // it appears that nothing relevant has changed\n      return false;\n    }\n\n    this._isMaybeInvalid = false;\n    var lineData = viewportData.getViewLineRenderingData(lineNumber);\n    var options = this._options;\n    var actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn); // Only send selection information when needed for rendering whitespace\n\n    var selectionsOnLine = null;\n\n    if (alwaysRenderInlineSelection || options.themeType === HIGH_CONTRAST || this._options.renderWhitespace === 'selection') {\n      var selections = viewportData.selections;\n\n      for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n        var selection = selections_1[_i];\n\n        if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n          // Selection does not intersect line\n          continue;\n        }\n\n        var startColumn = selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn;\n        var endColumn = selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn;\n\n        if (startColumn < endColumn) {\n          if (this._options.renderWhitespace !== 'selection') {\n            actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0\n            /* Regular */\n            ));\n          } else {\n            if (!selectionsOnLine) {\n              selectionsOnLine = [];\n            }\n\n            selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n          }\n        }\n      }\n    }\n\n    var renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\n\n    if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n      // no need to do anything, we have the same render input\n      return false;\n    }\n\n    sb.appendASCIIString('<div style=\"top:');\n    sb.appendASCIIString(String(deltaTop));\n    sb.appendASCIIString('px;height:');\n    sb.appendASCIIString(String(this._options.lineHeight));\n    sb.appendASCIIString('px;\" class=\"');\n    sb.appendASCIIString(ViewLine.CLASS_NAME);\n    sb.appendASCIIString('\">');\n    var output = renderViewLine(renderLineInput, sb);\n    sb.appendASCIIString('</div>');\n    var renderedViewLine = null;\n\n    if (canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0\n    /* None */\n    ) {\n        if (lineData.content.length < 300 && renderLineInput.lineTokens.getCount() < 100) {\n          // Browser rounding errors have been observed in Chrome and IE, so using the fast\n          // view line only for short lines. Please test before removing the length check...\n          // ---\n          // Another rounding error has been observed on Linux in VSCode, where <span> width\n          // rounding errors add up to an observable large number...\n          // ---\n          // Also see another example of rounding errors on Windows in\n          // https://github.com/Microsoft/vscode/issues/33178\n          renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\n        }\n      }\n\n    if (!renderedViewLine) {\n      renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\n    }\n\n    this._renderedViewLine = renderedViewLine;\n    return true;\n  };\n\n  ViewLine.prototype.layoutLine = function (lineNumber, deltaTop) {\n    if (this._renderedViewLine && this._renderedViewLine.domNode) {\n      this._renderedViewLine.domNode.setTop(deltaTop);\n\n      this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\n    }\n  }; // --- end IVisibleLineData\n\n\n  ViewLine.prototype.getWidth = function () {\n    if (!this._renderedViewLine) {\n      return 0;\n    }\n\n    return this._renderedViewLine.getWidth();\n  };\n\n  ViewLine.prototype.getWidthIsFast = function () {\n    if (!this._renderedViewLine) {\n      return true;\n    }\n\n    return this._renderedViewLine.getWidthIsFast();\n  };\n\n  ViewLine.prototype.getVisibleRangesForRange = function (startColumn, endColumn, context) {\n    if (!this._renderedViewLine) {\n      return null;\n    }\n\n    startColumn = startColumn | 0; // @perf\n\n    endColumn = endColumn | 0; // @perf\n\n    startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n    endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n    var stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter | 0; // @perf\n\n    var outsideRenderedLine = false;\n\n    if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\n      // This range is obviously not visible\n      outsideRenderedLine = true;\n    }\n\n    if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\n      startColumn = stopRenderingLineAfter + 1;\n    }\n\n    if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\n      endColumn = stopRenderingLineAfter + 1;\n    }\n\n    var horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(startColumn, endColumn, context);\n\n    if (horizontalRanges && horizontalRanges.length > 0) {\n      return new VisibleRanges(outsideRenderedLine, horizontalRanges);\n    }\n\n    return null;\n  };\n\n  ViewLine.prototype.getColumnOfNodeOffset = function (lineNumber, spanNode, offset) {\n    if (!this._renderedViewLine) {\n      return 1;\n    }\n\n    return this._renderedViewLine.getColumnOfNodeOffset(lineNumber, spanNode, offset);\n  };\n\n  ViewLine.CLASS_NAME = 'view-line';\n  return ViewLine;\n}();\n\nexport { ViewLine };\n/**\r\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\r\n */\n\nvar FastRenderedViewLine =\n/** @class */\nfunction () {\n  function FastRenderedViewLine(domNode, renderLineInput, characterMapping) {\n    this.domNode = domNode;\n    this.input = renderLineInput;\n    this._characterMapping = characterMapping;\n    this._charWidth = renderLineInput.spaceWidth;\n  }\n\n  FastRenderedViewLine.prototype.getWidth = function () {\n    return this._getCharPosition(this._characterMapping.length);\n  };\n\n  FastRenderedViewLine.prototype.getWidthIsFast = function () {\n    return true;\n  };\n\n  FastRenderedViewLine.prototype.getVisibleRangesForRange = function (startColumn, endColumn, context) {\n    var startPosition = this._getCharPosition(startColumn);\n\n    var endPosition = this._getCharPosition(endColumn);\n\n    return [new HorizontalRange(startPosition, endPosition - startPosition)];\n  };\n\n  FastRenderedViewLine.prototype._getCharPosition = function (column) {\n    var charOffset = this._characterMapping.getAbsoluteOffsets();\n\n    if (charOffset.length === 0) {\n      // No characters on this line\n      return 0;\n    }\n\n    return Math.round(this._charWidth * charOffset[column - 1]);\n  };\n\n  FastRenderedViewLine.prototype.getColumnOfNodeOffset = function (lineNumber, spanNode, offset) {\n    var spanNodeTextContentLength = spanNode.textContent.length;\n    var spanIndex = -1;\n\n    while (spanNode) {\n      spanNode = spanNode.previousSibling;\n      spanIndex++;\n    }\n\n    var charOffset = this._characterMapping.partDataToCharOffset(spanIndex, spanNodeTextContentLength, offset);\n\n    return charOffset + 1;\n  };\n\n  return FastRenderedViewLine;\n}();\n/**\r\n * Every time we render a line, we save what we have rendered in an instance of this class.\r\n */\n\n\nvar RenderedViewLine =\n/** @class */\nfunction () {\n  function RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    this.domNode = domNode;\n    this.input = renderLineInput;\n    this._characterMapping = characterMapping;\n    this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n    this._containsForeignElements = containsForeignElements;\n    this._cachedWidth = -1;\n    this._pixelOffsetCache = null;\n\n    if (!containsRTL || this._characterMapping.length === 0\n    /* the line is empty */\n    ) {\n        this._pixelOffsetCache = new Int32Array(Math.max(2, this._characterMapping.length + 1));\n\n        for (var column = 0, len = this._characterMapping.length; column <= len; column++) {\n          this._pixelOffsetCache[column] = -1;\n        }\n      }\n  } // --- Reading from the DOM methods\n\n\n  RenderedViewLine.prototype._getReadingTarget = function (myDomNode) {\n    return myDomNode.domNode.firstChild;\n  };\n  /**\r\n   * Width of the line in pixels\r\n   */\n\n\n  RenderedViewLine.prototype.getWidth = function () {\n    if (!this.domNode) {\n      return 0;\n    }\n\n    if (this._cachedWidth === -1) {\n      this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n    }\n\n    return this._cachedWidth;\n  };\n\n  RenderedViewLine.prototype.getWidthIsFast = function () {\n    if (this._cachedWidth === -1) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Visible ranges for a model range\r\n   */\n\n\n  RenderedViewLine.prototype.getVisibleRangesForRange = function (startColumn, endColumn, context) {\n    if (!this.domNode) {\n      return null;\n    }\n\n    if (this._pixelOffsetCache !== null) {\n      // the text is LTR\n      var startOffset = this._readPixelOffset(this.domNode, startColumn, context);\n\n      if (startOffset === -1) {\n        return null;\n      }\n\n      var endOffset = this._readPixelOffset(this.domNode, endColumn, context);\n\n      if (endOffset === -1) {\n        return null;\n      }\n\n      return [new HorizontalRange(startOffset, endOffset - startOffset)];\n    }\n\n    return this._readVisibleRangesForRange(this.domNode, startColumn, endColumn, context);\n  };\n\n  RenderedViewLine.prototype._readVisibleRangesForRange = function (domNode, startColumn, endColumn, context) {\n    if (startColumn === endColumn) {\n      var pixelOffset = this._readPixelOffset(domNode, startColumn, context);\n\n      if (pixelOffset === -1) {\n        return null;\n      } else {\n        return [new HorizontalRange(pixelOffset, 0)];\n      }\n    } else {\n      return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\n    }\n  };\n\n  RenderedViewLine.prototype._readPixelOffset = function (domNode, column, context) {\n    if (this._characterMapping.length === 0) {\n      // This line has no content\n      if (this._containsForeignElements === 0\n      /* None */\n      ) {\n          // We can assume the line is really empty\n          return 0;\n        }\n\n      if (this._containsForeignElements === 2\n      /* After */\n      ) {\n          // We have foreign elements after the (empty) line\n          return 0;\n        }\n\n      if (this._containsForeignElements === 1\n      /* Before */\n      ) {\n          // We have foreign elements before the (empty) line\n          return this.getWidth();\n        } // We have foreign elements before & after the (empty) line\n\n\n      var readingTarget = this._getReadingTarget(domNode);\n\n      if (readingTarget.firstChild) {\n        return readingTarget.firstChild.offsetWidth;\n      } else {\n        return 0;\n      }\n    }\n\n    if (this._pixelOffsetCache !== null) {\n      // the text is LTR\n      var cachedPixelOffset = this._pixelOffsetCache[column];\n\n      if (cachedPixelOffset !== -1) {\n        return cachedPixelOffset;\n      }\n\n      var result = this._actualReadPixelOffset(domNode, column, context);\n\n      this._pixelOffsetCache[column] = result;\n      return result;\n    }\n\n    return this._actualReadPixelOffset(domNode, column, context);\n  };\n\n  RenderedViewLine.prototype._actualReadPixelOffset = function (domNode, column, context) {\n    if (this._characterMapping.length === 0) {\n      // This line has no content\n      var r_1 = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context.clientRectDeltaLeft, context.endNode);\n\n      if (!r_1 || r_1.length === 0) {\n        return -1;\n      }\n\n      return r_1[0].left;\n    }\n\n    if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0\n    /* None */\n    ) {\n        // This branch helps in the case of whitespace only lines which have a width set\n        return this.getWidth();\n      }\n\n    var partData = this._characterMapping.charOffsetToPartData(column - 1);\n\n    var partIndex = CharacterMapping.getPartIndex(partData);\n    var charOffsetInPart = CharacterMapping.getCharIndex(partData);\n    var r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), partIndex, charOffsetInPart, partIndex, charOffsetInPart, context.clientRectDeltaLeft, context.endNode);\n\n    if (!r || r.length === 0) {\n      return -1;\n    }\n\n    return r[0].left;\n  };\n\n  RenderedViewLine.prototype._readRawVisibleRangesForRange = function (domNode, startColumn, endColumn, context) {\n    if (startColumn === 1 && endColumn === this._characterMapping.length) {\n      // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n      return [new HorizontalRange(0, this.getWidth())];\n    }\n\n    var startPartData = this._characterMapping.charOffsetToPartData(startColumn - 1);\n\n    var startPartIndex = CharacterMapping.getPartIndex(startPartData);\n    var startCharOffsetInPart = CharacterMapping.getCharIndex(startPartData);\n\n    var endPartData = this._characterMapping.charOffsetToPartData(endColumn - 1);\n\n    var endPartIndex = CharacterMapping.getPartIndex(endPartData);\n    var endCharOffsetInPart = CharacterMapping.getCharIndex(endPartData);\n    return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startPartIndex, startCharOffsetInPart, endPartIndex, endCharOffsetInPart, context.clientRectDeltaLeft, context.endNode);\n  };\n  /**\r\n   * Returns the column for the text found at a specific offset inside a rendered dom node\r\n   */\n\n\n  RenderedViewLine.prototype.getColumnOfNodeOffset = function (lineNumber, spanNode, offset) {\n    var spanNodeTextContentLength = spanNode.textContent.length;\n    var spanIndex = -1;\n\n    while (spanNode) {\n      spanNode = spanNode.previousSibling;\n      spanIndex++;\n    }\n\n    var charOffset = this._characterMapping.partDataToCharOffset(spanIndex, spanNodeTextContentLength, offset);\n\n    return charOffset + 1;\n  };\n\n  return RenderedViewLine;\n}();\n\nvar WebKitRenderedViewLine =\n/** @class */\nfunction (_super) {\n  __extends(WebKitRenderedViewLine, _super);\n\n  function WebKitRenderedViewLine() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  WebKitRenderedViewLine.prototype._readVisibleRangesForRange = function (domNode, startColumn, endColumn, context) {\n    var output = _super.prototype._readVisibleRangesForRange.call(this, domNode, startColumn, endColumn, context);\n\n    if (!output || output.length === 0 || startColumn === endColumn || startColumn === 1 && endColumn === this._characterMapping.length) {\n      return output;\n    } // WebKit is buggy and returns an expanded range (to contain words in some cases)\n    // The last client rect is enlarged (I think)\n\n\n    if (!this.input.containsRTL) {\n      // This is an attempt to patch things up\n      // Find position of last column\n      var endPixelOffset = this._readPixelOffset(domNode, endColumn, context);\n\n      if (endPixelOffset !== -1) {\n        var lastRange = output[output.length - 1];\n\n        if (lastRange.left < endPixelOffset) {\n          // Trim down the width of the last visible range to not go after the last column's position\n          lastRange.width = endPixelOffset - lastRange.left;\n        }\n      }\n    }\n\n    return output;\n  };\n\n  return WebKitRenderedViewLine;\n}(RenderedViewLine);\n\nvar createRenderedLine = function () {\n  if (browser.isWebKit) {\n    return createWebKitRenderedLine;\n  }\n\n  return createNormalRenderedLine;\n}();\n\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n  return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\n\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n  return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLine.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","browser","createFastDomNode","platform","RangeUtil","HorizontalRange","VisibleRanges","LineDecoration","CharacterMapping","RenderLineInput","renderViewLine","LineRange","HIGH_CONTRAST","EditorFontLigatures","canUseFastRenderedViewLine","isNative","isLinux","isFirefox","isSafari","alwaysRenderInlineSelection","isEdgeOrIE","DomReadingContext","domNode","endNode","_domNode","_clientRectDeltaLeft","_clientRectDeltaLeftRead","defineProperty","get","getBoundingClientRect","left","enumerable","configurable","ViewLineOptions","config","themeType","options","fontInfo","renderWhitespace","renderControlCharacters","spaceWidth","middotWidth","useMonospaceOptimizations","isMonospace","canUseHalfwidthRightwardsArrow","lineHeight","stopRenderingLineAfter","fontLigatures","equals","other","ViewLine","_options","_isMaybeInvalid","_renderedViewLine","getDomNode","setDomNode","Error","onContentChanged","onTokensChanged","onDecorationsChanged","onOptionsChanged","newOptions","onSelectionChanged","renderLine","lineNumber","deltaTop","viewportData","sb","lineData","getViewLineRenderingData","actualInlineDecorations","filter","inlineDecorations","minColumn","maxColumn","selectionsOnLine","selections","_i","selections_1","length","selection","endLineNumber","startLineNumber","startColumn","endColumn","push","renderLineInput","content","continuesWithWrappedLine","isBasicASCII","containsRTL","tokens","tabSize","startVisibleColumn","OFF","input","appendASCIIString","String","CLASS_NAME","output","renderedViewLine","containsForeignElements","lineTokens","getCount","FastRenderedViewLine","characterMapping","createRenderedLine","layoutLine","setTop","setHeight","getWidth","getWidthIsFast","getVisibleRangesForRange","context","Math","min","lineContent","max","outsideRenderedLine","horizontalRanges","getColumnOfNodeOffset","spanNode","offset","_characterMapping","_charWidth","_getCharPosition","startPosition","endPosition","column","charOffset","getAbsoluteOffsets","round","spanNodeTextContentLength","textContent","spanIndex","previousSibling","partDataToCharOffset","RenderedViewLine","_isWhitespaceOnly","test","_containsForeignElements","_cachedWidth","_pixelOffsetCache","Int32Array","len","_getReadingTarget","myDomNode","firstChild","offsetWidth","startOffset","_readPixelOffset","endOffset","_readVisibleRangesForRange","pixelOffset","_readRawVisibleRangesForRange","readingTarget","cachedPixelOffset","result","_actualReadPixelOffset","r_1","readHorizontalRanges","clientRectDeltaLeft","partData","charOffsetToPartData","partIndex","getPartIndex","charOffsetInPart","getCharIndex","r","startPartData","startPartIndex","startCharOffsetInPart","endPartData","endPartIndex","endCharOffsetInPart","WebKitRenderedViewLine","_super","apply","arguments","call","endPixelOffset","lastRange","width","isWebKit","createWebKitRenderedLine","createNormalRenderedLine"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as browser from '../../../../base/browser/browser.js';\r\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\r\nimport * as platform from '../../../../base/common/platform.js';\r\nimport { RangeUtil } from './rangeUtil.js';\r\nimport { HorizontalRange, VisibleRanges } from '../../../common/view/renderingContext.js';\r\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\r\nimport { CharacterMapping, RenderLineInput, renderViewLine, LineRange } from '../../../common/viewLayout/viewLineRenderer.js';\r\nimport { HIGH_CONTRAST } from '../../../../platform/theme/common/themeService.js';\r\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\r\nvar canUseFastRenderedViewLine = (function () {\r\n    if (platform.isNative) {\r\n        // In VSCode we know very well when the zoom level changes\r\n        return true;\r\n    }\r\n    if (platform.isLinux || browser.isFirefox || browser.isSafari) {\r\n        // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\r\n        // --\r\n        // Even though we read character widths correctly, having read them at a specific zoom level\r\n        // does not mean they are the same at the current zoom level.\r\n        // --\r\n        // This could be improved if we ever figure out how to get an event when browsers zoom,\r\n        // but until then we have to stick with reading client rects.\r\n        // --\r\n        // The same has been observed with Firefox on Windows7\r\n        // --\r\n        // The same has been oversved with Safari\r\n        return false;\r\n    }\r\n    return true;\r\n})();\r\nvar alwaysRenderInlineSelection = (browser.isEdgeOrIE);\r\nvar DomReadingContext = /** @class */ (function () {\r\n    function DomReadingContext(domNode, endNode) {\r\n        this._domNode = domNode;\r\n        this._clientRectDeltaLeft = 0;\r\n        this._clientRectDeltaLeftRead = false;\r\n        this.endNode = endNode;\r\n    }\r\n    Object.defineProperty(DomReadingContext.prototype, \"clientRectDeltaLeft\", {\r\n        get: function () {\r\n            if (!this._clientRectDeltaLeftRead) {\r\n                this._clientRectDeltaLeftRead = true;\r\n                this._clientRectDeltaLeft = this._domNode.getBoundingClientRect().left;\r\n            }\r\n            return this._clientRectDeltaLeft;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DomReadingContext;\r\n}());\r\nexport { DomReadingContext };\r\nvar ViewLineOptions = /** @class */ (function () {\r\n    function ViewLineOptions(config, themeType) {\r\n        this.themeType = themeType;\r\n        var options = config.options;\r\n        var fontInfo = options.get(34 /* fontInfo */);\r\n        this.renderWhitespace = options.get(74 /* renderWhitespace */);\r\n        this.renderControlCharacters = options.get(69 /* renderControlCharacters */);\r\n        this.spaceWidth = fontInfo.spaceWidth;\r\n        this.middotWidth = fontInfo.middotWidth;\r\n        this.useMonospaceOptimizations = (fontInfo.isMonospace\r\n            && !options.get(23 /* disableMonospaceOptimizations */));\r\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\r\n        this.lineHeight = options.get(49 /* lineHeight */);\r\n        this.stopRenderingLineAfter = options.get(88 /* stopRenderingLineAfter */);\r\n        this.fontLigatures = options.get(35 /* fontLigatures */);\r\n    }\r\n    ViewLineOptions.prototype.equals = function (other) {\r\n        return (this.themeType === other.themeType\r\n            && this.renderWhitespace === other.renderWhitespace\r\n            && this.renderControlCharacters === other.renderControlCharacters\r\n            && this.spaceWidth === other.spaceWidth\r\n            && this.middotWidth === other.middotWidth\r\n            && this.useMonospaceOptimizations === other.useMonospaceOptimizations\r\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\r\n            && this.lineHeight === other.lineHeight\r\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\r\n            && this.fontLigatures === other.fontLigatures);\r\n    };\r\n    return ViewLineOptions;\r\n}());\r\nexport { ViewLineOptions };\r\nvar ViewLine = /** @class */ (function () {\r\n    function ViewLine(options) {\r\n        this._options = options;\r\n        this._isMaybeInvalid = true;\r\n        this._renderedViewLine = null;\r\n    }\r\n    // --- begin IVisibleLineData\r\n    ViewLine.prototype.getDomNode = function () {\r\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\r\n            return this._renderedViewLine.domNode.domNode;\r\n        }\r\n        return null;\r\n    };\r\n    ViewLine.prototype.setDomNode = function (domNode) {\r\n        if (this._renderedViewLine) {\r\n            this._renderedViewLine.domNode = createFastDomNode(domNode);\r\n        }\r\n        else {\r\n            throw new Error('I have no rendered view line to set the dom node to...');\r\n        }\r\n    };\r\n    ViewLine.prototype.onContentChanged = function () {\r\n        this._isMaybeInvalid = true;\r\n    };\r\n    ViewLine.prototype.onTokensChanged = function () {\r\n        this._isMaybeInvalid = true;\r\n    };\r\n    ViewLine.prototype.onDecorationsChanged = function () {\r\n        this._isMaybeInvalid = true;\r\n    };\r\n    ViewLine.prototype.onOptionsChanged = function (newOptions) {\r\n        this._isMaybeInvalid = true;\r\n        this._options = newOptions;\r\n    };\r\n    ViewLine.prototype.onSelectionChanged = function () {\r\n        if (alwaysRenderInlineSelection || this._options.themeType === HIGH_CONTRAST || this._options.renderWhitespace === 'selection') {\r\n            this._isMaybeInvalid = true;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ViewLine.prototype.renderLine = function (lineNumber, deltaTop, viewportData, sb) {\r\n        if (this._isMaybeInvalid === false) {\r\n            // it appears that nothing relevant has changed\r\n            return false;\r\n        }\r\n        this._isMaybeInvalid = false;\r\n        var lineData = viewportData.getViewLineRenderingData(lineNumber);\r\n        var options = this._options;\r\n        var actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\r\n        // Only send selection information when needed for rendering whitespace\r\n        var selectionsOnLine = null;\r\n        if (alwaysRenderInlineSelection || options.themeType === HIGH_CONTRAST || this._options.renderWhitespace === 'selection') {\r\n            var selections = viewportData.selections;\r\n            for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\r\n                var selection = selections_1[_i];\r\n                if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\r\n                    // Selection does not intersect line\r\n                    continue;\r\n                }\r\n                var startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\r\n                var endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\r\n                if (startColumn < endColumn) {\r\n                    if (this._options.renderWhitespace !== 'selection') {\r\n                        actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0 /* Regular */));\r\n                    }\r\n                    else {\r\n                        if (!selectionsOnLine) {\r\n                            selectionsOnLine = [];\r\n                        }\r\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        var renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\r\n        if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\r\n            // no need to do anything, we have the same render input\r\n            return false;\r\n        }\r\n        sb.appendASCIIString('<div style=\"top:');\r\n        sb.appendASCIIString(String(deltaTop));\r\n        sb.appendASCIIString('px;height:');\r\n        sb.appendASCIIString(String(this._options.lineHeight));\r\n        sb.appendASCIIString('px;\" class=\"');\r\n        sb.appendASCIIString(ViewLine.CLASS_NAME);\r\n        sb.appendASCIIString('\">');\r\n        var output = renderViewLine(renderLineInput, sb);\r\n        sb.appendASCIIString('</div>');\r\n        var renderedViewLine = null;\r\n        if (canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0 /* None */) {\r\n            if (lineData.content.length < 300 && renderLineInput.lineTokens.getCount() < 100) {\r\n                // Browser rounding errors have been observed in Chrome and IE, so using the fast\r\n                // view line only for short lines. Please test before removing the length check...\r\n                // ---\r\n                // Another rounding error has been observed on Linux in VSCode, where <span> width\r\n                // rounding errors add up to an observable large number...\r\n                // ---\r\n                // Also see another example of rounding errors on Windows in\r\n                // https://github.com/Microsoft/vscode/issues/33178\r\n                renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\r\n            }\r\n        }\r\n        if (!renderedViewLine) {\r\n            renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\r\n        }\r\n        this._renderedViewLine = renderedViewLine;\r\n        return true;\r\n    };\r\n    ViewLine.prototype.layoutLine = function (lineNumber, deltaTop) {\r\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\r\n            this._renderedViewLine.domNode.setTop(deltaTop);\r\n            this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\r\n        }\r\n    };\r\n    // --- end IVisibleLineData\r\n    ViewLine.prototype.getWidth = function () {\r\n        if (!this._renderedViewLine) {\r\n            return 0;\r\n        }\r\n        return this._renderedViewLine.getWidth();\r\n    };\r\n    ViewLine.prototype.getWidthIsFast = function () {\r\n        if (!this._renderedViewLine) {\r\n            return true;\r\n        }\r\n        return this._renderedViewLine.getWidthIsFast();\r\n    };\r\n    ViewLine.prototype.getVisibleRangesForRange = function (startColumn, endColumn, context) {\r\n        if (!this._renderedViewLine) {\r\n            return null;\r\n        }\r\n        startColumn = startColumn | 0; // @perf\r\n        endColumn = endColumn | 0; // @perf\r\n        startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\r\n        endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\r\n        var stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter | 0; // @perf\r\n        var outsideRenderedLine = false;\r\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\r\n            // This range is obviously not visible\r\n            outsideRenderedLine = true;\r\n        }\r\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\r\n            startColumn = stopRenderingLineAfter + 1;\r\n        }\r\n        if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\r\n            endColumn = stopRenderingLineAfter + 1;\r\n        }\r\n        var horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(startColumn, endColumn, context);\r\n        if (horizontalRanges && horizontalRanges.length > 0) {\r\n            return new VisibleRanges(outsideRenderedLine, horizontalRanges);\r\n        }\r\n        return null;\r\n    };\r\n    ViewLine.prototype.getColumnOfNodeOffset = function (lineNumber, spanNode, offset) {\r\n        if (!this._renderedViewLine) {\r\n            return 1;\r\n        }\r\n        return this._renderedViewLine.getColumnOfNodeOffset(lineNumber, spanNode, offset);\r\n    };\r\n    ViewLine.CLASS_NAME = 'view-line';\r\n    return ViewLine;\r\n}());\r\nexport { ViewLine };\r\n/**\r\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\r\n */\r\nvar FastRenderedViewLine = /** @class */ (function () {\r\n    function FastRenderedViewLine(domNode, renderLineInput, characterMapping) {\r\n        this.domNode = domNode;\r\n        this.input = renderLineInput;\r\n        this._characterMapping = characterMapping;\r\n        this._charWidth = renderLineInput.spaceWidth;\r\n    }\r\n    FastRenderedViewLine.prototype.getWidth = function () {\r\n        return this._getCharPosition(this._characterMapping.length);\r\n    };\r\n    FastRenderedViewLine.prototype.getWidthIsFast = function () {\r\n        return true;\r\n    };\r\n    FastRenderedViewLine.prototype.getVisibleRangesForRange = function (startColumn, endColumn, context) {\r\n        var startPosition = this._getCharPosition(startColumn);\r\n        var endPosition = this._getCharPosition(endColumn);\r\n        return [new HorizontalRange(startPosition, endPosition - startPosition)];\r\n    };\r\n    FastRenderedViewLine.prototype._getCharPosition = function (column) {\r\n        var charOffset = this._characterMapping.getAbsoluteOffsets();\r\n        if (charOffset.length === 0) {\r\n            // No characters on this line\r\n            return 0;\r\n        }\r\n        return Math.round(this._charWidth * charOffset[column - 1]);\r\n    };\r\n    FastRenderedViewLine.prototype.getColumnOfNodeOffset = function (lineNumber, spanNode, offset) {\r\n        var spanNodeTextContentLength = spanNode.textContent.length;\r\n        var spanIndex = -1;\r\n        while (spanNode) {\r\n            spanNode = spanNode.previousSibling;\r\n            spanIndex++;\r\n        }\r\n        var charOffset = this._characterMapping.partDataToCharOffset(spanIndex, spanNodeTextContentLength, offset);\r\n        return charOffset + 1;\r\n    };\r\n    return FastRenderedViewLine;\r\n}());\r\n/**\r\n * Every time we render a line, we save what we have rendered in an instance of this class.\r\n */\r\nvar RenderedViewLine = /** @class */ (function () {\r\n    function RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\r\n        this.domNode = domNode;\r\n        this.input = renderLineInput;\r\n        this._characterMapping = characterMapping;\r\n        this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\r\n        this._containsForeignElements = containsForeignElements;\r\n        this._cachedWidth = -1;\r\n        this._pixelOffsetCache = null;\r\n        if (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\r\n            this._pixelOffsetCache = new Int32Array(Math.max(2, this._characterMapping.length + 1));\r\n            for (var column = 0, len = this._characterMapping.length; column <= len; column++) {\r\n                this._pixelOffsetCache[column] = -1;\r\n            }\r\n        }\r\n    }\r\n    // --- Reading from the DOM methods\r\n    RenderedViewLine.prototype._getReadingTarget = function (myDomNode) {\r\n        return myDomNode.domNode.firstChild;\r\n    };\r\n    /**\r\n     * Width of the line in pixels\r\n     */\r\n    RenderedViewLine.prototype.getWidth = function () {\r\n        if (!this.domNode) {\r\n            return 0;\r\n        }\r\n        if (this._cachedWidth === -1) {\r\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\r\n        }\r\n        return this._cachedWidth;\r\n    };\r\n    RenderedViewLine.prototype.getWidthIsFast = function () {\r\n        if (this._cachedWidth === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Visible ranges for a model range\r\n     */\r\n    RenderedViewLine.prototype.getVisibleRangesForRange = function (startColumn, endColumn, context) {\r\n        if (!this.domNode) {\r\n            return null;\r\n        }\r\n        if (this._pixelOffsetCache !== null) {\r\n            // the text is LTR\r\n            var startOffset = this._readPixelOffset(this.domNode, startColumn, context);\r\n            if (startOffset === -1) {\r\n                return null;\r\n            }\r\n            var endOffset = this._readPixelOffset(this.domNode, endColumn, context);\r\n            if (endOffset === -1) {\r\n                return null;\r\n            }\r\n            return [new HorizontalRange(startOffset, endOffset - startOffset)];\r\n        }\r\n        return this._readVisibleRangesForRange(this.domNode, startColumn, endColumn, context);\r\n    };\r\n    RenderedViewLine.prototype._readVisibleRangesForRange = function (domNode, startColumn, endColumn, context) {\r\n        if (startColumn === endColumn) {\r\n            var pixelOffset = this._readPixelOffset(domNode, startColumn, context);\r\n            if (pixelOffset === -1) {\r\n                return null;\r\n            }\r\n            else {\r\n                return [new HorizontalRange(pixelOffset, 0)];\r\n            }\r\n        }\r\n        else {\r\n            return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\r\n        }\r\n    };\r\n    RenderedViewLine.prototype._readPixelOffset = function (domNode, column, context) {\r\n        if (this._characterMapping.length === 0) {\r\n            // This line has no content\r\n            if (this._containsForeignElements === 0 /* None */) {\r\n                // We can assume the line is really empty\r\n                return 0;\r\n            }\r\n            if (this._containsForeignElements === 2 /* After */) {\r\n                // We have foreign elements after the (empty) line\r\n                return 0;\r\n            }\r\n            if (this._containsForeignElements === 1 /* Before */) {\r\n                // We have foreign elements before the (empty) line\r\n                return this.getWidth();\r\n            }\r\n            // We have foreign elements before & after the (empty) line\r\n            var readingTarget = this._getReadingTarget(domNode);\r\n            if (readingTarget.firstChild) {\r\n                return readingTarget.firstChild.offsetWidth;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        if (this._pixelOffsetCache !== null) {\r\n            // the text is LTR\r\n            var cachedPixelOffset = this._pixelOffsetCache[column];\r\n            if (cachedPixelOffset !== -1) {\r\n                return cachedPixelOffset;\r\n            }\r\n            var result = this._actualReadPixelOffset(domNode, column, context);\r\n            this._pixelOffsetCache[column] = result;\r\n            return result;\r\n        }\r\n        return this._actualReadPixelOffset(domNode, column, context);\r\n    };\r\n    RenderedViewLine.prototype._actualReadPixelOffset = function (domNode, column, context) {\r\n        if (this._characterMapping.length === 0) {\r\n            // This line has no content\r\n            var r_1 = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context.clientRectDeltaLeft, context.endNode);\r\n            if (!r_1 || r_1.length === 0) {\r\n                return -1;\r\n            }\r\n            return r_1[0].left;\r\n        }\r\n        if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0 /* None */) {\r\n            // This branch helps in the case of whitespace only lines which have a width set\r\n            return this.getWidth();\r\n        }\r\n        var partData = this._characterMapping.charOffsetToPartData(column - 1);\r\n        var partIndex = CharacterMapping.getPartIndex(partData);\r\n        var charOffsetInPart = CharacterMapping.getCharIndex(partData);\r\n        var r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), partIndex, charOffsetInPart, partIndex, charOffsetInPart, context.clientRectDeltaLeft, context.endNode);\r\n        if (!r || r.length === 0) {\r\n            return -1;\r\n        }\r\n        return r[0].left;\r\n    };\r\n    RenderedViewLine.prototype._readRawVisibleRangesForRange = function (domNode, startColumn, endColumn, context) {\r\n        if (startColumn === 1 && endColumn === this._characterMapping.length) {\r\n            // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\r\n            return [new HorizontalRange(0, this.getWidth())];\r\n        }\r\n        var startPartData = this._characterMapping.charOffsetToPartData(startColumn - 1);\r\n        var startPartIndex = CharacterMapping.getPartIndex(startPartData);\r\n        var startCharOffsetInPart = CharacterMapping.getCharIndex(startPartData);\r\n        var endPartData = this._characterMapping.charOffsetToPartData(endColumn - 1);\r\n        var endPartIndex = CharacterMapping.getPartIndex(endPartData);\r\n        var endCharOffsetInPart = CharacterMapping.getCharIndex(endPartData);\r\n        return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startPartIndex, startCharOffsetInPart, endPartIndex, endCharOffsetInPart, context.clientRectDeltaLeft, context.endNode);\r\n    };\r\n    /**\r\n     * Returns the column for the text found at a specific offset inside a rendered dom node\r\n     */\r\n    RenderedViewLine.prototype.getColumnOfNodeOffset = function (lineNumber, spanNode, offset) {\r\n        var spanNodeTextContentLength = spanNode.textContent.length;\r\n        var spanIndex = -1;\r\n        while (spanNode) {\r\n            spanNode = spanNode.previousSibling;\r\n            spanIndex++;\r\n        }\r\n        var charOffset = this._characterMapping.partDataToCharOffset(spanIndex, spanNodeTextContentLength, offset);\r\n        return charOffset + 1;\r\n    };\r\n    return RenderedViewLine;\r\n}());\r\nvar WebKitRenderedViewLine = /** @class */ (function (_super) {\r\n    __extends(WebKitRenderedViewLine, _super);\r\n    function WebKitRenderedViewLine() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    WebKitRenderedViewLine.prototype._readVisibleRangesForRange = function (domNode, startColumn, endColumn, context) {\r\n        var output = _super.prototype._readVisibleRangesForRange.call(this, domNode, startColumn, endColumn, context);\r\n        if (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\r\n            return output;\r\n        }\r\n        // WebKit is buggy and returns an expanded range (to contain words in some cases)\r\n        // The last client rect is enlarged (I think)\r\n        if (!this.input.containsRTL) {\r\n            // This is an attempt to patch things up\r\n            // Find position of last column\r\n            var endPixelOffset = this._readPixelOffset(domNode, endColumn, context);\r\n            if (endPixelOffset !== -1) {\r\n                var lastRange = output[output.length - 1];\r\n                if (lastRange.left < endPixelOffset) {\r\n                    // Trim down the width of the last visible range to not go after the last column's position\r\n                    lastRange.width = endPixelOffset - lastRange.left;\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    };\r\n    return WebKitRenderedViewLine;\r\n}(RenderedViewLine));\r\nvar createRenderedLine = (function () {\r\n    if (browser.isWebKit) {\r\n        return createWebKitRenderedLine;\r\n    }\r\n    return createNormalRenderedLine;\r\n})();\r\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\r\n    return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\r\n}\r\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\r\n    return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}