{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as browser from '../../../base/browser/browser.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { TextAreaState } from './textAreaState.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { BrowserFeatures } from '../../../base/browser/canIUse.js';\nexport var CopyOptions = {\n  forceCopyWithSyntaxHighlighting: false\n};\n/**\r\n * Every time we write to the clipboard, we record a bit of extra metadata here.\r\n * Every time we read from the cipboard, if the text matches our last written text,\r\n * we can fetch the previous metadata.\r\n */\n\nvar InMemoryClipboardMetadataManager =\n/** @class */\nfunction () {\n  function InMemoryClipboardMetadataManager() {\n    this._lastState = null;\n  }\n\n  InMemoryClipboardMetadataManager.prototype.set = function (lastCopiedValue, data) {\n    this._lastState = {\n      lastCopiedValue: lastCopiedValue,\n      data: data\n    };\n  };\n\n  InMemoryClipboardMetadataManager.prototype.get = function (pastedText) {\n    if (this._lastState && this._lastState.lastCopiedValue === pastedText) {\n      // match!\n      return this._lastState.data;\n    }\n\n    this._lastState = null;\n    return null;\n  };\n\n  InMemoryClipboardMetadataManager.INSTANCE = new InMemoryClipboardMetadataManager();\n  return InMemoryClipboardMetadataManager;\n}();\n/**\r\n * Writes screen reader content to the textarea and is able to analyze its input events to generate:\r\n *  - onCut\r\n *  - onPaste\r\n *  - onType\r\n *\r\n * Composition events are generated for presentation purposes (composition input is reflected in onType).\r\n */\n\n\nvar TextAreaInput =\n/** @class */\nfunction (_super) {\n  __extends(TextAreaInput, _super);\n\n  function TextAreaInput(host, textArea) {\n    var _this = _super.call(this) || this;\n\n    _this.textArea = textArea;\n    _this._onFocus = _this._register(new Emitter());\n    _this.onFocus = _this._onFocus.event;\n    _this._onBlur = _this._register(new Emitter());\n    _this.onBlur = _this._onBlur.event;\n    _this._onKeyDown = _this._register(new Emitter());\n    _this.onKeyDown = _this._onKeyDown.event;\n    _this._onKeyUp = _this._register(new Emitter());\n    _this.onKeyUp = _this._onKeyUp.event;\n    _this._onCut = _this._register(new Emitter());\n    _this.onCut = _this._onCut.event;\n    _this._onPaste = _this._register(new Emitter());\n    _this.onPaste = _this._onPaste.event;\n    _this._onType = _this._register(new Emitter());\n    _this.onType = _this._onType.event;\n    _this._onCompositionStart = _this._register(new Emitter());\n    _this.onCompositionStart = _this._onCompositionStart.event;\n    _this._onCompositionUpdate = _this._register(new Emitter());\n    _this.onCompositionUpdate = _this._onCompositionUpdate.event;\n    _this._onCompositionEnd = _this._register(new Emitter());\n    _this.onCompositionEnd = _this._onCompositionEnd.event;\n    _this._onSelectionChangeRequest = _this._register(new Emitter());\n    _this.onSelectionChangeRequest = _this._onSelectionChangeRequest.event;\n    _this._host = host;\n    _this._textArea = _this._register(new TextAreaWrapper(textArea));\n    _this._asyncTriggerCut = _this._register(new RunOnceScheduler(function () {\n      return _this._onCut.fire();\n    }, 0));\n    _this._textAreaState = TextAreaState.EMPTY;\n    _this._selectionChangeListener = null;\n\n    _this.writeScreenReaderContent('ctor');\n\n    _this._hasFocus = false;\n    _this._isDoingComposition = false;\n    _this._nextCommand = 0\n    /* Type */\n    ;\n\n    _this._register(dom.addStandardDisposableListener(textArea.domNode, 'keydown', function (e) {\n      if (_this._isDoingComposition && (e.keyCode === 109\n      /* KEY_IN_COMPOSITION */\n      || e.keyCode === 1\n      /* Backspace */\n      )) {\n        // Stop propagation for keyDown events if the IME is processing key input\n        e.stopPropagation();\n      }\n\n      if (e.equals(9\n      /* Escape */\n      )) {\n        // Prevent default always for `Esc`, otherwise it will generate a keypress\n        // See https://msdn.microsoft.com/en-us/library/ie/ms536939(v=vs.85).aspx\n        e.preventDefault();\n      }\n\n      _this._onKeyDown.fire(e);\n    }));\n\n    _this._register(dom.addStandardDisposableListener(textArea.domNode, 'keyup', function (e) {\n      _this._onKeyUp.fire(e);\n    }));\n\n    _this._register(dom.addDisposableListener(textArea.domNode, 'compositionstart', function (e) {\n      if (_this._isDoingComposition) {\n        return;\n      }\n\n      _this._isDoingComposition = true; // In IE we cannot set .value when handling 'compositionstart' because the entire composition will get canceled.\n\n      if (!browser.isEdgeOrIE) {\n        _this._setAndWriteTextAreaState('compositionstart', TextAreaState.EMPTY);\n      }\n\n      _this._onCompositionStart.fire();\n    }));\n    /**\r\n     * Deduce the typed input from a text area's value and the last observed state.\r\n     */\n\n\n    var deduceInputFromTextAreaValue = function (couldBeEmojiInput) {\n      var oldState = _this._textAreaState;\n      var newState = TextAreaState.readFromTextArea(_this._textArea);\n      return [newState, TextAreaState.deduceInput(oldState, newState, couldBeEmojiInput)];\n    };\n    /**\r\n     * Deduce the composition input from a string.\r\n     */\n\n\n    var deduceComposition = function (text) {\n      var oldState = _this._textAreaState;\n      var newState = TextAreaState.selectedText(text);\n      var typeInput = {\n        text: newState.value,\n        replaceCharCnt: oldState.selectionEnd - oldState.selectionStart\n      };\n      return [newState, typeInput];\n    };\n\n    var compositionDataInValid = function (locale) {\n      // https://github.com/Microsoft/monaco-editor/issues/339\n      // Multi-part Japanese compositions reset cursor in Edge/IE, Chinese and Korean IME don't have this issue.\n      // The reason that we can't use this path for all CJK IME is IE and Edge behave differently when handling Korean IME,\n      // which breaks this path of code.\n      if (browser.isEdgeOrIE && locale === 'ja') {\n        return true;\n      } // https://github.com/Microsoft/monaco-editor/issues/545\n      // On IE11, we can't trust composition data when typing Chinese as IE11 doesn't emit correct\n      // events when users type numbers in IME.\n      // Chinese: zh-Hans-CN, zh-Hans-SG, zh-Hant-TW, zh-Hant-HK\n\n\n      if (browser.isIE && locale.indexOf('zh-Han') === 0) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this._register(dom.addDisposableListener(textArea.domNode, 'compositionupdate', function (e) {\n      if (compositionDataInValid(e.locale)) {\n        var _a = deduceInputFromTextAreaValue(\n        /*couldBeEmojiInput*/\n        false),\n            newState_1 = _a[0],\n            typeInput_1 = _a[1];\n\n        _this._textAreaState = newState_1;\n\n        _this._onType.fire(typeInput_1);\n\n        _this._onCompositionUpdate.fire(e);\n\n        return;\n      }\n\n      var _b = deduceComposition(e.data),\n          newState = _b[0],\n          typeInput = _b[1];\n\n      _this._textAreaState = newState;\n\n      _this._onType.fire(typeInput);\n\n      _this._onCompositionUpdate.fire(e);\n    }));\n\n    _this._register(dom.addDisposableListener(textArea.domNode, 'compositionend', function (e) {\n      // https://github.com/microsoft/monaco-editor/issues/1663\n      // On iOS 13.2, Chinese system IME randomly trigger an additional compositionend event with empty data\n      if (!_this._isDoingComposition) {\n        return;\n      }\n\n      if (compositionDataInValid(e.locale)) {\n        // https://github.com/Microsoft/monaco-editor/issues/339\n        var _a = deduceInputFromTextAreaValue(\n        /*couldBeEmojiInput*/\n        false),\n            newState = _a[0],\n            typeInput = _a[1];\n\n        _this._textAreaState = newState;\n\n        _this._onType.fire(typeInput);\n      } else {\n        var _b = deduceComposition(e.data),\n            newState = _b[0],\n            typeInput = _b[1];\n\n        _this._textAreaState = newState;\n\n        _this._onType.fire(typeInput);\n      } // Due to isEdgeOrIE (where the textarea was not cleared initially) and isChrome (the textarea is not updated correctly when composition ends)\n      // we cannot assume the text at the end consists only of the composited text\n\n\n      if (browser.isEdgeOrIE || browser.isChrome) {\n        _this._textAreaState = TextAreaState.readFromTextArea(_this._textArea);\n      }\n\n      if (!_this._isDoingComposition) {\n        return;\n      }\n\n      _this._isDoingComposition = false;\n\n      _this._onCompositionEnd.fire();\n    }));\n\n    _this._register(dom.addDisposableListener(textArea.domNode, 'input', function () {\n      // Pretend here we touched the text area, as the `input` event will most likely\n      // result in a `selectionchange` event which we want to ignore\n      _this._textArea.setIgnoreSelectionChangeTime('received input event');\n\n      if (_this._isDoingComposition) {\n        return;\n      }\n\n      var _a = deduceInputFromTextAreaValue(\n      /*couldBeEmojiInput*/\n      platform.isMacintosh),\n          newState = _a[0],\n          typeInput = _a[1];\n\n      if (typeInput.replaceCharCnt === 0 && typeInput.text.length === 1 && strings.isHighSurrogate(typeInput.text.charCodeAt(0))) {\n        // Ignore invalid input but keep it around for next time\n        return;\n      }\n\n      _this._textAreaState = newState;\n\n      if (_this._nextCommand === 0\n      /* Type */\n      ) {\n          if (typeInput.text !== '') {\n            _this._onType.fire(typeInput);\n          }\n        } else {\n        if (typeInput.text !== '' || typeInput.replaceCharCnt !== 0) {\n          _this._firePaste(typeInput.text, null);\n        }\n\n        _this._nextCommand = 0\n        /* Type */\n        ;\n      }\n    })); // --- Clipboard operations\n\n\n    _this._register(dom.addDisposableListener(textArea.domNode, 'cut', function (e) {\n      // Pretend here we touched the text area, as the `cut` event will most likely\n      // result in a `selectionchange` event which we want to ignore\n      _this._textArea.setIgnoreSelectionChangeTime('received cut event');\n\n      _this._ensureClipboardGetsEditorSelection(e);\n\n      _this._asyncTriggerCut.schedule();\n    }));\n\n    _this._register(dom.addDisposableListener(textArea.domNode, 'copy', function (e) {\n      _this._ensureClipboardGetsEditorSelection(e);\n    }));\n\n    _this._register(dom.addDisposableListener(textArea.domNode, 'paste', function (e) {\n      // Pretend here we touched the text area, as the `paste` event will most likely\n      // result in a `selectionchange` event which we want to ignore\n      _this._textArea.setIgnoreSelectionChangeTime('received paste event');\n\n      if (ClipboardEventUtils.canUseTextData(e)) {\n        var _a = ClipboardEventUtils.getTextData(e),\n            pastePlainText = _a[0],\n            metadata = _a[1];\n\n        if (pastePlainText !== '') {\n          _this._firePaste(pastePlainText, metadata);\n        }\n      } else {\n        if (_this._textArea.getSelectionStart() !== _this._textArea.getSelectionEnd()) {\n          // Clean up the textarea, to get a clean paste\n          _this._setAndWriteTextAreaState('paste', TextAreaState.EMPTY);\n        }\n\n        _this._nextCommand = 1\n        /* Paste */\n        ;\n      }\n    }));\n\n    _this._register(dom.addDisposableListener(textArea.domNode, 'focus', function () {\n      _this._setHasFocus(true);\n    }));\n\n    _this._register(dom.addDisposableListener(textArea.domNode, 'blur', function () {\n      _this._setHasFocus(false);\n    }));\n\n    return _this;\n  }\n\n  TextAreaInput.prototype._installSelectionChangeListener = function () {\n    // See https://github.com/Microsoft/vscode/issues/27216\n    // When using a Braille display, it is possible for users to reposition the\n    // system caret. This is reflected in Chrome as a `selectionchange` event.\n    //\n    // The `selectionchange` event appears to be emitted under numerous other circumstances,\n    // so it is quite a challenge to distinguish a `selectionchange` coming in from a user\n    // using a Braille display from all the other cases.\n    //\n    // The problems with the `selectionchange` event are:\n    //  * the event is emitted when the textarea is focused programmatically -- textarea.focus()\n    //  * the event is emitted when the selection is changed in the textarea programmatically -- textarea.setSelectionRange(...)\n    //  * the event is emitted when the value of the textarea is changed programmatically -- textarea.value = '...'\n    //  * the event is emitted when tabbing into the textarea\n    //  * the event is emitted asynchronously (sometimes with a delay as high as a few tens of ms)\n    //  * the event sometimes comes in bursts for a single logical textarea operation\n    var _this = this; // `selectionchange` events often come multiple times for a single logical change\n    // so throttle multiple `selectionchange` events that burst in a short period of time.\n\n\n    var previousSelectionChangeEventTime = 0;\n    return dom.addDisposableListener(document, 'selectionchange', function (e) {\n      if (!_this._hasFocus) {\n        return;\n      }\n\n      if (_this._isDoingComposition) {\n        return;\n      }\n\n      if (!browser.isChrome || !platform.isWindows) {\n        // Support only for Chrome on Windows until testing happens on other browsers + OS configurations\n        return;\n      }\n\n      var now = Date.now();\n      var delta1 = now - previousSelectionChangeEventTime;\n      previousSelectionChangeEventTime = now;\n\n      if (delta1 < 5) {\n        // received another `selectionchange` event within 5ms of the previous `selectionchange` event\n        // => ignore it\n        return;\n      }\n\n      var delta2 = now - _this._textArea.getIgnoreSelectionChangeTime();\n\n      _this._textArea.resetSelectionChangeTime();\n\n      if (delta2 < 100) {\n        // received a `selectionchange` event within 100ms since we touched the textarea\n        // => ignore it, since we caused it\n        return;\n      }\n\n      if (!_this._textAreaState.selectionStartPosition || !_this._textAreaState.selectionEndPosition) {\n        // Cannot correlate a position in the textarea with a position in the editor...\n        return;\n      }\n\n      var newValue = _this._textArea.getValue();\n\n      if (_this._textAreaState.value !== newValue) {\n        // Cannot correlate a position in the textarea with a position in the editor...\n        return;\n      }\n\n      var newSelectionStart = _this._textArea.getSelectionStart();\n\n      var newSelectionEnd = _this._textArea.getSelectionEnd();\n\n      if (_this._textAreaState.selectionStart === newSelectionStart && _this._textAreaState.selectionEnd === newSelectionEnd) {\n        // Nothing to do...\n        return;\n      }\n\n      var _newSelectionStartPosition = _this._textAreaState.deduceEditorPosition(newSelectionStart);\n\n      var newSelectionStartPosition = _this._host.deduceModelPosition(_newSelectionStartPosition[0], _newSelectionStartPosition[1], _newSelectionStartPosition[2]);\n\n      var _newSelectionEndPosition = _this._textAreaState.deduceEditorPosition(newSelectionEnd);\n\n      var newSelectionEndPosition = _this._host.deduceModelPosition(_newSelectionEndPosition[0], _newSelectionEndPosition[1], _newSelectionEndPosition[2]);\n\n      var newSelection = new Selection(newSelectionStartPosition.lineNumber, newSelectionStartPosition.column, newSelectionEndPosition.lineNumber, newSelectionEndPosition.column);\n\n      _this._onSelectionChangeRequest.fire(newSelection);\n    });\n  };\n\n  TextAreaInput.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    if (this._selectionChangeListener) {\n      this._selectionChangeListener.dispose();\n\n      this._selectionChangeListener = null;\n    }\n  };\n\n  TextAreaInput.prototype.focusTextArea = function () {\n    // Setting this._hasFocus and writing the screen reader content\n    // will result in a focus() and setSelectionRange() in the textarea\n    this._setHasFocus(true); // If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus\n\n\n    this.refreshFocusState();\n  };\n\n  TextAreaInput.prototype.isFocused = function () {\n    return this._hasFocus;\n  };\n\n  TextAreaInput.prototype.refreshFocusState = function () {\n    var shadowRoot = dom.getShadowRoot(this.textArea.domNode);\n\n    if (shadowRoot) {\n      this._setHasFocus(shadowRoot.activeElement === this.textArea.domNode);\n    } else if (dom.isInDOM(this.textArea.domNode)) {\n      this._setHasFocus(document.activeElement === this.textArea.domNode);\n    } else {\n      this._setHasFocus(false);\n    }\n  };\n\n  TextAreaInput.prototype._setHasFocus = function (newHasFocus) {\n    if (this._hasFocus === newHasFocus) {\n      // no change\n      return;\n    }\n\n    this._hasFocus = newHasFocus;\n\n    if (this._selectionChangeListener) {\n      this._selectionChangeListener.dispose();\n\n      this._selectionChangeListener = null;\n    }\n\n    if (this._hasFocus) {\n      this._selectionChangeListener = this._installSelectionChangeListener();\n    }\n\n    if (this._hasFocus) {\n      if (browser.isEdge) {\n        // Edge has a bug where setting the selection range while the focus event\n        // is dispatching doesn't work. To reproduce, \"tab into\" the editor.\n        this._setAndWriteTextAreaState('focusgain', TextAreaState.EMPTY);\n      } else {\n        this.writeScreenReaderContent('focusgain');\n      }\n    }\n\n    if (this._hasFocus) {\n      this._onFocus.fire();\n    } else {\n      this._onBlur.fire();\n    }\n  };\n\n  TextAreaInput.prototype._setAndWriteTextAreaState = function (reason, textAreaState) {\n    if (!this._hasFocus) {\n      textAreaState = textAreaState.collapseSelection();\n    }\n\n    textAreaState.writeToTextArea(reason, this._textArea, this._hasFocus);\n    this._textAreaState = textAreaState;\n  };\n\n  TextAreaInput.prototype.writeScreenReaderContent = function (reason) {\n    if (this._isDoingComposition) {\n      // Do not write to the text area when doing composition\n      return;\n    }\n\n    this._setAndWriteTextAreaState(reason, this._host.getScreenReaderContent(this._textAreaState));\n  };\n\n  TextAreaInput.prototype._ensureClipboardGetsEditorSelection = function (e) {\n    var dataToCopy = this._host.getDataToCopy(ClipboardEventUtils.canUseTextData(e) && BrowserFeatures.clipboard.richText);\n\n    var storedMetadata = {\n      version: 1,\n      isFromEmptySelection: dataToCopy.isFromEmptySelection,\n      multicursorText: dataToCopy.multicursorText,\n      mode: dataToCopy.mode\n    };\n    InMemoryClipboardMetadataManager.INSTANCE.set( // When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n    // Firefox pastes \"LINE\\n\", so let's work around this quirk\n    browser.isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text, storedMetadata);\n\n    if (!ClipboardEventUtils.canUseTextData(e)) {\n      // Looks like an old browser. The strategy is to place the text\n      // we'd like to be copied to the clipboard in the textarea and select it.\n      this._setAndWriteTextAreaState('copy or cut', TextAreaState.selectedText(dataToCopy.text));\n\n      return;\n    }\n\n    ClipboardEventUtils.setTextData(e, dataToCopy.text, dataToCopy.html, storedMetadata);\n  };\n\n  TextAreaInput.prototype._firePaste = function (text, metadata) {\n    if (!metadata) {\n      // try the in-memory store\n      metadata = InMemoryClipboardMetadataManager.INSTANCE.get(text);\n    }\n\n    this._onPaste.fire({\n      text: text,\n      metadata: metadata\n    });\n  };\n\n  return TextAreaInput;\n}(Disposable);\n\nexport { TextAreaInput };\n\nvar ClipboardEventUtils =\n/** @class */\nfunction () {\n  function ClipboardEventUtils() {}\n\n  ClipboardEventUtils.canUseTextData = function (e) {\n    if (e.clipboardData) {\n      return true;\n    }\n\n    if (window.clipboardData) {\n      return true;\n    }\n\n    return false;\n  };\n\n  ClipboardEventUtils.getTextData = function (e) {\n    if (e.clipboardData) {\n      e.preventDefault();\n      var text = e.clipboardData.getData('text/plain');\n      var metadata = null;\n      var rawmetadata = e.clipboardData.getData('vscode-editor-data');\n\n      if (typeof rawmetadata === 'string') {\n        try {\n          metadata = JSON.parse(rawmetadata);\n\n          if (metadata.version !== 1) {\n            metadata = null;\n          }\n        } catch (err) {// no problem!\n        }\n      }\n\n      return [text, metadata];\n    }\n\n    if (window.clipboardData) {\n      e.preventDefault();\n      var text = window.clipboardData.getData('Text');\n      return [text, null];\n    }\n\n    throw new Error('ClipboardEventUtils.getTextData: Cannot use text data!');\n  };\n\n  ClipboardEventUtils.setTextData = function (e, text, html, metadata) {\n    if (e.clipboardData) {\n      e.clipboardData.setData('text/plain', text);\n\n      if (typeof html === 'string') {\n        e.clipboardData.setData('text/html', html);\n      }\n\n      e.clipboardData.setData('vscode-editor-data', JSON.stringify(metadata));\n      e.preventDefault();\n      return;\n    }\n\n    if (window.clipboardData) {\n      window.clipboardData.setData('Text', text);\n      e.preventDefault();\n      return;\n    }\n\n    throw new Error('ClipboardEventUtils.setTextData: Cannot use text data!');\n  };\n\n  return ClipboardEventUtils;\n}();\n\nvar TextAreaWrapper =\n/** @class */\nfunction (_super) {\n  __extends(TextAreaWrapper, _super);\n\n  function TextAreaWrapper(_textArea) {\n    var _this = _super.call(this) || this;\n\n    _this._actual = _textArea;\n    _this._ignoreSelectionChangeTime = 0;\n    return _this;\n  }\n\n  TextAreaWrapper.prototype.setIgnoreSelectionChangeTime = function (reason) {\n    this._ignoreSelectionChangeTime = Date.now();\n  };\n\n  TextAreaWrapper.prototype.getIgnoreSelectionChangeTime = function () {\n    return this._ignoreSelectionChangeTime;\n  };\n\n  TextAreaWrapper.prototype.resetSelectionChangeTime = function () {\n    this._ignoreSelectionChangeTime = 0;\n  };\n\n  TextAreaWrapper.prototype.getValue = function () {\n    // console.log('current value: ' + this._textArea.value);\n    return this._actual.domNode.value;\n  };\n\n  TextAreaWrapper.prototype.setValue = function (reason, value) {\n    var textArea = this._actual.domNode;\n\n    if (textArea.value === value) {\n      // No change\n      return;\n    } // console.log('reason: ' + reason + ', current value: ' + textArea.value + ' => new value: ' + value);\n\n\n    this.setIgnoreSelectionChangeTime('setValue');\n    textArea.value = value;\n  };\n\n  TextAreaWrapper.prototype.getSelectionStart = function () {\n    return this._actual.domNode.selectionStart;\n  };\n\n  TextAreaWrapper.prototype.getSelectionEnd = function () {\n    return this._actual.domNode.selectionEnd;\n  };\n\n  TextAreaWrapper.prototype.setSelectionRange = function (reason, selectionStart, selectionEnd) {\n    var textArea = this._actual.domNode;\n    var activeElement = null;\n    var shadowRoot = dom.getShadowRoot(textArea);\n\n    if (shadowRoot) {\n      activeElement = shadowRoot.activeElement;\n    } else {\n      activeElement = document.activeElement;\n    }\n\n    var currentIsFocused = activeElement === textArea;\n    var currentSelectionStart = textArea.selectionStart;\n    var currentSelectionEnd = textArea.selectionEnd;\n\n    if (currentIsFocused && currentSelectionStart === selectionStart && currentSelectionEnd === selectionEnd) {\n      // No change\n      // Firefox iframe bug https://github.com/Microsoft/monaco-editor/issues/643#issuecomment-367871377\n      if (browser.isFirefox && window.parent !== window) {\n        textArea.focus();\n      }\n\n      return;\n    } // console.log('reason: ' + reason + ', setSelectionRange: ' + selectionStart + ' -> ' + selectionEnd);\n\n\n    if (currentIsFocused) {\n      // No need to focus, only need to change the selection range\n      this.setIgnoreSelectionChangeTime('setSelectionRange');\n      textArea.setSelectionRange(selectionStart, selectionEnd);\n\n      if (browser.isFirefox && window.parent !== window) {\n        textArea.focus();\n      }\n\n      return;\n    } // If the focus is outside the textarea, browsers will try really hard to reveal the textarea.\n    // Here, we try to undo the browser's desperate reveal.\n\n\n    try {\n      var scrollState = dom.saveParentsScrollTop(textArea);\n      this.setIgnoreSelectionChangeTime('setSelectionRange');\n      textArea.focus();\n      textArea.setSelectionRange(selectionStart, selectionEnd);\n      dom.restoreParentsScrollTop(textArea, scrollState);\n    } catch (e) {// Sometimes IE throws when setting selection (e.g. textarea is off-DOM)\n    }\n  };\n\n  return TextAreaWrapper;\n}(Disposable);","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaInput.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","browser","dom","RunOnceScheduler","Emitter","Disposable","platform","strings","TextAreaState","Selection","BrowserFeatures","CopyOptions","forceCopyWithSyntaxHighlighting","InMemoryClipboardMetadataManager","_lastState","set","lastCopiedValue","data","get","pastedText","INSTANCE","TextAreaInput","_super","host","textArea","_this","call","_onFocus","_register","onFocus","event","_onBlur","onBlur","_onKeyDown","onKeyDown","_onKeyUp","onKeyUp","_onCut","onCut","_onPaste","onPaste","_onType","onType","_onCompositionStart","onCompositionStart","_onCompositionUpdate","onCompositionUpdate","_onCompositionEnd","onCompositionEnd","_onSelectionChangeRequest","onSelectionChangeRequest","_host","_textArea","TextAreaWrapper","_asyncTriggerCut","fire","_textAreaState","EMPTY","_selectionChangeListener","writeScreenReaderContent","_hasFocus","_isDoingComposition","_nextCommand","addStandardDisposableListener","domNode","e","keyCode","stopPropagation","equals","preventDefault","addDisposableListener","isEdgeOrIE","_setAndWriteTextAreaState","deduceInputFromTextAreaValue","couldBeEmojiInput","oldState","newState","readFromTextArea","deduceInput","deduceComposition","text","selectedText","typeInput","value","replaceCharCnt","selectionEnd","selectionStart","compositionDataInValid","locale","isIE","indexOf","_a","newState_1","typeInput_1","_b","isChrome","setIgnoreSelectionChangeTime","isMacintosh","length","isHighSurrogate","charCodeAt","_firePaste","_ensureClipboardGetsEditorSelection","schedule","ClipboardEventUtils","canUseTextData","getTextData","pastePlainText","metadata","getSelectionStart","getSelectionEnd","_setHasFocus","_installSelectionChangeListener","previousSelectionChangeEventTime","document","isWindows","now","Date","delta1","delta2","getIgnoreSelectionChangeTime","resetSelectionChangeTime","selectionStartPosition","selectionEndPosition","newValue","getValue","newSelectionStart","newSelectionEnd","_newSelectionStartPosition","deduceEditorPosition","newSelectionStartPosition","deduceModelPosition","_newSelectionEndPosition","newSelectionEndPosition","newSelection","lineNumber","column","dispose","focusTextArea","refreshFocusState","isFocused","shadowRoot","getShadowRoot","activeElement","isInDOM","newHasFocus","isEdge","reason","textAreaState","collapseSelection","writeToTextArea","getScreenReaderContent","dataToCopy","getDataToCopy","clipboard","richText","storedMetadata","version","isFromEmptySelection","multicursorText","mode","isFirefox","replace","setTextData","html","clipboardData","window","getData","rawmetadata","JSON","parse","err","Error","setData","stringify","_actual","_ignoreSelectionChangeTime","setValue","setSelectionRange","currentIsFocused","currentSelectionStart","currentSelectionEnd","parent","focus","scrollState","saveParentsScrollTop","restoreParentsScrollTop"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as browser from '../../../base/browser/browser.js';\r\nimport * as dom from '../../../base/browser/dom.js';\r\nimport { RunOnceScheduler } from '../../../base/common/async.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { TextAreaState } from './textAreaState.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { BrowserFeatures } from '../../../base/browser/canIUse.js';\r\nexport var CopyOptions = {\r\n    forceCopyWithSyntaxHighlighting: false\r\n};\r\n/**\r\n * Every time we write to the clipboard, we record a bit of extra metadata here.\r\n * Every time we read from the cipboard, if the text matches our last written text,\r\n * we can fetch the previous metadata.\r\n */\r\nvar InMemoryClipboardMetadataManager = /** @class */ (function () {\r\n    function InMemoryClipboardMetadataManager() {\r\n        this._lastState = null;\r\n    }\r\n    InMemoryClipboardMetadataManager.prototype.set = function (lastCopiedValue, data) {\r\n        this._lastState = { lastCopiedValue: lastCopiedValue, data: data };\r\n    };\r\n    InMemoryClipboardMetadataManager.prototype.get = function (pastedText) {\r\n        if (this._lastState && this._lastState.lastCopiedValue === pastedText) {\r\n            // match!\r\n            return this._lastState.data;\r\n        }\r\n        this._lastState = null;\r\n        return null;\r\n    };\r\n    InMemoryClipboardMetadataManager.INSTANCE = new InMemoryClipboardMetadataManager();\r\n    return InMemoryClipboardMetadataManager;\r\n}());\r\n/**\r\n * Writes screen reader content to the textarea and is able to analyze its input events to generate:\r\n *  - onCut\r\n *  - onPaste\r\n *  - onType\r\n *\r\n * Composition events are generated for presentation purposes (composition input is reflected in onType).\r\n */\r\nvar TextAreaInput = /** @class */ (function (_super) {\r\n    __extends(TextAreaInput, _super);\r\n    function TextAreaInput(host, textArea) {\r\n        var _this = _super.call(this) || this;\r\n        _this.textArea = textArea;\r\n        _this._onFocus = _this._register(new Emitter());\r\n        _this.onFocus = _this._onFocus.event;\r\n        _this._onBlur = _this._register(new Emitter());\r\n        _this.onBlur = _this._onBlur.event;\r\n        _this._onKeyDown = _this._register(new Emitter());\r\n        _this.onKeyDown = _this._onKeyDown.event;\r\n        _this._onKeyUp = _this._register(new Emitter());\r\n        _this.onKeyUp = _this._onKeyUp.event;\r\n        _this._onCut = _this._register(new Emitter());\r\n        _this.onCut = _this._onCut.event;\r\n        _this._onPaste = _this._register(new Emitter());\r\n        _this.onPaste = _this._onPaste.event;\r\n        _this._onType = _this._register(new Emitter());\r\n        _this.onType = _this._onType.event;\r\n        _this._onCompositionStart = _this._register(new Emitter());\r\n        _this.onCompositionStart = _this._onCompositionStart.event;\r\n        _this._onCompositionUpdate = _this._register(new Emitter());\r\n        _this.onCompositionUpdate = _this._onCompositionUpdate.event;\r\n        _this._onCompositionEnd = _this._register(new Emitter());\r\n        _this.onCompositionEnd = _this._onCompositionEnd.event;\r\n        _this._onSelectionChangeRequest = _this._register(new Emitter());\r\n        _this.onSelectionChangeRequest = _this._onSelectionChangeRequest.event;\r\n        _this._host = host;\r\n        _this._textArea = _this._register(new TextAreaWrapper(textArea));\r\n        _this._asyncTriggerCut = _this._register(new RunOnceScheduler(function () { return _this._onCut.fire(); }, 0));\r\n        _this._textAreaState = TextAreaState.EMPTY;\r\n        _this._selectionChangeListener = null;\r\n        _this.writeScreenReaderContent('ctor');\r\n        _this._hasFocus = false;\r\n        _this._isDoingComposition = false;\r\n        _this._nextCommand = 0 /* Type */;\r\n        _this._register(dom.addStandardDisposableListener(textArea.domNode, 'keydown', function (e) {\r\n            if (_this._isDoingComposition &&\r\n                (e.keyCode === 109 /* KEY_IN_COMPOSITION */ || e.keyCode === 1 /* Backspace */)) {\r\n                // Stop propagation for keyDown events if the IME is processing key input\r\n                e.stopPropagation();\r\n            }\r\n            if (e.equals(9 /* Escape */)) {\r\n                // Prevent default always for `Esc`, otherwise it will generate a keypress\r\n                // See https://msdn.microsoft.com/en-us/library/ie/ms536939(v=vs.85).aspx\r\n                e.preventDefault();\r\n            }\r\n            _this._onKeyDown.fire(e);\r\n        }));\r\n        _this._register(dom.addStandardDisposableListener(textArea.domNode, 'keyup', function (e) {\r\n            _this._onKeyUp.fire(e);\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'compositionstart', function (e) {\r\n            if (_this._isDoingComposition) {\r\n                return;\r\n            }\r\n            _this._isDoingComposition = true;\r\n            // In IE we cannot set .value when handling 'compositionstart' because the entire composition will get canceled.\r\n            if (!browser.isEdgeOrIE) {\r\n                _this._setAndWriteTextAreaState('compositionstart', TextAreaState.EMPTY);\r\n            }\r\n            _this._onCompositionStart.fire();\r\n        }));\r\n        /**\r\n         * Deduce the typed input from a text area's value and the last observed state.\r\n         */\r\n        var deduceInputFromTextAreaValue = function (couldBeEmojiInput) {\r\n            var oldState = _this._textAreaState;\r\n            var newState = TextAreaState.readFromTextArea(_this._textArea);\r\n            return [newState, TextAreaState.deduceInput(oldState, newState, couldBeEmojiInput)];\r\n        };\r\n        /**\r\n         * Deduce the composition input from a string.\r\n         */\r\n        var deduceComposition = function (text) {\r\n            var oldState = _this._textAreaState;\r\n            var newState = TextAreaState.selectedText(text);\r\n            var typeInput = {\r\n                text: newState.value,\r\n                replaceCharCnt: oldState.selectionEnd - oldState.selectionStart\r\n            };\r\n            return [newState, typeInput];\r\n        };\r\n        var compositionDataInValid = function (locale) {\r\n            // https://github.com/Microsoft/monaco-editor/issues/339\r\n            // Multi-part Japanese compositions reset cursor in Edge/IE, Chinese and Korean IME don't have this issue.\r\n            // The reason that we can't use this path for all CJK IME is IE and Edge behave differently when handling Korean IME,\r\n            // which breaks this path of code.\r\n            if (browser.isEdgeOrIE && locale === 'ja') {\r\n                return true;\r\n            }\r\n            // https://github.com/Microsoft/monaco-editor/issues/545\r\n            // On IE11, we can't trust composition data when typing Chinese as IE11 doesn't emit correct\r\n            // events when users type numbers in IME.\r\n            // Chinese: zh-Hans-CN, zh-Hans-SG, zh-Hant-TW, zh-Hant-HK\r\n            if (browser.isIE && locale.indexOf('zh-Han') === 0) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'compositionupdate', function (e) {\r\n            if (compositionDataInValid(e.locale)) {\r\n                var _a = deduceInputFromTextAreaValue(/*couldBeEmojiInput*/ false), newState_1 = _a[0], typeInput_1 = _a[1];\r\n                _this._textAreaState = newState_1;\r\n                _this._onType.fire(typeInput_1);\r\n                _this._onCompositionUpdate.fire(e);\r\n                return;\r\n            }\r\n            var _b = deduceComposition(e.data), newState = _b[0], typeInput = _b[1];\r\n            _this._textAreaState = newState;\r\n            _this._onType.fire(typeInput);\r\n            _this._onCompositionUpdate.fire(e);\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'compositionend', function (e) {\r\n            // https://github.com/microsoft/monaco-editor/issues/1663\r\n            // On iOS 13.2, Chinese system IME randomly trigger an additional compositionend event with empty data\r\n            if (!_this._isDoingComposition) {\r\n                return;\r\n            }\r\n            if (compositionDataInValid(e.locale)) {\r\n                // https://github.com/Microsoft/monaco-editor/issues/339\r\n                var _a = deduceInputFromTextAreaValue(/*couldBeEmojiInput*/ false), newState = _a[0], typeInput = _a[1];\r\n                _this._textAreaState = newState;\r\n                _this._onType.fire(typeInput);\r\n            }\r\n            else {\r\n                var _b = deduceComposition(e.data), newState = _b[0], typeInput = _b[1];\r\n                _this._textAreaState = newState;\r\n                _this._onType.fire(typeInput);\r\n            }\r\n            // Due to isEdgeOrIE (where the textarea was not cleared initially) and isChrome (the textarea is not updated correctly when composition ends)\r\n            // we cannot assume the text at the end consists only of the composited text\r\n            if (browser.isEdgeOrIE || browser.isChrome) {\r\n                _this._textAreaState = TextAreaState.readFromTextArea(_this._textArea);\r\n            }\r\n            if (!_this._isDoingComposition) {\r\n                return;\r\n            }\r\n            _this._isDoingComposition = false;\r\n            _this._onCompositionEnd.fire();\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'input', function () {\r\n            // Pretend here we touched the text area, as the `input` event will most likely\r\n            // result in a `selectionchange` event which we want to ignore\r\n            _this._textArea.setIgnoreSelectionChangeTime('received input event');\r\n            if (_this._isDoingComposition) {\r\n                return;\r\n            }\r\n            var _a = deduceInputFromTextAreaValue(/*couldBeEmojiInput*/ platform.isMacintosh), newState = _a[0], typeInput = _a[1];\r\n            if (typeInput.replaceCharCnt === 0 && typeInput.text.length === 1 && strings.isHighSurrogate(typeInput.text.charCodeAt(0))) {\r\n                // Ignore invalid input but keep it around for next time\r\n                return;\r\n            }\r\n            _this._textAreaState = newState;\r\n            if (_this._nextCommand === 0 /* Type */) {\r\n                if (typeInput.text !== '') {\r\n                    _this._onType.fire(typeInput);\r\n                }\r\n            }\r\n            else {\r\n                if (typeInput.text !== '' || typeInput.replaceCharCnt !== 0) {\r\n                    _this._firePaste(typeInput.text, null);\r\n                }\r\n                _this._nextCommand = 0 /* Type */;\r\n            }\r\n        }));\r\n        // --- Clipboard operations\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'cut', function (e) {\r\n            // Pretend here we touched the text area, as the `cut` event will most likely\r\n            // result in a `selectionchange` event which we want to ignore\r\n            _this._textArea.setIgnoreSelectionChangeTime('received cut event');\r\n            _this._ensureClipboardGetsEditorSelection(e);\r\n            _this._asyncTriggerCut.schedule();\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'copy', function (e) {\r\n            _this._ensureClipboardGetsEditorSelection(e);\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'paste', function (e) {\r\n            // Pretend here we touched the text area, as the `paste` event will most likely\r\n            // result in a `selectionchange` event which we want to ignore\r\n            _this._textArea.setIgnoreSelectionChangeTime('received paste event');\r\n            if (ClipboardEventUtils.canUseTextData(e)) {\r\n                var _a = ClipboardEventUtils.getTextData(e), pastePlainText = _a[0], metadata = _a[1];\r\n                if (pastePlainText !== '') {\r\n                    _this._firePaste(pastePlainText, metadata);\r\n                }\r\n            }\r\n            else {\r\n                if (_this._textArea.getSelectionStart() !== _this._textArea.getSelectionEnd()) {\r\n                    // Clean up the textarea, to get a clean paste\r\n                    _this._setAndWriteTextAreaState('paste', TextAreaState.EMPTY);\r\n                }\r\n                _this._nextCommand = 1 /* Paste */;\r\n            }\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'focus', function () {\r\n            _this._setHasFocus(true);\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'blur', function () {\r\n            _this._setHasFocus(false);\r\n        }));\r\n        return _this;\r\n    }\r\n    TextAreaInput.prototype._installSelectionChangeListener = function () {\r\n        // See https://github.com/Microsoft/vscode/issues/27216\r\n        // When using a Braille display, it is possible for users to reposition the\r\n        // system caret. This is reflected in Chrome as a `selectionchange` event.\r\n        //\r\n        // The `selectionchange` event appears to be emitted under numerous other circumstances,\r\n        // so it is quite a challenge to distinguish a `selectionchange` coming in from a user\r\n        // using a Braille display from all the other cases.\r\n        //\r\n        // The problems with the `selectionchange` event are:\r\n        //  * the event is emitted when the textarea is focused programmatically -- textarea.focus()\r\n        //  * the event is emitted when the selection is changed in the textarea programmatically -- textarea.setSelectionRange(...)\r\n        //  * the event is emitted when the value of the textarea is changed programmatically -- textarea.value = '...'\r\n        //  * the event is emitted when tabbing into the textarea\r\n        //  * the event is emitted asynchronously (sometimes with a delay as high as a few tens of ms)\r\n        //  * the event sometimes comes in bursts for a single logical textarea operation\r\n        var _this = this;\r\n        // `selectionchange` events often come multiple times for a single logical change\r\n        // so throttle multiple `selectionchange` events that burst in a short period of time.\r\n        var previousSelectionChangeEventTime = 0;\r\n        return dom.addDisposableListener(document, 'selectionchange', function (e) {\r\n            if (!_this._hasFocus) {\r\n                return;\r\n            }\r\n            if (_this._isDoingComposition) {\r\n                return;\r\n            }\r\n            if (!browser.isChrome || !platform.isWindows) {\r\n                // Support only for Chrome on Windows until testing happens on other browsers + OS configurations\r\n                return;\r\n            }\r\n            var now = Date.now();\r\n            var delta1 = now - previousSelectionChangeEventTime;\r\n            previousSelectionChangeEventTime = now;\r\n            if (delta1 < 5) {\r\n                // received another `selectionchange` event within 5ms of the previous `selectionchange` event\r\n                // => ignore it\r\n                return;\r\n            }\r\n            var delta2 = now - _this._textArea.getIgnoreSelectionChangeTime();\r\n            _this._textArea.resetSelectionChangeTime();\r\n            if (delta2 < 100) {\r\n                // received a `selectionchange` event within 100ms since we touched the textarea\r\n                // => ignore it, since we caused it\r\n                return;\r\n            }\r\n            if (!_this._textAreaState.selectionStartPosition || !_this._textAreaState.selectionEndPosition) {\r\n                // Cannot correlate a position in the textarea with a position in the editor...\r\n                return;\r\n            }\r\n            var newValue = _this._textArea.getValue();\r\n            if (_this._textAreaState.value !== newValue) {\r\n                // Cannot correlate a position in the textarea with a position in the editor...\r\n                return;\r\n            }\r\n            var newSelectionStart = _this._textArea.getSelectionStart();\r\n            var newSelectionEnd = _this._textArea.getSelectionEnd();\r\n            if (_this._textAreaState.selectionStart === newSelectionStart && _this._textAreaState.selectionEnd === newSelectionEnd) {\r\n                // Nothing to do...\r\n                return;\r\n            }\r\n            var _newSelectionStartPosition = _this._textAreaState.deduceEditorPosition(newSelectionStart);\r\n            var newSelectionStartPosition = _this._host.deduceModelPosition(_newSelectionStartPosition[0], _newSelectionStartPosition[1], _newSelectionStartPosition[2]);\r\n            var _newSelectionEndPosition = _this._textAreaState.deduceEditorPosition(newSelectionEnd);\r\n            var newSelectionEndPosition = _this._host.deduceModelPosition(_newSelectionEndPosition[0], _newSelectionEndPosition[1], _newSelectionEndPosition[2]);\r\n            var newSelection = new Selection(newSelectionStartPosition.lineNumber, newSelectionStartPosition.column, newSelectionEndPosition.lineNumber, newSelectionEndPosition.column);\r\n            _this._onSelectionChangeRequest.fire(newSelection);\r\n        });\r\n    };\r\n    TextAreaInput.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this._selectionChangeListener) {\r\n            this._selectionChangeListener.dispose();\r\n            this._selectionChangeListener = null;\r\n        }\r\n    };\r\n    TextAreaInput.prototype.focusTextArea = function () {\r\n        // Setting this._hasFocus and writing the screen reader content\r\n        // will result in a focus() and setSelectionRange() in the textarea\r\n        this._setHasFocus(true);\r\n        // If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus\r\n        this.refreshFocusState();\r\n    };\r\n    TextAreaInput.prototype.isFocused = function () {\r\n        return this._hasFocus;\r\n    };\r\n    TextAreaInput.prototype.refreshFocusState = function () {\r\n        var shadowRoot = dom.getShadowRoot(this.textArea.domNode);\r\n        if (shadowRoot) {\r\n            this._setHasFocus(shadowRoot.activeElement === this.textArea.domNode);\r\n        }\r\n        else if (dom.isInDOM(this.textArea.domNode)) {\r\n            this._setHasFocus(document.activeElement === this.textArea.domNode);\r\n        }\r\n        else {\r\n            this._setHasFocus(false);\r\n        }\r\n    };\r\n    TextAreaInput.prototype._setHasFocus = function (newHasFocus) {\r\n        if (this._hasFocus === newHasFocus) {\r\n            // no change\r\n            return;\r\n        }\r\n        this._hasFocus = newHasFocus;\r\n        if (this._selectionChangeListener) {\r\n            this._selectionChangeListener.dispose();\r\n            this._selectionChangeListener = null;\r\n        }\r\n        if (this._hasFocus) {\r\n            this._selectionChangeListener = this._installSelectionChangeListener();\r\n        }\r\n        if (this._hasFocus) {\r\n            if (browser.isEdge) {\r\n                // Edge has a bug where setting the selection range while the focus event\r\n                // is dispatching doesn't work. To reproduce, \"tab into\" the editor.\r\n                this._setAndWriteTextAreaState('focusgain', TextAreaState.EMPTY);\r\n            }\r\n            else {\r\n                this.writeScreenReaderContent('focusgain');\r\n            }\r\n        }\r\n        if (this._hasFocus) {\r\n            this._onFocus.fire();\r\n        }\r\n        else {\r\n            this._onBlur.fire();\r\n        }\r\n    };\r\n    TextAreaInput.prototype._setAndWriteTextAreaState = function (reason, textAreaState) {\r\n        if (!this._hasFocus) {\r\n            textAreaState = textAreaState.collapseSelection();\r\n        }\r\n        textAreaState.writeToTextArea(reason, this._textArea, this._hasFocus);\r\n        this._textAreaState = textAreaState;\r\n    };\r\n    TextAreaInput.prototype.writeScreenReaderContent = function (reason) {\r\n        if (this._isDoingComposition) {\r\n            // Do not write to the text area when doing composition\r\n            return;\r\n        }\r\n        this._setAndWriteTextAreaState(reason, this._host.getScreenReaderContent(this._textAreaState));\r\n    };\r\n    TextAreaInput.prototype._ensureClipboardGetsEditorSelection = function (e) {\r\n        var dataToCopy = this._host.getDataToCopy(ClipboardEventUtils.canUseTextData(e) && BrowserFeatures.clipboard.richText);\r\n        var storedMetadata = {\r\n            version: 1,\r\n            isFromEmptySelection: dataToCopy.isFromEmptySelection,\r\n            multicursorText: dataToCopy.multicursorText,\r\n            mode: dataToCopy.mode\r\n        };\r\n        InMemoryClipboardMetadataManager.INSTANCE.set(\r\n        // When writing \"LINE\\r\\n\" to the clipboard and then pasting,\r\n        // Firefox pastes \"LINE\\n\", so let's work around this quirk\r\n        (browser.isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text), storedMetadata);\r\n        if (!ClipboardEventUtils.canUseTextData(e)) {\r\n            // Looks like an old browser. The strategy is to place the text\r\n            // we'd like to be copied to the clipboard in the textarea and select it.\r\n            this._setAndWriteTextAreaState('copy or cut', TextAreaState.selectedText(dataToCopy.text));\r\n            return;\r\n        }\r\n        ClipboardEventUtils.setTextData(e, dataToCopy.text, dataToCopy.html, storedMetadata);\r\n    };\r\n    TextAreaInput.prototype._firePaste = function (text, metadata) {\r\n        if (!metadata) {\r\n            // try the in-memory store\r\n            metadata = InMemoryClipboardMetadataManager.INSTANCE.get(text);\r\n        }\r\n        this._onPaste.fire({\r\n            text: text,\r\n            metadata: metadata\r\n        });\r\n    };\r\n    return TextAreaInput;\r\n}(Disposable));\r\nexport { TextAreaInput };\r\nvar ClipboardEventUtils = /** @class */ (function () {\r\n    function ClipboardEventUtils() {\r\n    }\r\n    ClipboardEventUtils.canUseTextData = function (e) {\r\n        if (e.clipboardData) {\r\n            return true;\r\n        }\r\n        if (window.clipboardData) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ClipboardEventUtils.getTextData = function (e) {\r\n        if (e.clipboardData) {\r\n            e.preventDefault();\r\n            var text = e.clipboardData.getData('text/plain');\r\n            var metadata = null;\r\n            var rawmetadata = e.clipboardData.getData('vscode-editor-data');\r\n            if (typeof rawmetadata === 'string') {\r\n                try {\r\n                    metadata = JSON.parse(rawmetadata);\r\n                    if (metadata.version !== 1) {\r\n                        metadata = null;\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    // no problem!\r\n                }\r\n            }\r\n            return [text, metadata];\r\n        }\r\n        if (window.clipboardData) {\r\n            e.preventDefault();\r\n            var text = window.clipboardData.getData('Text');\r\n            return [text, null];\r\n        }\r\n        throw new Error('ClipboardEventUtils.getTextData: Cannot use text data!');\r\n    };\r\n    ClipboardEventUtils.setTextData = function (e, text, html, metadata) {\r\n        if (e.clipboardData) {\r\n            e.clipboardData.setData('text/plain', text);\r\n            if (typeof html === 'string') {\r\n                e.clipboardData.setData('text/html', html);\r\n            }\r\n            e.clipboardData.setData('vscode-editor-data', JSON.stringify(metadata));\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n        if (window.clipboardData) {\r\n            window.clipboardData.setData('Text', text);\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n        throw new Error('ClipboardEventUtils.setTextData: Cannot use text data!');\r\n    };\r\n    return ClipboardEventUtils;\r\n}());\r\nvar TextAreaWrapper = /** @class */ (function (_super) {\r\n    __extends(TextAreaWrapper, _super);\r\n    function TextAreaWrapper(_textArea) {\r\n        var _this = _super.call(this) || this;\r\n        _this._actual = _textArea;\r\n        _this._ignoreSelectionChangeTime = 0;\r\n        return _this;\r\n    }\r\n    TextAreaWrapper.prototype.setIgnoreSelectionChangeTime = function (reason) {\r\n        this._ignoreSelectionChangeTime = Date.now();\r\n    };\r\n    TextAreaWrapper.prototype.getIgnoreSelectionChangeTime = function () {\r\n        return this._ignoreSelectionChangeTime;\r\n    };\r\n    TextAreaWrapper.prototype.resetSelectionChangeTime = function () {\r\n        this._ignoreSelectionChangeTime = 0;\r\n    };\r\n    TextAreaWrapper.prototype.getValue = function () {\r\n        // console.log('current value: ' + this._textArea.value);\r\n        return this._actual.domNode.value;\r\n    };\r\n    TextAreaWrapper.prototype.setValue = function (reason, value) {\r\n        var textArea = this._actual.domNode;\r\n        if (textArea.value === value) {\r\n            // No change\r\n            return;\r\n        }\r\n        // console.log('reason: ' + reason + ', current value: ' + textArea.value + ' => new value: ' + value);\r\n        this.setIgnoreSelectionChangeTime('setValue');\r\n        textArea.value = value;\r\n    };\r\n    TextAreaWrapper.prototype.getSelectionStart = function () {\r\n        return this._actual.domNode.selectionStart;\r\n    };\r\n    TextAreaWrapper.prototype.getSelectionEnd = function () {\r\n        return this._actual.domNode.selectionEnd;\r\n    };\r\n    TextAreaWrapper.prototype.setSelectionRange = function (reason, selectionStart, selectionEnd) {\r\n        var textArea = this._actual.domNode;\r\n        var activeElement = null;\r\n        var shadowRoot = dom.getShadowRoot(textArea);\r\n        if (shadowRoot) {\r\n            activeElement = shadowRoot.activeElement;\r\n        }\r\n        else {\r\n            activeElement = document.activeElement;\r\n        }\r\n        var currentIsFocused = (activeElement === textArea);\r\n        var currentSelectionStart = textArea.selectionStart;\r\n        var currentSelectionEnd = textArea.selectionEnd;\r\n        if (currentIsFocused && currentSelectionStart === selectionStart && currentSelectionEnd === selectionEnd) {\r\n            // No change\r\n            // Firefox iframe bug https://github.com/Microsoft/monaco-editor/issues/643#issuecomment-367871377\r\n            if (browser.isFirefox && window.parent !== window) {\r\n                textArea.focus();\r\n            }\r\n            return;\r\n        }\r\n        // console.log('reason: ' + reason + ', setSelectionRange: ' + selectionStart + ' -> ' + selectionEnd);\r\n        if (currentIsFocused) {\r\n            // No need to focus, only need to change the selection range\r\n            this.setIgnoreSelectionChangeTime('setSelectionRange');\r\n            textArea.setSelectionRange(selectionStart, selectionEnd);\r\n            if (browser.isFirefox && window.parent !== window) {\r\n                textArea.focus();\r\n            }\r\n            return;\r\n        }\r\n        // If the focus is outside the textarea, browsers will try really hard to reveal the textarea.\r\n        // Here, we try to undo the browser's desperate reveal.\r\n        try {\r\n            var scrollState = dom.saveParentsScrollTop(textArea);\r\n            this.setIgnoreSelectionChangeTime('setSelectionRange');\r\n            textArea.focus();\r\n            textArea.setSelectionRange(selectionStart, selectionEnd);\r\n            dom.restoreParentsScrollTop(textArea, scrollState);\r\n        }\r\n        catch (e) {\r\n            // Sometimes IE throws when setting selection (e.g. textarea is off-DOM)\r\n        }\r\n    };\r\n    return TextAreaWrapper;\r\n}(Disposable));\r\n"]},"metadata":{},"sourceType":"module"}