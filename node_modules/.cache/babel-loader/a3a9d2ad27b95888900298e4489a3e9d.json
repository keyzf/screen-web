{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\n\nexport function createScanner(text, ignoreTrivia) {\n  if (ignoreTrivia === void 0) {\n    ignoreTrivia = false;\n  }\n\n  var len = text.length;\n  var pos = 0,\n      value = '',\n      tokenOffset = 0,\n      token = 16\n  /* Unknown */\n  ,\n      lineNumber = 0,\n      lineStartOffset = 0,\n      tokenLineStartOffset = 0,\n      prevTokenLineStartOffset = 0,\n      scanError = 0\n  /* None */\n  ;\n\n  function scanHexDigits(count, exact) {\n    var digits = 0;\n    var value = 0;\n\n    while (digits < count || !exact) {\n      var ch = text.charCodeAt(pos);\n\n      if (ch >= 48\n      /* _0 */\n      && ch <= 57\n      /* _9 */\n      ) {\n          value = value * 16 + ch - 48\n          /* _0 */\n          ;\n        } else if (ch >= 65\n      /* A */\n      && ch <= 70\n      /* F */\n      ) {\n          value = value * 16 + ch - 65\n          /* A */\n          + 10;\n        } else if (ch >= 97\n      /* a */\n      && ch <= 102\n      /* f */\n      ) {\n          value = value * 16 + ch - 97\n          /* a */\n          + 10;\n        } else {\n        break;\n      }\n\n      pos++;\n      digits++;\n    }\n\n    if (digits < count) {\n      value = -1;\n    }\n\n    return value;\n  }\n\n  function setPosition(newPosition) {\n    pos = newPosition;\n    value = '';\n    tokenOffset = 0;\n    token = 16\n    /* Unknown */\n    ;\n    scanError = 0\n    /* None */\n    ;\n  }\n\n  function scanNumber() {\n    var start = pos;\n\n    if (text.charCodeAt(pos) === 48\n    /* _0 */\n    ) {\n        pos++;\n      } else {\n      pos++;\n\n      while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n      }\n    }\n\n    if (pos < text.length && text.charCodeAt(pos) === 46\n    /* dot */\n    ) {\n        pos++;\n\n        if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n          pos++;\n\n          while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n            pos++;\n          }\n        } else {\n          scanError = 3\n          /* UnexpectedEndOfNumber */\n          ;\n          return text.substring(start, pos);\n        }\n      }\n\n    var end = pos;\n\n    if (pos < text.length && (text.charCodeAt(pos) === 69\n    /* E */\n    || text.charCodeAt(pos) === 101\n    /* e */\n    )) {\n      pos++;\n\n      if (pos < text.length && text.charCodeAt(pos) === 43\n      /* plus */\n      || text.charCodeAt(pos) === 45\n      /* minus */\n      ) {\n          pos++;\n        }\n\n      if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n\n        while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n          pos++;\n        }\n\n        end = pos;\n      } else {\n        scanError = 3\n        /* UnexpectedEndOfNumber */\n        ;\n      }\n    }\n\n    return text.substring(start, end);\n  }\n\n  function scanString() {\n    var result = '',\n        start = pos;\n\n    while (true) {\n      if (pos >= len) {\n        result += text.substring(start, pos);\n        scanError = 2\n        /* UnexpectedEndOfString */\n        ;\n        break;\n      }\n\n      var ch = text.charCodeAt(pos);\n\n      if (ch === 34\n      /* doubleQuote */\n      ) {\n          result += text.substring(start, pos);\n          pos++;\n          break;\n        }\n\n      if (ch === 92\n      /* backslash */\n      ) {\n          result += text.substring(start, pos);\n          pos++;\n\n          if (pos >= len) {\n            scanError = 2\n            /* UnexpectedEndOfString */\n            ;\n            break;\n          }\n\n          var ch2 = text.charCodeAt(pos++);\n\n          switch (ch2) {\n            case 34\n            /* doubleQuote */\n            :\n              result += '\\\"';\n              break;\n\n            case 92\n            /* backslash */\n            :\n              result += '\\\\';\n              break;\n\n            case 47\n            /* slash */\n            :\n              result += '/';\n              break;\n\n            case 98\n            /* b */\n            :\n              result += '\\b';\n              break;\n\n            case 102\n            /* f */\n            :\n              result += '\\f';\n              break;\n\n            case 110\n            /* n */\n            :\n              result += '\\n';\n              break;\n\n            case 114\n            /* r */\n            :\n              result += '\\r';\n              break;\n\n            case 116\n            /* t */\n            :\n              result += '\\t';\n              break;\n\n            case 117\n            /* u */\n            :\n              var ch3 = scanHexDigits(4, true);\n\n              if (ch3 >= 0) {\n                result += String.fromCharCode(ch3);\n              } else {\n                scanError = 4\n                /* InvalidUnicode */\n                ;\n              }\n\n              break;\n\n            default:\n              scanError = 5\n              /* InvalidEscapeCharacter */\n              ;\n          }\n\n          start = pos;\n          continue;\n        }\n\n      if (ch >= 0 && ch <= 0x1f) {\n        if (isLineBreak(ch)) {\n          result += text.substring(start, pos);\n          scanError = 2\n          /* UnexpectedEndOfString */\n          ;\n          break;\n        } else {\n          scanError = 6\n          /* InvalidCharacter */\n          ; // mark as error but continue with string\n        }\n      }\n\n      pos++;\n    }\n\n    return result;\n  }\n\n  function scanNext() {\n    value = '';\n    scanError = 0\n    /* None */\n    ;\n    tokenOffset = pos;\n    lineStartOffset = lineNumber;\n    prevTokenLineStartOffset = tokenLineStartOffset;\n\n    if (pos >= len) {\n      // at the end\n      tokenOffset = len;\n      return token = 17\n      /* EOF */\n      ;\n    }\n\n    var code = text.charCodeAt(pos); // trivia: whitespace\n\n    if (isWhiteSpace(code)) {\n      do {\n        pos++;\n        value += String.fromCharCode(code);\n        code = text.charCodeAt(pos);\n      } while (isWhiteSpace(code));\n\n      return token = 15\n      /* Trivia */\n      ;\n    } // trivia: newlines\n\n\n    if (isLineBreak(code)) {\n      pos++;\n      value += String.fromCharCode(code);\n\n      if (code === 13\n      /* carriageReturn */\n      && text.charCodeAt(pos) === 10\n      /* lineFeed */\n      ) {\n          pos++;\n          value += '\\n';\n        }\n\n      lineNumber++;\n      tokenLineStartOffset = pos;\n      return token = 14\n      /* LineBreakTrivia */\n      ;\n    }\n\n    switch (code) {\n      // tokens: []{}:,\n      case 123\n      /* openBrace */\n      :\n        pos++;\n        return token = 1\n        /* OpenBraceToken */\n        ;\n\n      case 125\n      /* closeBrace */\n      :\n        pos++;\n        return token = 2\n        /* CloseBraceToken */\n        ;\n\n      case 91\n      /* openBracket */\n      :\n        pos++;\n        return token = 3\n        /* OpenBracketToken */\n        ;\n\n      case 93\n      /* closeBracket */\n      :\n        pos++;\n        return token = 4\n        /* CloseBracketToken */\n        ;\n\n      case 58\n      /* colon */\n      :\n        pos++;\n        return token = 6\n        /* ColonToken */\n        ;\n\n      case 44\n      /* comma */\n      :\n        pos++;\n        return token = 5\n        /* CommaToken */\n        ;\n      // strings\n\n      case 34\n      /* doubleQuote */\n      :\n        pos++;\n        value = scanString();\n        return token = 10\n        /* StringLiteral */\n        ;\n      // comments\n\n      case 47\n      /* slash */\n      :\n        var start = pos - 1; // Single-line comment\n\n        if (text.charCodeAt(pos + 1) === 47\n        /* slash */\n        ) {\n            pos += 2;\n\n            while (pos < len) {\n              if (isLineBreak(text.charCodeAt(pos))) {\n                break;\n              }\n\n              pos++;\n            }\n\n            value = text.substring(start, pos);\n            return token = 12\n            /* LineCommentTrivia */\n            ;\n          } // Multi-line comment\n\n\n        if (text.charCodeAt(pos + 1) === 42\n        /* asterisk */\n        ) {\n            pos += 2;\n            var safeLength = len - 1; // For lookahead.\n\n            var commentClosed = false;\n\n            while (pos < safeLength) {\n              var ch = text.charCodeAt(pos);\n\n              if (ch === 42\n              /* asterisk */\n              && text.charCodeAt(pos + 1) === 47\n              /* slash */\n              ) {\n                  pos += 2;\n                  commentClosed = true;\n                  break;\n                }\n\n              pos++;\n\n              if (isLineBreak(ch)) {\n                if (ch === 13\n                /* carriageReturn */\n                && text.charCodeAt(pos) === 10\n                /* lineFeed */\n                ) {\n                    pos++;\n                  }\n\n                lineNumber++;\n                tokenLineStartOffset = pos;\n              }\n            }\n\n            if (!commentClosed) {\n              pos++;\n              scanError = 1\n              /* UnexpectedEndOfComment */\n              ;\n            }\n\n            value = text.substring(start, pos);\n            return token = 13\n            /* BlockCommentTrivia */\n            ;\n          } // just a single slash\n\n\n        value += String.fromCharCode(code);\n        pos++;\n        return token = 16\n        /* Unknown */\n        ;\n      // numbers\n\n      case 45\n      /* minus */\n      :\n        value += String.fromCharCode(code);\n        pos++;\n\n        if (pos === len || !isDigit(text.charCodeAt(pos))) {\n          return token = 16\n          /* Unknown */\n          ;\n        }\n\n      // found a minus, followed by a number so\n      // we fall through to proceed with scanning\n      // numbers\n\n      case 48\n      /* _0 */\n      :\n      case 49\n      /* _1 */\n      :\n      case 50\n      /* _2 */\n      :\n      case 51\n      /* _3 */\n      :\n      case 52\n      /* _4 */\n      :\n      case 53\n      /* _5 */\n      :\n      case 54\n      /* _6 */\n      :\n      case 55\n      /* _7 */\n      :\n      case 56\n      /* _8 */\n      :\n      case 57\n      /* _9 */\n      :\n        value += scanNumber();\n        return token = 11\n        /* NumericLiteral */\n        ;\n      // literals and unknown symbols\n\n      default:\n        // is a literal? Read the full word.\n        while (pos < len && isUnknownContentCharacter(code)) {\n          pos++;\n          code = text.charCodeAt(pos);\n        }\n\n        if (tokenOffset !== pos) {\n          value = text.substring(tokenOffset, pos); // keywords: true, false, null\n\n          switch (value) {\n            case 'true':\n              return token = 8\n              /* TrueKeyword */\n              ;\n\n            case 'false':\n              return token = 9\n              /* FalseKeyword */\n              ;\n\n            case 'null':\n              return token = 7\n              /* NullKeyword */\n              ;\n          }\n\n          return token = 16\n          /* Unknown */\n          ;\n        } // some\n\n\n        value += String.fromCharCode(code);\n        pos++;\n        return token = 16\n        /* Unknown */\n        ;\n    }\n  }\n\n  function isUnknownContentCharacter(code) {\n    if (isWhiteSpace(code) || isLineBreak(code)) {\n      return false;\n    }\n\n    switch (code) {\n      case 125\n      /* closeBrace */\n      :\n      case 93\n      /* closeBracket */\n      :\n      case 123\n      /* openBrace */\n      :\n      case 91\n      /* openBracket */\n      :\n      case 34\n      /* doubleQuote */\n      :\n      case 58\n      /* colon */\n      :\n      case 44\n      /* comma */\n      :\n      case 47\n      /* slash */\n      :\n        return false;\n    }\n\n    return true;\n  }\n\n  function scanNextNonTrivia() {\n    var result;\n\n    do {\n      result = scanNext();\n    } while (result >= 12\n    /* LineCommentTrivia */\n    && result <= 15\n    /* Trivia */\n    );\n\n    return result;\n  }\n\n  return {\n    setPosition: setPosition,\n    getPosition: function () {\n      return pos;\n    },\n    scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n    getToken: function () {\n      return token;\n    },\n    getTokenValue: function () {\n      return value;\n    },\n    getTokenOffset: function () {\n      return tokenOffset;\n    },\n    getTokenLength: function () {\n      return pos - tokenOffset;\n    },\n    getTokenStartLine: function () {\n      return lineStartOffset;\n    },\n    getTokenStartCharacter: function () {\n      return tokenOffset - prevTokenLineStartOffset;\n    },\n    getTokenError: function () {\n      return scanError;\n    }\n  };\n}\n\nfunction isWhiteSpace(ch) {\n  return ch === 32\n  /* space */\n  || ch === 9\n  /* tab */\n  || ch === 11\n  /* verticalTab */\n  || ch === 12\n  /* formFeed */\n  || ch === 160\n  /* nonBreakingSpace */\n  || ch === 5760\n  /* ogham */\n  || ch >= 8192\n  /* enQuad */\n  && ch <= 8203\n  /* zeroWidthSpace */\n  || ch === 8239\n  /* narrowNoBreakSpace */\n  || ch === 8287\n  /* mathematicalSpace */\n  || ch === 12288\n  /* ideographicSpace */\n  || ch === 65279\n  /* byteOrderMark */\n  ;\n}\n\nfunction isLineBreak(ch) {\n  return ch === 10\n  /* lineFeed */\n  || ch === 13\n  /* carriageReturn */\n  || ch === 8232\n  /* lineSeparator */\n  || ch === 8233\n  /* paragraphSeparator */\n  ;\n}\n\nfunction isDigit(ch) {\n  return ch >= 48\n  /* _0 */\n  && ch <= 57\n  /* _9 */\n  ;\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js"],"names":["createScanner","text","ignoreTrivia","len","length","pos","value","tokenOffset","token","lineNumber","lineStartOffset","tokenLineStartOffset","prevTokenLineStartOffset","scanError","scanHexDigits","count","exact","digits","ch","charCodeAt","setPosition","newPosition","scanNumber","start","isDigit","substring","end","scanString","result","ch2","ch3","String","fromCharCode","isLineBreak","scanNext","code","isWhiteSpace","safeLength","commentClosed","isUnknownContentCharacter","scanNextNonTrivia","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenStartLine","getTokenStartCharacter","getTokenError"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var len = text.length;\n    var pos = 0, value = '', tokenOffset = 0, token = 16 /* Unknown */, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                var ch2 = text.charCodeAt(pos++);\n                switch (ch2) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch3 = scanHexDigits(4, true);\n                        if (ch3 >= 0) {\n                            result += String.fromCharCode(ch3);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        lineStartOffset = lineNumber;\n        prevTokenLineStartOffset = tokenLineStartOffset;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            lineNumber++;\n            tokenLineStartOffset = pos;\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var safeLength = len - 1; // For lookahead.\n                    var commentClosed = false;\n                    while (pos < safeLength) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                        if (isLineBreak(ch)) {\n                            if (ch === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                                pos++;\n                            }\n                            lineNumber++;\n                            tokenLineStartOffset = pos;\n                        }\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n            case 47 /* slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenStartLine: function () { return lineStartOffset; },\n        getTokenStartCharacter: function () { return tokenOffset - prevTokenLineStartOffset; },\n        getTokenError: function () { return scanError; },\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n"]},"metadata":{},"sourceType":"module"}