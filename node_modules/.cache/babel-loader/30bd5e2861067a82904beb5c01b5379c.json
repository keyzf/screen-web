{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { DEFAULT_WORD_REGEXP, ensureValidWordDefinition } from '../model/wordHelper.js';\nimport { IndentAction } from './languageConfiguration.js';\nimport { createScopedLineTokens } from './supports.js';\nimport { CharacterPairSupport } from './supports/characterPair.js';\nimport { BracketElectricCharacterSupport } from './supports/electricCharacter.js';\nimport { IndentRulesSupport } from './supports/indentRules.js';\nimport { OnEnterSupport } from './supports/onEnter.js';\nimport { RichEditBrackets } from './supports/richEditBrackets.js';\n\nvar RichEditSupport =\n/** @class */\nfunction () {\n  function RichEditSupport(languageIdentifier, previous, rawConf) {\n    this._languageIdentifier = languageIdentifier;\n    this._brackets = null;\n    this._electricCharacter = null;\n    var prev = null;\n\n    if (previous) {\n      prev = previous._conf;\n    }\n\n    this._conf = RichEditSupport._mergeConf(prev, rawConf);\n    this._onEnterSupport = this._conf.brackets || this._conf.indentationRules || this._conf.onEnterRules ? new OnEnterSupport(this._conf) : null;\n    this.comments = RichEditSupport._handleComments(this._conf);\n    this.characterPair = new CharacterPairSupport(this._conf);\n    this.wordDefinition = this._conf.wordPattern || DEFAULT_WORD_REGEXP;\n    this.indentationRules = this._conf.indentationRules;\n\n    if (this._conf.indentationRules) {\n      this.indentRulesSupport = new IndentRulesSupport(this._conf.indentationRules);\n    } else {\n      this.indentRulesSupport = null;\n    }\n\n    this.foldingRules = this._conf.folding || {};\n  }\n\n  Object.defineProperty(RichEditSupport.prototype, \"brackets\", {\n    get: function () {\n      if (!this._brackets && this._conf.brackets) {\n        this._brackets = new RichEditBrackets(this._languageIdentifier, this._conf.brackets);\n      }\n\n      return this._brackets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RichEditSupport.prototype, \"electricCharacter\", {\n    get: function () {\n      if (!this._electricCharacter) {\n        this._electricCharacter = new BracketElectricCharacterSupport(this.brackets);\n      }\n\n      return this._electricCharacter;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  RichEditSupport.prototype.onEnter = function (autoIndent, oneLineAboveText, beforeEnterText, afterEnterText) {\n    if (!this._onEnterSupport) {\n      return null;\n    }\n\n    return this._onEnterSupport.onEnter(autoIndent, oneLineAboveText, beforeEnterText, afterEnterText);\n  };\n\n  RichEditSupport._mergeConf = function (prev, current) {\n    return {\n      comments: prev ? current.comments || prev.comments : current.comments,\n      brackets: prev ? current.brackets || prev.brackets : current.brackets,\n      wordPattern: prev ? current.wordPattern || prev.wordPattern : current.wordPattern,\n      indentationRules: prev ? current.indentationRules || prev.indentationRules : current.indentationRules,\n      onEnterRules: prev ? current.onEnterRules || prev.onEnterRules : current.onEnterRules,\n      autoClosingPairs: prev ? current.autoClosingPairs || prev.autoClosingPairs : current.autoClosingPairs,\n      surroundingPairs: prev ? current.surroundingPairs || prev.surroundingPairs : current.surroundingPairs,\n      autoCloseBefore: prev ? current.autoCloseBefore || prev.autoCloseBefore : current.autoCloseBefore,\n      folding: prev ? current.folding || prev.folding : current.folding,\n      __electricCharacterSupport: prev ? current.__electricCharacterSupport || prev.__electricCharacterSupport : current.__electricCharacterSupport\n    };\n  };\n\n  RichEditSupport._handleComments = function (conf) {\n    var commentRule = conf.comments;\n\n    if (!commentRule) {\n      return null;\n    } // comment configuration\n\n\n    var comments = {};\n\n    if (commentRule.lineComment) {\n      comments.lineCommentToken = commentRule.lineComment;\n    }\n\n    if (commentRule.blockComment) {\n      var _a = commentRule.blockComment,\n          blockStart = _a[0],\n          blockEnd = _a[1];\n      comments.blockCommentStartToken = blockStart;\n      comments.blockCommentEndToken = blockEnd;\n    }\n\n    return comments;\n  };\n\n  return RichEditSupport;\n}();\n\nexport { RichEditSupport };\n\nvar LanguageConfigurationChangeEvent =\n/** @class */\nfunction () {\n  function LanguageConfigurationChangeEvent(languageIdentifier) {\n    this.languageIdentifier = languageIdentifier;\n  }\n\n  return LanguageConfigurationChangeEvent;\n}();\n\nexport { LanguageConfigurationChangeEvent };\n\nvar LanguageConfigurationRegistryImpl =\n/** @class */\nfunction () {\n  function LanguageConfigurationRegistryImpl() {\n    this._entries = new Map();\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n  }\n\n  LanguageConfigurationRegistryImpl.prototype.register = function (languageIdentifier, configuration) {\n    var _this = this;\n\n    var previous = this._getRichEditSupport(languageIdentifier.id);\n\n    var current = new RichEditSupport(languageIdentifier, previous, configuration);\n\n    this._entries.set(languageIdentifier.id, current);\n\n    this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageIdentifier));\n\n    return toDisposable(function () {\n      if (_this._entries.get(languageIdentifier.id) === current) {\n        _this._entries.set(languageIdentifier.id, previous);\n\n        _this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageIdentifier));\n      }\n    });\n  };\n\n  LanguageConfigurationRegistryImpl.prototype._getRichEditSupport = function (languageId) {\n    return this._entries.get(languageId);\n  }; // begin electricCharacter\n\n\n  LanguageConfigurationRegistryImpl.prototype._getElectricCharacterSupport = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n\n    if (!value) {\n      return null;\n    }\n\n    return value.electricCharacter || null;\n  };\n\n  LanguageConfigurationRegistryImpl.prototype.getElectricCharacters = function (languageId) {\n    var electricCharacterSupport = this._getElectricCharacterSupport(languageId);\n\n    if (!electricCharacterSupport) {\n      return [];\n    }\n\n    return electricCharacterSupport.getElectricCharacters();\n  };\n  /**\r\n   * Should return opening bracket type to match indentation with\r\n   */\n\n\n  LanguageConfigurationRegistryImpl.prototype.onElectricCharacter = function (character, context, column) {\n    var scopedLineTokens = createScopedLineTokens(context, column - 1);\n\n    var electricCharacterSupport = this._getElectricCharacterSupport(scopedLineTokens.languageId);\n\n    if (!electricCharacterSupport) {\n      return null;\n    }\n\n    return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n  }; // end electricCharacter\n\n\n  LanguageConfigurationRegistryImpl.prototype.getComments = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n\n    if (!value) {\n      return null;\n    }\n\n    return value.comments || null;\n  }; // begin characterPair\n\n\n  LanguageConfigurationRegistryImpl.prototype._getCharacterPairSupport = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n\n    if (!value) {\n      return null;\n    }\n\n    return value.characterPair || null;\n  };\n\n  LanguageConfigurationRegistryImpl.prototype.getAutoClosingPairs = function (languageId) {\n    var characterPairSupport = this._getCharacterPairSupport(languageId);\n\n    if (!characterPairSupport) {\n      return [];\n    }\n\n    return characterPairSupport.getAutoClosingPairs();\n  };\n\n  LanguageConfigurationRegistryImpl.prototype.getAutoCloseBeforeSet = function (languageId) {\n    var characterPairSupport = this._getCharacterPairSupport(languageId);\n\n    if (!characterPairSupport) {\n      return CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n    }\n\n    return characterPairSupport.getAutoCloseBeforeSet();\n  };\n\n  LanguageConfigurationRegistryImpl.prototype.getSurroundingPairs = function (languageId) {\n    var characterPairSupport = this._getCharacterPairSupport(languageId);\n\n    if (!characterPairSupport) {\n      return [];\n    }\n\n    return characterPairSupport.getSurroundingPairs();\n  };\n\n  LanguageConfigurationRegistryImpl.prototype.shouldAutoClosePair = function (autoClosingPair, context, column) {\n    var scopedLineTokens = createScopedLineTokens(context, column - 1);\n    return CharacterPairSupport.shouldAutoClosePair(autoClosingPair, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n  }; // end characterPair\n\n\n  LanguageConfigurationRegistryImpl.prototype.getWordDefinition = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n\n    if (!value) {\n      return ensureValidWordDefinition(null);\n    }\n\n    return ensureValidWordDefinition(value.wordDefinition || null);\n  };\n\n  LanguageConfigurationRegistryImpl.prototype.getFoldingRules = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n\n    if (!value) {\n      return {};\n    }\n\n    return value.foldingRules;\n  }; // begin Indent Rules\n\n\n  LanguageConfigurationRegistryImpl.prototype.getIndentRulesSupport = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n\n    if (!value) {\n      return null;\n    }\n\n    return value.indentRulesSupport || null;\n  };\n  /**\r\n   * Get nearest preceiding line which doesn't match unIndentPattern or contains all whitespace.\r\n   * Result:\r\n   * -1: run into the boundary of embedded languages\r\n   * 0: every line above are invalid\r\n   * else: nearest preceding line of the same language\r\n   */\n\n\n  LanguageConfigurationRegistryImpl.prototype.getPrecedingValidLine = function (model, lineNumber, indentRulesSupport) {\n    var languageID = model.getLanguageIdAtPosition(lineNumber, 0);\n\n    if (lineNumber > 1) {\n      var lastLineNumber = void 0;\n      var resultLineNumber = -1;\n\n      for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n        if (model.getLanguageIdAtPosition(lastLineNumber, 0) !== languageID) {\n          return resultLineNumber;\n        }\n\n        var text = model.getLineContent(lastLineNumber);\n\n        if (indentRulesSupport.shouldIgnore(text) || /^\\s+$/.test(text) || text === '') {\n          resultLineNumber = lastLineNumber;\n          continue;\n        }\n\n        return lastLineNumber;\n      }\n    }\n\n    return -1;\n  };\n  /**\r\n   * Get inherited indentation from above lines.\r\n   * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\r\n   * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\r\n   * 3. If this line doesn't match any indent rules\r\n   *   a. check whether the line above it matches indentNextLinePattern\r\n   *   b. If not, the indent level of this line is the result\r\n   *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\r\n   * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\r\n   *\r\n   * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\r\n   */\n\n\n  LanguageConfigurationRegistryImpl.prototype.getInheritIndentForLine = function (autoIndent, model, lineNumber, honorIntentialIndent) {\n    if (honorIntentialIndent === void 0) {\n      honorIntentialIndent = true;\n    }\n\n    if (autoIndent < 4\n    /* Full */\n    ) {\n        return null;\n      }\n\n    var indentRulesSupport = this.getIndentRulesSupport(model.getLanguageIdentifier().id);\n\n    if (!indentRulesSupport) {\n      return null;\n    }\n\n    if (lineNumber <= 1) {\n      return {\n        indentation: '',\n        action: null\n      };\n    }\n\n    var precedingUnIgnoredLine = this.getPrecedingValidLine(model, lineNumber, indentRulesSupport);\n\n    if (precedingUnIgnoredLine < 0) {\n      return null;\n    } else if (precedingUnIgnoredLine < 1) {\n      return {\n        indentation: '',\n        action: null\n      };\n    }\n\n    var precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\n\n    if (indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent) || indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent)) {\n      return {\n        indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n        action: IndentAction.Indent,\n        line: precedingUnIgnoredLine\n      };\n    } else if (indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent)) {\n      return {\n        indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n        action: null,\n        line: precedingUnIgnoredLine\n      };\n    } else {\n      // precedingUnIgnoredLine can not be ignored.\n      // it doesn't increase indent of following lines\n      // it doesn't increase just next line\n      // so current line is not affect by precedingUnIgnoredLine\n      // and then we should get a correct inheritted indentation from above lines\n      if (precedingUnIgnoredLine === 1) {\n        return {\n          indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n          action: null,\n          line: precedingUnIgnoredLine\n        };\n      }\n\n      var previousLine = precedingUnIgnoredLine - 1;\n      var previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\n\n      if (!(previousLineIndentMetadata & (1\n      /* INCREASE_MASK */\n      | 2\n      /* DECREASE_MASK */\n      )) && previousLineIndentMetadata & 4\n      /* INDENT_NEXTLINE_MASK */\n      ) {\n        var stopLine = 0;\n\n        for (var i = previousLine - 1; i > 0; i--) {\n          if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n            continue;\n          }\n\n          stopLine = i;\n          break;\n        }\n\n        return {\n          indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n          action: null,\n          line: stopLine + 1\n        };\n      }\n\n      if (honorIntentialIndent) {\n        return {\n          indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n          action: null,\n          line: precedingUnIgnoredLine\n        };\n      } else {\n        // search from precedingUnIgnoredLine until we find one whose indent is not temporary\n        for (var i = precedingUnIgnoredLine; i > 0; i--) {\n          var lineContent = model.getLineContent(i);\n\n          if (indentRulesSupport.shouldIncrease(lineContent)) {\n            return {\n              indentation: strings.getLeadingWhitespace(lineContent),\n              action: IndentAction.Indent,\n              line: i\n            };\n          } else if (indentRulesSupport.shouldIndentNextLine(lineContent)) {\n            var stopLine = 0;\n\n            for (var j = i - 1; j > 0; j--) {\n              if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                continue;\n              }\n\n              stopLine = j;\n              break;\n            }\n\n            return {\n              indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n              action: null,\n              line: stopLine + 1\n            };\n          } else if (indentRulesSupport.shouldDecrease(lineContent)) {\n            return {\n              indentation: strings.getLeadingWhitespace(lineContent),\n              action: null,\n              line: i\n            };\n          }\n        }\n\n        return {\n          indentation: strings.getLeadingWhitespace(model.getLineContent(1)),\n          action: null,\n          line: 1\n        };\n      }\n    }\n  };\n\n  LanguageConfigurationRegistryImpl.prototype.getGoodIndentForLine = function (autoIndent, virtualModel, languageId, lineNumber, indentConverter) {\n    if (autoIndent < 4\n    /* Full */\n    ) {\n        return null;\n      }\n\n    var richEditSupport = this._getRichEditSupport(languageId);\n\n    if (!richEditSupport) {\n      return null;\n    }\n\n    var indentRulesSupport = this.getIndentRulesSupport(languageId);\n\n    if (!indentRulesSupport) {\n      return null;\n    }\n\n    var indent = this.getInheritIndentForLine(autoIndent, virtualModel, lineNumber);\n    var lineContent = virtualModel.getLineContent(lineNumber);\n\n    if (indent) {\n      var inheritLine = indent.line;\n\n      if (inheritLine !== undefined) {\n        var enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\n\n        if (enterResult) {\n          var indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\n\n          if (enterResult.removeText) {\n            indentation = indentation.substring(0, indentation.length - enterResult.removeText);\n          }\n\n          if (enterResult.indentAction === IndentAction.Indent || enterResult.indentAction === IndentAction.IndentOutdent) {\n            indentation = indentConverter.shiftIndent(indentation);\n          } else if (enterResult.indentAction === IndentAction.Outdent) {\n            indentation = indentConverter.unshiftIndent(indentation);\n          }\n\n          if (indentRulesSupport.shouldDecrease(lineContent)) {\n            indentation = indentConverter.unshiftIndent(indentation);\n          }\n\n          if (enterResult.appendText) {\n            indentation += enterResult.appendText;\n          }\n\n          return strings.getLeadingWhitespace(indentation);\n        }\n      }\n\n      if (indentRulesSupport.shouldDecrease(lineContent)) {\n        if (indent.action === IndentAction.Indent) {\n          return indent.indentation;\n        } else {\n          return indentConverter.unshiftIndent(indent.indentation);\n        }\n      } else {\n        if (indent.action === IndentAction.Indent) {\n          return indentConverter.shiftIndent(indent.indentation);\n        } else {\n          return indent.indentation;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  LanguageConfigurationRegistryImpl.prototype.getIndentForEnter = function (autoIndent, model, range, indentConverter) {\n    if (autoIndent < 4\n    /* Full */\n    ) {\n        return null;\n      }\n\n    model.forceTokenization(range.startLineNumber);\n    var lineTokens = model.getLineTokens(range.startLineNumber);\n    var scopedLineTokens = createScopedLineTokens(lineTokens, range.startColumn - 1);\n    var scopedLineText = scopedLineTokens.getLineContent();\n    var embeddedLanguage = false;\n    var beforeEnterText;\n\n    if (scopedLineTokens.firstCharOffset > 0 && lineTokens.getLanguageId(0) !== scopedLineTokens.languageId) {\n      // we are in the embeded language content\n      embeddedLanguage = true; // if embeddedLanguage is true, then we don't touch the indentation of current line\n\n      beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    } else {\n      beforeEnterText = lineTokens.getLineContent().substring(0, range.startColumn - 1);\n    }\n\n    var afterEnterText;\n\n    if (range.isEmpty()) {\n      afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    } else {\n      var endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n      afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n\n    var indentRulesSupport = this.getIndentRulesSupport(scopedLineTokens.languageId);\n\n    if (!indentRulesSupport) {\n      return null;\n    }\n\n    var beforeEnterResult = beforeEnterText;\n    var beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterText);\n    var virtualModel = {\n      getLineTokens: function (lineNumber) {\n        return model.getLineTokens(lineNumber);\n      },\n      getLanguageIdentifier: function () {\n        return model.getLanguageIdentifier();\n      },\n      getLanguageIdAtPosition: function (lineNumber, column) {\n        return model.getLanguageIdAtPosition(lineNumber, column);\n      },\n      getLineContent: function (lineNumber) {\n        if (lineNumber === range.startLineNumber) {\n          return beforeEnterResult;\n        } else {\n          return model.getLineContent(lineNumber);\n        }\n      }\n    };\n    var currentLineIndent = strings.getLeadingWhitespace(lineTokens.getLineContent());\n    var afterEnterAction = this.getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1);\n\n    if (!afterEnterAction) {\n      var beforeEnter = embeddedLanguage ? currentLineIndent : beforeEnterIndent;\n      return {\n        beforeEnter: beforeEnter,\n        afterEnter: beforeEnter\n      };\n    }\n\n    var afterEnterIndent = embeddedLanguage ? currentLineIndent : afterEnterAction.indentation;\n\n    if (afterEnterAction.action === IndentAction.Indent) {\n      afterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\n    }\n\n    if (indentRulesSupport.shouldDecrease(afterEnterText)) {\n      afterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\n    }\n\n    return {\n      beforeEnter: embeddedLanguage ? currentLineIndent : beforeEnterIndent,\n      afterEnter: afterEnterIndent\n    };\n  };\n  /**\r\n   * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\r\n   * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\r\n   */\n\n\n  LanguageConfigurationRegistryImpl.prototype.getIndentActionForType = function (autoIndent, model, range, ch, indentConverter) {\n    if (autoIndent < 4\n    /* Full */\n    ) {\n        return null;\n      }\n\n    var scopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n    var indentRulesSupport = this.getIndentRulesSupport(scopedLineTokens.languageId);\n\n    if (!indentRulesSupport) {\n      return null;\n    }\n\n    var scopedLineText = scopedLineTokens.getLineContent();\n    var beforeTypeText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset); // selection support\n\n    var afterTypeText;\n\n    if (range.isEmpty()) {\n      afterTypeText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    } else {\n      var endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n      afterTypeText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    } // If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\n    // Users might change the indentation by purpose and we should honor that instead of readjusting.\n\n\n    if (!indentRulesSupport.shouldDecrease(beforeTypeText + afterTypeText) && indentRulesSupport.shouldDecrease(beforeTypeText + ch + afterTypeText)) {\n      // after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\n      // 1. Get inherited indent action\n      var r = this.getInheritIndentForLine(autoIndent, model, range.startLineNumber, false);\n\n      if (!r) {\n        return null;\n      }\n\n      var indentation = r.indentation;\n\n      if (r.action !== IndentAction.Indent) {\n        indentation = indentConverter.unshiftIndent(indentation);\n      }\n\n      return indentation;\n    }\n\n    return null;\n  };\n\n  LanguageConfigurationRegistryImpl.prototype.getIndentMetadata = function (model, lineNumber) {\n    var indentRulesSupport = this.getIndentRulesSupport(model.getLanguageIdentifier().id);\n\n    if (!indentRulesSupport) {\n      return null;\n    }\n\n    if (lineNumber < 1 || lineNumber > model.getLineCount()) {\n      return null;\n    }\n\n    return indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\n  }; // end Indent Rules\n  // begin onEnter\n\n\n  LanguageConfigurationRegistryImpl.prototype.getEnterAction = function (autoIndent, model, range) {\n    var scopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n\n    var richEditSupport = this._getRichEditSupport(scopedLineTokens.languageId);\n\n    if (!richEditSupport) {\n      return null;\n    }\n\n    var scopedLineText = scopedLineTokens.getLineContent();\n    var beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset); // selection support\n\n    var afterEnterText;\n\n    if (range.isEmpty()) {\n      afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    } else {\n      var endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n      afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n\n    var oneLineAboveText = '';\n\n    if (range.startLineNumber > 1 && scopedLineTokens.firstCharOffset === 0) {\n      // This is not the first line and the entire line belongs to this mode\n      var oneLineAboveScopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber - 1);\n\n      if (oneLineAboveScopedLineTokens.languageId === scopedLineTokens.languageId) {\n        // The line above ends with text belonging to the same mode\n        oneLineAboveText = oneLineAboveScopedLineTokens.getLineContent();\n      }\n    }\n\n    var enterResult = richEditSupport.onEnter(autoIndent, oneLineAboveText, beforeEnterText, afterEnterText);\n\n    if (!enterResult) {\n      return null;\n    }\n\n    var indentAction = enterResult.indentAction;\n    var appendText = enterResult.appendText;\n    var removeText = enterResult.removeText || 0; // Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n\n    if (!appendText) {\n      if (indentAction === IndentAction.Indent || indentAction === IndentAction.IndentOutdent) {\n        appendText = '\\t';\n      } else {\n        appendText = '';\n      }\n    }\n\n    var indentation = this.getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n\n    if (removeText) {\n      indentation = indentation.substring(0, indentation.length - removeText);\n    }\n\n    return {\n      indentAction: indentAction,\n      appendText: appendText,\n      removeText: removeText,\n      indentation: indentation\n    };\n  };\n\n  LanguageConfigurationRegistryImpl.prototype.getIndentationAtPosition = function (model, lineNumber, column) {\n    var lineText = model.getLineContent(lineNumber);\n    var indentation = strings.getLeadingWhitespace(lineText);\n\n    if (indentation.length > column - 1) {\n      indentation = indentation.substring(0, column - 1);\n    }\n\n    return indentation;\n  };\n\n  LanguageConfigurationRegistryImpl.prototype.getScopedLineTokens = function (model, lineNumber, columnNumber) {\n    model.forceTokenization(lineNumber);\n    var lineTokens = model.getLineTokens(lineNumber);\n    var column = typeof columnNumber === 'undefined' ? model.getLineMaxColumn(lineNumber) - 1 : columnNumber - 1;\n    return createScopedLineTokens(lineTokens, column);\n  }; // end onEnter\n\n\n  LanguageConfigurationRegistryImpl.prototype.getBracketsSupport = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n\n    if (!value) {\n      return null;\n    }\n\n    return value.brackets || null;\n  };\n\n  return LanguageConfigurationRegistryImpl;\n}();\n\nexport { LanguageConfigurationRegistryImpl };\nexport var LanguageConfigurationRegistry = new LanguageConfigurationRegistryImpl();","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/modes/languageConfigurationRegistry.js"],"names":["Emitter","toDisposable","strings","DEFAULT_WORD_REGEXP","ensureValidWordDefinition","IndentAction","createScopedLineTokens","CharacterPairSupport","BracketElectricCharacterSupport","IndentRulesSupport","OnEnterSupport","RichEditBrackets","RichEditSupport","languageIdentifier","previous","rawConf","_languageIdentifier","_brackets","_electricCharacter","prev","_conf","_mergeConf","_onEnterSupport","brackets","indentationRules","onEnterRules","comments","_handleComments","characterPair","wordDefinition","wordPattern","indentRulesSupport","foldingRules","folding","Object","defineProperty","prototype","get","enumerable","configurable","onEnter","autoIndent","oneLineAboveText","beforeEnterText","afterEnterText","current","autoClosingPairs","surroundingPairs","autoCloseBefore","__electricCharacterSupport","conf","commentRule","lineComment","lineCommentToken","blockComment","_a","blockStart","blockEnd","blockCommentStartToken","blockCommentEndToken","LanguageConfigurationChangeEvent","LanguageConfigurationRegistryImpl","_entries","Map","_onDidChange","onDidChange","event","register","configuration","_this","_getRichEditSupport","id","set","fire","languageId","_getElectricCharacterSupport","value","electricCharacter","getElectricCharacters","electricCharacterSupport","onElectricCharacter","character","context","column","scopedLineTokens","firstCharOffset","getComments","_getCharacterPairSupport","getAutoClosingPairs","characterPairSupport","getAutoCloseBeforeSet","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED","getSurroundingPairs","shouldAutoClosePair","autoClosingPair","getWordDefinition","getFoldingRules","getIndentRulesSupport","getPrecedingValidLine","model","lineNumber","languageID","getLanguageIdAtPosition","lastLineNumber","resultLineNumber","text","getLineContent","shouldIgnore","test","getInheritIndentForLine","honorIntentialIndent","getLanguageIdentifier","indentation","action","precedingUnIgnoredLine","precedingUnIgnoredLineContent","shouldIncrease","shouldIndentNextLine","getLeadingWhitespace","Indent","line","shouldDecrease","previousLine","previousLineIndentMetadata","getIndentMetadata","stopLine","i","lineContent","j","getGoodIndentForLine","virtualModel","indentConverter","richEditSupport","indent","inheritLine","undefined","enterResult","removeText","substring","length","indentAction","IndentOutdent","shiftIndent","Outdent","unshiftIndent","appendText","getIndentForEnter","range","forceTokenization","startLineNumber","lineTokens","getLineTokens","startColumn","scopedLineText","embeddedLanguage","getLanguageId","substr","isEmpty","endScopedLineTokens","getScopedLineTokens","endLineNumber","endColumn","beforeEnterResult","beforeEnterIndent","currentLineIndent","afterEnterAction","beforeEnter","afterEnter","afterEnterIndent","getIndentActionForType","ch","beforeTypeText","afterTypeText","r","getLineCount","getEnterAction","oneLineAboveScopedLineTokens","getIndentationAtPosition","lineText","columnNumber","getLineMaxColumn","getBracketsSupport","LanguageConfigurationRegistry"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { toDisposable } from '../../../base/common/lifecycle.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { DEFAULT_WORD_REGEXP, ensureValidWordDefinition } from '../model/wordHelper.js';\r\nimport { IndentAction } from './languageConfiguration.js';\r\nimport { createScopedLineTokens } from './supports.js';\r\nimport { CharacterPairSupport } from './supports/characterPair.js';\r\nimport { BracketElectricCharacterSupport } from './supports/electricCharacter.js';\r\nimport { IndentRulesSupport } from './supports/indentRules.js';\r\nimport { OnEnterSupport } from './supports/onEnter.js';\r\nimport { RichEditBrackets } from './supports/richEditBrackets.js';\r\nvar RichEditSupport = /** @class */ (function () {\r\n    function RichEditSupport(languageIdentifier, previous, rawConf) {\r\n        this._languageIdentifier = languageIdentifier;\r\n        this._brackets = null;\r\n        this._electricCharacter = null;\r\n        var prev = null;\r\n        if (previous) {\r\n            prev = previous._conf;\r\n        }\r\n        this._conf = RichEditSupport._mergeConf(prev, rawConf);\r\n        this._onEnterSupport = (this._conf.brackets || this._conf.indentationRules || this._conf.onEnterRules ? new OnEnterSupport(this._conf) : null);\r\n        this.comments = RichEditSupport._handleComments(this._conf);\r\n        this.characterPair = new CharacterPairSupport(this._conf);\r\n        this.wordDefinition = this._conf.wordPattern || DEFAULT_WORD_REGEXP;\r\n        this.indentationRules = this._conf.indentationRules;\r\n        if (this._conf.indentationRules) {\r\n            this.indentRulesSupport = new IndentRulesSupport(this._conf.indentationRules);\r\n        }\r\n        else {\r\n            this.indentRulesSupport = null;\r\n        }\r\n        this.foldingRules = this._conf.folding || {};\r\n    }\r\n    Object.defineProperty(RichEditSupport.prototype, \"brackets\", {\r\n        get: function () {\r\n            if (!this._brackets && this._conf.brackets) {\r\n                this._brackets = new RichEditBrackets(this._languageIdentifier, this._conf.brackets);\r\n            }\r\n            return this._brackets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RichEditSupport.prototype, \"electricCharacter\", {\r\n        get: function () {\r\n            if (!this._electricCharacter) {\r\n                this._electricCharacter = new BracketElectricCharacterSupport(this.brackets);\r\n            }\r\n            return this._electricCharacter;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    RichEditSupport.prototype.onEnter = function (autoIndent, oneLineAboveText, beforeEnterText, afterEnterText) {\r\n        if (!this._onEnterSupport) {\r\n            return null;\r\n        }\r\n        return this._onEnterSupport.onEnter(autoIndent, oneLineAboveText, beforeEnterText, afterEnterText);\r\n    };\r\n    RichEditSupport._mergeConf = function (prev, current) {\r\n        return {\r\n            comments: (prev ? current.comments || prev.comments : current.comments),\r\n            brackets: (prev ? current.brackets || prev.brackets : current.brackets),\r\n            wordPattern: (prev ? current.wordPattern || prev.wordPattern : current.wordPattern),\r\n            indentationRules: (prev ? current.indentationRules || prev.indentationRules : current.indentationRules),\r\n            onEnterRules: (prev ? current.onEnterRules || prev.onEnterRules : current.onEnterRules),\r\n            autoClosingPairs: (prev ? current.autoClosingPairs || prev.autoClosingPairs : current.autoClosingPairs),\r\n            surroundingPairs: (prev ? current.surroundingPairs || prev.surroundingPairs : current.surroundingPairs),\r\n            autoCloseBefore: (prev ? current.autoCloseBefore || prev.autoCloseBefore : current.autoCloseBefore),\r\n            folding: (prev ? current.folding || prev.folding : current.folding),\r\n            __electricCharacterSupport: (prev ? current.__electricCharacterSupport || prev.__electricCharacterSupport : current.__electricCharacterSupport),\r\n        };\r\n    };\r\n    RichEditSupport._handleComments = function (conf) {\r\n        var commentRule = conf.comments;\r\n        if (!commentRule) {\r\n            return null;\r\n        }\r\n        // comment configuration\r\n        var comments = {};\r\n        if (commentRule.lineComment) {\r\n            comments.lineCommentToken = commentRule.lineComment;\r\n        }\r\n        if (commentRule.blockComment) {\r\n            var _a = commentRule.blockComment, blockStart = _a[0], blockEnd = _a[1];\r\n            comments.blockCommentStartToken = blockStart;\r\n            comments.blockCommentEndToken = blockEnd;\r\n        }\r\n        return comments;\r\n    };\r\n    return RichEditSupport;\r\n}());\r\nexport { RichEditSupport };\r\nvar LanguageConfigurationChangeEvent = /** @class */ (function () {\r\n    function LanguageConfigurationChangeEvent(languageIdentifier) {\r\n        this.languageIdentifier = languageIdentifier;\r\n    }\r\n    return LanguageConfigurationChangeEvent;\r\n}());\r\nexport { LanguageConfigurationChangeEvent };\r\nvar LanguageConfigurationRegistryImpl = /** @class */ (function () {\r\n    function LanguageConfigurationRegistryImpl() {\r\n        this._entries = new Map();\r\n        this._onDidChange = new Emitter();\r\n        this.onDidChange = this._onDidChange.event;\r\n    }\r\n    LanguageConfigurationRegistryImpl.prototype.register = function (languageIdentifier, configuration) {\r\n        var _this = this;\r\n        var previous = this._getRichEditSupport(languageIdentifier.id);\r\n        var current = new RichEditSupport(languageIdentifier, previous, configuration);\r\n        this._entries.set(languageIdentifier.id, current);\r\n        this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageIdentifier));\r\n        return toDisposable(function () {\r\n            if (_this._entries.get(languageIdentifier.id) === current) {\r\n                _this._entries.set(languageIdentifier.id, previous);\r\n                _this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageIdentifier));\r\n            }\r\n        });\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype._getRichEditSupport = function (languageId) {\r\n        return this._entries.get(languageId);\r\n    };\r\n    // begin electricCharacter\r\n    LanguageConfigurationRegistryImpl.prototype._getElectricCharacterSupport = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return null;\r\n        }\r\n        return value.electricCharacter || null;\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getElectricCharacters = function (languageId) {\r\n        var electricCharacterSupport = this._getElectricCharacterSupport(languageId);\r\n        if (!electricCharacterSupport) {\r\n            return [];\r\n        }\r\n        return electricCharacterSupport.getElectricCharacters();\r\n    };\r\n    /**\r\n     * Should return opening bracket type to match indentation with\r\n     */\r\n    LanguageConfigurationRegistryImpl.prototype.onElectricCharacter = function (character, context, column) {\r\n        var scopedLineTokens = createScopedLineTokens(context, column - 1);\r\n        var electricCharacterSupport = this._getElectricCharacterSupport(scopedLineTokens.languageId);\r\n        if (!electricCharacterSupport) {\r\n            return null;\r\n        }\r\n        return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\r\n    };\r\n    // end electricCharacter\r\n    LanguageConfigurationRegistryImpl.prototype.getComments = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return null;\r\n        }\r\n        return value.comments || null;\r\n    };\r\n    // begin characterPair\r\n    LanguageConfigurationRegistryImpl.prototype._getCharacterPairSupport = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return null;\r\n        }\r\n        return value.characterPair || null;\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getAutoClosingPairs = function (languageId) {\r\n        var characterPairSupport = this._getCharacterPairSupport(languageId);\r\n        if (!characterPairSupport) {\r\n            return [];\r\n        }\r\n        return characterPairSupport.getAutoClosingPairs();\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getAutoCloseBeforeSet = function (languageId) {\r\n        var characterPairSupport = this._getCharacterPairSupport(languageId);\r\n        if (!characterPairSupport) {\r\n            return CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\r\n        }\r\n        return characterPairSupport.getAutoCloseBeforeSet();\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getSurroundingPairs = function (languageId) {\r\n        var characterPairSupport = this._getCharacterPairSupport(languageId);\r\n        if (!characterPairSupport) {\r\n            return [];\r\n        }\r\n        return characterPairSupport.getSurroundingPairs();\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.shouldAutoClosePair = function (autoClosingPair, context, column) {\r\n        var scopedLineTokens = createScopedLineTokens(context, column - 1);\r\n        return CharacterPairSupport.shouldAutoClosePair(autoClosingPair, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\r\n    };\r\n    // end characterPair\r\n    LanguageConfigurationRegistryImpl.prototype.getWordDefinition = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return ensureValidWordDefinition(null);\r\n        }\r\n        return ensureValidWordDefinition(value.wordDefinition || null);\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getFoldingRules = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return {};\r\n        }\r\n        return value.foldingRules;\r\n    };\r\n    // begin Indent Rules\r\n    LanguageConfigurationRegistryImpl.prototype.getIndentRulesSupport = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return null;\r\n        }\r\n        return value.indentRulesSupport || null;\r\n    };\r\n    /**\r\n     * Get nearest preceiding line which doesn't match unIndentPattern or contains all whitespace.\r\n     * Result:\r\n     * -1: run into the boundary of embedded languages\r\n     * 0: every line above are invalid\r\n     * else: nearest preceding line of the same language\r\n     */\r\n    LanguageConfigurationRegistryImpl.prototype.getPrecedingValidLine = function (model, lineNumber, indentRulesSupport) {\r\n        var languageID = model.getLanguageIdAtPosition(lineNumber, 0);\r\n        if (lineNumber > 1) {\r\n            var lastLineNumber = void 0;\r\n            var resultLineNumber = -1;\r\n            for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\r\n                if (model.getLanguageIdAtPosition(lastLineNumber, 0) !== languageID) {\r\n                    return resultLineNumber;\r\n                }\r\n                var text = model.getLineContent(lastLineNumber);\r\n                if (indentRulesSupport.shouldIgnore(text) || /^\\s+$/.test(text) || text === '') {\r\n                    resultLineNumber = lastLineNumber;\r\n                    continue;\r\n                }\r\n                return lastLineNumber;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    /**\r\n     * Get inherited indentation from above lines.\r\n     * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\r\n     * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\r\n     * 3. If this line doesn't match any indent rules\r\n     *   a. check whether the line above it matches indentNextLinePattern\r\n     *   b. If not, the indent level of this line is the result\r\n     *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\r\n     * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\r\n     *\r\n     * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\r\n     */\r\n    LanguageConfigurationRegistryImpl.prototype.getInheritIndentForLine = function (autoIndent, model, lineNumber, honorIntentialIndent) {\r\n        if (honorIntentialIndent === void 0) { honorIntentialIndent = true; }\r\n        if (autoIndent < 4 /* Full */) {\r\n            return null;\r\n        }\r\n        var indentRulesSupport = this.getIndentRulesSupport(model.getLanguageIdentifier().id);\r\n        if (!indentRulesSupport) {\r\n            return null;\r\n        }\r\n        if (lineNumber <= 1) {\r\n            return {\r\n                indentation: '',\r\n                action: null\r\n            };\r\n        }\r\n        var precedingUnIgnoredLine = this.getPrecedingValidLine(model, lineNumber, indentRulesSupport);\r\n        if (precedingUnIgnoredLine < 0) {\r\n            return null;\r\n        }\r\n        else if (precedingUnIgnoredLine < 1) {\r\n            return {\r\n                indentation: '',\r\n                action: null\r\n            };\r\n        }\r\n        var precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\r\n        if (indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent) || indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent)) {\r\n            return {\r\n                indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\r\n                action: IndentAction.Indent,\r\n                line: precedingUnIgnoredLine\r\n            };\r\n        }\r\n        else if (indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent)) {\r\n            return {\r\n                indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\r\n                action: null,\r\n                line: precedingUnIgnoredLine\r\n            };\r\n        }\r\n        else {\r\n            // precedingUnIgnoredLine can not be ignored.\r\n            // it doesn't increase indent of following lines\r\n            // it doesn't increase just next line\r\n            // so current line is not affect by precedingUnIgnoredLine\r\n            // and then we should get a correct inheritted indentation from above lines\r\n            if (precedingUnIgnoredLine === 1) {\r\n                return {\r\n                    indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\r\n                    action: null,\r\n                    line: precedingUnIgnoredLine\r\n                };\r\n            }\r\n            var previousLine = precedingUnIgnoredLine - 1;\r\n            var previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\r\n            if (!(previousLineIndentMetadata & (1 /* INCREASE_MASK */ | 2 /* DECREASE_MASK */)) &&\r\n                (previousLineIndentMetadata & 4 /* INDENT_NEXTLINE_MASK */)) {\r\n                var stopLine = 0;\r\n                for (var i = previousLine - 1; i > 0; i--) {\r\n                    if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\r\n                        continue;\r\n                    }\r\n                    stopLine = i;\r\n                    break;\r\n                }\r\n                return {\r\n                    indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\r\n                    action: null,\r\n                    line: stopLine + 1\r\n                };\r\n            }\r\n            if (honorIntentialIndent) {\r\n                return {\r\n                    indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\r\n                    action: null,\r\n                    line: precedingUnIgnoredLine\r\n                };\r\n            }\r\n            else {\r\n                // search from precedingUnIgnoredLine until we find one whose indent is not temporary\r\n                for (var i = precedingUnIgnoredLine; i > 0; i--) {\r\n                    var lineContent = model.getLineContent(i);\r\n                    if (indentRulesSupport.shouldIncrease(lineContent)) {\r\n                        return {\r\n                            indentation: strings.getLeadingWhitespace(lineContent),\r\n                            action: IndentAction.Indent,\r\n                            line: i\r\n                        };\r\n                    }\r\n                    else if (indentRulesSupport.shouldIndentNextLine(lineContent)) {\r\n                        var stopLine = 0;\r\n                        for (var j = i - 1; j > 0; j--) {\r\n                            if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\r\n                                continue;\r\n                            }\r\n                            stopLine = j;\r\n                            break;\r\n                        }\r\n                        return {\r\n                            indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\r\n                            action: null,\r\n                            line: stopLine + 1\r\n                        };\r\n                    }\r\n                    else if (indentRulesSupport.shouldDecrease(lineContent)) {\r\n                        return {\r\n                            indentation: strings.getLeadingWhitespace(lineContent),\r\n                            action: null,\r\n                            line: i\r\n                        };\r\n                    }\r\n                }\r\n                return {\r\n                    indentation: strings.getLeadingWhitespace(model.getLineContent(1)),\r\n                    action: null,\r\n                    line: 1\r\n                };\r\n            }\r\n        }\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getGoodIndentForLine = function (autoIndent, virtualModel, languageId, lineNumber, indentConverter) {\r\n        if (autoIndent < 4 /* Full */) {\r\n            return null;\r\n        }\r\n        var richEditSupport = this._getRichEditSupport(languageId);\r\n        if (!richEditSupport) {\r\n            return null;\r\n        }\r\n        var indentRulesSupport = this.getIndentRulesSupport(languageId);\r\n        if (!indentRulesSupport) {\r\n            return null;\r\n        }\r\n        var indent = this.getInheritIndentForLine(autoIndent, virtualModel, lineNumber);\r\n        var lineContent = virtualModel.getLineContent(lineNumber);\r\n        if (indent) {\r\n            var inheritLine = indent.line;\r\n            if (inheritLine !== undefined) {\r\n                var enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\r\n                if (enterResult) {\r\n                    var indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\r\n                    if (enterResult.removeText) {\r\n                        indentation = indentation.substring(0, indentation.length - enterResult.removeText);\r\n                    }\r\n                    if ((enterResult.indentAction === IndentAction.Indent) ||\r\n                        (enterResult.indentAction === IndentAction.IndentOutdent)) {\r\n                        indentation = indentConverter.shiftIndent(indentation);\r\n                    }\r\n                    else if (enterResult.indentAction === IndentAction.Outdent) {\r\n                        indentation = indentConverter.unshiftIndent(indentation);\r\n                    }\r\n                    if (indentRulesSupport.shouldDecrease(lineContent)) {\r\n                        indentation = indentConverter.unshiftIndent(indentation);\r\n                    }\r\n                    if (enterResult.appendText) {\r\n                        indentation += enterResult.appendText;\r\n                    }\r\n                    return strings.getLeadingWhitespace(indentation);\r\n                }\r\n            }\r\n            if (indentRulesSupport.shouldDecrease(lineContent)) {\r\n                if (indent.action === IndentAction.Indent) {\r\n                    return indent.indentation;\r\n                }\r\n                else {\r\n                    return indentConverter.unshiftIndent(indent.indentation);\r\n                }\r\n            }\r\n            else {\r\n                if (indent.action === IndentAction.Indent) {\r\n                    return indentConverter.shiftIndent(indent.indentation);\r\n                }\r\n                else {\r\n                    return indent.indentation;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getIndentForEnter = function (autoIndent, model, range, indentConverter) {\r\n        if (autoIndent < 4 /* Full */) {\r\n            return null;\r\n        }\r\n        model.forceTokenization(range.startLineNumber);\r\n        var lineTokens = model.getLineTokens(range.startLineNumber);\r\n        var scopedLineTokens = createScopedLineTokens(lineTokens, range.startColumn - 1);\r\n        var scopedLineText = scopedLineTokens.getLineContent();\r\n        var embeddedLanguage = false;\r\n        var beforeEnterText;\r\n        if (scopedLineTokens.firstCharOffset > 0 && lineTokens.getLanguageId(0) !== scopedLineTokens.languageId) {\r\n            // we are in the embeded language content\r\n            embeddedLanguage = true; // if embeddedLanguage is true, then we don't touch the indentation of current line\r\n            beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        else {\r\n            beforeEnterText = lineTokens.getLineContent().substring(0, range.startColumn - 1);\r\n        }\r\n        var afterEnterText;\r\n        if (range.isEmpty()) {\r\n            afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        else {\r\n            var endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\r\n            afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        var indentRulesSupport = this.getIndentRulesSupport(scopedLineTokens.languageId);\r\n        if (!indentRulesSupport) {\r\n            return null;\r\n        }\r\n        var beforeEnterResult = beforeEnterText;\r\n        var beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterText);\r\n        var virtualModel = {\r\n            getLineTokens: function (lineNumber) {\r\n                return model.getLineTokens(lineNumber);\r\n            },\r\n            getLanguageIdentifier: function () {\r\n                return model.getLanguageIdentifier();\r\n            },\r\n            getLanguageIdAtPosition: function (lineNumber, column) {\r\n                return model.getLanguageIdAtPosition(lineNumber, column);\r\n            },\r\n            getLineContent: function (lineNumber) {\r\n                if (lineNumber === range.startLineNumber) {\r\n                    return beforeEnterResult;\r\n                }\r\n                else {\r\n                    return model.getLineContent(lineNumber);\r\n                }\r\n            }\r\n        };\r\n        var currentLineIndent = strings.getLeadingWhitespace(lineTokens.getLineContent());\r\n        var afterEnterAction = this.getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1);\r\n        if (!afterEnterAction) {\r\n            var beforeEnter = embeddedLanguage ? currentLineIndent : beforeEnterIndent;\r\n            return {\r\n                beforeEnter: beforeEnter,\r\n                afterEnter: beforeEnter\r\n            };\r\n        }\r\n        var afterEnterIndent = embeddedLanguage ? currentLineIndent : afterEnterAction.indentation;\r\n        if (afterEnterAction.action === IndentAction.Indent) {\r\n            afterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\r\n        }\r\n        if (indentRulesSupport.shouldDecrease(afterEnterText)) {\r\n            afterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\r\n        }\r\n        return {\r\n            beforeEnter: embeddedLanguage ? currentLineIndent : beforeEnterIndent,\r\n            afterEnter: afterEnterIndent\r\n        };\r\n    };\r\n    /**\r\n     * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\r\n     * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\r\n     */\r\n    LanguageConfigurationRegistryImpl.prototype.getIndentActionForType = function (autoIndent, model, range, ch, indentConverter) {\r\n        if (autoIndent < 4 /* Full */) {\r\n            return null;\r\n        }\r\n        var scopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber, range.startColumn);\r\n        var indentRulesSupport = this.getIndentRulesSupport(scopedLineTokens.languageId);\r\n        if (!indentRulesSupport) {\r\n            return null;\r\n        }\r\n        var scopedLineText = scopedLineTokens.getLineContent();\r\n        var beforeTypeText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        // selection support\r\n        var afterTypeText;\r\n        if (range.isEmpty()) {\r\n            afterTypeText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        else {\r\n            var endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\r\n            afterTypeText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        // If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\r\n        // Users might change the indentation by purpose and we should honor that instead of readjusting.\r\n        if (!indentRulesSupport.shouldDecrease(beforeTypeText + afterTypeText) && indentRulesSupport.shouldDecrease(beforeTypeText + ch + afterTypeText)) {\r\n            // after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\r\n            // 1. Get inherited indent action\r\n            var r = this.getInheritIndentForLine(autoIndent, model, range.startLineNumber, false);\r\n            if (!r) {\r\n                return null;\r\n            }\r\n            var indentation = r.indentation;\r\n            if (r.action !== IndentAction.Indent) {\r\n                indentation = indentConverter.unshiftIndent(indentation);\r\n            }\r\n            return indentation;\r\n        }\r\n        return null;\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getIndentMetadata = function (model, lineNumber) {\r\n        var indentRulesSupport = this.getIndentRulesSupport(model.getLanguageIdentifier().id);\r\n        if (!indentRulesSupport) {\r\n            return null;\r\n        }\r\n        if (lineNumber < 1 || lineNumber > model.getLineCount()) {\r\n            return null;\r\n        }\r\n        return indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\r\n    };\r\n    // end Indent Rules\r\n    // begin onEnter\r\n    LanguageConfigurationRegistryImpl.prototype.getEnterAction = function (autoIndent, model, range) {\r\n        var scopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber, range.startColumn);\r\n        var richEditSupport = this._getRichEditSupport(scopedLineTokens.languageId);\r\n        if (!richEditSupport) {\r\n            return null;\r\n        }\r\n        var scopedLineText = scopedLineTokens.getLineContent();\r\n        var beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        // selection support\r\n        var afterEnterText;\r\n        if (range.isEmpty()) {\r\n            afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        else {\r\n            var endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\r\n            afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        var oneLineAboveText = '';\r\n        if (range.startLineNumber > 1 && scopedLineTokens.firstCharOffset === 0) {\r\n            // This is not the first line and the entire line belongs to this mode\r\n            var oneLineAboveScopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber - 1);\r\n            if (oneLineAboveScopedLineTokens.languageId === scopedLineTokens.languageId) {\r\n                // The line above ends with text belonging to the same mode\r\n                oneLineAboveText = oneLineAboveScopedLineTokens.getLineContent();\r\n            }\r\n        }\r\n        var enterResult = richEditSupport.onEnter(autoIndent, oneLineAboveText, beforeEnterText, afterEnterText);\r\n        if (!enterResult) {\r\n            return null;\r\n        }\r\n        var indentAction = enterResult.indentAction;\r\n        var appendText = enterResult.appendText;\r\n        var removeText = enterResult.removeText || 0;\r\n        // Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\r\n        if (!appendText) {\r\n            if ((indentAction === IndentAction.Indent) ||\r\n                (indentAction === IndentAction.IndentOutdent)) {\r\n                appendText = '\\t';\r\n            }\r\n            else {\r\n                appendText = '';\r\n            }\r\n        }\r\n        var indentation = this.getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\r\n        if (removeText) {\r\n            indentation = indentation.substring(0, indentation.length - removeText);\r\n        }\r\n        return {\r\n            indentAction: indentAction,\r\n            appendText: appendText,\r\n            removeText: removeText,\r\n            indentation: indentation\r\n        };\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getIndentationAtPosition = function (model, lineNumber, column) {\r\n        var lineText = model.getLineContent(lineNumber);\r\n        var indentation = strings.getLeadingWhitespace(lineText);\r\n        if (indentation.length > column - 1) {\r\n            indentation = indentation.substring(0, column - 1);\r\n        }\r\n        return indentation;\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getScopedLineTokens = function (model, lineNumber, columnNumber) {\r\n        model.forceTokenization(lineNumber);\r\n        var lineTokens = model.getLineTokens(lineNumber);\r\n        var column = (typeof columnNumber === 'undefined' ? model.getLineMaxColumn(lineNumber) - 1 : columnNumber - 1);\r\n        return createScopedLineTokens(lineTokens, column);\r\n    };\r\n    // end onEnter\r\n    LanguageConfigurationRegistryImpl.prototype.getBracketsSupport = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return null;\r\n        }\r\n        return value.brackets || null;\r\n    };\r\n    return LanguageConfigurationRegistryImpl;\r\n}());\r\nexport { LanguageConfigurationRegistryImpl };\r\nexport var LanguageConfigurationRegistry = new LanguageConfigurationRegistryImpl();\r\n"]},"metadata":{},"sourceType":"module"}