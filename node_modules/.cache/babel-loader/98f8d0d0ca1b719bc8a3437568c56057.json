{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { groupBy } from '../../../base/common/arrays.js';\nimport { dispose } from '../../../base/common/lifecycle.js';\nimport { getLeadingWhitespace } from '../../../base/common/strings.js';\nimport './snippetSession.css';\nimport { EditOperation } from '../../common/core/editOperation.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { IWorkspaceContextService } from '../../../platform/workspace/common/workspace.js';\nimport { optional } from '../../../platform/instantiation/common/instantiation.js';\nimport { Choice, Placeholder, SnippetParser, Text } from './snippetParser.js';\nimport { ClipboardBasedVariableResolver, CompositeSnippetVariableResolver, ModelBasedVariableResolver, SelectionBasedVariableResolver, TimeBasedVariableResolver, CommentBasedVariableResolver, WorkspaceBasedVariableResolver, RandomBasedVariableResolver } from './snippetVariables.js';\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nimport * as colors from '../../../platform/theme/common/colorRegistry.js';\nimport { ILabelService } from '../../../platform/label/common/label.js';\nregisterThemingParticipant(function (theme, collector) {\n  function getColorGraceful(name) {\n    var color = theme.getColor(name);\n    return color ? color.toString() : 'transparent';\n  }\n\n  collector.addRule(\".monaco-editor .snippet-placeholder { background-color: \" + getColorGraceful(colors.snippetTabstopHighlightBackground) + \"; outline-color: \" + getColorGraceful(colors.snippetTabstopHighlightBorder) + \"; }\");\n  collector.addRule(\".monaco-editor .finish-snippet-placeholder { background-color: \" + getColorGraceful(colors.snippetFinalTabstopHighlightBackground) + \"; outline-color: \" + getColorGraceful(colors.snippetFinalTabstopHighlightBorder) + \"; }\");\n});\n\nvar OneSnippet =\n/** @class */\nfunction () {\n  function OneSnippet(editor, snippet, offset) {\n    this._nestingLevel = 1;\n    this._editor = editor;\n    this._snippet = snippet;\n    this._offset = offset;\n    this._placeholderGroups = groupBy(snippet.placeholders, Placeholder.compareByIndex);\n    this._placeholderGroupsIdx = -1;\n  }\n\n  OneSnippet.prototype.dispose = function () {\n    if (this._placeholderDecorations) {\n      var toRemove_1 = [];\n\n      this._placeholderDecorations.forEach(function (handle) {\n        return toRemove_1.push(handle);\n      });\n\n      this._editor.deltaDecorations(toRemove_1, []);\n    }\n\n    this._placeholderGroups.length = 0;\n  };\n\n  OneSnippet.prototype._initDecorations = function () {\n    var _this = this;\n\n    if (this._placeholderDecorations) {\n      // already initialized\n      return;\n    }\n\n    this._placeholderDecorations = new Map();\n\n    var model = this._editor.getModel();\n\n    this._editor.changeDecorations(function (accessor) {\n      // create a decoration for each placeholder\n      for (var _i = 0, _a = _this._snippet.placeholders; _i < _a.length; _i++) {\n        var placeholder = _a[_i];\n\n        var placeholderOffset = _this._snippet.offset(placeholder);\n\n        var placeholderLen = _this._snippet.fullLen(placeholder);\n\n        var range = Range.fromPositions(model.getPositionAt(_this._offset + placeholderOffset), model.getPositionAt(_this._offset + placeholderOffset + placeholderLen));\n        var options = placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive;\n        var handle = accessor.addDecoration(range, options);\n\n        _this._placeholderDecorations.set(placeholder, handle);\n      }\n    });\n  };\n\n  OneSnippet.prototype.move = function (fwd) {\n    var _this = this;\n\n    if (!this._editor.hasModel()) {\n      return [];\n    }\n\n    this._initDecorations(); // Transform placeholder text if necessary\n\n\n    if (this._placeholderGroupsIdx >= 0) {\n      var operations = [];\n\n      for (var _i = 0, _a = this._placeholderGroups[this._placeholderGroupsIdx]; _i < _a.length; _i++) {\n        var placeholder = _a[_i]; // Check if the placeholder has a transformation\n\n        if (placeholder.transform) {\n          var id = this._placeholderDecorations.get(placeholder);\n\n          var range = this._editor.getModel().getDecorationRange(id);\n\n          var currentValue = this._editor.getModel().getValueInRange(range);\n\n          operations.push(EditOperation.replaceMove(range, placeholder.transform.resolve(currentValue)));\n        }\n      }\n\n      if (operations.length > 0) {\n        this._editor.executeEdits('snippet.placeholderTransform', operations);\n      }\n    }\n\n    var couldSkipThisPlaceholder = false;\n\n    if (fwd === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1) {\n      this._placeholderGroupsIdx += 1;\n      couldSkipThisPlaceholder = true;\n    } else if (fwd === false && this._placeholderGroupsIdx > 0) {\n      this._placeholderGroupsIdx -= 1;\n      couldSkipThisPlaceholder = true;\n    } else {// the selection of the current placeholder might\n      // not acurate any more -> simply restore it\n    }\n\n    var newSelections = this._editor.getModel().changeDecorations(function (accessor) {\n      var activePlaceholders = new Set(); // change stickiness to always grow when typing at its edges\n      // because these decorations represent the currently active\n      // tabstop.\n      // Special case #1: reaching the final tabstop\n      // Special case #2: placeholders enclosing active placeholders\n\n      var selections = [];\n\n      for (var _i = 0, _a = _this._placeholderGroups[_this._placeholderGroupsIdx]; _i < _a.length; _i++) {\n        var placeholder = _a[_i];\n\n        var id = _this._placeholderDecorations.get(placeholder);\n\n        var range = _this._editor.getModel().getDecorationRange(id);\n\n        selections.push(new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)); // consider to skip this placeholder index when the decoration\n        // range is empty but when the placeholder wasn't. that's a strong\n        // hint that the placeholder has been deleted. (all placeholder must match this)\n\n        couldSkipThisPlaceholder = couldSkipThisPlaceholder && _this._hasPlaceholderBeenCollapsed(placeholder);\n        accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n        activePlaceholders.add(placeholder);\n\n        for (var _b = 0, _c = _this._snippet.enclosingPlaceholders(placeholder); _b < _c.length; _b++) {\n          var enclosingPlaceholder = _c[_b];\n\n          var id_1 = _this._placeholderDecorations.get(enclosingPlaceholder);\n\n          accessor.changeDecorationOptions(id_1, enclosingPlaceholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n          activePlaceholders.add(enclosingPlaceholder);\n        }\n      } // change stickness to never grow when typing at its edges\n      // so that in-active tabstops never grow\n\n\n      _this._placeholderDecorations.forEach(function (id, placeholder) {\n        if (!activePlaceholders.has(placeholder)) {\n          accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive);\n        }\n      });\n\n      return selections;\n    });\n\n    return !couldSkipThisPlaceholder ? newSelections : this.move(fwd);\n  };\n\n  OneSnippet.prototype._hasPlaceholderBeenCollapsed = function (placeholder) {\n    // A placeholder is empty when it wasn't empty when authored but\n    // when its tracking decoration is empty. This also applies to all\n    // potential parent placeholders\n    var marker = placeholder;\n\n    while (marker) {\n      if (marker instanceof Placeholder) {\n        var id = this._placeholderDecorations.get(marker);\n\n        var range = this._editor.getModel().getDecorationRange(id);\n\n        if (range.isEmpty() && marker.toString().length > 0) {\n          return true;\n        }\n      }\n\n      marker = marker.parent;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(OneSnippet.prototype, \"isAtFirstPlaceholder\", {\n    get: function () {\n      return this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OneSnippet.prototype, \"isAtLastPlaceholder\", {\n    get: function () {\n      return this._placeholderGroupsIdx === this._placeholderGroups.length - 1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OneSnippet.prototype, \"hasPlaceholder\", {\n    get: function () {\n      return this._snippet.placeholders.length > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  OneSnippet.prototype.computePossibleSelections = function () {\n    var result = new Map();\n\n    for (var _i = 0, _a = this._placeholderGroups; _i < _a.length; _i++) {\n      var placeholdersWithEqualIndex = _a[_i];\n      var ranges = void 0;\n\n      for (var _b = 0, placeholdersWithEqualIndex_1 = placeholdersWithEqualIndex; _b < placeholdersWithEqualIndex_1.length; _b++) {\n        var placeholder = placeholdersWithEqualIndex_1[_b];\n\n        if (placeholder.isFinalTabstop) {\n          // ignore those\n          break;\n        }\n\n        if (!ranges) {\n          ranges = [];\n          result.set(placeholder.index, ranges);\n        }\n\n        var id = this._placeholderDecorations.get(placeholder);\n\n        var range = this._editor.getModel().getDecorationRange(id);\n\n        if (!range) {\n          // one of the placeholder lost its decoration and\n          // therefore we bail out and pretend the placeholder\n          // (with its mirrors) doesn't exist anymore.\n          result.delete(placeholder.index);\n          break;\n        }\n\n        ranges.push(range);\n      }\n    }\n\n    return result;\n  };\n\n  Object.defineProperty(OneSnippet.prototype, \"choice\", {\n    get: function () {\n      return this._placeholderGroups[this._placeholderGroupsIdx][0].choice;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  OneSnippet.prototype.merge = function (others) {\n    var _this = this;\n\n    var model = this._editor.getModel();\n\n    this._nestingLevel *= 10;\n\n    this._editor.changeDecorations(function (accessor) {\n      // For each active placeholder take one snippet and merge it\n      // in that the placeholder (can be many for `$1foo$1foo`). Because\n      // everything is sorted by editor selection we can simply remove\n      // elements from the beginning of the array\n      for (var _i = 0, _a = _this._placeholderGroups[_this._placeholderGroupsIdx]; _i < _a.length; _i++) {\n        var placeholder = _a[_i];\n        var nested = others.shift();\n        console.assert(!nested._placeholderDecorations); // Massage placeholder-indicies of the nested snippet to be\n        // sorted right after the insertion point. This ensures we move\n        // through the placeholders in the correct order\n\n        var indexLastPlaceholder = nested._snippet.placeholderInfo.last.index;\n\n        for (var _b = 0, _c = nested._snippet.placeholderInfo.all; _b < _c.length; _b++) {\n          var nestedPlaceholder = _c[_b];\n\n          if (nestedPlaceholder.isFinalTabstop) {\n            nestedPlaceholder.index = placeholder.index + (indexLastPlaceholder + 1) / _this._nestingLevel;\n          } else {\n            nestedPlaceholder.index = placeholder.index + nestedPlaceholder.index / _this._nestingLevel;\n          }\n        }\n\n        _this._snippet.replace(placeholder, nested._snippet.children); // Remove the placeholder at which position are inserting\n        // the snippet and also remove its decoration.\n\n\n        var id = _this._placeholderDecorations.get(placeholder);\n\n        accessor.removeDecoration(id);\n\n        _this._placeholderDecorations.delete(placeholder); // For each *new* placeholder we create decoration to monitor\n        // how and if it grows/shrinks.\n\n\n        for (var _d = 0, _e = nested._snippet.placeholders; _d < _e.length; _d++) {\n          var placeholder_1 = _e[_d];\n\n          var placeholderOffset = nested._snippet.offset(placeholder_1);\n\n          var placeholderLen = nested._snippet.fullLen(placeholder_1);\n\n          var range = Range.fromPositions(model.getPositionAt(nested._offset + placeholderOffset), model.getPositionAt(nested._offset + placeholderOffset + placeholderLen));\n          var handle = accessor.addDecoration(range, OneSnippet._decor.inactive);\n\n          _this._placeholderDecorations.set(placeholder_1, handle);\n        }\n      } // Last, re-create the placeholder groups by sorting placeholders by their index.\n\n\n      _this._placeholderGroups = groupBy(_this._snippet.placeholders, Placeholder.compareByIndex);\n    });\n  };\n\n  OneSnippet._decor = {\n    active: ModelDecorationOptions.register({\n      stickiness: 0\n      /* AlwaysGrowsWhenTypingAtEdges */\n      ,\n      className: 'snippet-placeholder'\n    }),\n    inactive: ModelDecorationOptions.register({\n      stickiness: 1\n      /* NeverGrowsWhenTypingAtEdges */\n      ,\n      className: 'snippet-placeholder'\n    }),\n    activeFinal: ModelDecorationOptions.register({\n      stickiness: 1\n      /* NeverGrowsWhenTypingAtEdges */\n      ,\n      className: 'finish-snippet-placeholder'\n    }),\n    inactiveFinal: ModelDecorationOptions.register({\n      stickiness: 1\n      /* NeverGrowsWhenTypingAtEdges */\n      ,\n      className: 'finish-snippet-placeholder'\n    })\n  };\n  return OneSnippet;\n}();\n\nexport { OneSnippet };\nvar _defaultOptions = {\n  overwriteBefore: 0,\n  overwriteAfter: 0,\n  adjustWhitespace: true,\n  clipboardText: undefined\n};\n\nvar SnippetSession =\n/** @class */\nfunction () {\n  function SnippetSession(editor, template, options) {\n    if (options === void 0) {\n      options = _defaultOptions;\n    }\n\n    this._templateMerges = [];\n    this._snippets = [];\n    this._editor = editor;\n    this._template = template;\n    this._options = options;\n  }\n\n  SnippetSession.adjustWhitespace = function (model, position, snippet, adjustIndentation, adjustNewlines) {\n    var line = model.getLineContent(position.lineNumber);\n    var lineLeadingWhitespace = getLeadingWhitespace(line, 0, position.column - 1);\n    snippet.walk(function (marker) {\n      if (marker instanceof Text && !(marker.parent instanceof Choice)) {\n        // adjust indentation of text markers, except for choise elements\n        // which get adjusted when being selected\n        var lines = marker.value.split(/\\r\\n|\\r|\\n/);\n\n        if (adjustIndentation) {\n          for (var i = 1; i < lines.length; i++) {\n            var templateLeadingWhitespace = getLeadingWhitespace(lines[i]);\n            lines[i] = model.normalizeIndentation(lineLeadingWhitespace + templateLeadingWhitespace) + lines[i].substr(templateLeadingWhitespace.length);\n          }\n        }\n\n        if (adjustNewlines) {\n          var newValue = lines.join(model.getEOL());\n\n          if (newValue !== marker.value) {\n            marker.parent.replace(marker, [new Text(newValue)]);\n          }\n        }\n      }\n\n      return true;\n    });\n  };\n\n  SnippetSession.adjustSelection = function (model, selection, overwriteBefore, overwriteAfter) {\n    if (overwriteBefore !== 0 || overwriteAfter !== 0) {\n      // overwrite[Before|After] is compute using the position, not the whole\n      // selection. therefore we adjust the selection around that position\n      var positionLineNumber = selection.positionLineNumber,\n          positionColumn = selection.positionColumn;\n      var positionColumnBefore = positionColumn - overwriteBefore;\n      var positionColumnAfter = positionColumn + overwriteAfter;\n      var range = model.validateRange({\n        startLineNumber: positionLineNumber,\n        startColumn: positionColumnBefore,\n        endLineNumber: positionLineNumber,\n        endColumn: positionColumnAfter\n      });\n      selection = Selection.createWithDirection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn, selection.getDirection());\n    }\n\n    return selection;\n  };\n\n  SnippetSession.createEditsAndSnippets = function (editor, template, overwriteBefore, overwriteAfter, enforceFinalTabstop, adjustWhitespace, clipboardText) {\n    var edits = [];\n    var snippets = [];\n\n    if (!editor.hasModel()) {\n      return {\n        edits: edits,\n        snippets: snippets\n      };\n    }\n\n    var model = editor.getModel();\n    var workspaceService = editor.invokeWithinContext(function (accessor) {\n      return accessor.get(IWorkspaceContextService, optional);\n    });\n    var modelBasedVariableResolver = editor.invokeWithinContext(function (accessor) {\n      return new ModelBasedVariableResolver(accessor.get(ILabelService, optional), model);\n    });\n    var clipboardService = editor.invokeWithinContext(function (accessor) {\n      return accessor.get(IClipboardService, optional);\n    });\n\n    var readClipboardText = function () {\n      return clipboardText || clipboardService && clipboardService.readTextSync();\n    };\n\n    var delta = 0; // know what text the overwrite[Before|After] extensions\n    // of the primary curser have selected because only when\n    // secondary selections extend to the same text we can grow them\n\n    var firstBeforeText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), overwriteBefore, 0));\n    var firstAfterText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), 0, overwriteAfter)); // remember the first non-whitespace column to decide if\n    // `keepWhitespace` should be overruled for secondary selections\n\n    var firstLineFirstNonWhitespace = model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber); // sort selections by their start position but remeber\n    // the original index. that allows you to create correct\n    // offset-based selection logic without changing the\n    // primary selection\n\n    var indexedSelections = editor.getSelections().map(function (selection, idx) {\n      return {\n        selection: selection,\n        idx: idx\n      };\n    }).sort(function (a, b) {\n      return Range.compareRangesUsingStarts(a.selection, b.selection);\n    });\n\n    for (var _i = 0, indexedSelections_1 = indexedSelections; _i < indexedSelections_1.length; _i++) {\n      var _a = indexedSelections_1[_i],\n          selection = _a.selection,\n          idx = _a.idx; // extend selection with the `overwriteBefore` and `overwriteAfter` and then\n      // compare if this matches the extensions of the primary selection\n\n      var extensionBefore = SnippetSession.adjustSelection(model, selection, overwriteBefore, 0);\n      var extensionAfter = SnippetSession.adjustSelection(model, selection, 0, overwriteAfter);\n\n      if (firstBeforeText !== model.getValueInRange(extensionBefore)) {\n        extensionBefore = selection;\n      }\n\n      if (firstAfterText !== model.getValueInRange(extensionAfter)) {\n        extensionAfter = selection;\n      } // merge the before and after selection into one\n\n\n      var snippetSelection = selection.setStartPosition(extensionBefore.startLineNumber, extensionBefore.startColumn).setEndPosition(extensionAfter.endLineNumber, extensionAfter.endColumn);\n      var snippet = new SnippetParser().parse(template, true, enforceFinalTabstop); // adjust the template string to match the indentation and\n      // whitespace rules of this insert location (can be different for each cursor)\n      // happens when being asked for (default) or when this is a secondary\n      // cursor and the leading whitespace is different\n\n      var start = snippetSelection.getStartPosition();\n      SnippetSession.adjustWhitespace(model, start, snippet, adjustWhitespace || idx > 0 && firstLineFirstNonWhitespace !== model.getLineFirstNonWhitespaceColumn(selection.positionLineNumber), true);\n      snippet.resolveVariables(new CompositeSnippetVariableResolver([modelBasedVariableResolver, new ClipboardBasedVariableResolver(readClipboardText, idx, indexedSelections.length, editor.getOption(60\n      /* multiCursorPaste */\n      ) === 'spread'), new SelectionBasedVariableResolver(model, selection), new CommentBasedVariableResolver(model), new TimeBasedVariableResolver(), new WorkspaceBasedVariableResolver(workspaceService), new RandomBasedVariableResolver()]));\n      var offset = model.getOffsetAt(start) + delta;\n      delta += snippet.toString().length - model.getValueLengthInRange(snippetSelection); // store snippets with the index of their originating selection.\n      // that ensures the primiary cursor stays primary despite not being\n      // the one with lowest start position\n\n      edits[idx] = EditOperation.replace(snippetSelection, snippet.toString());\n      snippets[idx] = new OneSnippet(editor, snippet, offset);\n    }\n\n    return {\n      edits: edits,\n      snippets: snippets\n    };\n  };\n\n  SnippetSession.prototype.dispose = function () {\n    dispose(this._snippets);\n  };\n\n  SnippetSession.prototype._logInfo = function () {\n    return \"template=\\\"\" + this._template + \"\\\", merged_templates=\\\"\" + this._templateMerges.join(' -> ') + \"\\\"\";\n  };\n\n  SnippetSession.prototype.insert = function () {\n    var _this = this;\n\n    if (!this._editor.hasModel()) {\n      return;\n    } // make insert edit and start with first selections\n\n\n    var _a = SnippetSession.createEditsAndSnippets(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText),\n        edits = _a.edits,\n        snippets = _a.snippets;\n\n    this._snippets = snippets;\n\n    this._editor.executeEdits('snippet', edits, function (undoEdits) {\n      if (_this._snippets[0].hasPlaceholder) {\n        return _this._move(true);\n      } else {\n        return undoEdits.map(function (edit) {\n          return Selection.fromPositions(edit.range.getEndPosition());\n        });\n      }\n    });\n\n    this._editor.revealRange(this._editor.getSelections()[0]);\n  };\n\n  SnippetSession.prototype.merge = function (template, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = _defaultOptions;\n    }\n\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    this._templateMerges.push([this._snippets[0]._nestingLevel, this._snippets[0]._placeholderGroupsIdx, template]);\n\n    var _a = SnippetSession.createEditsAndSnippets(this._editor, template, options.overwriteBefore, options.overwriteAfter, true, options.adjustWhitespace, options.clipboardText),\n        edits = _a.edits,\n        snippets = _a.snippets;\n\n    this._editor.executeEdits('snippet', edits, function (undoEdits) {\n      for (var _i = 0, _a = _this._snippets; _i < _a.length; _i++) {\n        var snippet = _a[_i];\n        snippet.merge(snippets);\n      }\n\n      console.assert(snippets.length === 0);\n\n      if (_this._snippets[0].hasPlaceholder) {\n        return _this._move(undefined);\n      } else {\n        return undoEdits.map(function (edit) {\n          return Selection.fromPositions(edit.range.getEndPosition());\n        });\n      }\n    });\n  };\n\n  SnippetSession.prototype.next = function () {\n    var newSelections = this._move(true);\n\n    this._editor.setSelections(newSelections);\n\n    this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n  };\n\n  SnippetSession.prototype.prev = function () {\n    var newSelections = this._move(false);\n\n    this._editor.setSelections(newSelections);\n\n    this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n  };\n\n  SnippetSession.prototype._move = function (fwd) {\n    var selections = [];\n\n    for (var _i = 0, _a = this._snippets; _i < _a.length; _i++) {\n      var snippet = _a[_i];\n      var oneSelection = snippet.move(fwd);\n      selections.push.apply(selections, oneSelection);\n    }\n\n    return selections;\n  };\n\n  Object.defineProperty(SnippetSession.prototype, \"isAtFirstPlaceholder\", {\n    get: function () {\n      return this._snippets[0].isAtFirstPlaceholder;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SnippetSession.prototype, \"isAtLastPlaceholder\", {\n    get: function () {\n      return this._snippets[0].isAtLastPlaceholder;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SnippetSession.prototype, \"hasPlaceholder\", {\n    get: function () {\n      return this._snippets[0].hasPlaceholder;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SnippetSession.prototype, \"choice\", {\n    get: function () {\n      return this._snippets[0].choice;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SnippetSession.prototype.isSelectionWithinPlaceholders = function () {\n    if (!this.hasPlaceholder) {\n      return false;\n    }\n\n    var selections = this._editor.getSelections();\n\n    if (selections.length < this._snippets.length) {\n      // this means we started snippet mode with N\n      // selections and have M (N > M) selections.\n      // So one snippet is without selection -> cancel\n      return false;\n    }\n\n    var allPossibleSelections = new Map();\n\n    var _loop_1 = function (snippet) {\n      var possibleSelections = snippet.computePossibleSelections(); // for the first snippet find the placeholder (and its ranges)\n      // that contain at least one selection. for all remaining snippets\n      // the same placeholder (and their ranges) must be used.\n\n      if (allPossibleSelections.size === 0) {\n        possibleSelections.forEach(function (ranges, index) {\n          ranges.sort(Range.compareRangesUsingStarts);\n\n          for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n            var selection = selections_1[_i];\n\n            if (ranges[0].containsRange(selection)) {\n              allPossibleSelections.set(index, []);\n              break;\n            }\n          }\n        });\n      }\n\n      if (allPossibleSelections.size === 0) {\n        return {\n          value: false\n        };\n      } // add selections from 'this' snippet so that we know all\n      // selections for this placeholder\n\n\n      allPossibleSelections.forEach(function (array, index) {\n        array.push.apply(array, possibleSelections.get(index));\n      });\n    };\n\n    for (var _i = 0, _a = this._snippets; _i < _a.length; _i++) {\n      var snippet = _a[_i];\n\n      var state_1 = _loop_1(snippet);\n\n      if (typeof state_1 === \"object\") return state_1.value;\n    } // sort selections (and later placeholder-ranges). then walk both\n    // arrays and make sure the placeholder-ranges contain the corresponding\n    // selection\n\n\n    selections.sort(Range.compareRangesUsingStarts);\n    allPossibleSelections.forEach(function (ranges, index) {\n      if (ranges.length !== selections.length) {\n        allPossibleSelections.delete(index);\n        return;\n      }\n\n      ranges.sort(Range.compareRangesUsingStarts);\n\n      for (var i = 0; i < ranges.length; i++) {\n        if (!ranges[i].containsRange(selections[i])) {\n          allPossibleSelections.delete(index);\n          return;\n        }\n      }\n    }); // from all possible selections we have deleted those\n    // that don't match with the current selection. if we don't\n    // have any left, we don't have a selection anymore\n\n    return allPossibleSelections.size > 0;\n  };\n\n  return SnippetSession;\n}();\n\nexport { SnippetSession };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetSession.js"],"names":["groupBy","dispose","getLeadingWhitespace","EditOperation","Range","Selection","ModelDecorationOptions","IClipboardService","IWorkspaceContextService","optional","Choice","Placeholder","SnippetParser","Text","ClipboardBasedVariableResolver","CompositeSnippetVariableResolver","ModelBasedVariableResolver","SelectionBasedVariableResolver","TimeBasedVariableResolver","CommentBasedVariableResolver","WorkspaceBasedVariableResolver","RandomBasedVariableResolver","registerThemingParticipant","colors","ILabelService","theme","collector","getColorGraceful","name","color","getColor","toString","addRule","snippetTabstopHighlightBackground","snippetTabstopHighlightBorder","snippetFinalTabstopHighlightBackground","snippetFinalTabstopHighlightBorder","OneSnippet","editor","snippet","offset","_nestingLevel","_editor","_snippet","_offset","_placeholderGroups","placeholders","compareByIndex","_placeholderGroupsIdx","prototype","_placeholderDecorations","toRemove_1","forEach","handle","push","deltaDecorations","length","_initDecorations","_this","Map","model","getModel","changeDecorations","accessor","_i","_a","placeholder","placeholderOffset","placeholderLen","fullLen","range","fromPositions","getPositionAt","options","isFinalTabstop","_decor","inactiveFinal","inactive","addDecoration","set","move","fwd","hasModel","operations","transform","id","get","getDecorationRange","currentValue","getValueInRange","replaceMove","resolve","executeEdits","couldSkipThisPlaceholder","newSelections","activePlaceholders","Set","selections","startLineNumber","startColumn","endLineNumber","endColumn","_hasPlaceholderBeenCollapsed","changeDecorationOptions","activeFinal","active","add","_b","_c","enclosingPlaceholders","enclosingPlaceholder","id_1","has","marker","isEmpty","parent","Object","defineProperty","enumerable","configurable","computePossibleSelections","result","placeholdersWithEqualIndex","ranges","placeholdersWithEqualIndex_1","index","delete","choice","merge","others","nested","shift","console","assert","indexLastPlaceholder","placeholderInfo","last","all","nestedPlaceholder","replace","children","removeDecoration","_d","_e","placeholder_1","register","stickiness","className","_defaultOptions","overwriteBefore","overwriteAfter","adjustWhitespace","clipboardText","undefined","SnippetSession","template","_templateMerges","_snippets","_template","_options","position","adjustIndentation","adjustNewlines","line","getLineContent","lineNumber","lineLeadingWhitespace","column","walk","lines","value","split","i","templateLeadingWhitespace","normalizeIndentation","substr","newValue","join","getEOL","adjustSelection","selection","positionLineNumber","positionColumn","positionColumnBefore","positionColumnAfter","validateRange","createWithDirection","getDirection","createEditsAndSnippets","enforceFinalTabstop","edits","snippets","workspaceService","invokeWithinContext","modelBasedVariableResolver","clipboardService","readClipboardText","readTextSync","delta","firstBeforeText","getSelection","firstAfterText","firstLineFirstNonWhitespace","getLineFirstNonWhitespaceColumn","indexedSelections","getSelections","map","idx","sort","a","b","compareRangesUsingStarts","indexedSelections_1","extensionBefore","extensionAfter","snippetSelection","setStartPosition","setEndPosition","parse","start","getStartPosition","resolveVariables","getOption","getOffsetAt","getValueLengthInRange","_logInfo","insert","undoEdits","hasPlaceholder","_move","edit","getEndPosition","revealRange","next","setSelections","revealPositionInCenterIfOutsideViewport","getPosition","prev","oneSelection","apply","isAtFirstPlaceholder","isAtLastPlaceholder","isSelectionWithinPlaceholders","allPossibleSelections","_loop_1","possibleSelections","size","selections_1","containsRange","array","state_1"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { groupBy } from '../../../base/common/arrays.js';\r\nimport { dispose } from '../../../base/common/lifecycle.js';\r\nimport { getLeadingWhitespace } from '../../../base/common/strings.js';\r\nimport './snippetSession.css';\r\nimport { EditOperation } from '../../common/core/editOperation.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\r\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\r\nimport { IWorkspaceContextService } from '../../../platform/workspace/common/workspace.js';\r\nimport { optional } from '../../../platform/instantiation/common/instantiation.js';\r\nimport { Choice, Placeholder, SnippetParser, Text } from './snippetParser.js';\r\nimport { ClipboardBasedVariableResolver, CompositeSnippetVariableResolver, ModelBasedVariableResolver, SelectionBasedVariableResolver, TimeBasedVariableResolver, CommentBasedVariableResolver, WorkspaceBasedVariableResolver, RandomBasedVariableResolver } from './snippetVariables.js';\r\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\r\nimport * as colors from '../../../platform/theme/common/colorRegistry.js';\r\nimport { ILabelService } from '../../../platform/label/common/label.js';\r\nregisterThemingParticipant(function (theme, collector) {\r\n    function getColorGraceful(name) {\r\n        var color = theme.getColor(name);\r\n        return color ? color.toString() : 'transparent';\r\n    }\r\n    collector.addRule(\".monaco-editor .snippet-placeholder { background-color: \" + getColorGraceful(colors.snippetTabstopHighlightBackground) + \"; outline-color: \" + getColorGraceful(colors.snippetTabstopHighlightBorder) + \"; }\");\r\n    collector.addRule(\".monaco-editor .finish-snippet-placeholder { background-color: \" + getColorGraceful(colors.snippetFinalTabstopHighlightBackground) + \"; outline-color: \" + getColorGraceful(colors.snippetFinalTabstopHighlightBorder) + \"; }\");\r\n});\r\nvar OneSnippet = /** @class */ (function () {\r\n    function OneSnippet(editor, snippet, offset) {\r\n        this._nestingLevel = 1;\r\n        this._editor = editor;\r\n        this._snippet = snippet;\r\n        this._offset = offset;\r\n        this._placeholderGroups = groupBy(snippet.placeholders, Placeholder.compareByIndex);\r\n        this._placeholderGroupsIdx = -1;\r\n    }\r\n    OneSnippet.prototype.dispose = function () {\r\n        if (this._placeholderDecorations) {\r\n            var toRemove_1 = [];\r\n            this._placeholderDecorations.forEach(function (handle) { return toRemove_1.push(handle); });\r\n            this._editor.deltaDecorations(toRemove_1, []);\r\n        }\r\n        this._placeholderGroups.length = 0;\r\n    };\r\n    OneSnippet.prototype._initDecorations = function () {\r\n        var _this = this;\r\n        if (this._placeholderDecorations) {\r\n            // already initialized\r\n            return;\r\n        }\r\n        this._placeholderDecorations = new Map();\r\n        var model = this._editor.getModel();\r\n        this._editor.changeDecorations(function (accessor) {\r\n            // create a decoration for each placeholder\r\n            for (var _i = 0, _a = _this._snippet.placeholders; _i < _a.length; _i++) {\r\n                var placeholder = _a[_i];\r\n                var placeholderOffset = _this._snippet.offset(placeholder);\r\n                var placeholderLen = _this._snippet.fullLen(placeholder);\r\n                var range = Range.fromPositions(model.getPositionAt(_this._offset + placeholderOffset), model.getPositionAt(_this._offset + placeholderOffset + placeholderLen));\r\n                var options = placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive;\r\n                var handle = accessor.addDecoration(range, options);\r\n                _this._placeholderDecorations.set(placeholder, handle);\r\n            }\r\n        });\r\n    };\r\n    OneSnippet.prototype.move = function (fwd) {\r\n        var _this = this;\r\n        if (!this._editor.hasModel()) {\r\n            return [];\r\n        }\r\n        this._initDecorations();\r\n        // Transform placeholder text if necessary\r\n        if (this._placeholderGroupsIdx >= 0) {\r\n            var operations = [];\r\n            for (var _i = 0, _a = this._placeholderGroups[this._placeholderGroupsIdx]; _i < _a.length; _i++) {\r\n                var placeholder = _a[_i];\r\n                // Check if the placeholder has a transformation\r\n                if (placeholder.transform) {\r\n                    var id = this._placeholderDecorations.get(placeholder);\r\n                    var range = this._editor.getModel().getDecorationRange(id);\r\n                    var currentValue = this._editor.getModel().getValueInRange(range);\r\n                    operations.push(EditOperation.replaceMove(range, placeholder.transform.resolve(currentValue)));\r\n                }\r\n            }\r\n            if (operations.length > 0) {\r\n                this._editor.executeEdits('snippet.placeholderTransform', operations);\r\n            }\r\n        }\r\n        var couldSkipThisPlaceholder = false;\r\n        if (fwd === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1) {\r\n            this._placeholderGroupsIdx += 1;\r\n            couldSkipThisPlaceholder = true;\r\n        }\r\n        else if (fwd === false && this._placeholderGroupsIdx > 0) {\r\n            this._placeholderGroupsIdx -= 1;\r\n            couldSkipThisPlaceholder = true;\r\n        }\r\n        else {\r\n            // the selection of the current placeholder might\r\n            // not acurate any more -> simply restore it\r\n        }\r\n        var newSelections = this._editor.getModel().changeDecorations(function (accessor) {\r\n            var activePlaceholders = new Set();\r\n            // change stickiness to always grow when typing at its edges\r\n            // because these decorations represent the currently active\r\n            // tabstop.\r\n            // Special case #1: reaching the final tabstop\r\n            // Special case #2: placeholders enclosing active placeholders\r\n            var selections = [];\r\n            for (var _i = 0, _a = _this._placeholderGroups[_this._placeholderGroupsIdx]; _i < _a.length; _i++) {\r\n                var placeholder = _a[_i];\r\n                var id = _this._placeholderDecorations.get(placeholder);\r\n                var range = _this._editor.getModel().getDecorationRange(id);\r\n                selections.push(new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn));\r\n                // consider to skip this placeholder index when the decoration\r\n                // range is empty but when the placeholder wasn't. that's a strong\r\n                // hint that the placeholder has been deleted. (all placeholder must match this)\r\n                couldSkipThisPlaceholder = couldSkipThisPlaceholder && _this._hasPlaceholderBeenCollapsed(placeholder);\r\n                accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\r\n                activePlaceholders.add(placeholder);\r\n                for (var _b = 0, _c = _this._snippet.enclosingPlaceholders(placeholder); _b < _c.length; _b++) {\r\n                    var enclosingPlaceholder = _c[_b];\r\n                    var id_1 = _this._placeholderDecorations.get(enclosingPlaceholder);\r\n                    accessor.changeDecorationOptions(id_1, enclosingPlaceholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\r\n                    activePlaceholders.add(enclosingPlaceholder);\r\n                }\r\n            }\r\n            // change stickness to never grow when typing at its edges\r\n            // so that in-active tabstops never grow\r\n            _this._placeholderDecorations.forEach(function (id, placeholder) {\r\n                if (!activePlaceholders.has(placeholder)) {\r\n                    accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive);\r\n                }\r\n            });\r\n            return selections;\r\n        });\r\n        return !couldSkipThisPlaceholder ? newSelections : this.move(fwd);\r\n    };\r\n    OneSnippet.prototype._hasPlaceholderBeenCollapsed = function (placeholder) {\r\n        // A placeholder is empty when it wasn't empty when authored but\r\n        // when its tracking decoration is empty. This also applies to all\r\n        // potential parent placeholders\r\n        var marker = placeholder;\r\n        while (marker) {\r\n            if (marker instanceof Placeholder) {\r\n                var id = this._placeholderDecorations.get(marker);\r\n                var range = this._editor.getModel().getDecorationRange(id);\r\n                if (range.isEmpty() && marker.toString().length > 0) {\r\n                    return true;\r\n                }\r\n            }\r\n            marker = marker.parent;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(OneSnippet.prototype, \"isAtFirstPlaceholder\", {\r\n        get: function () {\r\n            return this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OneSnippet.prototype, \"isAtLastPlaceholder\", {\r\n        get: function () {\r\n            return this._placeholderGroupsIdx === this._placeholderGroups.length - 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OneSnippet.prototype, \"hasPlaceholder\", {\r\n        get: function () {\r\n            return this._snippet.placeholders.length > 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    OneSnippet.prototype.computePossibleSelections = function () {\r\n        var result = new Map();\r\n        for (var _i = 0, _a = this._placeholderGroups; _i < _a.length; _i++) {\r\n            var placeholdersWithEqualIndex = _a[_i];\r\n            var ranges = void 0;\r\n            for (var _b = 0, placeholdersWithEqualIndex_1 = placeholdersWithEqualIndex; _b < placeholdersWithEqualIndex_1.length; _b++) {\r\n                var placeholder = placeholdersWithEqualIndex_1[_b];\r\n                if (placeholder.isFinalTabstop) {\r\n                    // ignore those\r\n                    break;\r\n                }\r\n                if (!ranges) {\r\n                    ranges = [];\r\n                    result.set(placeholder.index, ranges);\r\n                }\r\n                var id = this._placeholderDecorations.get(placeholder);\r\n                var range = this._editor.getModel().getDecorationRange(id);\r\n                if (!range) {\r\n                    // one of the placeholder lost its decoration and\r\n                    // therefore we bail out and pretend the placeholder\r\n                    // (with its mirrors) doesn't exist anymore.\r\n                    result.delete(placeholder.index);\r\n                    break;\r\n                }\r\n                ranges.push(range);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    Object.defineProperty(OneSnippet.prototype, \"choice\", {\r\n        get: function () {\r\n            return this._placeholderGroups[this._placeholderGroupsIdx][0].choice;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    OneSnippet.prototype.merge = function (others) {\r\n        var _this = this;\r\n        var model = this._editor.getModel();\r\n        this._nestingLevel *= 10;\r\n        this._editor.changeDecorations(function (accessor) {\r\n            // For each active placeholder take one snippet and merge it\r\n            // in that the placeholder (can be many for `$1foo$1foo`). Because\r\n            // everything is sorted by editor selection we can simply remove\r\n            // elements from the beginning of the array\r\n            for (var _i = 0, _a = _this._placeholderGroups[_this._placeholderGroupsIdx]; _i < _a.length; _i++) {\r\n                var placeholder = _a[_i];\r\n                var nested = others.shift();\r\n                console.assert(!nested._placeholderDecorations);\r\n                // Massage placeholder-indicies of the nested snippet to be\r\n                // sorted right after the insertion point. This ensures we move\r\n                // through the placeholders in the correct order\r\n                var indexLastPlaceholder = nested._snippet.placeholderInfo.last.index;\r\n                for (var _b = 0, _c = nested._snippet.placeholderInfo.all; _b < _c.length; _b++) {\r\n                    var nestedPlaceholder = _c[_b];\r\n                    if (nestedPlaceholder.isFinalTabstop) {\r\n                        nestedPlaceholder.index = placeholder.index + ((indexLastPlaceholder + 1) / _this._nestingLevel);\r\n                    }\r\n                    else {\r\n                        nestedPlaceholder.index = placeholder.index + (nestedPlaceholder.index / _this._nestingLevel);\r\n                    }\r\n                }\r\n                _this._snippet.replace(placeholder, nested._snippet.children);\r\n                // Remove the placeholder at which position are inserting\r\n                // the snippet and also remove its decoration.\r\n                var id = _this._placeholderDecorations.get(placeholder);\r\n                accessor.removeDecoration(id);\r\n                _this._placeholderDecorations.delete(placeholder);\r\n                // For each *new* placeholder we create decoration to monitor\r\n                // how and if it grows/shrinks.\r\n                for (var _d = 0, _e = nested._snippet.placeholders; _d < _e.length; _d++) {\r\n                    var placeholder_1 = _e[_d];\r\n                    var placeholderOffset = nested._snippet.offset(placeholder_1);\r\n                    var placeholderLen = nested._snippet.fullLen(placeholder_1);\r\n                    var range = Range.fromPositions(model.getPositionAt(nested._offset + placeholderOffset), model.getPositionAt(nested._offset + placeholderOffset + placeholderLen));\r\n                    var handle = accessor.addDecoration(range, OneSnippet._decor.inactive);\r\n                    _this._placeholderDecorations.set(placeholder_1, handle);\r\n                }\r\n            }\r\n            // Last, re-create the placeholder groups by sorting placeholders by their index.\r\n            _this._placeholderGroups = groupBy(_this._snippet.placeholders, Placeholder.compareByIndex);\r\n        });\r\n    };\r\n    OneSnippet._decor = {\r\n        active: ModelDecorationOptions.register({ stickiness: 0 /* AlwaysGrowsWhenTypingAtEdges */, className: 'snippet-placeholder' }),\r\n        inactive: ModelDecorationOptions.register({ stickiness: 1 /* NeverGrowsWhenTypingAtEdges */, className: 'snippet-placeholder' }),\r\n        activeFinal: ModelDecorationOptions.register({ stickiness: 1 /* NeverGrowsWhenTypingAtEdges */, className: 'finish-snippet-placeholder' }),\r\n        inactiveFinal: ModelDecorationOptions.register({ stickiness: 1 /* NeverGrowsWhenTypingAtEdges */, className: 'finish-snippet-placeholder' }),\r\n    };\r\n    return OneSnippet;\r\n}());\r\nexport { OneSnippet };\r\nvar _defaultOptions = {\r\n    overwriteBefore: 0,\r\n    overwriteAfter: 0,\r\n    adjustWhitespace: true,\r\n    clipboardText: undefined\r\n};\r\nvar SnippetSession = /** @class */ (function () {\r\n    function SnippetSession(editor, template, options) {\r\n        if (options === void 0) { options = _defaultOptions; }\r\n        this._templateMerges = [];\r\n        this._snippets = [];\r\n        this._editor = editor;\r\n        this._template = template;\r\n        this._options = options;\r\n    }\r\n    SnippetSession.adjustWhitespace = function (model, position, snippet, adjustIndentation, adjustNewlines) {\r\n        var line = model.getLineContent(position.lineNumber);\r\n        var lineLeadingWhitespace = getLeadingWhitespace(line, 0, position.column - 1);\r\n        snippet.walk(function (marker) {\r\n            if (marker instanceof Text && !(marker.parent instanceof Choice)) {\r\n                // adjust indentation of text markers, except for choise elements\r\n                // which get adjusted when being selected\r\n                var lines = marker.value.split(/\\r\\n|\\r|\\n/);\r\n                if (adjustIndentation) {\r\n                    for (var i = 1; i < lines.length; i++) {\r\n                        var templateLeadingWhitespace = getLeadingWhitespace(lines[i]);\r\n                        lines[i] = model.normalizeIndentation(lineLeadingWhitespace + templateLeadingWhitespace) + lines[i].substr(templateLeadingWhitespace.length);\r\n                    }\r\n                }\r\n                if (adjustNewlines) {\r\n                    var newValue = lines.join(model.getEOL());\r\n                    if (newValue !== marker.value) {\r\n                        marker.parent.replace(marker, [new Text(newValue)]);\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n    };\r\n    SnippetSession.adjustSelection = function (model, selection, overwriteBefore, overwriteAfter) {\r\n        if (overwriteBefore !== 0 || overwriteAfter !== 0) {\r\n            // overwrite[Before|After] is compute using the position, not the whole\r\n            // selection. therefore we adjust the selection around that position\r\n            var positionLineNumber = selection.positionLineNumber, positionColumn = selection.positionColumn;\r\n            var positionColumnBefore = positionColumn - overwriteBefore;\r\n            var positionColumnAfter = positionColumn + overwriteAfter;\r\n            var range = model.validateRange({\r\n                startLineNumber: positionLineNumber,\r\n                startColumn: positionColumnBefore,\r\n                endLineNumber: positionLineNumber,\r\n                endColumn: positionColumnAfter\r\n            });\r\n            selection = Selection.createWithDirection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn, selection.getDirection());\r\n        }\r\n        return selection;\r\n    };\r\n    SnippetSession.createEditsAndSnippets = function (editor, template, overwriteBefore, overwriteAfter, enforceFinalTabstop, adjustWhitespace, clipboardText) {\r\n        var edits = [];\r\n        var snippets = [];\r\n        if (!editor.hasModel()) {\r\n            return { edits: edits, snippets: snippets };\r\n        }\r\n        var model = editor.getModel();\r\n        var workspaceService = editor.invokeWithinContext(function (accessor) { return accessor.get(IWorkspaceContextService, optional); });\r\n        var modelBasedVariableResolver = editor.invokeWithinContext(function (accessor) { return new ModelBasedVariableResolver(accessor.get(ILabelService, optional), model); });\r\n        var clipboardService = editor.invokeWithinContext(function (accessor) { return accessor.get(IClipboardService, optional); });\r\n        var readClipboardText = function () { return clipboardText || clipboardService && clipboardService.readTextSync(); };\r\n        var delta = 0;\r\n        // know what text the overwrite[Before|After] extensions\r\n        // of the primary curser have selected because only when\r\n        // secondary selections extend to the same text we can grow them\r\n        var firstBeforeText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), overwriteBefore, 0));\r\n        var firstAfterText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), 0, overwriteAfter));\r\n        // remember the first non-whitespace column to decide if\r\n        // `keepWhitespace` should be overruled for secondary selections\r\n        var firstLineFirstNonWhitespace = model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber);\r\n        // sort selections by their start position but remeber\r\n        // the original index. that allows you to create correct\r\n        // offset-based selection logic without changing the\r\n        // primary selection\r\n        var indexedSelections = editor.getSelections()\r\n            .map(function (selection, idx) { return ({ selection: selection, idx: idx }); })\r\n            .sort(function (a, b) { return Range.compareRangesUsingStarts(a.selection, b.selection); });\r\n        for (var _i = 0, indexedSelections_1 = indexedSelections; _i < indexedSelections_1.length; _i++) {\r\n            var _a = indexedSelections_1[_i], selection = _a.selection, idx = _a.idx;\r\n            // extend selection with the `overwriteBefore` and `overwriteAfter` and then\r\n            // compare if this matches the extensions of the primary selection\r\n            var extensionBefore = SnippetSession.adjustSelection(model, selection, overwriteBefore, 0);\r\n            var extensionAfter = SnippetSession.adjustSelection(model, selection, 0, overwriteAfter);\r\n            if (firstBeforeText !== model.getValueInRange(extensionBefore)) {\r\n                extensionBefore = selection;\r\n            }\r\n            if (firstAfterText !== model.getValueInRange(extensionAfter)) {\r\n                extensionAfter = selection;\r\n            }\r\n            // merge the before and after selection into one\r\n            var snippetSelection = selection\r\n                .setStartPosition(extensionBefore.startLineNumber, extensionBefore.startColumn)\r\n                .setEndPosition(extensionAfter.endLineNumber, extensionAfter.endColumn);\r\n            var snippet = new SnippetParser().parse(template, true, enforceFinalTabstop);\r\n            // adjust the template string to match the indentation and\r\n            // whitespace rules of this insert location (can be different for each cursor)\r\n            // happens when being asked for (default) or when this is a secondary\r\n            // cursor and the leading whitespace is different\r\n            var start = snippetSelection.getStartPosition();\r\n            SnippetSession.adjustWhitespace(model, start, snippet, adjustWhitespace || (idx > 0 && firstLineFirstNonWhitespace !== model.getLineFirstNonWhitespaceColumn(selection.positionLineNumber)), true);\r\n            snippet.resolveVariables(new CompositeSnippetVariableResolver([\r\n                modelBasedVariableResolver,\r\n                new ClipboardBasedVariableResolver(readClipboardText, idx, indexedSelections.length, editor.getOption(60 /* multiCursorPaste */) === 'spread'),\r\n                new SelectionBasedVariableResolver(model, selection),\r\n                new CommentBasedVariableResolver(model),\r\n                new TimeBasedVariableResolver,\r\n                new WorkspaceBasedVariableResolver(workspaceService),\r\n                new RandomBasedVariableResolver,\r\n            ]));\r\n            var offset = model.getOffsetAt(start) + delta;\r\n            delta += snippet.toString().length - model.getValueLengthInRange(snippetSelection);\r\n            // store snippets with the index of their originating selection.\r\n            // that ensures the primiary cursor stays primary despite not being\r\n            // the one with lowest start position\r\n            edits[idx] = EditOperation.replace(snippetSelection, snippet.toString());\r\n            snippets[idx] = new OneSnippet(editor, snippet, offset);\r\n        }\r\n        return { edits: edits, snippets: snippets };\r\n    };\r\n    SnippetSession.prototype.dispose = function () {\r\n        dispose(this._snippets);\r\n    };\r\n    SnippetSession.prototype._logInfo = function () {\r\n        return \"template=\\\"\" + this._template + \"\\\", merged_templates=\\\"\" + this._templateMerges.join(' -> ') + \"\\\"\";\r\n    };\r\n    SnippetSession.prototype.insert = function () {\r\n        var _this = this;\r\n        if (!this._editor.hasModel()) {\r\n            return;\r\n        }\r\n        // make insert edit and start with first selections\r\n        var _a = SnippetSession.createEditsAndSnippets(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText), edits = _a.edits, snippets = _a.snippets;\r\n        this._snippets = snippets;\r\n        this._editor.executeEdits('snippet', edits, function (undoEdits) {\r\n            if (_this._snippets[0].hasPlaceholder) {\r\n                return _this._move(true);\r\n            }\r\n            else {\r\n                return undoEdits.map(function (edit) { return Selection.fromPositions(edit.range.getEndPosition()); });\r\n            }\r\n        });\r\n        this._editor.revealRange(this._editor.getSelections()[0]);\r\n    };\r\n    SnippetSession.prototype.merge = function (template, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = _defaultOptions; }\r\n        if (!this._editor.hasModel()) {\r\n            return;\r\n        }\r\n        this._templateMerges.push([this._snippets[0]._nestingLevel, this._snippets[0]._placeholderGroupsIdx, template]);\r\n        var _a = SnippetSession.createEditsAndSnippets(this._editor, template, options.overwriteBefore, options.overwriteAfter, true, options.adjustWhitespace, options.clipboardText), edits = _a.edits, snippets = _a.snippets;\r\n        this._editor.executeEdits('snippet', edits, function (undoEdits) {\r\n            for (var _i = 0, _a = _this._snippets; _i < _a.length; _i++) {\r\n                var snippet = _a[_i];\r\n                snippet.merge(snippets);\r\n            }\r\n            console.assert(snippets.length === 0);\r\n            if (_this._snippets[0].hasPlaceholder) {\r\n                return _this._move(undefined);\r\n            }\r\n            else {\r\n                return undoEdits.map(function (edit) { return Selection.fromPositions(edit.range.getEndPosition()); });\r\n            }\r\n        });\r\n    };\r\n    SnippetSession.prototype.next = function () {\r\n        var newSelections = this._move(true);\r\n        this._editor.setSelections(newSelections);\r\n        this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\r\n    };\r\n    SnippetSession.prototype.prev = function () {\r\n        var newSelections = this._move(false);\r\n        this._editor.setSelections(newSelections);\r\n        this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\r\n    };\r\n    SnippetSession.prototype._move = function (fwd) {\r\n        var selections = [];\r\n        for (var _i = 0, _a = this._snippets; _i < _a.length; _i++) {\r\n            var snippet = _a[_i];\r\n            var oneSelection = snippet.move(fwd);\r\n            selections.push.apply(selections, oneSelection);\r\n        }\r\n        return selections;\r\n    };\r\n    Object.defineProperty(SnippetSession.prototype, \"isAtFirstPlaceholder\", {\r\n        get: function () {\r\n            return this._snippets[0].isAtFirstPlaceholder;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SnippetSession.prototype, \"isAtLastPlaceholder\", {\r\n        get: function () {\r\n            return this._snippets[0].isAtLastPlaceholder;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SnippetSession.prototype, \"hasPlaceholder\", {\r\n        get: function () {\r\n            return this._snippets[0].hasPlaceholder;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SnippetSession.prototype, \"choice\", {\r\n        get: function () {\r\n            return this._snippets[0].choice;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SnippetSession.prototype.isSelectionWithinPlaceholders = function () {\r\n        if (!this.hasPlaceholder) {\r\n            return false;\r\n        }\r\n        var selections = this._editor.getSelections();\r\n        if (selections.length < this._snippets.length) {\r\n            // this means we started snippet mode with N\r\n            // selections and have M (N > M) selections.\r\n            // So one snippet is without selection -> cancel\r\n            return false;\r\n        }\r\n        var allPossibleSelections = new Map();\r\n        var _loop_1 = function (snippet) {\r\n            var possibleSelections = snippet.computePossibleSelections();\r\n            // for the first snippet find the placeholder (and its ranges)\r\n            // that contain at least one selection. for all remaining snippets\r\n            // the same placeholder (and their ranges) must be used.\r\n            if (allPossibleSelections.size === 0) {\r\n                possibleSelections.forEach(function (ranges, index) {\r\n                    ranges.sort(Range.compareRangesUsingStarts);\r\n                    for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\r\n                        var selection = selections_1[_i];\r\n                        if (ranges[0].containsRange(selection)) {\r\n                            allPossibleSelections.set(index, []);\r\n                            break;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (allPossibleSelections.size === 0) {\r\n                return { value: false };\r\n            }\r\n            // add selections from 'this' snippet so that we know all\r\n            // selections for this placeholder\r\n            allPossibleSelections.forEach(function (array, index) {\r\n                array.push.apply(array, possibleSelections.get(index));\r\n            });\r\n        };\r\n        for (var _i = 0, _a = this._snippets; _i < _a.length; _i++) {\r\n            var snippet = _a[_i];\r\n            var state_1 = _loop_1(snippet);\r\n            if (typeof state_1 === \"object\")\r\n                return state_1.value;\r\n        }\r\n        // sort selections (and later placeholder-ranges). then walk both\r\n        // arrays and make sure the placeholder-ranges contain the corresponding\r\n        // selection\r\n        selections.sort(Range.compareRangesUsingStarts);\r\n        allPossibleSelections.forEach(function (ranges, index) {\r\n            if (ranges.length !== selections.length) {\r\n                allPossibleSelections.delete(index);\r\n                return;\r\n            }\r\n            ranges.sort(Range.compareRangesUsingStarts);\r\n            for (var i = 0; i < ranges.length; i++) {\r\n                if (!ranges[i].containsRange(selections[i])) {\r\n                    allPossibleSelections.delete(index);\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n        // from all possible selections we have deleted those\r\n        // that don't match with the current selection. if we don't\r\n        // have any left, we don't have a selection anymore\r\n        return allPossibleSelections.size > 0;\r\n    };\r\n    return SnippetSession;\r\n}());\r\nexport { SnippetSession };\r\n"]},"metadata":{},"sourceType":"module"}