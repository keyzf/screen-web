{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as types from '../../../base/common/types.js';\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { WordOperations } from './cursorWordOperations.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\n\nvar CursorMoveCommands =\n/** @class */\nfunction () {\n  function CursorMoveCommands() {}\n\n  CursorMoveCommands.addCursorDown = function (context, cursors, useLogicalLine) {\n    var result = [],\n        resultLen = 0;\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n\n      if (useLogicalLine) {\n        result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(context.config, context.model, cursor.modelState));\n      } else {\n        result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(context.config, context.viewModel, cursor.viewState));\n      }\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands.addCursorUp = function (context, cursors, useLogicalLine) {\n    var result = [],\n        resultLen = 0;\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n\n      if (useLogicalLine) {\n        result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(context.config, context.model, cursor.modelState));\n      } else {\n        result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(context.config, context.viewModel, cursor.viewState));\n      }\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands.moveToBeginningOfLine = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = this._moveToLineStart(context, cursor, inSelectionMode);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToLineStart = function (context, cursor, inSelectionMode) {\n    var currentViewStateColumn = cursor.viewState.position.column;\n    var currentModelStateColumn = cursor.modelState.position.column;\n    var isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\n    var currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n    var firstNonBlankColumn = context.viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\n    var isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\n\n    if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n      return this._moveToLineStartByView(context, cursor, inSelectionMode);\n    } else {\n      return this._moveToLineStartByModel(context, cursor, inSelectionMode);\n    }\n  };\n\n  CursorMoveCommands._moveToLineStartByView = function (context, cursor, inSelectionMode) {\n    return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\n  };\n\n  CursorMoveCommands._moveToLineStartByModel = function (context, cursor, inSelectionMode) {\n    return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\n  };\n\n  CursorMoveCommands.moveToEndOfLine = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = this._moveToLineEnd(context, cursor, inSelectionMode);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToLineEnd = function (context, cursor, inSelectionMode) {\n    var viewStatePosition = cursor.viewState.position;\n    var viewModelMaxColumn = context.viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\n    var isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n    var modelStatePosition = cursor.modelState.position;\n    var modelMaxColumn = context.model.getLineMaxColumn(modelStatePosition.lineNumber);\n    var isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\n\n    if (isEndOfViewLine || isEndLineOfWrappedLine) {\n      return this._moveToLineEndByModel(context, cursor, inSelectionMode);\n    } else {\n      return this._moveToLineEndByView(context, cursor, inSelectionMode);\n    }\n  };\n\n  CursorMoveCommands._moveToLineEndByView = function (context, cursor, inSelectionMode) {\n    return CursorState.fromViewState(MoveOperations.moveToEndOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\n  };\n\n  CursorMoveCommands._moveToLineEndByModel = function (context, cursor, inSelectionMode) {\n    return CursorState.fromModelState(MoveOperations.moveToEndOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\n  };\n\n  CursorMoveCommands.expandLineSelection = function (context, cursors) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var startLineNumber = cursor.modelState.selection.startLineNumber;\n      var lineCount = context.model.getLineCount();\n      var endLineNumber = cursor.modelState.selection.endLineNumber;\n      var endColumn = void 0;\n\n      if (endLineNumber === lineCount) {\n        endColumn = context.model.getLineMaxColumn(lineCount);\n      } else {\n        endLineNumber++;\n        endColumn = 1;\n      }\n\n      result[i] = CursorState.fromModelState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0, new Position(endLineNumber, endColumn), 0));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands.moveToBeginningOfBuffer = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands.moveToEndOfBuffer = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands.selectAll = function (context, cursor) {\n    var lineCount = context.model.getLineCount();\n    var maxColumn = context.model.getLineMaxColumn(lineCount);\n    return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(lineCount, maxColumn), 0));\n  };\n\n  CursorMoveCommands.line = function (context, cursor, inSelectionMode, _position, _viewPosition) {\n    var position = context.model.validatePosition(_position);\n    var viewPosition = _viewPosition ? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position) : context.convertModelPositionToViewPosition(position);\n\n    if (!inSelectionMode || !cursor.modelState.hasSelection()) {\n      // Entering line selection for the first time\n      var lineCount = context.model.getLineCount();\n      var selectToLineNumber = position.lineNumber + 1;\n      var selectToColumn = 1;\n\n      if (selectToLineNumber > lineCount) {\n        selectToLineNumber = lineCount;\n        selectToColumn = context.model.getLineMaxColumn(selectToLineNumber);\n      }\n\n      return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 0, new Position(selectToLineNumber, selectToColumn), 0));\n    } // Continuing line selection\n\n\n    var enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\n\n    if (position.lineNumber < enteringLineNumber) {\n      return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), viewPosition.lineNumber, 1, 0));\n    } else if (position.lineNumber > enteringLineNumber) {\n      var lineCount = context.viewModel.getLineCount();\n      var selectToViewLineNumber = viewPosition.lineNumber + 1;\n      var selectToViewColumn = 1;\n\n      if (selectToViewLineNumber > lineCount) {\n        selectToViewLineNumber = lineCount;\n        selectToViewColumn = context.viewModel.getLineMaxColumn(selectToViewLineNumber);\n      }\n\n      return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), selectToViewLineNumber, selectToViewColumn, 0));\n    } else {\n      var endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\n      return CursorState.fromModelState(cursor.modelState.move(cursor.modelState.hasSelection(), endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\n    }\n  };\n\n  CursorMoveCommands.word = function (context, cursor, inSelectionMode, _position) {\n    var position = context.model.validatePosition(_position);\n    return CursorState.fromModelState(WordOperations.word(context.config, context.model, cursor.modelState, inSelectionMode, position));\n  };\n\n  CursorMoveCommands.cancelSelection = function (context, cursor) {\n    if (!cursor.modelState.hasSelection()) {\n      return new CursorState(cursor.modelState, cursor.viewState);\n    }\n\n    var lineNumber = cursor.viewState.position.lineNumber;\n    var column = cursor.viewState.position.column;\n    return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0, new Position(lineNumber, column), 0));\n  };\n\n  CursorMoveCommands.moveTo = function (context, cursor, inSelectionMode, _position, _viewPosition) {\n    var position = context.model.validatePosition(_position);\n    var viewPosition = _viewPosition ? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position) : context.convertModelPositionToViewPosition(position);\n    return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\n  };\n\n  CursorMoveCommands.move = function (context, cursors, args) {\n    var inSelectionMode = args.select;\n    var value = args.value;\n\n    switch (args.direction) {\n      case 0\n      /* Left */\n      :\n        {\n          if (args.unit === 4\n          /* HalfLine */\n          ) {\n              // Move left by half the current line length\n              return this._moveHalfLineLeft(context, cursors, inSelectionMode);\n            } else {\n            // Move left by `moveParams.value` columns\n            return this._moveLeft(context, cursors, inSelectionMode, value);\n          }\n        }\n\n      case 1\n      /* Right */\n      :\n        {\n          if (args.unit === 4\n          /* HalfLine */\n          ) {\n              // Move right by half the current line length\n              return this._moveHalfLineRight(context, cursors, inSelectionMode);\n            } else {\n            // Move right by `moveParams.value` columns\n            return this._moveRight(context, cursors, inSelectionMode, value);\n          }\n        }\n\n      case 2\n      /* Up */\n      :\n        {\n          if (args.unit === 2\n          /* WrappedLine */\n          ) {\n              // Move up by view lines\n              return this._moveUpByViewLines(context, cursors, inSelectionMode, value);\n            } else {\n            // Move up by model lines\n            return this._moveUpByModelLines(context, cursors, inSelectionMode, value);\n          }\n        }\n\n      case 3\n      /* Down */\n      :\n        {\n          if (args.unit === 2\n          /* WrappedLine */\n          ) {\n              // Move down by view lines\n              return this._moveDownByViewLines(context, cursors, inSelectionMode, value);\n            } else {\n            // Move down by model lines\n            return this._moveDownByModelLines(context, cursors, inSelectionMode, value);\n          }\n        }\n\n      case 4\n      /* WrappedLineStart */\n      :\n        {\n          // Move to the beginning of the current view line\n          return this._moveToViewMinColumn(context, cursors, inSelectionMode);\n        }\n\n      case 5\n      /* WrappedLineFirstNonWhitespaceCharacter */\n      :\n        {\n          // Move to the first non-whitespace column of the current view line\n          return this._moveToViewFirstNonWhitespaceColumn(context, cursors, inSelectionMode);\n        }\n\n      case 6\n      /* WrappedLineColumnCenter */\n      :\n        {\n          // Move to the \"center\" of the current view line\n          return this._moveToViewCenterColumn(context, cursors, inSelectionMode);\n        }\n\n      case 7\n      /* WrappedLineEnd */\n      :\n        {\n          // Move to the end of the current view line\n          return this._moveToViewMaxColumn(context, cursors, inSelectionMode);\n        }\n\n      case 8\n      /* WrappedLineLastNonWhitespaceCharacter */\n      :\n        {\n          // Move to the last non-whitespace column of the current view line\n          return this._moveToViewLastNonWhitespaceColumn(context, cursors, inSelectionMode);\n        }\n\n      case 9\n      /* ViewPortTop */\n      :\n        {\n          // Move to the nth line start in the viewport (from the top)\n          var cursor = cursors[0];\n          var visibleModelRange = context.getCompletelyVisibleModelRange();\n\n          var modelLineNumber = this._firstLineNumberInRange(context.model, visibleModelRange, value);\n\n          var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n          return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n        }\n\n      case 11\n      /* ViewPortBottom */\n      :\n        {\n          // Move to the nth line start in the viewport (from the bottom)\n          var cursor = cursors[0];\n          var visibleModelRange = context.getCompletelyVisibleModelRange();\n\n          var modelLineNumber = this._lastLineNumberInRange(context.model, visibleModelRange, value);\n\n          var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n          return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n        }\n\n      case 10\n      /* ViewPortCenter */\n      :\n        {\n          // Move to the line start in the viewport center\n          var cursor = cursors[0];\n          var visibleModelRange = context.getCompletelyVisibleModelRange();\n          var modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\n          var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n          return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n        }\n\n      case 12\n      /* ViewPortIfOutside */\n      :\n        {\n          // Move to a position inside the viewport\n          var visibleViewRange = context.getCompletelyVisibleViewRange();\n          var result = [];\n\n          for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            result[i] = this.findPositionInViewportIfOutside(context, cursor, visibleViewRange, inSelectionMode);\n          }\n\n          return result;\n        }\n    }\n\n    return null;\n  };\n\n  CursorMoveCommands.findPositionInViewportIfOutside = function (context, cursor, visibleViewRange, inSelectionMode) {\n    var viewLineNumber = cursor.viewState.position.lineNumber;\n\n    if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\n      // Nothing to do, cursor is in viewport\n      return new CursorState(cursor.modelState, cursor.viewState);\n    } else {\n      if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n        viewLineNumber = visibleViewRange.endLineNumber - 1;\n      }\n\n      if (viewLineNumber < visibleViewRange.startLineNumber) {\n        viewLineNumber = visibleViewRange.startLineNumber;\n      }\n\n      var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n      return this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n  };\n  /**\r\n   * Find the nth line start included in the range (from the start).\r\n   */\n\n\n  CursorMoveCommands._firstLineNumberInRange = function (model, range, count) {\n    var startLineNumber = range.startLineNumber;\n\n    if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n      // Move on to the second line if the first line start is not included in the range\n      startLineNumber++;\n    }\n\n    return Math.min(range.endLineNumber, startLineNumber + count - 1);\n  };\n  /**\r\n   * Find the nth line start included in the range (from the end).\r\n   */\n\n\n  CursorMoveCommands._lastLineNumberInRange = function (model, range, count) {\n    var startLineNumber = range.startLineNumber;\n\n    if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n      // Move on to the second line if the first line start is not included in the range\n      startLineNumber++;\n    }\n\n    return Math.max(startLineNumber, range.endLineNumber - count + 1);\n  };\n\n  CursorMoveCommands._moveLeft = function (context, cursors, inSelectionMode, noOfColumns) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var newViewState = MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\n\n      if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\n        // moved over to the previous view line\n        var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\n\n        if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\n          // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\n          newViewState = MoveOperations.moveLeft(context.config, context.viewModel, newViewState, inSelectionMode, 1);\n        }\n      }\n\n      result[i] = CursorState.fromViewState(newViewState);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveHalfLineLeft = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\n      result[i] = CursorState.fromViewState(MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveRight = function (context, cursors, inSelectionMode, noOfColumns) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var newViewState = MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\n\n      if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\n        // moved over to the next view line\n        var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\n\n        if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\n          // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\n          newViewState = MoveOperations.moveRight(context.config, context.viewModel, newViewState, inSelectionMode, 1);\n        }\n      }\n\n      result[i] = CursorState.fromViewState(newViewState);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveHalfLineRight = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\n      result[i] = CursorState.fromViewState(MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveDownByViewLines = function (context, cursors, inSelectionMode, linesCount) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromViewState(MoveOperations.moveDown(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveDownByModelLines = function (context, cursors, inSelectionMode, linesCount) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveDown(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveUpByViewLines = function (context, cursors, inSelectionMode, linesCount) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromViewState(MoveOperations.moveUp(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveUpByModelLines = function (context, cursors, inSelectionMode, linesCount) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveUp(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToViewPosition = function (context, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\n    return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\n  };\n\n  CursorMoveCommands._moveToModelPosition = function (context, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\n    return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\n  };\n\n  CursorMoveCommands._moveToViewMinColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = context.viewModel.getLineMinColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToViewFirstNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToViewCenterColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = Math.round((context.viewModel.getLineMaxColumn(viewLineNumber) + context.viewModel.getLineMinColumn(viewLineNumber)) / 2);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToViewMaxColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = context.viewModel.getLineMaxColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToViewLastNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = context.viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  };\n\n  return CursorMoveCommands;\n}();\n\nexport { CursorMoveCommands };\nexport var CursorMove;\n\n(function (CursorMove) {\n  var isCursorMoveArgs = function (arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n\n    var cursorMoveArg = arg;\n\n    if (!types.isString(cursorMoveArg.to)) {\n      return false;\n    }\n\n    if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\n      return false;\n    }\n\n    if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\n      return false;\n    }\n\n    if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  CursorMove.description = {\n    description: 'Move cursor to a logical position in the view',\n    args: [{\n      name: 'Cursor move argument object',\n      description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory logical position value providing where to move the cursor.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'left', 'right', 'up', 'down'\\n\\t\\t\\t\\t\\t\\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\\n\\t\\t\\t\\t\\t\\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\\n\\t\\t\\t\\t\\t\\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'character', 'halfLine'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'select': If 'true' makes the selection. Default is 'false'.\\n\\t\\t\\t\\t\",\n      constraint: isCursorMoveArgs,\n      schema: {\n        'type': 'object',\n        'required': ['to'],\n        'properties': {\n          'to': {\n            'type': 'string',\n            'enum': ['left', 'right', 'up', 'down', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\n          },\n          'by': {\n            'type': 'string',\n            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\n          },\n          'value': {\n            'type': 'number',\n            'default': 1\n          },\n          'select': {\n            'type': 'boolean',\n            'default': false\n          }\n        }\n      }\n    }]\n  };\n  /**\r\n   * Positions in the view for cursor move command.\r\n   */\n\n  CursorMove.RawDirection = {\n    Left: 'left',\n    Right: 'right',\n    Up: 'up',\n    Down: 'down',\n    WrappedLineStart: 'wrappedLineStart',\n    WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\n    WrappedLineColumnCenter: 'wrappedLineColumnCenter',\n    WrappedLineEnd: 'wrappedLineEnd',\n    WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\n    ViewPortTop: 'viewPortTop',\n    ViewPortCenter: 'viewPortCenter',\n    ViewPortBottom: 'viewPortBottom',\n    ViewPortIfOutside: 'viewPortIfOutside'\n  };\n  /**\r\n   * Units for Cursor move 'by' argument\r\n   */\n\n  CursorMove.RawUnit = {\n    Line: 'line',\n    WrappedLine: 'wrappedLine',\n    Character: 'character',\n    HalfLine: 'halfLine'\n  };\n\n  function parse(args) {\n    if (!args.to) {\n      // illegal arguments\n      return null;\n    }\n\n    var direction;\n\n    switch (args.to) {\n      case CursorMove.RawDirection.Left:\n        direction = 0\n        /* Left */\n        ;\n        break;\n\n      case CursorMove.RawDirection.Right:\n        direction = 1\n        /* Right */\n        ;\n        break;\n\n      case CursorMove.RawDirection.Up:\n        direction = 2\n        /* Up */\n        ;\n        break;\n\n      case CursorMove.RawDirection.Down:\n        direction = 3\n        /* Down */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineStart:\n        direction = 4\n        /* WrappedLineStart */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n        direction = 5\n        /* WrappedLineFirstNonWhitespaceCharacter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineColumnCenter:\n        direction = 6\n        /* WrappedLineColumnCenter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineEnd:\n        direction = 7\n        /* WrappedLineEnd */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\n        direction = 8\n        /* WrappedLineLastNonWhitespaceCharacter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortTop:\n        direction = 9\n        /* ViewPortTop */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortBottom:\n        direction = 11\n        /* ViewPortBottom */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortCenter:\n        direction = 10\n        /* ViewPortCenter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortIfOutside:\n        direction = 12\n        /* ViewPortIfOutside */\n        ;\n        break;\n\n      default:\n        // illegal arguments\n        return null;\n    }\n\n    var unit = 0\n    /* None */\n    ;\n\n    switch (args.by) {\n      case CursorMove.RawUnit.Line:\n        unit = 1\n        /* Line */\n        ;\n        break;\n\n      case CursorMove.RawUnit.WrappedLine:\n        unit = 2\n        /* WrappedLine */\n        ;\n        break;\n\n      case CursorMove.RawUnit.Character:\n        unit = 3\n        /* Character */\n        ;\n        break;\n\n      case CursorMove.RawUnit.HalfLine:\n        unit = 4\n        /* HalfLine */\n        ;\n        break;\n    }\n\n    return {\n      direction: direction,\n      unit: unit,\n      select: !!args.select,\n      value: args.value || 1\n    };\n  }\n\n  CursorMove.parse = parse;\n})(CursorMove || (CursorMove = {}));","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorMoveCommands.js"],"names":["types","CursorState","SingleCursorState","MoveOperations","WordOperations","Position","Range","CursorMoveCommands","addCursorDown","context","cursors","useLogicalLine","result","resultLen","i","len","length","cursor","modelState","viewState","fromModelState","translateDown","config","model","fromViewState","viewModel","addCursorUp","translateUp","moveToBeginningOfLine","inSelectionMode","_moveToLineStart","currentViewStateColumn","position","column","currentModelStateColumn","isFirstLineOfWrappedLine","currentViewStatelineNumber","lineNumber","firstNonBlankColumn","getLineFirstNonWhitespaceColumn","isBeginningOfViewLine","_moveToLineStartByView","_moveToLineStartByModel","moveToEndOfLine","_moveToLineEnd","viewStatePosition","viewModelMaxColumn","getLineMaxColumn","isEndOfViewLine","modelStatePosition","modelMaxColumn","isEndLineOfWrappedLine","_moveToLineEndByModel","_moveToLineEndByView","expandLineSelection","startLineNumber","selection","lineCount","getLineCount","endLineNumber","endColumn","moveToBeginningOfBuffer","moveToEndOfBuffer","selectAll","maxColumn","line","_position","_viewPosition","validatePosition","viewPosition","validateViewPosition","convertModelPositionToViewPosition","hasSelection","selectToLineNumber","selectToColumn","enteringLineNumber","selectionStart","getStartPosition","move","selectToViewLineNumber","selectToViewColumn","endPositionOfSelectionStart","getEndPosition","word","cancelSelection","moveTo","args","select","value","direction","unit","_moveHalfLineLeft","_moveLeft","_moveHalfLineRight","_moveRight","_moveUpByViewLines","_moveUpByModelLines","_moveDownByViewLines","_moveDownByModelLines","_moveToViewMinColumn","_moveToViewFirstNonWhitespaceColumn","_moveToViewCenterColumn","_moveToViewMaxColumn","_moveToViewLastNonWhitespaceColumn","visibleModelRange","getCompletelyVisibleModelRange","modelLineNumber","_firstLineNumberInRange","modelColumn","_moveToModelPosition","_lastLineNumberInRange","Math","round","visibleViewRange","getCompletelyVisibleViewRange","findPositionInViewportIfOutside","viewLineNumber","viewColumn","_moveToViewPosition","range","count","startColumn","getLineMinColumn","min","max","noOfColumns","newViewState","moveLeft","newViewModelPosition","coordinatesConverter","convertViewPositionToModelPosition","halfLine","getLineContent","moveRight","linesCount","moveDown","moveUp","toViewLineNumber","toViewColumn","toModelLineNumber","toModelColumn","getLineLastNonWhitespaceColumn","CursorMove","isCursorMoveArgs","arg","isObject","cursorMoveArg","isString","to","isUndefined","isBoolean","by","isNumber","description","name","constraint","schema","RawDirection","Left","Right","Up","Down","WrappedLineStart","WrappedLineFirstNonWhitespaceCharacter","WrappedLineColumnCenter","WrappedLineEnd","WrappedLineLastNonWhitespaceCharacter","ViewPortTop","ViewPortCenter","ViewPortBottom","ViewPortIfOutside","RawUnit","Line","WrappedLine","Character","HalfLine","parse"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as types from '../../../base/common/types.js';\r\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\r\nimport { MoveOperations } from './cursorMoveOperations.js';\r\nimport { WordOperations } from './cursorWordOperations.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nvar CursorMoveCommands = /** @class */ (function () {\r\n    function CursorMoveCommands() {\r\n    }\r\n    CursorMoveCommands.addCursorDown = function (context, cursors, useLogicalLine) {\r\n        var result = [], resultLen = 0;\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\r\n            if (useLogicalLine) {\r\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(context.config, context.model, cursor.modelState));\r\n            }\r\n            else {\r\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(context.config, context.viewModel, cursor.viewState));\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.addCursorUp = function (context, cursors, useLogicalLine) {\r\n        var result = [], resultLen = 0;\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\r\n            if (useLogicalLine) {\r\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(context.config, context.model, cursor.modelState));\r\n            }\r\n            else {\r\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(context.config, context.viewModel, cursor.viewState));\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.moveToBeginningOfLine = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = this._moveToLineStart(context, cursor, inSelectionMode);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToLineStart = function (context, cursor, inSelectionMode) {\r\n        var currentViewStateColumn = cursor.viewState.position.column;\r\n        var currentModelStateColumn = cursor.modelState.position.column;\r\n        var isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\r\n        var currentViewStatelineNumber = cursor.viewState.position.lineNumber;\r\n        var firstNonBlankColumn = context.viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\r\n        var isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\r\n        if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\r\n            return this._moveToLineStartByView(context, cursor, inSelectionMode);\r\n        }\r\n        else {\r\n            return this._moveToLineStartByModel(context, cursor, inSelectionMode);\r\n        }\r\n    };\r\n    CursorMoveCommands._moveToLineStartByView = function (context, cursor, inSelectionMode) {\r\n        return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\r\n    };\r\n    CursorMoveCommands._moveToLineStartByModel = function (context, cursor, inSelectionMode) {\r\n        return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\r\n    };\r\n    CursorMoveCommands.moveToEndOfLine = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = this._moveToLineEnd(context, cursor, inSelectionMode);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToLineEnd = function (context, cursor, inSelectionMode) {\r\n        var viewStatePosition = cursor.viewState.position;\r\n        var viewModelMaxColumn = context.viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\r\n        var isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\r\n        var modelStatePosition = cursor.modelState.position;\r\n        var modelMaxColumn = context.model.getLineMaxColumn(modelStatePosition.lineNumber);\r\n        var isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\r\n        if (isEndOfViewLine || isEndLineOfWrappedLine) {\r\n            return this._moveToLineEndByModel(context, cursor, inSelectionMode);\r\n        }\r\n        else {\r\n            return this._moveToLineEndByView(context, cursor, inSelectionMode);\r\n        }\r\n    };\r\n    CursorMoveCommands._moveToLineEndByView = function (context, cursor, inSelectionMode) {\r\n        return CursorState.fromViewState(MoveOperations.moveToEndOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\r\n    };\r\n    CursorMoveCommands._moveToLineEndByModel = function (context, cursor, inSelectionMode) {\r\n        return CursorState.fromModelState(MoveOperations.moveToEndOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\r\n    };\r\n    CursorMoveCommands.expandLineSelection = function (context, cursors) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var startLineNumber = cursor.modelState.selection.startLineNumber;\r\n            var lineCount = context.model.getLineCount();\r\n            var endLineNumber = cursor.modelState.selection.endLineNumber;\r\n            var endColumn = void 0;\r\n            if (endLineNumber === lineCount) {\r\n                endColumn = context.model.getLineMaxColumn(lineCount);\r\n            }\r\n            else {\r\n                endLineNumber++;\r\n                endColumn = 1;\r\n            }\r\n            result[i] = CursorState.fromModelState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0, new Position(endLineNumber, endColumn), 0));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.moveToBeginningOfBuffer = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.moveToEndOfBuffer = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.selectAll = function (context, cursor) {\r\n        var lineCount = context.model.getLineCount();\r\n        var maxColumn = context.model.getLineMaxColumn(lineCount);\r\n        return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(lineCount, maxColumn), 0));\r\n    };\r\n    CursorMoveCommands.line = function (context, cursor, inSelectionMode, _position, _viewPosition) {\r\n        var position = context.model.validatePosition(_position);\r\n        var viewPosition = (_viewPosition\r\n            ? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\r\n            : context.convertModelPositionToViewPosition(position));\r\n        if (!inSelectionMode || !cursor.modelState.hasSelection()) {\r\n            // Entering line selection for the first time\r\n            var lineCount = context.model.getLineCount();\r\n            var selectToLineNumber = position.lineNumber + 1;\r\n            var selectToColumn = 1;\r\n            if (selectToLineNumber > lineCount) {\r\n                selectToLineNumber = lineCount;\r\n                selectToColumn = context.model.getLineMaxColumn(selectToLineNumber);\r\n            }\r\n            return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 0, new Position(selectToLineNumber, selectToColumn), 0));\r\n        }\r\n        // Continuing line selection\r\n        var enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\r\n        if (position.lineNumber < enteringLineNumber) {\r\n            return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), viewPosition.lineNumber, 1, 0));\r\n        }\r\n        else if (position.lineNumber > enteringLineNumber) {\r\n            var lineCount = context.viewModel.getLineCount();\r\n            var selectToViewLineNumber = viewPosition.lineNumber + 1;\r\n            var selectToViewColumn = 1;\r\n            if (selectToViewLineNumber > lineCount) {\r\n                selectToViewLineNumber = lineCount;\r\n                selectToViewColumn = context.viewModel.getLineMaxColumn(selectToViewLineNumber);\r\n            }\r\n            return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), selectToViewLineNumber, selectToViewColumn, 0));\r\n        }\r\n        else {\r\n            var endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\r\n            return CursorState.fromModelState(cursor.modelState.move(cursor.modelState.hasSelection(), endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\r\n        }\r\n    };\r\n    CursorMoveCommands.word = function (context, cursor, inSelectionMode, _position) {\r\n        var position = context.model.validatePosition(_position);\r\n        return CursorState.fromModelState(WordOperations.word(context.config, context.model, cursor.modelState, inSelectionMode, position));\r\n    };\r\n    CursorMoveCommands.cancelSelection = function (context, cursor) {\r\n        if (!cursor.modelState.hasSelection()) {\r\n            return new CursorState(cursor.modelState, cursor.viewState);\r\n        }\r\n        var lineNumber = cursor.viewState.position.lineNumber;\r\n        var column = cursor.viewState.position.column;\r\n        return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0, new Position(lineNumber, column), 0));\r\n    };\r\n    CursorMoveCommands.moveTo = function (context, cursor, inSelectionMode, _position, _viewPosition) {\r\n        var position = context.model.validatePosition(_position);\r\n        var viewPosition = (_viewPosition\r\n            ? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\r\n            : context.convertModelPositionToViewPosition(position));\r\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\r\n    };\r\n    CursorMoveCommands.move = function (context, cursors, args) {\r\n        var inSelectionMode = args.select;\r\n        var value = args.value;\r\n        switch (args.direction) {\r\n            case 0 /* Left */: {\r\n                if (args.unit === 4 /* HalfLine */) {\r\n                    // Move left by half the current line length\r\n                    return this._moveHalfLineLeft(context, cursors, inSelectionMode);\r\n                }\r\n                else {\r\n                    // Move left by `moveParams.value` columns\r\n                    return this._moveLeft(context, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 1 /* Right */: {\r\n                if (args.unit === 4 /* HalfLine */) {\r\n                    // Move right by half the current line length\r\n                    return this._moveHalfLineRight(context, cursors, inSelectionMode);\r\n                }\r\n                else {\r\n                    // Move right by `moveParams.value` columns\r\n                    return this._moveRight(context, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 2 /* Up */: {\r\n                if (args.unit === 2 /* WrappedLine */) {\r\n                    // Move up by view lines\r\n                    return this._moveUpByViewLines(context, cursors, inSelectionMode, value);\r\n                }\r\n                else {\r\n                    // Move up by model lines\r\n                    return this._moveUpByModelLines(context, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 3 /* Down */: {\r\n                if (args.unit === 2 /* WrappedLine */) {\r\n                    // Move down by view lines\r\n                    return this._moveDownByViewLines(context, cursors, inSelectionMode, value);\r\n                }\r\n                else {\r\n                    // Move down by model lines\r\n                    return this._moveDownByModelLines(context, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 4 /* WrappedLineStart */: {\r\n                // Move to the beginning of the current view line\r\n                return this._moveToViewMinColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 5 /* WrappedLineFirstNonWhitespaceCharacter */: {\r\n                // Move to the first non-whitespace column of the current view line\r\n                return this._moveToViewFirstNonWhitespaceColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 6 /* WrappedLineColumnCenter */: {\r\n                // Move to the \"center\" of the current view line\r\n                return this._moveToViewCenterColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 7 /* WrappedLineEnd */: {\r\n                // Move to the end of the current view line\r\n                return this._moveToViewMaxColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 8 /* WrappedLineLastNonWhitespaceCharacter */: {\r\n                // Move to the last non-whitespace column of the current view line\r\n                return this._moveToViewLastNonWhitespaceColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 9 /* ViewPortTop */: {\r\n                // Move to the nth line start in the viewport (from the top)\r\n                var cursor = cursors[0];\r\n                var visibleModelRange = context.getCompletelyVisibleModelRange();\r\n                var modelLineNumber = this._firstLineNumberInRange(context.model, visibleModelRange, value);\r\n                var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\r\n                return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\r\n            }\r\n            case 11 /* ViewPortBottom */: {\r\n                // Move to the nth line start in the viewport (from the bottom)\r\n                var cursor = cursors[0];\r\n                var visibleModelRange = context.getCompletelyVisibleModelRange();\r\n                var modelLineNumber = this._lastLineNumberInRange(context.model, visibleModelRange, value);\r\n                var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\r\n                return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\r\n            }\r\n            case 10 /* ViewPortCenter */: {\r\n                // Move to the line start in the viewport center\r\n                var cursor = cursors[0];\r\n                var visibleModelRange = context.getCompletelyVisibleModelRange();\r\n                var modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\r\n                var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\r\n                return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\r\n            }\r\n            case 12 /* ViewPortIfOutside */: {\r\n                // Move to a position inside the viewport\r\n                var visibleViewRange = context.getCompletelyVisibleViewRange();\r\n                var result = [];\r\n                for (var i = 0, len = cursors.length; i < len; i++) {\r\n                    var cursor = cursors[i];\r\n                    result[i] = this.findPositionInViewportIfOutside(context, cursor, visibleViewRange, inSelectionMode);\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    CursorMoveCommands.findPositionInViewportIfOutside = function (context, cursor, visibleViewRange, inSelectionMode) {\r\n        var viewLineNumber = cursor.viewState.position.lineNumber;\r\n        if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\r\n            // Nothing to do, cursor is in viewport\r\n            return new CursorState(cursor.modelState, cursor.viewState);\r\n        }\r\n        else {\r\n            if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\r\n                viewLineNumber = visibleViewRange.endLineNumber - 1;\r\n            }\r\n            if (viewLineNumber < visibleViewRange.startLineNumber) {\r\n                viewLineNumber = visibleViewRange.startLineNumber;\r\n            }\r\n            var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\r\n            return this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n    };\r\n    /**\r\n     * Find the nth line start included in the range (from the start).\r\n     */\r\n    CursorMoveCommands._firstLineNumberInRange = function (model, range, count) {\r\n        var startLineNumber = range.startLineNumber;\r\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\r\n            // Move on to the second line if the first line start is not included in the range\r\n            startLineNumber++;\r\n        }\r\n        return Math.min(range.endLineNumber, startLineNumber + count - 1);\r\n    };\r\n    /**\r\n     * Find the nth line start included in the range (from the end).\r\n     */\r\n    CursorMoveCommands._lastLineNumberInRange = function (model, range, count) {\r\n        var startLineNumber = range.startLineNumber;\r\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\r\n            // Move on to the second line if the first line start is not included in the range\r\n            startLineNumber++;\r\n        }\r\n        return Math.max(startLineNumber, range.endLineNumber - count + 1);\r\n    };\r\n    CursorMoveCommands._moveLeft = function (context, cursors, inSelectionMode, noOfColumns) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var newViewState = MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\r\n            if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\r\n                // moved over to the previous view line\r\n                var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\r\n                if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\r\n                    // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\r\n                    newViewState = MoveOperations.moveLeft(context.config, context.viewModel, newViewState, inSelectionMode, 1);\r\n                }\r\n            }\r\n            result[i] = CursorState.fromViewState(newViewState);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveHalfLineLeft = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveRight = function (context, cursors, inSelectionMode, noOfColumns) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var newViewState = MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\r\n            if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\r\n                // moved over to the next view line\r\n                var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\r\n                if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\r\n                    // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\r\n                    newViewState = MoveOperations.moveRight(context.config, context.viewModel, newViewState, inSelectionMode, 1);\r\n                }\r\n            }\r\n            result[i] = CursorState.fromViewState(newViewState);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveHalfLineRight = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveDownByViewLines = function (context, cursors, inSelectionMode, linesCount) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveDown(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveDownByModelLines = function (context, cursors, inSelectionMode, linesCount) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveDown(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveUpByViewLines = function (context, cursors, inSelectionMode, linesCount) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveUp(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveUpByModelLines = function (context, cursors, inSelectionMode, linesCount) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveUp(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewPosition = function (context, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\r\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\r\n    };\r\n    CursorMoveCommands._moveToModelPosition = function (context, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\r\n        return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\r\n    };\r\n    CursorMoveCommands._moveToViewMinColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = context.viewModel.getLineMinColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewFirstNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewCenterColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = Math.round((context.viewModel.getLineMaxColumn(viewLineNumber) + context.viewModel.getLineMinColumn(viewLineNumber)) / 2);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewMaxColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = context.viewModel.getLineMaxColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewLastNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = context.viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    return CursorMoveCommands;\r\n}());\r\nexport { CursorMoveCommands };\r\nexport var CursorMove;\r\n(function (CursorMove) {\r\n    var isCursorMoveArgs = function (arg) {\r\n        if (!types.isObject(arg)) {\r\n            return false;\r\n        }\r\n        var cursorMoveArg = arg;\r\n        if (!types.isString(cursorMoveArg.to)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    CursorMove.description = {\r\n        description: 'Move cursor to a logical position in the view',\r\n        args: [\r\n            {\r\n                name: 'Cursor move argument object',\r\n                description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory logical position value providing where to move the cursor.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'left', 'right', 'up', 'down'\\n\\t\\t\\t\\t\\t\\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\\n\\t\\t\\t\\t\\t\\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\\n\\t\\t\\t\\t\\t\\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'character', 'halfLine'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'select': If 'true' makes the selection. Default is 'false'.\\n\\t\\t\\t\\t\",\r\n                constraint: isCursorMoveArgs,\r\n                schema: {\r\n                    'type': 'object',\r\n                    'required': ['to'],\r\n                    'properties': {\r\n                        'to': {\r\n                            'type': 'string',\r\n                            'enum': ['left', 'right', 'up', 'down', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\r\n                        },\r\n                        'by': {\r\n                            'type': 'string',\r\n                            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\r\n                        },\r\n                        'value': {\r\n                            'type': 'number',\r\n                            'default': 1\r\n                        },\r\n                        'select': {\r\n                            'type': 'boolean',\r\n                            'default': false\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n    /**\r\n     * Positions in the view for cursor move command.\r\n     */\r\n    CursorMove.RawDirection = {\r\n        Left: 'left',\r\n        Right: 'right',\r\n        Up: 'up',\r\n        Down: 'down',\r\n        WrappedLineStart: 'wrappedLineStart',\r\n        WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\r\n        WrappedLineColumnCenter: 'wrappedLineColumnCenter',\r\n        WrappedLineEnd: 'wrappedLineEnd',\r\n        WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\r\n        ViewPortTop: 'viewPortTop',\r\n        ViewPortCenter: 'viewPortCenter',\r\n        ViewPortBottom: 'viewPortBottom',\r\n        ViewPortIfOutside: 'viewPortIfOutside'\r\n    };\r\n    /**\r\n     * Units for Cursor move 'by' argument\r\n     */\r\n    CursorMove.RawUnit = {\r\n        Line: 'line',\r\n        WrappedLine: 'wrappedLine',\r\n        Character: 'character',\r\n        HalfLine: 'halfLine'\r\n    };\r\n    function parse(args) {\r\n        if (!args.to) {\r\n            // illegal arguments\r\n            return null;\r\n        }\r\n        var direction;\r\n        switch (args.to) {\r\n            case CursorMove.RawDirection.Left:\r\n                direction = 0 /* Left */;\r\n                break;\r\n            case CursorMove.RawDirection.Right:\r\n                direction = 1 /* Right */;\r\n                break;\r\n            case CursorMove.RawDirection.Up:\r\n                direction = 2 /* Up */;\r\n                break;\r\n            case CursorMove.RawDirection.Down:\r\n                direction = 3 /* Down */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineStart:\r\n                direction = 4 /* WrappedLineStart */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\r\n                direction = 5 /* WrappedLineFirstNonWhitespaceCharacter */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineColumnCenter:\r\n                direction = 6 /* WrappedLineColumnCenter */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineEnd:\r\n                direction = 7 /* WrappedLineEnd */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\r\n                direction = 8 /* WrappedLineLastNonWhitespaceCharacter */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortTop:\r\n                direction = 9 /* ViewPortTop */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortBottom:\r\n                direction = 11 /* ViewPortBottom */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortCenter:\r\n                direction = 10 /* ViewPortCenter */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortIfOutside:\r\n                direction = 12 /* ViewPortIfOutside */;\r\n                break;\r\n            default:\r\n                // illegal arguments\r\n                return null;\r\n        }\r\n        var unit = 0 /* None */;\r\n        switch (args.by) {\r\n            case CursorMove.RawUnit.Line:\r\n                unit = 1 /* Line */;\r\n                break;\r\n            case CursorMove.RawUnit.WrappedLine:\r\n                unit = 2 /* WrappedLine */;\r\n                break;\r\n            case CursorMove.RawUnit.Character:\r\n                unit = 3 /* Character */;\r\n                break;\r\n            case CursorMove.RawUnit.HalfLine:\r\n                unit = 4 /* HalfLine */;\r\n                break;\r\n        }\r\n        return {\r\n            direction: direction,\r\n            unit: unit,\r\n            select: (!!args.select),\r\n            value: (args.value || 1)\r\n        };\r\n    }\r\n    CursorMove.parse = parse;\r\n})(CursorMove || (CursorMove = {}));\r\n"]},"metadata":{},"sourceType":"module"}