{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../common/core/range.js';\n\nvar MoveCaretCommand =\n/** @class */\nfunction () {\n  function MoveCaretCommand(selection, isMovingLeft) {\n    this._selection = selection;\n    this._isMovingLeft = isMovingLeft;\n    this._cutStartIndex = -1;\n    this._cutEndIndex = -1;\n    this._moved = false;\n    this._selectionId = null;\n  }\n\n  MoveCaretCommand.prototype.getEditOperations = function (model, builder) {\n    var s = this._selection;\n    this._selectionId = builder.trackSelection(s);\n\n    if (s.startLineNumber !== s.endLineNumber) {\n      return;\n    }\n\n    if (this._isMovingLeft && s.startColumn === 0) {\n      return;\n    } else if (!this._isMovingLeft && s.endColumn === model.getLineMaxColumn(s.startLineNumber)) {\n      return;\n    }\n\n    var lineNumber = s.selectionStartLineNumber;\n    var lineContent = model.getLineContent(lineNumber);\n    var left;\n    var middle;\n    var right;\n\n    if (this._isMovingLeft) {\n      left = lineContent.substring(0, s.startColumn - 2);\n      middle = lineContent.substring(s.startColumn - 1, s.endColumn - 1);\n      right = lineContent.substring(s.startColumn - 2, s.startColumn - 1) + lineContent.substring(s.endColumn - 1);\n    } else {\n      left = lineContent.substring(0, s.startColumn - 1) + lineContent.substring(s.endColumn - 1, s.endColumn);\n      middle = lineContent.substring(s.startColumn - 1, s.endColumn - 1);\n      right = lineContent.substring(s.endColumn);\n    }\n\n    var newLineContent = left + middle + right;\n    builder.addEditOperation(new Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber)), null);\n    builder.addEditOperation(new Range(lineNumber, 1, lineNumber, 1), newLineContent);\n    this._cutStartIndex = s.startColumn + (this._isMovingLeft ? -1 : 1);\n    this._cutEndIndex = this._cutStartIndex + s.endColumn - s.startColumn;\n    this._moved = true;\n  };\n\n  MoveCaretCommand.prototype.computeCursorState = function (model, helper) {\n    var result = helper.getTrackedSelection(this._selectionId);\n\n    if (this._moved) {\n      result = result.setStartPosition(result.startLineNumber, this._cutStartIndex);\n      result = result.setEndPosition(result.startLineNumber, this._cutEndIndex);\n    }\n\n    return result;\n  };\n\n  return MoveCaretCommand;\n}();\n\nexport { MoveCaretCommand };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/moveCaretCommand.js"],"names":["Range","MoveCaretCommand","selection","isMovingLeft","_selection","_isMovingLeft","_cutStartIndex","_cutEndIndex","_moved","_selectionId","prototype","getEditOperations","model","builder","s","trackSelection","startLineNumber","endLineNumber","startColumn","endColumn","getLineMaxColumn","lineNumber","selectionStartLineNumber","lineContent","getLineContent","left","middle","right","substring","newLineContent","addEditOperation","computeCursorState","helper","result","getTrackedSelection","setStartPosition","setEndPosition"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Range } from '../../common/core/range.js';\r\nvar MoveCaretCommand = /** @class */ (function () {\r\n    function MoveCaretCommand(selection, isMovingLeft) {\r\n        this._selection = selection;\r\n        this._isMovingLeft = isMovingLeft;\r\n        this._cutStartIndex = -1;\r\n        this._cutEndIndex = -1;\r\n        this._moved = false;\r\n        this._selectionId = null;\r\n    }\r\n    MoveCaretCommand.prototype.getEditOperations = function (model, builder) {\r\n        var s = this._selection;\r\n        this._selectionId = builder.trackSelection(s);\r\n        if (s.startLineNumber !== s.endLineNumber) {\r\n            return;\r\n        }\r\n        if (this._isMovingLeft && s.startColumn === 0) {\r\n            return;\r\n        }\r\n        else if (!this._isMovingLeft && s.endColumn === model.getLineMaxColumn(s.startLineNumber)) {\r\n            return;\r\n        }\r\n        var lineNumber = s.selectionStartLineNumber;\r\n        var lineContent = model.getLineContent(lineNumber);\r\n        var left;\r\n        var middle;\r\n        var right;\r\n        if (this._isMovingLeft) {\r\n            left = lineContent.substring(0, s.startColumn - 2);\r\n            middle = lineContent.substring(s.startColumn - 1, s.endColumn - 1);\r\n            right = lineContent.substring(s.startColumn - 2, s.startColumn - 1) + lineContent.substring(s.endColumn - 1);\r\n        }\r\n        else {\r\n            left = lineContent.substring(0, s.startColumn - 1) + lineContent.substring(s.endColumn - 1, s.endColumn);\r\n            middle = lineContent.substring(s.startColumn - 1, s.endColumn - 1);\r\n            right = lineContent.substring(s.endColumn);\r\n        }\r\n        var newLineContent = left + middle + right;\r\n        builder.addEditOperation(new Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber)), null);\r\n        builder.addEditOperation(new Range(lineNumber, 1, lineNumber, 1), newLineContent);\r\n        this._cutStartIndex = s.startColumn + (this._isMovingLeft ? -1 : 1);\r\n        this._cutEndIndex = this._cutStartIndex + s.endColumn - s.startColumn;\r\n        this._moved = true;\r\n    };\r\n    MoveCaretCommand.prototype.computeCursorState = function (model, helper) {\r\n        var result = helper.getTrackedSelection(this._selectionId);\r\n        if (this._moved) {\r\n            result = result.setStartPosition(result.startLineNumber, this._cutStartIndex);\r\n            result = result.setEndPosition(result.startLineNumber, this._cutEndIndex);\r\n        }\r\n        return result;\r\n    };\r\n    return MoveCaretCommand;\r\n}());\r\nexport { MoveCaretCommand };\r\n"]},"metadata":{},"sourceType":"module"}