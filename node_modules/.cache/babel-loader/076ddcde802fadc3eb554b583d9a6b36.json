{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { globals } from '../common/platform.js';\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\n\nfunction getWorker(workerId, label) {\n  // Option for hosts to overwrite the worker script (used in the standalone editor)\n  if (globals.MonacoEnvironment) {\n    if (typeof globals.MonacoEnvironment.getWorker === 'function') {\n      return globals.MonacoEnvironment.getWorker(workerId, label);\n    }\n\n    if (typeof globals.MonacoEnvironment.getWorkerUrl === 'function') {\n      return new Worker(globals.MonacoEnvironment.getWorkerUrl(workerId, label));\n    }\n  } // ESM-comment-begin\n  // \tif (typeof require === 'function') {\n  // \t\t// check if the JS lives on a different origin\n  // \t\tconst workerMain = require.toUrl('./' + workerId);\n  // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\n  // \t\treturn new Worker(workerUrl, { name: label });\n  // \t}\n  // ESM-comment-end\n\n\n  throw new Error(\"You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker\");\n} // ESM-comment-begin\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string): string {\n// \tif (/^(http:)|(https:)|(file:)/.test(scriptPath)) {\n// \t\tconst currentUrl = String(window.location);\n// \t\tconst currentOrigin = currentUrl.substr(0, currentUrl.length - window.location.hash.length - window.location.search.length - window.location.pathname.length);\n// \t\tif (scriptPath.substring(0, currentOrigin.length) !== currentOrigin) {\n// \t\t\t// this is the cross-origin case\n// \t\t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\n// \t\t\tconst myPath = 'vs/base/worker/defaultWorkerFactory.js';\n// \t\t\tconst workerBaseUrl = require.toUrl(myPath).slice(0, -myPath.length);\n// \t\t\tconst js = `/*${label}*/self.MonacoEnvironment={baseUrl: '${workerBaseUrl}'};importScripts('${scriptPath}');/*${label}*/`;\n// \t\t\tconst url = `data:text/javascript;charset=utf-8,${encodeURIComponent(js)}`;\n// \t\t\treturn url;\n// \t\t}\n// \t}\n// \treturn scriptPath + '#' + label;\n// }\n// ESM-comment-end\n\n\nfunction isPromiseLike(obj) {\n  if (typeof obj.then === 'function') {\n    return true;\n  }\n\n  return false;\n}\n/**\r\n * A worker that uses HTML5 web workers so that is has\r\n * its own global scope and its own thread.\r\n */\n\n\nvar WebWorker =\n/** @class */\nfunction () {\n  function WebWorker(moduleId, id, label, onMessageCallback, onErrorCallback) {\n    this.id = id;\n    var workerOrPromise = getWorker('workerMain.js', label);\n\n    if (isPromiseLike(workerOrPromise)) {\n      this.worker = workerOrPromise;\n    } else {\n      this.worker = Promise.resolve(workerOrPromise);\n    }\n\n    this.postMessage(moduleId, []);\n    this.worker.then(function (w) {\n      w.onmessage = function (ev) {\n        onMessageCallback(ev.data);\n      };\n\n      w.onmessageerror = onErrorCallback;\n\n      if (typeof w.addEventListener === 'function') {\n        w.addEventListener('error', onErrorCallback);\n      }\n    });\n  }\n\n  WebWorker.prototype.getId = function () {\n    return this.id;\n  };\n\n  WebWorker.prototype.postMessage = function (message, transfer) {\n    if (this.worker) {\n      this.worker.then(function (w) {\n        return w.postMessage(message, transfer);\n      });\n    }\n  };\n\n  WebWorker.prototype.dispose = function () {\n    if (this.worker) {\n      this.worker.then(function (w) {\n        return w.terminate();\n      });\n    }\n\n    this.worker = null;\n  };\n\n  return WebWorker;\n}();\n\nvar DefaultWorkerFactory =\n/** @class */\nfunction () {\n  function DefaultWorkerFactory(label) {\n    this._label = label;\n    this._webWorkerFailedBeforeError = false;\n  }\n\n  DefaultWorkerFactory.prototype.create = function (moduleId, onMessageCallback, onErrorCallback) {\n    var _this = this;\n\n    var workerId = ++DefaultWorkerFactory.LAST_WORKER_ID;\n\n    if (this._webWorkerFailedBeforeError) {\n      throw this._webWorkerFailedBeforeError;\n    }\n\n    return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, function (err) {\n      logOnceWebWorkerWarning(err);\n      _this._webWorkerFailedBeforeError = err;\n      onErrorCallback(err);\n    });\n  };\n\n  DefaultWorkerFactory.LAST_WORKER_ID = 0;\n  return DefaultWorkerFactory;\n}();\n\nexport { DefaultWorkerFactory };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/base/worker/defaultWorkerFactory.js"],"names":["globals","logOnceWebWorkerWarning","getWorker","workerId","label","MonacoEnvironment","getWorkerUrl","Worker","Error","isPromiseLike","obj","then","WebWorker","moduleId","id","onMessageCallback","onErrorCallback","workerOrPromise","worker","Promise","resolve","postMessage","w","onmessage","ev","data","onmessageerror","addEventListener","prototype","getId","message","transfer","dispose","terminate","DefaultWorkerFactory","_label","_webWorkerFailedBeforeError","create","_this","LAST_WORKER_ID","err"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { globals } from '../common/platform.js';\r\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\r\nfunction getWorker(workerId, label) {\r\n    // Option for hosts to overwrite the worker script (used in the standalone editor)\r\n    if (globals.MonacoEnvironment) {\r\n        if (typeof globals.MonacoEnvironment.getWorker === 'function') {\r\n            return globals.MonacoEnvironment.getWorker(workerId, label);\r\n        }\r\n        if (typeof globals.MonacoEnvironment.getWorkerUrl === 'function') {\r\n            return new Worker(globals.MonacoEnvironment.getWorkerUrl(workerId, label));\r\n        }\r\n    }\r\n    // ESM-comment-begin\r\n    // \tif (typeof require === 'function') {\r\n    // \t\t// check if the JS lives on a different origin\r\n    // \t\tconst workerMain = require.toUrl('./' + workerId);\r\n    // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\r\n    // \t\treturn new Worker(workerUrl, { name: label });\r\n    // \t}\r\n    // ESM-comment-end\r\n    throw new Error(\"You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker\");\r\n}\r\n// ESM-comment-begin\r\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string): string {\r\n// \tif (/^(http:)|(https:)|(file:)/.test(scriptPath)) {\r\n// \t\tconst currentUrl = String(window.location);\r\n// \t\tconst currentOrigin = currentUrl.substr(0, currentUrl.length - window.location.hash.length - window.location.search.length - window.location.pathname.length);\r\n// \t\tif (scriptPath.substring(0, currentOrigin.length) !== currentOrigin) {\r\n// \t\t\t// this is the cross-origin case\r\n// \t\t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\r\n// \t\t\tconst myPath = 'vs/base/worker/defaultWorkerFactory.js';\r\n// \t\t\tconst workerBaseUrl = require.toUrl(myPath).slice(0, -myPath.length);\r\n// \t\t\tconst js = `/*${label}*/self.MonacoEnvironment={baseUrl: '${workerBaseUrl}'};importScripts('${scriptPath}');/*${label}*/`;\r\n// \t\t\tconst url = `data:text/javascript;charset=utf-8,${encodeURIComponent(js)}`;\r\n// \t\t\treturn url;\r\n// \t\t}\r\n// \t}\r\n// \treturn scriptPath + '#' + label;\r\n// }\r\n// ESM-comment-end\r\nfunction isPromiseLike(obj) {\r\n    if (typeof obj.then === 'function') {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * A worker that uses HTML5 web workers so that is has\r\n * its own global scope and its own thread.\r\n */\r\nvar WebWorker = /** @class */ (function () {\r\n    function WebWorker(moduleId, id, label, onMessageCallback, onErrorCallback) {\r\n        this.id = id;\r\n        var workerOrPromise = getWorker('workerMain.js', label);\r\n        if (isPromiseLike(workerOrPromise)) {\r\n            this.worker = workerOrPromise;\r\n        }\r\n        else {\r\n            this.worker = Promise.resolve(workerOrPromise);\r\n        }\r\n        this.postMessage(moduleId, []);\r\n        this.worker.then(function (w) {\r\n            w.onmessage = function (ev) {\r\n                onMessageCallback(ev.data);\r\n            };\r\n            w.onmessageerror = onErrorCallback;\r\n            if (typeof w.addEventListener === 'function') {\r\n                w.addEventListener('error', onErrorCallback);\r\n            }\r\n        });\r\n    }\r\n    WebWorker.prototype.getId = function () {\r\n        return this.id;\r\n    };\r\n    WebWorker.prototype.postMessage = function (message, transfer) {\r\n        if (this.worker) {\r\n            this.worker.then(function (w) { return w.postMessage(message, transfer); });\r\n        }\r\n    };\r\n    WebWorker.prototype.dispose = function () {\r\n        if (this.worker) {\r\n            this.worker.then(function (w) { return w.terminate(); });\r\n        }\r\n        this.worker = null;\r\n    };\r\n    return WebWorker;\r\n}());\r\nvar DefaultWorkerFactory = /** @class */ (function () {\r\n    function DefaultWorkerFactory(label) {\r\n        this._label = label;\r\n        this._webWorkerFailedBeforeError = false;\r\n    }\r\n    DefaultWorkerFactory.prototype.create = function (moduleId, onMessageCallback, onErrorCallback) {\r\n        var _this = this;\r\n        var workerId = (++DefaultWorkerFactory.LAST_WORKER_ID);\r\n        if (this._webWorkerFailedBeforeError) {\r\n            throw this._webWorkerFailedBeforeError;\r\n        }\r\n        return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, function (err) {\r\n            logOnceWebWorkerWarning(err);\r\n            _this._webWorkerFailedBeforeError = err;\r\n            onErrorCallback(err);\r\n        });\r\n    };\r\n    DefaultWorkerFactory.LAST_WORKER_ID = 0;\r\n    return DefaultWorkerFactory;\r\n}());\r\nexport { DefaultWorkerFactory };\r\n"]},"metadata":{},"sourceType":"module"}