{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\n\nvar BracketElectricCharacterSupport =\n/** @class */\nfunction () {\n  function BracketElectricCharacterSupport(richEditBrackets) {\n    this._richEditBrackets = richEditBrackets;\n  }\n\n  BracketElectricCharacterSupport.prototype.getElectricCharacters = function () {\n    var result = [];\n\n    if (this._richEditBrackets) {\n      for (var _i = 0, _a = this._richEditBrackets.brackets; _i < _a.length; _i++) {\n        var bracket = _a[_i];\n\n        for (var _b = 0, _c = bracket.close; _b < _c.length; _b++) {\n          var close_1 = _c[_b];\n          var lastChar = close_1.charAt(close_1.length - 1);\n          result.push(lastChar);\n        }\n      }\n    } // Filter duplicate entries\n\n\n    result = result.filter(function (item, pos, array) {\n      return array.indexOf(item) === pos;\n    });\n    return result;\n  };\n\n  BracketElectricCharacterSupport.prototype.onElectricCharacter = function (character, context, column) {\n    if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n      return null;\n    }\n\n    var tokenIndex = context.findTokenIndexAtOffset(column - 1);\n\n    if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n      return null;\n    }\n\n    var reversedBracketRegex = this._richEditBrackets.reversedRegex;\n    var text = context.getLineContent().substring(0, column - 1) + character;\n    var r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\n\n    if (!r) {\n      return null;\n    }\n\n    var bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n    var isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n\n    if (isOpen) {\n      return null;\n    }\n\n    var textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\n\n    if (!/^\\s*$/.test(textBeforeBracket)) {\n      // There is other text on the line before the bracket\n      return null;\n    }\n\n    return {\n      matchOpenBracket: bracketText\n    };\n  };\n\n  return BracketElectricCharacterSupport;\n}();\n\nexport { BracketElectricCharacterSupport };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/modes/supports/electricCharacter.js"],"names":["ignoreBracketsInToken","BracketsUtils","BracketElectricCharacterSupport","richEditBrackets","_richEditBrackets","prototype","getElectricCharacters","result","_i","_a","brackets","length","bracket","_b","_c","close","close_1","lastChar","charAt","push","filter","item","pos","array","indexOf","onElectricCharacter","character","context","column","tokenIndex","findTokenIndexAtOffset","getStandardTokenType","reversedBracketRegex","reversedRegex","text","getLineContent","substring","r","findPrevBracketInRange","bracketText","startColumn","endColumn","toLowerCase","isOpen","textIsOpenBracket","textBeforeBracket","getActualLineContentBefore","test","matchOpenBracket"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { ignoreBracketsInToken } from '../supports.js';\r\nimport { BracketsUtils } from './richEditBrackets.js';\r\nvar BracketElectricCharacterSupport = /** @class */ (function () {\r\n    function BracketElectricCharacterSupport(richEditBrackets) {\r\n        this._richEditBrackets = richEditBrackets;\r\n    }\r\n    BracketElectricCharacterSupport.prototype.getElectricCharacters = function () {\r\n        var result = [];\r\n        if (this._richEditBrackets) {\r\n            for (var _i = 0, _a = this._richEditBrackets.brackets; _i < _a.length; _i++) {\r\n                var bracket = _a[_i];\r\n                for (var _b = 0, _c = bracket.close; _b < _c.length; _b++) {\r\n                    var close_1 = _c[_b];\r\n                    var lastChar = close_1.charAt(close_1.length - 1);\r\n                    result.push(lastChar);\r\n                }\r\n            }\r\n        }\r\n        // Filter duplicate entries\r\n        result = result.filter(function (item, pos, array) {\r\n            return array.indexOf(item) === pos;\r\n        });\r\n        return result;\r\n    };\r\n    BracketElectricCharacterSupport.prototype.onElectricCharacter = function (character, context, column) {\r\n        if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\r\n            return null;\r\n        }\r\n        var tokenIndex = context.findTokenIndexAtOffset(column - 1);\r\n        if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\r\n            return null;\r\n        }\r\n        var reversedBracketRegex = this._richEditBrackets.reversedRegex;\r\n        var text = context.getLineContent().substring(0, column - 1) + character;\r\n        var r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\r\n        if (!r) {\r\n            return null;\r\n        }\r\n        var bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\r\n        var isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\r\n        if (isOpen) {\r\n            return null;\r\n        }\r\n        var textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\r\n        if (!/^\\s*$/.test(textBeforeBracket)) {\r\n            // There is other text on the line before the bracket\r\n            return null;\r\n        }\r\n        return {\r\n            matchOpenBracket: bracketText\r\n        };\r\n    };\r\n    return BracketElectricCharacterSupport;\r\n}());\r\nexport { BracketElectricCharacterSupport };\r\n"]},"metadata":{},"sourceType":"module"}