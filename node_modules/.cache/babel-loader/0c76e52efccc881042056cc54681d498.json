{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { ReplaceCommand } from '../commands/replaceCommand.js';\nimport { CursorColumns, EditOperationResult, isQuote } from './cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { Range } from '../core/range.js';\n\nvar DeleteOperations =\n/** @class */\nfunction () {\n  function DeleteOperations() {}\n\n  DeleteOperations.deleteRight = function (prevEditOperationType, config, model, selections) {\n    var commands = [];\n    var shouldPushStackElementBefore = prevEditOperationType !== 3\n    /* DeletingRight */\n    ;\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      var deleteSelection = selection;\n\n      if (deleteSelection.isEmpty()) {\n        var position = selection.getPosition();\n        var rightOfPosition = MoveOperations.right(config, model, position.lineNumber, position.column);\n        deleteSelection = new Range(rightOfPosition.lineNumber, rightOfPosition.column, position.lineNumber, position.column);\n      }\n\n      if (deleteSelection.isEmpty()) {\n        // Probably at end of file => ignore\n        commands[i] = null;\n        continue;\n      }\n\n      if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n        shouldPushStackElementBefore = true;\n      }\n\n      commands[i] = new ReplaceCommand(deleteSelection, '');\n    }\n\n    return [shouldPushStackElementBefore, commands];\n  };\n\n  DeleteOperations._isAutoClosingPairDelete = function (config, model, selections) {\n    if (config.autoClosingBrackets === 'never' && config.autoClosingQuotes === 'never') {\n      return false;\n    }\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      var position = selection.getPosition();\n\n      if (!selection.isEmpty()) {\n        return false;\n      }\n\n      var lineText = model.getLineContent(position.lineNumber);\n      var character = lineText[position.column - 2];\n      var autoClosingPairCandidates = config.autoClosingPairsOpen2.get(character);\n\n      if (!autoClosingPairCandidates) {\n        return false;\n      }\n\n      if (isQuote(character)) {\n        if (config.autoClosingQuotes === 'never') {\n          return false;\n        }\n      } else {\n        if (config.autoClosingBrackets === 'never') {\n          return false;\n        }\n      }\n\n      var afterCharacter = lineText[position.column - 1];\n      var foundAutoClosingPair = false;\n\n      for (var _i = 0, autoClosingPairCandidates_1 = autoClosingPairCandidates; _i < autoClosingPairCandidates_1.length; _i++) {\n        var autoClosingPairCandidate = autoClosingPairCandidates_1[_i];\n\n        if (autoClosingPairCandidate.open === character && autoClosingPairCandidate.close === afterCharacter) {\n          foundAutoClosingPair = true;\n        }\n      }\n\n      if (!foundAutoClosingPair) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  DeleteOperations._runAutoClosingPairDelete = function (config, model, selections) {\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var position = selections[i].getPosition();\n      var deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\n      commands[i] = new ReplaceCommand(deleteSelection, '');\n    }\n\n    return [true, commands];\n  };\n\n  DeleteOperations.deleteLeft = function (prevEditOperationType, config, model, selections) {\n    if (this._isAutoClosingPairDelete(config, model, selections)) {\n      return this._runAutoClosingPairDelete(config, model, selections);\n    }\n\n    var commands = [];\n    var shouldPushStackElementBefore = prevEditOperationType !== 2\n    /* DeletingLeft */\n    ;\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      var deleteSelection = selection;\n\n      if (deleteSelection.isEmpty()) {\n        var position = selection.getPosition();\n\n        if (config.useTabStops && position.column > 1) {\n          var lineContent = model.getLineContent(position.lineNumber);\n          var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n          var lastIndentationColumn = firstNonWhitespaceIndex === -1 ?\n          /* entire string is whitespace */\n          lineContent.length + 1 : firstNonWhitespaceIndex + 1;\n\n          if (position.column <= lastIndentationColumn) {\n            var fromVisibleColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\n            var toVisibleColumn = CursorColumns.prevIndentTabStop(fromVisibleColumn, config.indentSize);\n            var toColumn = CursorColumns.columnFromVisibleColumn2(config, model, position.lineNumber, toVisibleColumn);\n            deleteSelection = new Range(position.lineNumber, toColumn, position.lineNumber, position.column);\n          } else {\n            deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column);\n          }\n        } else {\n          var leftOfPosition = MoveOperations.left(config, model, position.lineNumber, position.column);\n          deleteSelection = new Range(leftOfPosition.lineNumber, leftOfPosition.column, position.lineNumber, position.column);\n        }\n      }\n\n      if (deleteSelection.isEmpty()) {\n        // Probably at beginning of file => ignore\n        commands[i] = null;\n        continue;\n      }\n\n      if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n        shouldPushStackElementBefore = true;\n      }\n\n      commands[i] = new ReplaceCommand(deleteSelection, '');\n    }\n\n    return [shouldPushStackElementBefore, commands];\n  };\n\n  DeleteOperations.cut = function (config, model, selections) {\n    var commands = [];\n\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n\n      if (selection.isEmpty()) {\n        if (config.emptySelectionClipboard) {\n          // This is a full line cut\n          var position = selection.getPosition();\n          var startLineNumber = void 0,\n              startColumn = void 0,\n              endLineNumber = void 0,\n              endColumn = void 0;\n\n          if (position.lineNumber < model.getLineCount()) {\n            // Cutting a line in the middle of the model\n            startLineNumber = position.lineNumber;\n            startColumn = 1;\n            endLineNumber = position.lineNumber + 1;\n            endColumn = 1;\n          } else if (position.lineNumber > 1) {\n            // Cutting the last line & there are more than 1 lines in the model\n            startLineNumber = position.lineNumber - 1;\n            startColumn = model.getLineMaxColumn(position.lineNumber - 1);\n            endLineNumber = position.lineNumber;\n            endColumn = model.getLineMaxColumn(position.lineNumber);\n          } else {\n            // Cutting the single line that the model contains\n            startLineNumber = position.lineNumber;\n            startColumn = 1;\n            endLineNumber = position.lineNumber;\n            endColumn = model.getLineMaxColumn(position.lineNumber);\n          }\n\n          var deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\n          if (!deleteSelection.isEmpty()) {\n            commands[i] = new ReplaceCommand(deleteSelection, '');\n          } else {\n            commands[i] = null;\n          }\n        } else {\n          // Cannot cut empty selection\n          commands[i] = null;\n        }\n      } else {\n        commands[i] = new ReplaceCommand(selection, '');\n      }\n    }\n\n    return new EditOperationResult(0\n    /* Other */\n    , commands, {\n      shouldPushStackElementBefore: true,\n      shouldPushStackElementAfter: true\n    });\n  };\n\n  return DeleteOperations;\n}();\n\nexport { DeleteOperations };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorDeleteOperations.js"],"names":["strings","ReplaceCommand","CursorColumns","EditOperationResult","isQuote","MoveOperations","Range","DeleteOperations","deleteRight","prevEditOperationType","config","model","selections","commands","shouldPushStackElementBefore","i","len","length","selection","deleteSelection","isEmpty","position","getPosition","rightOfPosition","right","lineNumber","column","startLineNumber","endLineNumber","_isAutoClosingPairDelete","autoClosingBrackets","autoClosingQuotes","lineText","getLineContent","character","autoClosingPairCandidates","autoClosingPairsOpen2","get","afterCharacter","foundAutoClosingPair","_i","autoClosingPairCandidates_1","autoClosingPairCandidate","open","close","_runAutoClosingPairDelete","deleteLeft","useTabStops","lineContent","firstNonWhitespaceIndex","lastIndentationColumn","fromVisibleColumn","visibleColumnFromColumn2","toVisibleColumn","prevIndentTabStop","indentSize","toColumn","columnFromVisibleColumn2","leftOfPosition","left","cut","emptySelectionClipboard","startColumn","endColumn","getLineCount","getLineMaxColumn","shouldPushStackElementAfter"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { ReplaceCommand } from '../commands/replaceCommand.js';\r\nimport { CursorColumns, EditOperationResult, isQuote } from './cursorCommon.js';\r\nimport { MoveOperations } from './cursorMoveOperations.js';\r\nimport { Range } from '../core/range.js';\r\nvar DeleteOperations = /** @class */ (function () {\r\n    function DeleteOperations() {\r\n    }\r\n    DeleteOperations.deleteRight = function (prevEditOperationType, config, model, selections) {\r\n        var commands = [];\r\n        var shouldPushStackElementBefore = (prevEditOperationType !== 3 /* DeletingRight */);\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var deleteSelection = selection;\r\n            if (deleteSelection.isEmpty()) {\r\n                var position = selection.getPosition();\r\n                var rightOfPosition = MoveOperations.right(config, model, position.lineNumber, position.column);\r\n                deleteSelection = new Range(rightOfPosition.lineNumber, rightOfPosition.column, position.lineNumber, position.column);\r\n            }\r\n            if (deleteSelection.isEmpty()) {\r\n                // Probably at end of file => ignore\r\n                commands[i] = null;\r\n                continue;\r\n            }\r\n            if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\r\n                shouldPushStackElementBefore = true;\r\n            }\r\n            commands[i] = new ReplaceCommand(deleteSelection, '');\r\n        }\r\n        return [shouldPushStackElementBefore, commands];\r\n    };\r\n    DeleteOperations._isAutoClosingPairDelete = function (config, model, selections) {\r\n        if (config.autoClosingBrackets === 'never' && config.autoClosingQuotes === 'never') {\r\n            return false;\r\n        }\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var position = selection.getPosition();\r\n            if (!selection.isEmpty()) {\r\n                return false;\r\n            }\r\n            var lineText = model.getLineContent(position.lineNumber);\r\n            var character = lineText[position.column - 2];\r\n            var autoClosingPairCandidates = config.autoClosingPairsOpen2.get(character);\r\n            if (!autoClosingPairCandidates) {\r\n                return false;\r\n            }\r\n            if (isQuote(character)) {\r\n                if (config.autoClosingQuotes === 'never') {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                if (config.autoClosingBrackets === 'never') {\r\n                    return false;\r\n                }\r\n            }\r\n            var afterCharacter = lineText[position.column - 1];\r\n            var foundAutoClosingPair = false;\r\n            for (var _i = 0, autoClosingPairCandidates_1 = autoClosingPairCandidates; _i < autoClosingPairCandidates_1.length; _i++) {\r\n                var autoClosingPairCandidate = autoClosingPairCandidates_1[_i];\r\n                if (autoClosingPairCandidate.open === character && autoClosingPairCandidate.close === afterCharacter) {\r\n                    foundAutoClosingPair = true;\r\n                }\r\n            }\r\n            if (!foundAutoClosingPair) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    DeleteOperations._runAutoClosingPairDelete = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var position = selections[i].getPosition();\r\n            var deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\r\n            commands[i] = new ReplaceCommand(deleteSelection, '');\r\n        }\r\n        return [true, commands];\r\n    };\r\n    DeleteOperations.deleteLeft = function (prevEditOperationType, config, model, selections) {\r\n        if (this._isAutoClosingPairDelete(config, model, selections)) {\r\n            return this._runAutoClosingPairDelete(config, model, selections);\r\n        }\r\n        var commands = [];\r\n        var shouldPushStackElementBefore = (prevEditOperationType !== 2 /* DeletingLeft */);\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var deleteSelection = selection;\r\n            if (deleteSelection.isEmpty()) {\r\n                var position = selection.getPosition();\r\n                if (config.useTabStops && position.column > 1) {\r\n                    var lineContent = model.getLineContent(position.lineNumber);\r\n                    var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\r\n                    var lastIndentationColumn = (firstNonWhitespaceIndex === -1\r\n                        ? /* entire string is whitespace */ lineContent.length + 1\r\n                        : firstNonWhitespaceIndex + 1);\r\n                    if (position.column <= lastIndentationColumn) {\r\n                        var fromVisibleColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\r\n                        var toVisibleColumn = CursorColumns.prevIndentTabStop(fromVisibleColumn, config.indentSize);\r\n                        var toColumn = CursorColumns.columnFromVisibleColumn2(config, model, position.lineNumber, toVisibleColumn);\r\n                        deleteSelection = new Range(position.lineNumber, toColumn, position.lineNumber, position.column);\r\n                    }\r\n                    else {\r\n                        deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column);\r\n                    }\r\n                }\r\n                else {\r\n                    var leftOfPosition = MoveOperations.left(config, model, position.lineNumber, position.column);\r\n                    deleteSelection = new Range(leftOfPosition.lineNumber, leftOfPosition.column, position.lineNumber, position.column);\r\n                }\r\n            }\r\n            if (deleteSelection.isEmpty()) {\r\n                // Probably at beginning of file => ignore\r\n                commands[i] = null;\r\n                continue;\r\n            }\r\n            if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\r\n                shouldPushStackElementBefore = true;\r\n            }\r\n            commands[i] = new ReplaceCommand(deleteSelection, '');\r\n        }\r\n        return [shouldPushStackElementBefore, commands];\r\n    };\r\n    DeleteOperations.cut = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (selection.isEmpty()) {\r\n                if (config.emptySelectionClipboard) {\r\n                    // This is a full line cut\r\n                    var position = selection.getPosition();\r\n                    var startLineNumber = void 0, startColumn = void 0, endLineNumber = void 0, endColumn = void 0;\r\n                    if (position.lineNumber < model.getLineCount()) {\r\n                        // Cutting a line in the middle of the model\r\n                        startLineNumber = position.lineNumber;\r\n                        startColumn = 1;\r\n                        endLineNumber = position.lineNumber + 1;\r\n                        endColumn = 1;\r\n                    }\r\n                    else if (position.lineNumber > 1) {\r\n                        // Cutting the last line & there are more than 1 lines in the model\r\n                        startLineNumber = position.lineNumber - 1;\r\n                        startColumn = model.getLineMaxColumn(position.lineNumber - 1);\r\n                        endLineNumber = position.lineNumber;\r\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\r\n                    }\r\n                    else {\r\n                        // Cutting the single line that the model contains\r\n                        startLineNumber = position.lineNumber;\r\n                        startColumn = 1;\r\n                        endLineNumber = position.lineNumber;\r\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\r\n                    }\r\n                    var deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n                    if (!deleteSelection.isEmpty()) {\r\n                        commands[i] = new ReplaceCommand(deleteSelection, '');\r\n                    }\r\n                    else {\r\n                        commands[i] = null;\r\n                    }\r\n                }\r\n                else {\r\n                    // Cannot cut empty selection\r\n                    commands[i] = null;\r\n                }\r\n            }\r\n            else {\r\n                commands[i] = new ReplaceCommand(selection, '');\r\n            }\r\n        }\r\n        return new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: true\r\n        });\r\n    };\r\n    return DeleteOperations;\r\n}());\r\nexport { DeleteOperations };\r\n"]},"metadata":{},"sourceType":"module"}