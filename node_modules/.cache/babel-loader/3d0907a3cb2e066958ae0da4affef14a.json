{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\n\nvar PendingChanges =\n/** @class */\nfunction () {\n  function PendingChanges() {\n    this._hasPending = false;\n    this._inserts = [];\n    this._changes = [];\n    this._removes = [];\n  }\n\n  PendingChanges.prototype.insert = function (x) {\n    this._hasPending = true;\n\n    this._inserts.push(x);\n  };\n\n  PendingChanges.prototype.change = function (x) {\n    this._hasPending = true;\n\n    this._changes.push(x);\n  };\n\n  PendingChanges.prototype.remove = function (x) {\n    this._hasPending = true;\n\n    this._removes.push(x);\n  };\n\n  PendingChanges.prototype.mustCommit = function () {\n    return this._hasPending;\n  };\n\n  PendingChanges.prototype.commit = function (linesLayout) {\n    if (!this._hasPending) {\n      return;\n    }\n\n    var inserts = this._inserts;\n    var changes = this._changes;\n    var removes = this._removes;\n    this._hasPending = false;\n    this._inserts = [];\n    this._changes = [];\n    this._removes = [];\n\n    linesLayout._commitPendingChanges(inserts, changes, removes);\n  };\n\n  return PendingChanges;\n}();\n\nvar EditorWhitespace =\n/** @class */\nfunction () {\n  function EditorWhitespace(id, afterLineNumber, ordinal, height, minWidth) {\n    this.id = id;\n    this.afterLineNumber = afterLineNumber;\n    this.ordinal = ordinal;\n    this.height = height;\n    this.minWidth = minWidth;\n    this.prefixSum = 0;\n  }\n\n  return EditorWhitespace;\n}();\n\nexport { EditorWhitespace };\n/**\r\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\r\n *\r\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\r\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\r\n */\n\nvar LinesLayout =\n/** @class */\nfunction () {\n  function LinesLayout(lineCount, lineHeight) {\n    this._instanceId = strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT);\n    this._pendingChanges = new PendingChanges();\n    this._lastWhitespaceId = 0;\n    this._arr = [];\n    this._prefixSumValidIndex = -1;\n    this._minWidth = -1;\n    /* marker for not being computed */\n\n    this._lineCount = lineCount;\n    this._lineHeight = lineHeight;\n  }\n  /**\r\n   * Find the insertion index for a new value inside a sorted array of values.\r\n   * If the value is already present in the sorted array, the insertion index will be after the already existing value.\r\n   */\n\n\n  LinesLayout.findInsertionIndex = function (arr, afterLineNumber, ordinal) {\n    var low = 0;\n    var high = arr.length;\n\n    while (low < high) {\n      var mid = low + high >>> 1;\n\n      if (afterLineNumber === arr[mid].afterLineNumber) {\n        if (ordinal < arr[mid].ordinal) {\n          high = mid;\n        } else {\n          low = mid + 1;\n        }\n      } else if (afterLineNumber < arr[mid].afterLineNumber) {\n        high = mid;\n      } else {\n        low = mid + 1;\n      }\n    }\n\n    return low;\n  };\n  /**\r\n   * Change the height of a line in pixels.\r\n   */\n\n\n  LinesLayout.prototype.setLineHeight = function (lineHeight) {\n    this._checkPendingChanges();\n\n    this._lineHeight = lineHeight;\n  };\n  /**\r\n   * Set the number of lines.\r\n   *\r\n   * @param lineCount New number of lines.\r\n   */\n\n\n  LinesLayout.prototype.onFlushed = function (lineCount) {\n    this._checkPendingChanges();\n\n    this._lineCount = lineCount;\n  };\n\n  LinesLayout.prototype.changeWhitespace = function (callback) {\n    var _this = this;\n\n    try {\n      var accessor = {\n        insertWhitespace: function (afterLineNumber, ordinal, heightInPx, minWidth) {\n          afterLineNumber = afterLineNumber | 0;\n          ordinal = ordinal | 0;\n          heightInPx = heightInPx | 0;\n          minWidth = minWidth | 0;\n          var id = _this._instanceId + ++_this._lastWhitespaceId;\n\n          _this._pendingChanges.insert(new EditorWhitespace(id, afterLineNumber, ordinal, heightInPx, minWidth));\n\n          return id;\n        },\n        changeOneWhitespace: function (id, newAfterLineNumber, newHeight) {\n          newAfterLineNumber = newAfterLineNumber | 0;\n          newHeight = newHeight | 0;\n\n          _this._pendingChanges.change({\n            id: id,\n            newAfterLineNumber: newAfterLineNumber,\n            newHeight: newHeight\n          });\n        },\n        removeWhitespace: function (id) {\n          _this._pendingChanges.remove({\n            id: id\n          });\n        }\n      };\n      return callback(accessor);\n    } finally {\n      this._pendingChanges.commit(this);\n    }\n  };\n\n  LinesLayout.prototype._commitPendingChanges = function (inserts, changes, removes) {\n    if (inserts.length > 0 || removes.length > 0) {\n      this._minWidth = -1;\n      /* marker for not being computed */\n    }\n\n    if (inserts.length + changes.length + removes.length <= 1) {\n      // when only one thing happened, handle it \"delicately\"\n      for (var _i = 0, inserts_1 = inserts; _i < inserts_1.length; _i++) {\n        var insert = inserts_1[_i];\n\n        this._insertWhitespace(insert);\n      }\n\n      for (var _a = 0, changes_1 = changes; _a < changes_1.length; _a++) {\n        var change = changes_1[_a];\n\n        this._changeOneWhitespace(change.id, change.newAfterLineNumber, change.newHeight);\n      }\n\n      for (var _b = 0, removes_1 = removes; _b < removes_1.length; _b++) {\n        var remove = removes_1[_b];\n\n        var index = this._findWhitespaceIndex(remove.id);\n\n        if (index === -1) {\n          continue;\n        }\n\n        this._removeWhitespace(index);\n      }\n\n      return;\n    } // simply rebuild the entire datastructure\n\n\n    var toRemove = new Set();\n\n    for (var _c = 0, removes_2 = removes; _c < removes_2.length; _c++) {\n      var remove = removes_2[_c];\n      toRemove.add(remove.id);\n    }\n\n    var toChange = new Map();\n\n    for (var _d = 0, changes_2 = changes; _d < changes_2.length; _d++) {\n      var change = changes_2[_d];\n      toChange.set(change.id, change);\n    }\n\n    var applyRemoveAndChange = function (whitespaces) {\n      var result = [];\n\n      for (var _i = 0, whitespaces_1 = whitespaces; _i < whitespaces_1.length; _i++) {\n        var whitespace = whitespaces_1[_i];\n\n        if (toRemove.has(whitespace.id)) {\n          continue;\n        }\n\n        if (toChange.has(whitespace.id)) {\n          var change = toChange.get(whitespace.id);\n          whitespace.afterLineNumber = change.newAfterLineNumber;\n          whitespace.height = change.newHeight;\n        }\n\n        result.push(whitespace);\n      }\n\n      return result;\n    };\n\n    var result = applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));\n    result.sort(function (a, b) {\n      if (a.afterLineNumber === b.afterLineNumber) {\n        return a.ordinal - b.ordinal;\n      }\n\n      return a.afterLineNumber - b.afterLineNumber;\n    });\n    this._arr = result;\n    this._prefixSumValidIndex = -1;\n  };\n\n  LinesLayout.prototype._checkPendingChanges = function () {\n    if (this._pendingChanges.mustCommit()) {\n      this._pendingChanges.commit(this);\n    }\n  };\n\n  LinesLayout.prototype._insertWhitespace = function (whitespace) {\n    var insertIndex = LinesLayout.findInsertionIndex(this._arr, whitespace.afterLineNumber, whitespace.ordinal);\n\n    this._arr.splice(insertIndex, 0, whitespace);\n\n    this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, insertIndex - 1);\n  };\n\n  LinesLayout.prototype._findWhitespaceIndex = function (id) {\n    var arr = this._arr;\n\n    for (var i = 0, len = arr.length; i < len; i++) {\n      if (arr[i].id === id) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  LinesLayout.prototype._changeOneWhitespace = function (id, newAfterLineNumber, newHeight) {\n    var index = this._findWhitespaceIndex(id);\n\n    if (index === -1) {\n      return;\n    }\n\n    if (this._arr[index].height !== newHeight) {\n      this._arr[index].height = newHeight;\n      this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, index - 1);\n    }\n\n    if (this._arr[index].afterLineNumber !== newAfterLineNumber) {\n      // `afterLineNumber` changed for this whitespace\n      // Record old whitespace\n      var whitespace = this._arr[index]; // Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\n\n      this._removeWhitespace(index);\n\n      whitespace.afterLineNumber = newAfterLineNumber; // And add it again\n\n      this._insertWhitespace(whitespace);\n    }\n  };\n\n  LinesLayout.prototype._removeWhitespace = function (removeIndex) {\n    this._arr.splice(removeIndex, 1);\n\n    this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, removeIndex - 1);\n  };\n  /**\r\n   * Notify the layouter that lines have been deleted (a continuous zone of lines).\r\n   *\r\n   * @param fromLineNumber The line number at which the deletion started, inclusive\r\n   * @param toLineNumber The line number at which the deletion ended, inclusive\r\n   */\n\n\n  LinesLayout.prototype.onLinesDeleted = function (fromLineNumber, toLineNumber) {\n    this._checkPendingChanges();\n\n    fromLineNumber = fromLineNumber | 0;\n    toLineNumber = toLineNumber | 0;\n    this._lineCount -= toLineNumber - fromLineNumber + 1;\n\n    for (var i = 0, len = this._arr.length; i < len; i++) {\n      var afterLineNumber = this._arr[i].afterLineNumber;\n\n      if (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\n        // The line this whitespace was after has been deleted\n        //  => move whitespace to before first deleted line\n        this._arr[i].afterLineNumber = fromLineNumber - 1;\n      } else if (afterLineNumber > toLineNumber) {\n        // The line this whitespace was after has been moved up\n        //  => move whitespace up\n        this._arr[i].afterLineNumber -= toLineNumber - fromLineNumber + 1;\n      }\n    }\n  };\n  /**\r\n   * Notify the layouter that lines have been inserted (a continuous zone of lines).\r\n   *\r\n   * @param fromLineNumber The line number at which the insertion started, inclusive\r\n   * @param toLineNumber The line number at which the insertion ended, inclusive.\r\n   */\n\n\n  LinesLayout.prototype.onLinesInserted = function (fromLineNumber, toLineNumber) {\n    this._checkPendingChanges();\n\n    fromLineNumber = fromLineNumber | 0;\n    toLineNumber = toLineNumber | 0;\n    this._lineCount += toLineNumber - fromLineNumber + 1;\n\n    for (var i = 0, len = this._arr.length; i < len; i++) {\n      var afterLineNumber = this._arr[i].afterLineNumber;\n\n      if (fromLineNumber <= afterLineNumber) {\n        this._arr[i].afterLineNumber += toLineNumber - fromLineNumber + 1;\n      }\n    }\n  };\n  /**\r\n   * Get the sum of all the whitespaces.\r\n   */\n\n\n  LinesLayout.prototype.getWhitespacesTotalHeight = function () {\n    this._checkPendingChanges();\n\n    if (this._arr.length === 0) {\n      return 0;\n    }\n\n    return this.getWhitespacesAccumulatedHeight(this._arr.length - 1);\n  };\n  /**\r\n   * Return the sum of the heights of the whitespaces at [0..index].\r\n   * This includes the whitespace at `index`.\r\n   *\r\n   * @param index The index of the whitespace.\r\n   * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\r\n   */\n\n\n  LinesLayout.prototype.getWhitespacesAccumulatedHeight = function (index) {\n    this._checkPendingChanges();\n\n    index = index | 0;\n    var startIndex = Math.max(0, this._prefixSumValidIndex + 1);\n\n    if (startIndex === 0) {\n      this._arr[0].prefixSum = this._arr[0].height;\n      startIndex++;\n    }\n\n    for (var i = startIndex; i <= index; i++) {\n      this._arr[i].prefixSum = this._arr[i - 1].prefixSum + this._arr[i].height;\n    }\n\n    this._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, index);\n    return this._arr[index].prefixSum;\n  };\n  /**\r\n   * Get the sum of heights for all objects.\r\n   *\r\n   * @return The sum of heights for all objects.\r\n   */\n\n\n  LinesLayout.prototype.getLinesTotalHeight = function () {\n    this._checkPendingChanges();\n\n    var linesHeight = this._lineHeight * this._lineCount;\n    var whitespacesHeight = this.getWhitespacesTotalHeight();\n    return linesHeight + whitespacesHeight;\n  };\n  /**\r\n   * Returns the accumulated height of whitespaces before the given line number.\r\n   *\r\n   * @param lineNumber The line number\r\n   */\n\n\n  LinesLayout.prototype.getWhitespaceAccumulatedHeightBeforeLineNumber = function (lineNumber) {\n    this._checkPendingChanges();\n\n    lineNumber = lineNumber | 0;\n\n    var lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n\n    if (lastWhitespaceBeforeLineNumber === -1) {\n      return 0;\n    }\n\n    return this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber);\n  };\n\n  LinesLayout.prototype._findLastWhitespaceBeforeLineNumber = function (lineNumber) {\n    lineNumber = lineNumber | 0; // Find the whitespace before line number\n\n    var arr = this._arr;\n    var low = 0;\n    var high = arr.length - 1;\n\n    while (low <= high) {\n      var delta = high - low | 0;\n      var halfDelta = delta / 2 | 0;\n      var mid = low + halfDelta | 0;\n\n      if (arr[mid].afterLineNumber < lineNumber) {\n        if (mid + 1 >= arr.length || arr[mid + 1].afterLineNumber >= lineNumber) {\n          return mid;\n        } else {\n          low = mid + 1 | 0;\n        }\n      } else {\n        high = mid - 1 | 0;\n      }\n    }\n\n    return -1;\n  };\n\n  LinesLayout.prototype._findFirstWhitespaceAfterLineNumber = function (lineNumber) {\n    lineNumber = lineNumber | 0;\n\n    var lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n\n    var firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\n\n    if (firstWhitespaceAfterLineNumber < this._arr.length) {\n      return firstWhitespaceAfterLineNumber;\n    }\n\n    return -1;\n  };\n  /**\r\n   * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\r\n   * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\r\n   */\n\n\n  LinesLayout.prototype.getFirstWhitespaceIndexAfterLineNumber = function (lineNumber) {\n    this._checkPendingChanges();\n\n    lineNumber = lineNumber | 0;\n    return this._findFirstWhitespaceAfterLineNumber(lineNumber);\n  };\n  /**\r\n   * Get the vertical offset (the sum of heights for all objects above) a certain line number.\r\n   *\r\n   * @param lineNumber The line number\r\n   * @return The sum of heights for all objects above `lineNumber`.\r\n   */\n\n\n  LinesLayout.prototype.getVerticalOffsetForLineNumber = function (lineNumber) {\n    this._checkPendingChanges();\n\n    lineNumber = lineNumber | 0;\n    var previousLinesHeight;\n\n    if (lineNumber > 1) {\n      previousLinesHeight = this._lineHeight * (lineNumber - 1);\n    } else {\n      previousLinesHeight = 0;\n    }\n\n    var previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber);\n    return previousLinesHeight + previousWhitespacesHeight;\n  };\n  /**\r\n   * The maximum min width for all whitespaces.\r\n   */\n\n\n  LinesLayout.prototype.getWhitespaceMinWidth = function () {\n    this._checkPendingChanges();\n\n    if (this._minWidth === -1) {\n      var minWidth = 0;\n\n      for (var i = 0, len = this._arr.length; i < len; i++) {\n        minWidth = Math.max(minWidth, this._arr[i].minWidth);\n      }\n\n      this._minWidth = minWidth;\n    }\n\n    return this._minWidth;\n  };\n  /**\r\n   * Check if `verticalOffset` is below all lines.\r\n   */\n\n\n  LinesLayout.prototype.isAfterLines = function (verticalOffset) {\n    this._checkPendingChanges();\n\n    var totalHeight = this.getLinesTotalHeight();\n    return verticalOffset > totalHeight;\n  };\n  /**\r\n   * Find the first line number that is at or after vertical offset `verticalOffset`.\r\n   * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\r\n   * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\r\n   *\r\n   * @param verticalOffset The vertical offset to search at.\r\n   * @return The line number at or after vertical offset `verticalOffset`.\r\n   */\n\n\n  LinesLayout.prototype.getLineNumberAtOrAfterVerticalOffset = function (verticalOffset) {\n    this._checkPendingChanges();\n\n    verticalOffset = verticalOffset | 0;\n\n    if (verticalOffset < 0) {\n      return 1;\n    }\n\n    var linesCount = this._lineCount | 0;\n    var lineHeight = this._lineHeight;\n    var minLineNumber = 1;\n    var maxLineNumber = linesCount;\n\n    while (minLineNumber < maxLineNumber) {\n      var midLineNumber = (minLineNumber + maxLineNumber) / 2 | 0;\n      var midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\n\n      if (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\n        // vertical offset is after mid line number\n        minLineNumber = midLineNumber + 1;\n      } else if (verticalOffset >= midLineNumberVerticalOffset) {\n        // Hit\n        return midLineNumber;\n      } else {\n        // vertical offset is before mid line number, but mid line number could still be what we're searching for\n        maxLineNumber = midLineNumber;\n      }\n    }\n\n    if (minLineNumber > linesCount) {\n      return linesCount;\n    }\n\n    return minLineNumber;\n  };\n  /**\r\n   * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\r\n   *\r\n   * @param verticalOffset1 The beginning of the viewport.\r\n   * @param verticalOffset2 The end of the viewport.\r\n   * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\r\n   */\n\n\n  LinesLayout.prototype.getLinesViewportData = function (verticalOffset1, verticalOffset2) {\n    this._checkPendingChanges();\n\n    verticalOffset1 = verticalOffset1 | 0;\n    verticalOffset2 = verticalOffset2 | 0;\n    var lineHeight = this._lineHeight; // Find first line number\n    // We don't live in a perfect world, so the line number might start before or after verticalOffset1\n\n    var startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\n    var startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\n    var endLineNumber = this._lineCount | 0; // Also keep track of what whitespace we've got\n\n    var whitespaceIndex = this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\n    var whitespaceCount = this.getWhitespacesCount() | 0;\n    var currentWhitespaceHeight;\n    var currentWhitespaceAfterLineNumber;\n\n    if (whitespaceIndex === -1) {\n      whitespaceIndex = whitespaceCount;\n      currentWhitespaceAfterLineNumber = endLineNumber + 1;\n      currentWhitespaceHeight = 0;\n    } else {\n      currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n      currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n    }\n\n    var currentVerticalOffset = startLineNumberVerticalOffset;\n    var currentLineRelativeOffset = currentVerticalOffset; // IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\n\n    var STEP_SIZE = 500000;\n    var bigNumbersDelta = 0;\n\n    if (startLineNumberVerticalOffset >= STEP_SIZE) {\n      // Compute a delta that guarantees that lines are positioned at `lineHeight` increments\n      bigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\n      bigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\n      currentLineRelativeOffset -= bigNumbersDelta;\n    }\n\n    var linesOffsets = [];\n    var verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\n    var centeredLineNumber = -1; // Figure out how far the lines go\n\n    for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      if (centeredLineNumber === -1) {\n        var currentLineTop = currentVerticalOffset;\n        var currentLineBottom = currentVerticalOffset + lineHeight;\n\n        if (currentLineTop <= verticalCenter && verticalCenter < currentLineBottom || currentLineTop > verticalCenter) {\n          centeredLineNumber = lineNumber;\n        }\n      } // Count current line height in the vertical offsets\n\n\n      currentVerticalOffset += lineHeight;\n      linesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset; // Next line starts immediately after this one\n\n      currentLineRelativeOffset += lineHeight;\n\n      while (currentWhitespaceAfterLineNumber === lineNumber) {\n        // Push down next line with the height of the current whitespace\n        currentLineRelativeOffset += currentWhitespaceHeight; // Count current whitespace in the vertical offsets\n\n        currentVerticalOffset += currentWhitespaceHeight;\n        whitespaceIndex++;\n\n        if (whitespaceIndex >= whitespaceCount) {\n          currentWhitespaceAfterLineNumber = endLineNumber + 1;\n        } else {\n          currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n          currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n        }\n      }\n\n      if (currentVerticalOffset >= verticalOffset2) {\n        // We have covered the entire viewport area, time to stop\n        endLineNumber = lineNumber;\n        break;\n      }\n    }\n\n    if (centeredLineNumber === -1) {\n      centeredLineNumber = endLineNumber;\n    }\n\n    var endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\n    var completelyVisibleStartLineNumber = startLineNumber;\n    var completelyVisibleEndLineNumber = endLineNumber;\n\n    if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n      if (startLineNumberVerticalOffset < verticalOffset1) {\n        completelyVisibleStartLineNumber++;\n      }\n    }\n\n    if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n      if (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\n        completelyVisibleEndLineNumber--;\n      }\n    }\n\n    return {\n      bigNumbersDelta: bigNumbersDelta,\n      startLineNumber: startLineNumber,\n      endLineNumber: endLineNumber,\n      relativeVerticalOffset: linesOffsets,\n      centeredLineNumber: centeredLineNumber,\n      completelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\n      completelyVisibleEndLineNumber: completelyVisibleEndLineNumber\n    };\n  };\n\n  LinesLayout.prototype.getVerticalOffsetForWhitespaceIndex = function (whitespaceIndex) {\n    this._checkPendingChanges();\n\n    whitespaceIndex = whitespaceIndex | 0;\n    var afterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\n    var previousLinesHeight;\n\n    if (afterLineNumber >= 1) {\n      previousLinesHeight = this._lineHeight * afterLineNumber;\n    } else {\n      previousLinesHeight = 0;\n    }\n\n    var previousWhitespacesHeight;\n\n    if (whitespaceIndex > 0) {\n      previousWhitespacesHeight = this.getWhitespacesAccumulatedHeight(whitespaceIndex - 1);\n    } else {\n      previousWhitespacesHeight = 0;\n    }\n\n    return previousLinesHeight + previousWhitespacesHeight;\n  };\n\n  LinesLayout.prototype.getWhitespaceIndexAtOrAfterVerticallOffset = function (verticalOffset) {\n    this._checkPendingChanges();\n\n    verticalOffset = verticalOffset | 0;\n    var minWhitespaceIndex = 0;\n    var maxWhitespaceIndex = this.getWhitespacesCount() - 1;\n\n    if (maxWhitespaceIndex < 0) {\n      return -1;\n    } // Special case: nothing to be found\n\n\n    var maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\n    var maxWhitespaceHeight = this.getHeightForWhitespaceIndex(maxWhitespaceIndex);\n\n    if (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\n      return -1;\n    }\n\n    while (minWhitespaceIndex < maxWhitespaceIndex) {\n      var midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\n      var midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\n      var midWhitespaceHeight = this.getHeightForWhitespaceIndex(midWhitespaceIndex);\n\n      if (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\n        // vertical offset is after whitespace\n        minWhitespaceIndex = midWhitespaceIndex + 1;\n      } else if (verticalOffset >= midWhitespaceVerticalOffset) {\n        // Hit\n        return midWhitespaceIndex;\n      } else {\n        // vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\n        maxWhitespaceIndex = midWhitespaceIndex;\n      }\n    }\n\n    return minWhitespaceIndex;\n  };\n  /**\r\n   * Get exactly the whitespace that is layouted at `verticalOffset`.\r\n   *\r\n   * @param verticalOffset The vertical offset.\r\n   * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\r\n   */\n\n\n  LinesLayout.prototype.getWhitespaceAtVerticalOffset = function (verticalOffset) {\n    this._checkPendingChanges();\n\n    verticalOffset = verticalOffset | 0;\n    var candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\n\n    if (candidateIndex < 0) {\n      return null;\n    }\n\n    if (candidateIndex >= this.getWhitespacesCount()) {\n      return null;\n    }\n\n    var candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\n\n    if (candidateTop > verticalOffset) {\n      return null;\n    }\n\n    var candidateHeight = this.getHeightForWhitespaceIndex(candidateIndex);\n    var candidateId = this.getIdForWhitespaceIndex(candidateIndex);\n    var candidateAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(candidateIndex);\n    return {\n      id: candidateId,\n      afterLineNumber: candidateAfterLineNumber,\n      verticalOffset: candidateTop,\n      height: candidateHeight\n    };\n  };\n  /**\r\n   * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\r\n   *\r\n   * @param verticalOffset1 The beginning of the viewport.\r\n   * @param verticalOffset2 The end of the viewport.\r\n   * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\r\n   */\n\n\n  LinesLayout.prototype.getWhitespaceViewportData = function (verticalOffset1, verticalOffset2) {\n    this._checkPendingChanges();\n\n    verticalOffset1 = verticalOffset1 | 0;\n    verticalOffset2 = verticalOffset2 | 0;\n    var startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\n    var endIndex = this.getWhitespacesCount() - 1;\n\n    if (startIndex < 0) {\n      return [];\n    }\n\n    var result = [];\n\n    for (var i = startIndex; i <= endIndex; i++) {\n      var top_1 = this.getVerticalOffsetForWhitespaceIndex(i);\n      var height = this.getHeightForWhitespaceIndex(i);\n\n      if (top_1 >= verticalOffset2) {\n        break;\n      }\n\n      result.push({\n        id: this.getIdForWhitespaceIndex(i),\n        afterLineNumber: this.getAfterLineNumberForWhitespaceIndex(i),\n        verticalOffset: top_1,\n        height: height\n      });\n    }\n\n    return result;\n  };\n  /**\r\n   * Get all whitespaces.\r\n   */\n\n\n  LinesLayout.prototype.getWhitespaces = function () {\n    this._checkPendingChanges();\n\n    return this._arr.slice(0);\n  };\n  /**\r\n   * The number of whitespaces.\r\n   */\n\n\n  LinesLayout.prototype.getWhitespacesCount = function () {\n    this._checkPendingChanges();\n\n    return this._arr.length;\n  };\n  /**\r\n   * Get the `id` for whitespace at index `index`.\r\n   *\r\n   * @param index The index of the whitespace.\r\n   * @return `id` of whitespace at `index`.\r\n   */\n\n\n  LinesLayout.prototype.getIdForWhitespaceIndex = function (index) {\n    this._checkPendingChanges();\n\n    index = index | 0;\n    return this._arr[index].id;\n  };\n  /**\r\n   * Get the `afterLineNumber` for whitespace at index `index`.\r\n   *\r\n   * @param index The index of the whitespace.\r\n   * @return `afterLineNumber` of whitespace at `index`.\r\n   */\n\n\n  LinesLayout.prototype.getAfterLineNumberForWhitespaceIndex = function (index) {\n    this._checkPendingChanges();\n\n    index = index | 0;\n    return this._arr[index].afterLineNumber;\n  };\n  /**\r\n   * Get the `height` for whitespace at index `index`.\r\n   *\r\n   * @param index The index of the whitespace.\r\n   * @return `height` of whitespace at `index`.\r\n   */\n\n\n  LinesLayout.prototype.getHeightForWhitespaceIndex = function (index) {\n    this._checkPendingChanges();\n\n    index = index | 0;\n    return this._arr[index].height;\n  };\n\n  LinesLayout.INSTANCE_COUNT = 0;\n  return LinesLayout;\n}();\n\nexport { LinesLayout };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linesLayout.js"],"names":["strings","PendingChanges","_hasPending","_inserts","_changes","_removes","prototype","insert","x","push","change","remove","mustCommit","commit","linesLayout","inserts","changes","removes","_commitPendingChanges","EditorWhitespace","id","afterLineNumber","ordinal","height","minWidth","prefixSum","LinesLayout","lineCount","lineHeight","_instanceId","singleLetterHash","INSTANCE_COUNT","_pendingChanges","_lastWhitespaceId","_arr","_prefixSumValidIndex","_minWidth","_lineCount","_lineHeight","findInsertionIndex","arr","low","high","length","mid","setLineHeight","_checkPendingChanges","onFlushed","changeWhitespace","callback","_this","accessor","insertWhitespace","heightInPx","changeOneWhitespace","newAfterLineNumber","newHeight","removeWhitespace","_i","inserts_1","_insertWhitespace","_a","changes_1","_changeOneWhitespace","_b","removes_1","index","_findWhitespaceIndex","_removeWhitespace","toRemove","Set","_c","removes_2","add","toChange","Map","_d","changes_2","set","applyRemoveAndChange","whitespaces","result","whitespaces_1","whitespace","has","get","concat","sort","a","b","insertIndex","splice","Math","min","i","len","removeIndex","onLinesDeleted","fromLineNumber","toLineNumber","onLinesInserted","getWhitespacesTotalHeight","getWhitespacesAccumulatedHeight","startIndex","max","getLinesTotalHeight","linesHeight","whitespacesHeight","getWhitespaceAccumulatedHeightBeforeLineNumber","lineNumber","lastWhitespaceBeforeLineNumber","_findLastWhitespaceBeforeLineNumber","delta","halfDelta","_findFirstWhitespaceAfterLineNumber","firstWhitespaceAfterLineNumber","getFirstWhitespaceIndexAfterLineNumber","getVerticalOffsetForLineNumber","previousLinesHeight","previousWhitespacesHeight","getWhitespaceMinWidth","isAfterLines","verticalOffset","totalHeight","getLineNumberAtOrAfterVerticalOffset","linesCount","minLineNumber","maxLineNumber","midLineNumber","midLineNumberVerticalOffset","getLinesViewportData","verticalOffset1","verticalOffset2","startLineNumber","startLineNumberVerticalOffset","endLineNumber","whitespaceIndex","whitespaceCount","getWhitespacesCount","currentWhitespaceHeight","currentWhitespaceAfterLineNumber","getAfterLineNumberForWhitespaceIndex","getHeightForWhitespaceIndex","currentVerticalOffset","currentLineRelativeOffset","STEP_SIZE","bigNumbersDelta","floor","linesOffsets","verticalCenter","centeredLineNumber","currentLineTop","currentLineBottom","endLineNumberVerticalOffset","completelyVisibleStartLineNumber","completelyVisibleEndLineNumber","relativeVerticalOffset","getVerticalOffsetForWhitespaceIndex","getWhitespaceIndexAtOrAfterVerticallOffset","minWhitespaceIndex","maxWhitespaceIndex","maxWhitespaceVerticalOffset","maxWhitespaceHeight","midWhitespaceIndex","midWhitespaceVerticalOffset","midWhitespaceHeight","getWhitespaceAtVerticalOffset","candidateIndex","candidateTop","candidateHeight","candidateId","getIdForWhitespaceIndex","candidateAfterLineNumber","getWhitespaceViewportData","endIndex","top_1","getWhitespaces","slice"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nvar PendingChanges = /** @class */ (function () {\r\n    function PendingChanges() {\r\n        this._hasPending = false;\r\n        this._inserts = [];\r\n        this._changes = [];\r\n        this._removes = [];\r\n    }\r\n    PendingChanges.prototype.insert = function (x) {\r\n        this._hasPending = true;\r\n        this._inserts.push(x);\r\n    };\r\n    PendingChanges.prototype.change = function (x) {\r\n        this._hasPending = true;\r\n        this._changes.push(x);\r\n    };\r\n    PendingChanges.prototype.remove = function (x) {\r\n        this._hasPending = true;\r\n        this._removes.push(x);\r\n    };\r\n    PendingChanges.prototype.mustCommit = function () {\r\n        return this._hasPending;\r\n    };\r\n    PendingChanges.prototype.commit = function (linesLayout) {\r\n        if (!this._hasPending) {\r\n            return;\r\n        }\r\n        var inserts = this._inserts;\r\n        var changes = this._changes;\r\n        var removes = this._removes;\r\n        this._hasPending = false;\r\n        this._inserts = [];\r\n        this._changes = [];\r\n        this._removes = [];\r\n        linesLayout._commitPendingChanges(inserts, changes, removes);\r\n    };\r\n    return PendingChanges;\r\n}());\r\nvar EditorWhitespace = /** @class */ (function () {\r\n    function EditorWhitespace(id, afterLineNumber, ordinal, height, minWidth) {\r\n        this.id = id;\r\n        this.afterLineNumber = afterLineNumber;\r\n        this.ordinal = ordinal;\r\n        this.height = height;\r\n        this.minWidth = minWidth;\r\n        this.prefixSum = 0;\r\n    }\r\n    return EditorWhitespace;\r\n}());\r\nexport { EditorWhitespace };\r\n/**\r\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\r\n *\r\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\r\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\r\n */\r\nvar LinesLayout = /** @class */ (function () {\r\n    function LinesLayout(lineCount, lineHeight) {\r\n        this._instanceId = strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT);\r\n        this._pendingChanges = new PendingChanges();\r\n        this._lastWhitespaceId = 0;\r\n        this._arr = [];\r\n        this._prefixSumValidIndex = -1;\r\n        this._minWidth = -1; /* marker for not being computed */\r\n        this._lineCount = lineCount;\r\n        this._lineHeight = lineHeight;\r\n    }\r\n    /**\r\n     * Find the insertion index for a new value inside a sorted array of values.\r\n     * If the value is already present in the sorted array, the insertion index will be after the already existing value.\r\n     */\r\n    LinesLayout.findInsertionIndex = function (arr, afterLineNumber, ordinal) {\r\n        var low = 0;\r\n        var high = arr.length;\r\n        while (low < high) {\r\n            var mid = ((low + high) >>> 1);\r\n            if (afterLineNumber === arr[mid].afterLineNumber) {\r\n                if (ordinal < arr[mid].ordinal) {\r\n                    high = mid;\r\n                }\r\n                else {\r\n                    low = mid + 1;\r\n                }\r\n            }\r\n            else if (afterLineNumber < arr[mid].afterLineNumber) {\r\n                high = mid;\r\n            }\r\n            else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n        return low;\r\n    };\r\n    /**\r\n     * Change the height of a line in pixels.\r\n     */\r\n    LinesLayout.prototype.setLineHeight = function (lineHeight) {\r\n        this._checkPendingChanges();\r\n        this._lineHeight = lineHeight;\r\n    };\r\n    /**\r\n     * Set the number of lines.\r\n     *\r\n     * @param lineCount New number of lines.\r\n     */\r\n    LinesLayout.prototype.onFlushed = function (lineCount) {\r\n        this._checkPendingChanges();\r\n        this._lineCount = lineCount;\r\n    };\r\n    LinesLayout.prototype.changeWhitespace = function (callback) {\r\n        var _this = this;\r\n        try {\r\n            var accessor = {\r\n                insertWhitespace: function (afterLineNumber, ordinal, heightInPx, minWidth) {\r\n                    afterLineNumber = afterLineNumber | 0;\r\n                    ordinal = ordinal | 0;\r\n                    heightInPx = heightInPx | 0;\r\n                    minWidth = minWidth | 0;\r\n                    var id = _this._instanceId + (++_this._lastWhitespaceId);\r\n                    _this._pendingChanges.insert(new EditorWhitespace(id, afterLineNumber, ordinal, heightInPx, minWidth));\r\n                    return id;\r\n                },\r\n                changeOneWhitespace: function (id, newAfterLineNumber, newHeight) {\r\n                    newAfterLineNumber = newAfterLineNumber | 0;\r\n                    newHeight = newHeight | 0;\r\n                    _this._pendingChanges.change({ id: id, newAfterLineNumber: newAfterLineNumber, newHeight: newHeight });\r\n                },\r\n                removeWhitespace: function (id) {\r\n                    _this._pendingChanges.remove({ id: id });\r\n                }\r\n            };\r\n            return callback(accessor);\r\n        }\r\n        finally {\r\n            this._pendingChanges.commit(this);\r\n        }\r\n    };\r\n    LinesLayout.prototype._commitPendingChanges = function (inserts, changes, removes) {\r\n        if (inserts.length > 0 || removes.length > 0) {\r\n            this._minWidth = -1; /* marker for not being computed */\r\n        }\r\n        if (inserts.length + changes.length + removes.length <= 1) {\r\n            // when only one thing happened, handle it \"delicately\"\r\n            for (var _i = 0, inserts_1 = inserts; _i < inserts_1.length; _i++) {\r\n                var insert = inserts_1[_i];\r\n                this._insertWhitespace(insert);\r\n            }\r\n            for (var _a = 0, changes_1 = changes; _a < changes_1.length; _a++) {\r\n                var change = changes_1[_a];\r\n                this._changeOneWhitespace(change.id, change.newAfterLineNumber, change.newHeight);\r\n            }\r\n            for (var _b = 0, removes_1 = removes; _b < removes_1.length; _b++) {\r\n                var remove = removes_1[_b];\r\n                var index = this._findWhitespaceIndex(remove.id);\r\n                if (index === -1) {\r\n                    continue;\r\n                }\r\n                this._removeWhitespace(index);\r\n            }\r\n            return;\r\n        }\r\n        // simply rebuild the entire datastructure\r\n        var toRemove = new Set();\r\n        for (var _c = 0, removes_2 = removes; _c < removes_2.length; _c++) {\r\n            var remove = removes_2[_c];\r\n            toRemove.add(remove.id);\r\n        }\r\n        var toChange = new Map();\r\n        for (var _d = 0, changes_2 = changes; _d < changes_2.length; _d++) {\r\n            var change = changes_2[_d];\r\n            toChange.set(change.id, change);\r\n        }\r\n        var applyRemoveAndChange = function (whitespaces) {\r\n            var result = [];\r\n            for (var _i = 0, whitespaces_1 = whitespaces; _i < whitespaces_1.length; _i++) {\r\n                var whitespace = whitespaces_1[_i];\r\n                if (toRemove.has(whitespace.id)) {\r\n                    continue;\r\n                }\r\n                if (toChange.has(whitespace.id)) {\r\n                    var change = toChange.get(whitespace.id);\r\n                    whitespace.afterLineNumber = change.newAfterLineNumber;\r\n                    whitespace.height = change.newHeight;\r\n                }\r\n                result.push(whitespace);\r\n            }\r\n            return result;\r\n        };\r\n        var result = applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));\r\n        result.sort(function (a, b) {\r\n            if (a.afterLineNumber === b.afterLineNumber) {\r\n                return a.ordinal - b.ordinal;\r\n            }\r\n            return a.afterLineNumber - b.afterLineNumber;\r\n        });\r\n        this._arr = result;\r\n        this._prefixSumValidIndex = -1;\r\n    };\r\n    LinesLayout.prototype._checkPendingChanges = function () {\r\n        if (this._pendingChanges.mustCommit()) {\r\n            this._pendingChanges.commit(this);\r\n        }\r\n    };\r\n    LinesLayout.prototype._insertWhitespace = function (whitespace) {\r\n        var insertIndex = LinesLayout.findInsertionIndex(this._arr, whitespace.afterLineNumber, whitespace.ordinal);\r\n        this._arr.splice(insertIndex, 0, whitespace);\r\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, insertIndex - 1);\r\n    };\r\n    LinesLayout.prototype._findWhitespaceIndex = function (id) {\r\n        var arr = this._arr;\r\n        for (var i = 0, len = arr.length; i < len; i++) {\r\n            if (arr[i].id === id) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    LinesLayout.prototype._changeOneWhitespace = function (id, newAfterLineNumber, newHeight) {\r\n        var index = this._findWhitespaceIndex(id);\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        if (this._arr[index].height !== newHeight) {\r\n            this._arr[index].height = newHeight;\r\n            this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, index - 1);\r\n        }\r\n        if (this._arr[index].afterLineNumber !== newAfterLineNumber) {\r\n            // `afterLineNumber` changed for this whitespace\r\n            // Record old whitespace\r\n            var whitespace = this._arr[index];\r\n            // Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\r\n            this._removeWhitespace(index);\r\n            whitespace.afterLineNumber = newAfterLineNumber;\r\n            // And add it again\r\n            this._insertWhitespace(whitespace);\r\n        }\r\n    };\r\n    LinesLayout.prototype._removeWhitespace = function (removeIndex) {\r\n        this._arr.splice(removeIndex, 1);\r\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, removeIndex - 1);\r\n    };\r\n    /**\r\n     * Notify the layouter that lines have been deleted (a continuous zone of lines).\r\n     *\r\n     * @param fromLineNumber The line number at which the deletion started, inclusive\r\n     * @param toLineNumber The line number at which the deletion ended, inclusive\r\n     */\r\n    LinesLayout.prototype.onLinesDeleted = function (fromLineNumber, toLineNumber) {\r\n        this._checkPendingChanges();\r\n        fromLineNumber = fromLineNumber | 0;\r\n        toLineNumber = toLineNumber | 0;\r\n        this._lineCount -= (toLineNumber - fromLineNumber + 1);\r\n        for (var i = 0, len = this._arr.length; i < len; i++) {\r\n            var afterLineNumber = this._arr[i].afterLineNumber;\r\n            if (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\r\n                // The line this whitespace was after has been deleted\r\n                //  => move whitespace to before first deleted line\r\n                this._arr[i].afterLineNumber = fromLineNumber - 1;\r\n            }\r\n            else if (afterLineNumber > toLineNumber) {\r\n                // The line this whitespace was after has been moved up\r\n                //  => move whitespace up\r\n                this._arr[i].afterLineNumber -= (toLineNumber - fromLineNumber + 1);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Notify the layouter that lines have been inserted (a continuous zone of lines).\r\n     *\r\n     * @param fromLineNumber The line number at which the insertion started, inclusive\r\n     * @param toLineNumber The line number at which the insertion ended, inclusive.\r\n     */\r\n    LinesLayout.prototype.onLinesInserted = function (fromLineNumber, toLineNumber) {\r\n        this._checkPendingChanges();\r\n        fromLineNumber = fromLineNumber | 0;\r\n        toLineNumber = toLineNumber | 0;\r\n        this._lineCount += (toLineNumber - fromLineNumber + 1);\r\n        for (var i = 0, len = this._arr.length; i < len; i++) {\r\n            var afterLineNumber = this._arr[i].afterLineNumber;\r\n            if (fromLineNumber <= afterLineNumber) {\r\n                this._arr[i].afterLineNumber += (toLineNumber - fromLineNumber + 1);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Get the sum of all the whitespaces.\r\n     */\r\n    LinesLayout.prototype.getWhitespacesTotalHeight = function () {\r\n        this._checkPendingChanges();\r\n        if (this._arr.length === 0) {\r\n            return 0;\r\n        }\r\n        return this.getWhitespacesAccumulatedHeight(this._arr.length - 1);\r\n    };\r\n    /**\r\n     * Return the sum of the heights of the whitespaces at [0..index].\r\n     * This includes the whitespace at `index`.\r\n     *\r\n     * @param index The index of the whitespace.\r\n     * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\r\n     */\r\n    LinesLayout.prototype.getWhitespacesAccumulatedHeight = function (index) {\r\n        this._checkPendingChanges();\r\n        index = index | 0;\r\n        var startIndex = Math.max(0, this._prefixSumValidIndex + 1);\r\n        if (startIndex === 0) {\r\n            this._arr[0].prefixSum = this._arr[0].height;\r\n            startIndex++;\r\n        }\r\n        for (var i = startIndex; i <= index; i++) {\r\n            this._arr[i].prefixSum = this._arr[i - 1].prefixSum + this._arr[i].height;\r\n        }\r\n        this._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, index);\r\n        return this._arr[index].prefixSum;\r\n    };\r\n    /**\r\n     * Get the sum of heights for all objects.\r\n     *\r\n     * @return The sum of heights for all objects.\r\n     */\r\n    LinesLayout.prototype.getLinesTotalHeight = function () {\r\n        this._checkPendingChanges();\r\n        var linesHeight = this._lineHeight * this._lineCount;\r\n        var whitespacesHeight = this.getWhitespacesTotalHeight();\r\n        return linesHeight + whitespacesHeight;\r\n    };\r\n    /**\r\n     * Returns the accumulated height of whitespaces before the given line number.\r\n     *\r\n     * @param lineNumber The line number\r\n     */\r\n    LinesLayout.prototype.getWhitespaceAccumulatedHeightBeforeLineNumber = function (lineNumber) {\r\n        this._checkPendingChanges();\r\n        lineNumber = lineNumber | 0;\r\n        var lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\r\n        if (lastWhitespaceBeforeLineNumber === -1) {\r\n            return 0;\r\n        }\r\n        return this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber);\r\n    };\r\n    LinesLayout.prototype._findLastWhitespaceBeforeLineNumber = function (lineNumber) {\r\n        lineNumber = lineNumber | 0;\r\n        // Find the whitespace before line number\r\n        var arr = this._arr;\r\n        var low = 0;\r\n        var high = arr.length - 1;\r\n        while (low <= high) {\r\n            var delta = (high - low) | 0;\r\n            var halfDelta = (delta / 2) | 0;\r\n            var mid = (low + halfDelta) | 0;\r\n            if (arr[mid].afterLineNumber < lineNumber) {\r\n                if (mid + 1 >= arr.length || arr[mid + 1].afterLineNumber >= lineNumber) {\r\n                    return mid;\r\n                }\r\n                else {\r\n                    low = (mid + 1) | 0;\r\n                }\r\n            }\r\n            else {\r\n                high = (mid - 1) | 0;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    LinesLayout.prototype._findFirstWhitespaceAfterLineNumber = function (lineNumber) {\r\n        lineNumber = lineNumber | 0;\r\n        var lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\r\n        var firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\r\n        if (firstWhitespaceAfterLineNumber < this._arr.length) {\r\n            return firstWhitespaceAfterLineNumber;\r\n        }\r\n        return -1;\r\n    };\r\n    /**\r\n     * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\r\n     * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\r\n     */\r\n    LinesLayout.prototype.getFirstWhitespaceIndexAfterLineNumber = function (lineNumber) {\r\n        this._checkPendingChanges();\r\n        lineNumber = lineNumber | 0;\r\n        return this._findFirstWhitespaceAfterLineNumber(lineNumber);\r\n    };\r\n    /**\r\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\r\n     *\r\n     * @param lineNumber The line number\r\n     * @return The sum of heights for all objects above `lineNumber`.\r\n     */\r\n    LinesLayout.prototype.getVerticalOffsetForLineNumber = function (lineNumber) {\r\n        this._checkPendingChanges();\r\n        lineNumber = lineNumber | 0;\r\n        var previousLinesHeight;\r\n        if (lineNumber > 1) {\r\n            previousLinesHeight = this._lineHeight * (lineNumber - 1);\r\n        }\r\n        else {\r\n            previousLinesHeight = 0;\r\n        }\r\n        var previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber);\r\n        return previousLinesHeight + previousWhitespacesHeight;\r\n    };\r\n    /**\r\n     * The maximum min width for all whitespaces.\r\n     */\r\n    LinesLayout.prototype.getWhitespaceMinWidth = function () {\r\n        this._checkPendingChanges();\r\n        if (this._minWidth === -1) {\r\n            var minWidth = 0;\r\n            for (var i = 0, len = this._arr.length; i < len; i++) {\r\n                minWidth = Math.max(minWidth, this._arr[i].minWidth);\r\n            }\r\n            this._minWidth = minWidth;\r\n        }\r\n        return this._minWidth;\r\n    };\r\n    /**\r\n     * Check if `verticalOffset` is below all lines.\r\n     */\r\n    LinesLayout.prototype.isAfterLines = function (verticalOffset) {\r\n        this._checkPendingChanges();\r\n        var totalHeight = this.getLinesTotalHeight();\r\n        return verticalOffset > totalHeight;\r\n    };\r\n    /**\r\n     * Find the first line number that is at or after vertical offset `verticalOffset`.\r\n     * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\r\n     * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\r\n     *\r\n     * @param verticalOffset The vertical offset to search at.\r\n     * @return The line number at or after vertical offset `verticalOffset`.\r\n     */\r\n    LinesLayout.prototype.getLineNumberAtOrAfterVerticalOffset = function (verticalOffset) {\r\n        this._checkPendingChanges();\r\n        verticalOffset = verticalOffset | 0;\r\n        if (verticalOffset < 0) {\r\n            return 1;\r\n        }\r\n        var linesCount = this._lineCount | 0;\r\n        var lineHeight = this._lineHeight;\r\n        var minLineNumber = 1;\r\n        var maxLineNumber = linesCount;\r\n        while (minLineNumber < maxLineNumber) {\r\n            var midLineNumber = ((minLineNumber + maxLineNumber) / 2) | 0;\r\n            var midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\r\n            if (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\r\n                // vertical offset is after mid line number\r\n                minLineNumber = midLineNumber + 1;\r\n            }\r\n            else if (verticalOffset >= midLineNumberVerticalOffset) {\r\n                // Hit\r\n                return midLineNumber;\r\n            }\r\n            else {\r\n                // vertical offset is before mid line number, but mid line number could still be what we're searching for\r\n                maxLineNumber = midLineNumber;\r\n            }\r\n        }\r\n        if (minLineNumber > linesCount) {\r\n            return linesCount;\r\n        }\r\n        return minLineNumber;\r\n    };\r\n    /**\r\n     * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\r\n     *\r\n     * @param verticalOffset1 The beginning of the viewport.\r\n     * @param verticalOffset2 The end of the viewport.\r\n     * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\r\n     */\r\n    LinesLayout.prototype.getLinesViewportData = function (verticalOffset1, verticalOffset2) {\r\n        this._checkPendingChanges();\r\n        verticalOffset1 = verticalOffset1 | 0;\r\n        verticalOffset2 = verticalOffset2 | 0;\r\n        var lineHeight = this._lineHeight;\r\n        // Find first line number\r\n        // We don't live in a perfect world, so the line number might start before or after verticalOffset1\r\n        var startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\r\n        var startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\r\n        var endLineNumber = this._lineCount | 0;\r\n        // Also keep track of what whitespace we've got\r\n        var whitespaceIndex = this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\r\n        var whitespaceCount = this.getWhitespacesCount() | 0;\r\n        var currentWhitespaceHeight;\r\n        var currentWhitespaceAfterLineNumber;\r\n        if (whitespaceIndex === -1) {\r\n            whitespaceIndex = whitespaceCount;\r\n            currentWhitespaceAfterLineNumber = endLineNumber + 1;\r\n            currentWhitespaceHeight = 0;\r\n        }\r\n        else {\r\n            currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\r\n            currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\r\n        }\r\n        var currentVerticalOffset = startLineNumberVerticalOffset;\r\n        var currentLineRelativeOffset = currentVerticalOffset;\r\n        // IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\r\n        var STEP_SIZE = 500000;\r\n        var bigNumbersDelta = 0;\r\n        if (startLineNumberVerticalOffset >= STEP_SIZE) {\r\n            // Compute a delta that guarantees that lines are positioned at `lineHeight` increments\r\n            bigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\r\n            bigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\r\n            currentLineRelativeOffset -= bigNumbersDelta;\r\n        }\r\n        var linesOffsets = [];\r\n        var verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\r\n        var centeredLineNumber = -1;\r\n        // Figure out how far the lines go\r\n        for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n            if (centeredLineNumber === -1) {\r\n                var currentLineTop = currentVerticalOffset;\r\n                var currentLineBottom = currentVerticalOffset + lineHeight;\r\n                if ((currentLineTop <= verticalCenter && verticalCenter < currentLineBottom) || currentLineTop > verticalCenter) {\r\n                    centeredLineNumber = lineNumber;\r\n                }\r\n            }\r\n            // Count current line height in the vertical offsets\r\n            currentVerticalOffset += lineHeight;\r\n            linesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset;\r\n            // Next line starts immediately after this one\r\n            currentLineRelativeOffset += lineHeight;\r\n            while (currentWhitespaceAfterLineNumber === lineNumber) {\r\n                // Push down next line with the height of the current whitespace\r\n                currentLineRelativeOffset += currentWhitespaceHeight;\r\n                // Count current whitespace in the vertical offsets\r\n                currentVerticalOffset += currentWhitespaceHeight;\r\n                whitespaceIndex++;\r\n                if (whitespaceIndex >= whitespaceCount) {\r\n                    currentWhitespaceAfterLineNumber = endLineNumber + 1;\r\n                }\r\n                else {\r\n                    currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\r\n                    currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\r\n                }\r\n            }\r\n            if (currentVerticalOffset >= verticalOffset2) {\r\n                // We have covered the entire viewport area, time to stop\r\n                endLineNumber = lineNumber;\r\n                break;\r\n            }\r\n        }\r\n        if (centeredLineNumber === -1) {\r\n            centeredLineNumber = endLineNumber;\r\n        }\r\n        var endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\r\n        var completelyVisibleStartLineNumber = startLineNumber;\r\n        var completelyVisibleEndLineNumber = endLineNumber;\r\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\r\n            if (startLineNumberVerticalOffset < verticalOffset1) {\r\n                completelyVisibleStartLineNumber++;\r\n            }\r\n        }\r\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\r\n            if (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\r\n                completelyVisibleEndLineNumber--;\r\n            }\r\n        }\r\n        return {\r\n            bigNumbersDelta: bigNumbersDelta,\r\n            startLineNumber: startLineNumber,\r\n            endLineNumber: endLineNumber,\r\n            relativeVerticalOffset: linesOffsets,\r\n            centeredLineNumber: centeredLineNumber,\r\n            completelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\r\n            completelyVisibleEndLineNumber: completelyVisibleEndLineNumber\r\n        };\r\n    };\r\n    LinesLayout.prototype.getVerticalOffsetForWhitespaceIndex = function (whitespaceIndex) {\r\n        this._checkPendingChanges();\r\n        whitespaceIndex = whitespaceIndex | 0;\r\n        var afterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\r\n        var previousLinesHeight;\r\n        if (afterLineNumber >= 1) {\r\n            previousLinesHeight = this._lineHeight * afterLineNumber;\r\n        }\r\n        else {\r\n            previousLinesHeight = 0;\r\n        }\r\n        var previousWhitespacesHeight;\r\n        if (whitespaceIndex > 0) {\r\n            previousWhitespacesHeight = this.getWhitespacesAccumulatedHeight(whitespaceIndex - 1);\r\n        }\r\n        else {\r\n            previousWhitespacesHeight = 0;\r\n        }\r\n        return previousLinesHeight + previousWhitespacesHeight;\r\n    };\r\n    LinesLayout.prototype.getWhitespaceIndexAtOrAfterVerticallOffset = function (verticalOffset) {\r\n        this._checkPendingChanges();\r\n        verticalOffset = verticalOffset | 0;\r\n        var minWhitespaceIndex = 0;\r\n        var maxWhitespaceIndex = this.getWhitespacesCount() - 1;\r\n        if (maxWhitespaceIndex < 0) {\r\n            return -1;\r\n        }\r\n        // Special case: nothing to be found\r\n        var maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\r\n        var maxWhitespaceHeight = this.getHeightForWhitespaceIndex(maxWhitespaceIndex);\r\n        if (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\r\n            return -1;\r\n        }\r\n        while (minWhitespaceIndex < maxWhitespaceIndex) {\r\n            var midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\r\n            var midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\r\n            var midWhitespaceHeight = this.getHeightForWhitespaceIndex(midWhitespaceIndex);\r\n            if (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\r\n                // vertical offset is after whitespace\r\n                minWhitespaceIndex = midWhitespaceIndex + 1;\r\n            }\r\n            else if (verticalOffset >= midWhitespaceVerticalOffset) {\r\n                // Hit\r\n                return midWhitespaceIndex;\r\n            }\r\n            else {\r\n                // vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\r\n                maxWhitespaceIndex = midWhitespaceIndex;\r\n            }\r\n        }\r\n        return minWhitespaceIndex;\r\n    };\r\n    /**\r\n     * Get exactly the whitespace that is layouted at `verticalOffset`.\r\n     *\r\n     * @param verticalOffset The vertical offset.\r\n     * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\r\n     */\r\n    LinesLayout.prototype.getWhitespaceAtVerticalOffset = function (verticalOffset) {\r\n        this._checkPendingChanges();\r\n        verticalOffset = verticalOffset | 0;\r\n        var candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\r\n        if (candidateIndex < 0) {\r\n            return null;\r\n        }\r\n        if (candidateIndex >= this.getWhitespacesCount()) {\r\n            return null;\r\n        }\r\n        var candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\r\n        if (candidateTop > verticalOffset) {\r\n            return null;\r\n        }\r\n        var candidateHeight = this.getHeightForWhitespaceIndex(candidateIndex);\r\n        var candidateId = this.getIdForWhitespaceIndex(candidateIndex);\r\n        var candidateAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(candidateIndex);\r\n        return {\r\n            id: candidateId,\r\n            afterLineNumber: candidateAfterLineNumber,\r\n            verticalOffset: candidateTop,\r\n            height: candidateHeight\r\n        };\r\n    };\r\n    /**\r\n     * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\r\n     *\r\n     * @param verticalOffset1 The beginning of the viewport.\r\n     * @param verticalOffset2 The end of the viewport.\r\n     * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\r\n     */\r\n    LinesLayout.prototype.getWhitespaceViewportData = function (verticalOffset1, verticalOffset2) {\r\n        this._checkPendingChanges();\r\n        verticalOffset1 = verticalOffset1 | 0;\r\n        verticalOffset2 = verticalOffset2 | 0;\r\n        var startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\r\n        var endIndex = this.getWhitespacesCount() - 1;\r\n        if (startIndex < 0) {\r\n            return [];\r\n        }\r\n        var result = [];\r\n        for (var i = startIndex; i <= endIndex; i++) {\r\n            var top_1 = this.getVerticalOffsetForWhitespaceIndex(i);\r\n            var height = this.getHeightForWhitespaceIndex(i);\r\n            if (top_1 >= verticalOffset2) {\r\n                break;\r\n            }\r\n            result.push({\r\n                id: this.getIdForWhitespaceIndex(i),\r\n                afterLineNumber: this.getAfterLineNumberForWhitespaceIndex(i),\r\n                verticalOffset: top_1,\r\n                height: height\r\n            });\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Get all whitespaces.\r\n     */\r\n    LinesLayout.prototype.getWhitespaces = function () {\r\n        this._checkPendingChanges();\r\n        return this._arr.slice(0);\r\n    };\r\n    /**\r\n     * The number of whitespaces.\r\n     */\r\n    LinesLayout.prototype.getWhitespacesCount = function () {\r\n        this._checkPendingChanges();\r\n        return this._arr.length;\r\n    };\r\n    /**\r\n     * Get the `id` for whitespace at index `index`.\r\n     *\r\n     * @param index The index of the whitespace.\r\n     * @return `id` of whitespace at `index`.\r\n     */\r\n    LinesLayout.prototype.getIdForWhitespaceIndex = function (index) {\r\n        this._checkPendingChanges();\r\n        index = index | 0;\r\n        return this._arr[index].id;\r\n    };\r\n    /**\r\n     * Get the `afterLineNumber` for whitespace at index `index`.\r\n     *\r\n     * @param index The index of the whitespace.\r\n     * @return `afterLineNumber` of whitespace at `index`.\r\n     */\r\n    LinesLayout.prototype.getAfterLineNumberForWhitespaceIndex = function (index) {\r\n        this._checkPendingChanges();\r\n        index = index | 0;\r\n        return this._arr[index].afterLineNumber;\r\n    };\r\n    /**\r\n     * Get the `height` for whitespace at index `index`.\r\n     *\r\n     * @param index The index of the whitespace.\r\n     * @return `height` of whitespace at `index`.\r\n     */\r\n    LinesLayout.prototype.getHeightForWhitespaceIndex = function (index) {\r\n        this._checkPendingChanges();\r\n        index = index | 0;\r\n        return this._arr[index].height;\r\n    };\r\n    LinesLayout.INSTANCE_COUNT = 0;\r\n    return LinesLayout;\r\n}());\r\nexport { LinesLayout };\r\n"]},"metadata":{},"sourceType":"module"}