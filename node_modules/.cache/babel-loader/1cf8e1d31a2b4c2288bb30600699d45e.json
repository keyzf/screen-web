{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as strings from '../../../base/common/strings.js';\n\nvar CursorPosition =\n/** @class */\nfunction () {\n  function CursorPosition(lineNumber, column, leftoverVisibleColumns) {\n    this.lineNumber = lineNumber;\n    this.column = column;\n    this.leftoverVisibleColumns = leftoverVisibleColumns;\n  }\n\n  return CursorPosition;\n}();\n\nexport { CursorPosition };\n\nvar MoveOperations =\n/** @class */\nfunction () {\n  function MoveOperations() {}\n\n  MoveOperations.leftPosition = function (model, lineNumber, column) {\n    if (column > model.getLineMinColumn(lineNumber)) {\n      column = column - strings.prevCharLength(model.getLineContent(lineNumber), column - 1);\n    } else if (lineNumber > 1) {\n      lineNumber = lineNumber - 1;\n      column = model.getLineMaxColumn(lineNumber);\n    }\n\n    return new Position(lineNumber, column);\n  };\n\n  MoveOperations.left = function (config, model, lineNumber, column) {\n    var pos = MoveOperations.leftPosition(model, lineNumber, column);\n    return new CursorPosition(pos.lineNumber, pos.column, 0);\n  };\n\n  MoveOperations.moveLeft = function (config, model, cursor, inSelectionMode, noOfColumns) {\n    var lineNumber, column;\n\n    if (cursor.hasSelection() && !inSelectionMode) {\n      // If we are in selection mode, move left without selection cancels selection and puts cursor at the beginning of the selection\n      lineNumber = cursor.selection.startLineNumber;\n      column = cursor.selection.startColumn;\n    } else {\n      var r = MoveOperations.left(config, model, cursor.position.lineNumber, cursor.position.column - (noOfColumns - 1));\n      lineNumber = r.lineNumber;\n      column = r.column;\n    }\n\n    return cursor.move(inSelectionMode, lineNumber, column, 0);\n  };\n\n  MoveOperations.rightPosition = function (model, lineNumber, column) {\n    if (column < model.getLineMaxColumn(lineNumber)) {\n      column = column + strings.nextCharLength(model.getLineContent(lineNumber), column - 1);\n    } else if (lineNumber < model.getLineCount()) {\n      lineNumber = lineNumber + 1;\n      column = model.getLineMinColumn(lineNumber);\n    }\n\n    return new Position(lineNumber, column);\n  };\n\n  MoveOperations.right = function (config, model, lineNumber, column) {\n    var pos = MoveOperations.rightPosition(model, lineNumber, column);\n    return new CursorPosition(pos.lineNumber, pos.column, 0);\n  };\n\n  MoveOperations.moveRight = function (config, model, cursor, inSelectionMode, noOfColumns) {\n    var lineNumber, column;\n\n    if (cursor.hasSelection() && !inSelectionMode) {\n      // If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\n      lineNumber = cursor.selection.endLineNumber;\n      column = cursor.selection.endColumn;\n    } else {\n      var r = MoveOperations.right(config, model, cursor.position.lineNumber, cursor.position.column + (noOfColumns - 1));\n      lineNumber = r.lineNumber;\n      column = r.column;\n    }\n\n    return cursor.move(inSelectionMode, lineNumber, column, 0);\n  };\n\n  MoveOperations.down = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnLastLine) {\n    var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n    lineNumber = lineNumber + count;\n    var lineCount = model.getLineCount();\n\n    if (lineNumber > lineCount) {\n      lineNumber = lineCount;\n\n      if (allowMoveOnLastLine) {\n        column = model.getLineMaxColumn(lineNumber);\n      } else {\n        column = Math.min(model.getLineMaxColumn(lineNumber), column);\n      }\n    } else {\n      column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n    }\n\n    leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n    return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n  };\n\n  MoveOperations.moveDown = function (config, model, cursor, inSelectionMode, linesCount) {\n    var lineNumber, column;\n\n    if (cursor.hasSelection() && !inSelectionMode) {\n      // If we are in selection mode, move down acts relative to the end of selection\n      lineNumber = cursor.selection.endLineNumber;\n      column = cursor.selection.endColumn;\n    } else {\n      lineNumber = cursor.position.lineNumber;\n      column = cursor.position.column;\n    }\n\n    var r = MoveOperations.down(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n    return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n  };\n\n  MoveOperations.translateDown = function (config, model, cursor) {\n    var selection = cursor.selection;\n    var selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n    var position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n    return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n  };\n\n  MoveOperations.up = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnFirstLine) {\n    var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n    lineNumber = lineNumber - count;\n\n    if (lineNumber < 1) {\n      lineNumber = 1;\n\n      if (allowMoveOnFirstLine) {\n        column = model.getLineMinColumn(lineNumber);\n      } else {\n        column = Math.min(model.getLineMaxColumn(lineNumber), column);\n      }\n    } else {\n      column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n    }\n\n    leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n    return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n  };\n\n  MoveOperations.moveUp = function (config, model, cursor, inSelectionMode, linesCount) {\n    var lineNumber, column;\n\n    if (cursor.hasSelection() && !inSelectionMode) {\n      // If we are in selection mode, move up acts relative to the beginning of selection\n      lineNumber = cursor.selection.startLineNumber;\n      column = cursor.selection.startColumn;\n    } else {\n      lineNumber = cursor.position.lineNumber;\n      column = cursor.position.column;\n    }\n\n    var r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n    return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n  };\n\n  MoveOperations.translateUp = function (config, model, cursor) {\n    var selection = cursor.selection;\n    var selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n    var position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n    return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n  };\n\n  MoveOperations.moveToBeginningOfLine = function (config, model, cursor, inSelectionMode) {\n    var lineNumber = cursor.position.lineNumber;\n    var minColumn = model.getLineMinColumn(lineNumber);\n    var firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\n    var column;\n    var relevantColumnNumber = cursor.position.column;\n\n    if (relevantColumnNumber === firstNonBlankColumn) {\n      column = minColumn;\n    } else {\n      column = firstNonBlankColumn;\n    }\n\n    return cursor.move(inSelectionMode, lineNumber, column, 0);\n  };\n\n  MoveOperations.moveToEndOfLine = function (config, model, cursor, inSelectionMode) {\n    var lineNumber = cursor.position.lineNumber;\n    var maxColumn = model.getLineMaxColumn(lineNumber);\n    return cursor.move(inSelectionMode, lineNumber, maxColumn, 0);\n  };\n\n  MoveOperations.moveToBeginningOfBuffer = function (config, model, cursor, inSelectionMode) {\n    return cursor.move(inSelectionMode, 1, 1, 0);\n  };\n\n  MoveOperations.moveToEndOfBuffer = function (config, model, cursor, inSelectionMode) {\n    var lastLineNumber = model.getLineCount();\n    var lastColumn = model.getLineMaxColumn(lastLineNumber);\n    return cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\n  };\n\n  return MoveOperations;\n}();\n\nexport { MoveOperations };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorMoveOperations.js"],"names":["CursorColumns","SingleCursorState","Position","Range","strings","CursorPosition","lineNumber","column","leftoverVisibleColumns","MoveOperations","leftPosition","model","getLineMinColumn","prevCharLength","getLineContent","getLineMaxColumn","left","config","pos","moveLeft","cursor","inSelectionMode","noOfColumns","hasSelection","selection","startLineNumber","startColumn","r","position","move","rightPosition","nextCharLength","getLineCount","right","moveRight","endLineNumber","endColumn","down","count","allowMoveOnLastLine","currentVisibleColumn","visibleColumnFromColumn","tabSize","lineCount","Math","min","columnFromVisibleColumn2","moveDown","linesCount","translateDown","selectionStart","selectionStartLineNumber","selectionStartColumn","selectionStartLeftoverVisibleColumns","positionLineNumber","positionColumn","up","allowMoveOnFirstLine","moveUp","translateUp","moveToBeginningOfLine","minColumn","firstNonBlankColumn","getLineFirstNonWhitespaceColumn","relevantColumnNumber","moveToEndOfLine","maxColumn","moveToBeginningOfBuffer","moveToEndOfBuffer","lastLineNumber","lastColumn"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nvar CursorPosition = /** @class */ (function () {\r\n    function CursorPosition(lineNumber, column, leftoverVisibleColumns) {\r\n        this.lineNumber = lineNumber;\r\n        this.column = column;\r\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\r\n    }\r\n    return CursorPosition;\r\n}());\r\nexport { CursorPosition };\r\nvar MoveOperations = /** @class */ (function () {\r\n    function MoveOperations() {\r\n    }\r\n    MoveOperations.leftPosition = function (model, lineNumber, column) {\r\n        if (column > model.getLineMinColumn(lineNumber)) {\r\n            column = column - strings.prevCharLength(model.getLineContent(lineNumber), column - 1);\r\n        }\r\n        else if (lineNumber > 1) {\r\n            lineNumber = lineNumber - 1;\r\n            column = model.getLineMaxColumn(lineNumber);\r\n        }\r\n        return new Position(lineNumber, column);\r\n    };\r\n    MoveOperations.left = function (config, model, lineNumber, column) {\r\n        var pos = MoveOperations.leftPosition(model, lineNumber, column);\r\n        return new CursorPosition(pos.lineNumber, pos.column, 0);\r\n    };\r\n    MoveOperations.moveLeft = function (config, model, cursor, inSelectionMode, noOfColumns) {\r\n        var lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move left without selection cancels selection and puts cursor at the beginning of the selection\r\n            lineNumber = cursor.selection.startLineNumber;\r\n            column = cursor.selection.startColumn;\r\n        }\r\n        else {\r\n            var r = MoveOperations.left(config, model, cursor.position.lineNumber, cursor.position.column - (noOfColumns - 1));\r\n            lineNumber = r.lineNumber;\r\n            column = r.column;\r\n        }\r\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\r\n    };\r\n    MoveOperations.rightPosition = function (model, lineNumber, column) {\r\n        if (column < model.getLineMaxColumn(lineNumber)) {\r\n            column = column + strings.nextCharLength(model.getLineContent(lineNumber), column - 1);\r\n        }\r\n        else if (lineNumber < model.getLineCount()) {\r\n            lineNumber = lineNumber + 1;\r\n            column = model.getLineMinColumn(lineNumber);\r\n        }\r\n        return new Position(lineNumber, column);\r\n    };\r\n    MoveOperations.right = function (config, model, lineNumber, column) {\r\n        var pos = MoveOperations.rightPosition(model, lineNumber, column);\r\n        return new CursorPosition(pos.lineNumber, pos.column, 0);\r\n    };\r\n    MoveOperations.moveRight = function (config, model, cursor, inSelectionMode, noOfColumns) {\r\n        var lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\r\n            lineNumber = cursor.selection.endLineNumber;\r\n            column = cursor.selection.endColumn;\r\n        }\r\n        else {\r\n            var r = MoveOperations.right(config, model, cursor.position.lineNumber, cursor.position.column + (noOfColumns - 1));\r\n            lineNumber = r.lineNumber;\r\n            column = r.column;\r\n        }\r\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\r\n    };\r\n    MoveOperations.down = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnLastLine) {\r\n        var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\r\n        lineNumber = lineNumber + count;\r\n        var lineCount = model.getLineCount();\r\n        if (lineNumber > lineCount) {\r\n            lineNumber = lineCount;\r\n            if (allowMoveOnLastLine) {\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n            else {\r\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\r\n            }\r\n        }\r\n        else {\r\n            column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\r\n        }\r\n        leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\r\n        return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.moveDown = function (config, model, cursor, inSelectionMode, linesCount) {\r\n        var lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move down acts relative to the end of selection\r\n            lineNumber = cursor.selection.endLineNumber;\r\n            column = cursor.selection.endColumn;\r\n        }\r\n        else {\r\n            lineNumber = cursor.position.lineNumber;\r\n            column = cursor.position.column;\r\n        }\r\n        var r = MoveOperations.down(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\r\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.translateDown = function (config, model, cursor) {\r\n        var selection = cursor.selection;\r\n        var selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\r\n        var position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\r\n        return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.up = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnFirstLine) {\r\n        var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\r\n        lineNumber = lineNumber - count;\r\n        if (lineNumber < 1) {\r\n            lineNumber = 1;\r\n            if (allowMoveOnFirstLine) {\r\n                column = model.getLineMinColumn(lineNumber);\r\n            }\r\n            else {\r\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\r\n            }\r\n        }\r\n        else {\r\n            column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\r\n        }\r\n        leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\r\n        return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.moveUp = function (config, model, cursor, inSelectionMode, linesCount) {\r\n        var lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move up acts relative to the beginning of selection\r\n            lineNumber = cursor.selection.startLineNumber;\r\n            column = cursor.selection.startColumn;\r\n        }\r\n        else {\r\n            lineNumber = cursor.position.lineNumber;\r\n            column = cursor.position.column;\r\n        }\r\n        var r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\r\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.translateUp = function (config, model, cursor) {\r\n        var selection = cursor.selection;\r\n        var selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\r\n        var position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\r\n        return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.moveToBeginningOfLine = function (config, model, cursor, inSelectionMode) {\r\n        var lineNumber = cursor.position.lineNumber;\r\n        var minColumn = model.getLineMinColumn(lineNumber);\r\n        var firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\r\n        var column;\r\n        var relevantColumnNumber = cursor.position.column;\r\n        if (relevantColumnNumber === firstNonBlankColumn) {\r\n            column = minColumn;\r\n        }\r\n        else {\r\n            column = firstNonBlankColumn;\r\n        }\r\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\r\n    };\r\n    MoveOperations.moveToEndOfLine = function (config, model, cursor, inSelectionMode) {\r\n        var lineNumber = cursor.position.lineNumber;\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        return cursor.move(inSelectionMode, lineNumber, maxColumn, 0);\r\n    };\r\n    MoveOperations.moveToBeginningOfBuffer = function (config, model, cursor, inSelectionMode) {\r\n        return cursor.move(inSelectionMode, 1, 1, 0);\r\n    };\r\n    MoveOperations.moveToEndOfBuffer = function (config, model, cursor, inSelectionMode) {\r\n        var lastLineNumber = model.getLineCount();\r\n        var lastColumn = model.getLineMaxColumn(lastLineNumber);\r\n        return cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\r\n    };\r\n    return MoveOperations;\r\n}());\r\nexport { MoveOperations };\r\n"]},"metadata":{},"sourceType":"module"}