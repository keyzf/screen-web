{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport function createScopedLineTokens(context, offset) {\n  var tokenCount = context.getCount();\n  var tokenIndex = context.findTokenIndexAtOffset(offset);\n  var desiredLanguageId = context.getLanguageId(tokenIndex);\n  var lastTokenIndex = tokenIndex;\n\n  while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n    lastTokenIndex++;\n  }\n\n  var firstTokenIndex = tokenIndex;\n\n  while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n    firstTokenIndex--;\n  }\n\n  return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\n}\n\nvar ScopedLineTokens =\n/** @class */\nfunction () {\n  function ScopedLineTokens(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\n    this._actual = actual;\n    this.languageId = languageId;\n    this._firstTokenIndex = firstTokenIndex;\n    this._lastTokenIndex = lastTokenIndex;\n    this.firstCharOffset = firstCharOffset;\n    this._lastCharOffset = lastCharOffset;\n  }\n\n  ScopedLineTokens.prototype.getLineContent = function () {\n    var actualLineContent = this._actual.getLineContent();\n\n    return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n  };\n\n  ScopedLineTokens.prototype.getActualLineContentBefore = function (offset) {\n    var actualLineContent = this._actual.getLineContent();\n\n    return actualLineContent.substring(0, this.firstCharOffset + offset);\n  };\n\n  ScopedLineTokens.prototype.getTokenCount = function () {\n    return this._lastTokenIndex - this._firstTokenIndex;\n  };\n\n  ScopedLineTokens.prototype.findTokenIndexAtOffset = function (offset) {\n    return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n  };\n\n  ScopedLineTokens.prototype.getStandardTokenType = function (tokenIndex) {\n    return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n  };\n\n  return ScopedLineTokens;\n}();\n\nexport { ScopedLineTokens };\nexport function ignoreBracketsInToken(standardTokenType) {\n  return (standardTokenType & 7\n  /* value */\n  ) !== 0;\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/modes/supports.js"],"names":["createScopedLineTokens","context","offset","tokenCount","getCount","tokenIndex","findTokenIndexAtOffset","desiredLanguageId","getLanguageId","lastTokenIndex","firstTokenIndex","ScopedLineTokens","getStartOffset","getEndOffset","actual","languageId","firstCharOffset","lastCharOffset","_actual","_firstTokenIndex","_lastTokenIndex","_lastCharOffset","prototype","getLineContent","actualLineContent","substring","getActualLineContentBefore","getTokenCount","getStandardTokenType","ignoreBracketsInToken","standardTokenType"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport function createScopedLineTokens(context, offset) {\r\n    var tokenCount = context.getCount();\r\n    var tokenIndex = context.findTokenIndexAtOffset(offset);\r\n    var desiredLanguageId = context.getLanguageId(tokenIndex);\r\n    var lastTokenIndex = tokenIndex;\r\n    while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\r\n        lastTokenIndex++;\r\n    }\r\n    var firstTokenIndex = tokenIndex;\r\n    while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\r\n        firstTokenIndex--;\r\n    }\r\n    return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\r\n}\r\nvar ScopedLineTokens = /** @class */ (function () {\r\n    function ScopedLineTokens(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\r\n        this._actual = actual;\r\n        this.languageId = languageId;\r\n        this._firstTokenIndex = firstTokenIndex;\r\n        this._lastTokenIndex = lastTokenIndex;\r\n        this.firstCharOffset = firstCharOffset;\r\n        this._lastCharOffset = lastCharOffset;\r\n    }\r\n    ScopedLineTokens.prototype.getLineContent = function () {\r\n        var actualLineContent = this._actual.getLineContent();\r\n        return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\r\n    };\r\n    ScopedLineTokens.prototype.getActualLineContentBefore = function (offset) {\r\n        var actualLineContent = this._actual.getLineContent();\r\n        return actualLineContent.substring(0, this.firstCharOffset + offset);\r\n    };\r\n    ScopedLineTokens.prototype.getTokenCount = function () {\r\n        return this._lastTokenIndex - this._firstTokenIndex;\r\n    };\r\n    ScopedLineTokens.prototype.findTokenIndexAtOffset = function (offset) {\r\n        return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\r\n    };\r\n    ScopedLineTokens.prototype.getStandardTokenType = function (tokenIndex) {\r\n        return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\r\n    };\r\n    return ScopedLineTokens;\r\n}());\r\nexport { ScopedLineTokens };\r\nexport function ignoreBracketsInToken(standardTokenType) {\r\n    return (standardTokenType & 7 /* value */) !== 0;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}