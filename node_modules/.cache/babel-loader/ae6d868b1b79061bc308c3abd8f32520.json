{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\n\nvar TextAreaState =\n/** @class */\nfunction () {\n  function TextAreaState(value, selectionStart, selectionEnd, selectionStartPosition, selectionEndPosition) {\n    this.value = value;\n    this.selectionStart = selectionStart;\n    this.selectionEnd = selectionEnd;\n    this.selectionStartPosition = selectionStartPosition;\n    this.selectionEndPosition = selectionEndPosition;\n  }\n\n  TextAreaState.prototype.toString = function () {\n    return '[ <' + this.value + '>, selectionStart: ' + this.selectionStart + ', selectionEnd: ' + this.selectionEnd + ']';\n  };\n\n  TextAreaState.readFromTextArea = function (textArea) {\n    return new TextAreaState(textArea.getValue(), textArea.getSelectionStart(), textArea.getSelectionEnd(), null, null);\n  };\n\n  TextAreaState.prototype.collapseSelection = function () {\n    return new TextAreaState(this.value, this.value.length, this.value.length, null, null);\n  };\n\n  TextAreaState.prototype.writeToTextArea = function (reason, textArea, select) {\n    // console.log(Date.now() + ': writeToTextArea ' + reason + ': ' + this.toString());\n    textArea.setValue(reason, this.value);\n\n    if (select) {\n      textArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n    }\n  };\n\n  TextAreaState.prototype.deduceEditorPosition = function (offset) {\n    if (offset <= this.selectionStart) {\n      var str = this.value.substring(offset, this.selectionStart);\n      return this._finishDeduceEditorPosition(this.selectionStartPosition, str, -1);\n    }\n\n    if (offset >= this.selectionEnd) {\n      var str = this.value.substring(this.selectionEnd, offset);\n      return this._finishDeduceEditorPosition(this.selectionEndPosition, str, 1);\n    }\n\n    var str1 = this.value.substring(this.selectionStart, offset);\n\n    if (str1.indexOf(String.fromCharCode(8230)) === -1) {\n      return this._finishDeduceEditorPosition(this.selectionStartPosition, str1, 1);\n    }\n\n    var str2 = this.value.substring(offset, this.selectionEnd);\n    return this._finishDeduceEditorPosition(this.selectionEndPosition, str2, -1);\n  };\n\n  TextAreaState.prototype._finishDeduceEditorPosition = function (anchor, deltaText, signum) {\n    var lineFeedCnt = 0;\n    var lastLineFeedIndex = -1;\n\n    while ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n      lineFeedCnt++;\n    }\n\n    return [anchor, signum * deltaText.length, lineFeedCnt];\n  };\n\n  TextAreaState.selectedText = function (text) {\n    return new TextAreaState(text, 0, text.length, null, null);\n  };\n\n  TextAreaState.deduceInput = function (previousState, currentState, couldBeEmojiInput) {\n    if (!previousState) {\n      // This is the EMPTY state\n      return {\n        text: '',\n        replaceCharCnt: 0\n      };\n    } // console.log('------------------------deduceInput');\n    // console.log('PREVIOUS STATE: ' + previousState.toString());\n    // console.log('CURRENT STATE: ' + currentState.toString());\n\n\n    var previousValue = previousState.value;\n    var previousSelectionStart = previousState.selectionStart;\n    var previousSelectionEnd = previousState.selectionEnd;\n    var currentValue = currentState.value;\n    var currentSelectionStart = currentState.selectionStart;\n    var currentSelectionEnd = currentState.selectionEnd; // Strip the previous suffix from the value (without interfering with the current selection)\n\n    var previousSuffix = previousValue.substring(previousSelectionEnd);\n    var currentSuffix = currentValue.substring(currentSelectionEnd);\n    var suffixLength = strings.commonSuffixLength(previousSuffix, currentSuffix);\n    currentValue = currentValue.substring(0, currentValue.length - suffixLength);\n    previousValue = previousValue.substring(0, previousValue.length - suffixLength);\n    var previousPrefix = previousValue.substring(0, previousSelectionStart);\n    var currentPrefix = currentValue.substring(0, currentSelectionStart);\n    var prefixLength = strings.commonPrefixLength(previousPrefix, currentPrefix);\n    currentValue = currentValue.substring(prefixLength);\n    previousValue = previousValue.substring(prefixLength);\n    currentSelectionStart -= prefixLength;\n    previousSelectionStart -= prefixLength;\n    currentSelectionEnd -= prefixLength;\n    previousSelectionEnd -= prefixLength; // console.log('AFTER DIFFING PREVIOUS STATE: <' + previousValue + '>, selectionStart: ' + previousSelectionStart + ', selectionEnd: ' + previousSelectionEnd);\n    // console.log('AFTER DIFFING CURRENT STATE: <' + currentValue + '>, selectionStart: ' + currentSelectionStart + ', selectionEnd: ' + currentSelectionEnd);\n\n    if (couldBeEmojiInput && currentSelectionStart === currentSelectionEnd && previousValue.length > 0) {\n      // on OSX, emojis from the emoji picker are inserted at random locations\n      // the only hints we can use is that the selection is immediately after the inserted emoji\n      // and that none of the old text has been deleted\n      var potentialEmojiInput = null;\n\n      if (currentSelectionStart === currentValue.length) {\n        // emoji potentially inserted \"somewhere\" after the previous selection => it should appear at the end of `currentValue`\n        if (strings.startsWith(currentValue, previousValue)) {\n          // only if all of the old text is accounted for\n          potentialEmojiInput = currentValue.substring(previousValue.length);\n        }\n      } else {\n        // emoji potentially inserted \"somewhere\" before the previous selection => it should appear at the start of `currentValue`\n        if (strings.endsWith(currentValue, previousValue)) {\n          // only if all of the old text is accounted for\n          potentialEmojiInput = currentValue.substring(0, currentValue.length - previousValue.length);\n        }\n      }\n\n      if (potentialEmojiInput !== null && potentialEmojiInput.length > 0) {\n        // now we check that this is indeed an emoji\n        // emojis can grow quite long, so a length check is of no help\n        // e.g. 1F3F4 E0067 E0062 E0065 E006E E0067 E007F  ; fully-qualified     # 🏴󠁧󠁢󠁥󠁮󠁧󠁿 England\n        // Oftentimes, emojis use Variation Selector-16 (U+FE0F), so that is a good hint\n        // http://emojipedia.org/variation-selector-16/\n        // > An invisible codepoint which specifies that the preceding character\n        // > should be displayed with emoji presentation. Only required if the\n        // > preceding character defaults to text presentation.\n        if (/\\uFE0F/.test(potentialEmojiInput) || strings.containsEmoji(potentialEmojiInput)) {\n          return {\n            text: potentialEmojiInput,\n            replaceCharCnt: 0\n          };\n        }\n      }\n    }\n\n    if (currentSelectionStart === currentSelectionEnd) {\n      // composition accept case (noticed in FF + Japanese)\n      // [blahblah] => blahblah|\n      if (previousValue === currentValue && previousSelectionStart === 0 && previousSelectionEnd === previousValue.length && currentSelectionStart === currentValue.length && currentValue.indexOf('\\n') === -1) {\n        if (strings.containsFullWidthCharacter(currentValue)) {\n          return {\n            text: '',\n            replaceCharCnt: 0\n          };\n        }\n      } // no current selection\n\n\n      var replacePreviousCharacters_1 = previousPrefix.length - prefixLength; // console.log('REMOVE PREVIOUS: ' + (previousPrefix.length - prefixLength) + ' chars');\n\n      return {\n        text: currentValue,\n        replaceCharCnt: replacePreviousCharacters_1\n      };\n    } // there is a current selection => composition case\n\n\n    var replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n    return {\n      text: currentValue,\n      replaceCharCnt: replacePreviousCharacters\n    };\n  };\n\n  TextAreaState.EMPTY = new TextAreaState('', 0, 0, null, null);\n  return TextAreaState;\n}();\n\nexport { TextAreaState };\n\nvar PagedScreenReaderStrategy =\n/** @class */\nfunction () {\n  function PagedScreenReaderStrategy() {}\n\n  PagedScreenReaderStrategy._getPageOfLine = function (lineNumber, linesPerPage) {\n    return Math.floor((lineNumber - 1) / linesPerPage);\n  };\n\n  PagedScreenReaderStrategy._getRangeForPage = function (page, linesPerPage) {\n    var offset = page * linesPerPage;\n    var startLineNumber = offset + 1;\n    var endLineNumber = offset + linesPerPage;\n    return new Range(startLineNumber, 1, endLineNumber + 1, 1);\n  };\n\n  PagedScreenReaderStrategy.fromEditorSelection = function (previousState, model, selection, linesPerPage, trimLongText) {\n    var selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber, linesPerPage);\n\n    var selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage, linesPerPage);\n\n    var selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber, linesPerPage);\n\n    var selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage, linesPerPage);\n\n    var pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn));\n    var pretext = model.getValueInRange(pretextRange, 1\n    /* LF */\n    );\n    var lastLine = model.getLineCount();\n    var lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n    var posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\n    var posttext = model.getValueInRange(posttextRange, 1\n    /* LF */\n    );\n    var text;\n\n    if (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n      // take full selection\n      text = model.getValueInRange(selection, 1\n      /* LF */\n      );\n    } else {\n      var selectionRange1 = selectionStartPageRange.intersectRanges(selection);\n      var selectionRange2 = selectionEndPageRange.intersectRanges(selection);\n      text = model.getValueInRange(selectionRange1, 1\n      /* LF */\n      ) + String.fromCharCode(8230) + model.getValueInRange(selectionRange2, 1\n      /* LF */\n      );\n    } // Chromium handles very poorly text even of a few thousand chars\n    // Cut text to avoid stalling the entire UI\n\n\n    if (trimLongText) {\n      var LIMIT_CHARS = 500;\n\n      if (pretext.length > LIMIT_CHARS) {\n        pretext = pretext.substring(pretext.length - LIMIT_CHARS, pretext.length);\n      }\n\n      if (posttext.length > LIMIT_CHARS) {\n        posttext = posttext.substring(0, LIMIT_CHARS);\n      }\n\n      if (text.length > 2 * LIMIT_CHARS) {\n        text = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n      }\n    }\n\n    return new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, new Position(selection.startLineNumber, selection.startColumn), new Position(selection.endLineNumber, selection.endColumn));\n  };\n\n  return PagedScreenReaderStrategy;\n}();\n\nexport { PagedScreenReaderStrategy };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaState.js"],"names":["strings","Position","Range","TextAreaState","value","selectionStart","selectionEnd","selectionStartPosition","selectionEndPosition","prototype","toString","readFromTextArea","textArea","getValue","getSelectionStart","getSelectionEnd","collapseSelection","length","writeToTextArea","reason","select","setValue","setSelectionRange","deduceEditorPosition","offset","str","substring","_finishDeduceEditorPosition","str1","indexOf","String","fromCharCode","str2","anchor","deltaText","signum","lineFeedCnt","lastLineFeedIndex","selectedText","text","deduceInput","previousState","currentState","couldBeEmojiInput","replaceCharCnt","previousValue","previousSelectionStart","previousSelectionEnd","currentValue","currentSelectionStart","currentSelectionEnd","previousSuffix","currentSuffix","suffixLength","commonSuffixLength","previousPrefix","currentPrefix","prefixLength","commonPrefixLength","potentialEmojiInput","startsWith","endsWith","test","containsEmoji","containsFullWidthCharacter","replacePreviousCharacters_1","replacePreviousCharacters","EMPTY","PagedScreenReaderStrategy","_getPageOfLine","lineNumber","linesPerPage","Math","floor","_getRangeForPage","page","startLineNumber","endLineNumber","fromEditorSelection","model","selection","trimLongText","selectionStartPage","selectionStartPageRange","selectionEndPage","selectionEndPageRange","pretextRange","intersectRanges","startColumn","pretext","getValueInRange","lastLine","getLineCount","lastLineMaxColumn","getLineMaxColumn","posttextRange","endColumn","posttext","selectionRange1","selectionRange2","LIMIT_CHARS"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { Range } from '../../common/core/range.js';\r\nvar TextAreaState = /** @class */ (function () {\r\n    function TextAreaState(value, selectionStart, selectionEnd, selectionStartPosition, selectionEndPosition) {\r\n        this.value = value;\r\n        this.selectionStart = selectionStart;\r\n        this.selectionEnd = selectionEnd;\r\n        this.selectionStartPosition = selectionStartPosition;\r\n        this.selectionEndPosition = selectionEndPosition;\r\n    }\r\n    TextAreaState.prototype.toString = function () {\r\n        return '[ <' + this.value + '>, selectionStart: ' + this.selectionStart + ', selectionEnd: ' + this.selectionEnd + ']';\r\n    };\r\n    TextAreaState.readFromTextArea = function (textArea) {\r\n        return new TextAreaState(textArea.getValue(), textArea.getSelectionStart(), textArea.getSelectionEnd(), null, null);\r\n    };\r\n    TextAreaState.prototype.collapseSelection = function () {\r\n        return new TextAreaState(this.value, this.value.length, this.value.length, null, null);\r\n    };\r\n    TextAreaState.prototype.writeToTextArea = function (reason, textArea, select) {\r\n        // console.log(Date.now() + ': writeToTextArea ' + reason + ': ' + this.toString());\r\n        textArea.setValue(reason, this.value);\r\n        if (select) {\r\n            textArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\r\n        }\r\n    };\r\n    TextAreaState.prototype.deduceEditorPosition = function (offset) {\r\n        if (offset <= this.selectionStart) {\r\n            var str = this.value.substring(offset, this.selectionStart);\r\n            return this._finishDeduceEditorPosition(this.selectionStartPosition, str, -1);\r\n        }\r\n        if (offset >= this.selectionEnd) {\r\n            var str = this.value.substring(this.selectionEnd, offset);\r\n            return this._finishDeduceEditorPosition(this.selectionEndPosition, str, 1);\r\n        }\r\n        var str1 = this.value.substring(this.selectionStart, offset);\r\n        if (str1.indexOf(String.fromCharCode(8230)) === -1) {\r\n            return this._finishDeduceEditorPosition(this.selectionStartPosition, str1, 1);\r\n        }\r\n        var str2 = this.value.substring(offset, this.selectionEnd);\r\n        return this._finishDeduceEditorPosition(this.selectionEndPosition, str2, -1);\r\n    };\r\n    TextAreaState.prototype._finishDeduceEditorPosition = function (anchor, deltaText, signum) {\r\n        var lineFeedCnt = 0;\r\n        var lastLineFeedIndex = -1;\r\n        while ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\r\n            lineFeedCnt++;\r\n        }\r\n        return [anchor, signum * deltaText.length, lineFeedCnt];\r\n    };\r\n    TextAreaState.selectedText = function (text) {\r\n        return new TextAreaState(text, 0, text.length, null, null);\r\n    };\r\n    TextAreaState.deduceInput = function (previousState, currentState, couldBeEmojiInput) {\r\n        if (!previousState) {\r\n            // This is the EMPTY state\r\n            return {\r\n                text: '',\r\n                replaceCharCnt: 0\r\n            };\r\n        }\r\n        // console.log('------------------------deduceInput');\r\n        // console.log('PREVIOUS STATE: ' + previousState.toString());\r\n        // console.log('CURRENT STATE: ' + currentState.toString());\r\n        var previousValue = previousState.value;\r\n        var previousSelectionStart = previousState.selectionStart;\r\n        var previousSelectionEnd = previousState.selectionEnd;\r\n        var currentValue = currentState.value;\r\n        var currentSelectionStart = currentState.selectionStart;\r\n        var currentSelectionEnd = currentState.selectionEnd;\r\n        // Strip the previous suffix from the value (without interfering with the current selection)\r\n        var previousSuffix = previousValue.substring(previousSelectionEnd);\r\n        var currentSuffix = currentValue.substring(currentSelectionEnd);\r\n        var suffixLength = strings.commonSuffixLength(previousSuffix, currentSuffix);\r\n        currentValue = currentValue.substring(0, currentValue.length - suffixLength);\r\n        previousValue = previousValue.substring(0, previousValue.length - suffixLength);\r\n        var previousPrefix = previousValue.substring(0, previousSelectionStart);\r\n        var currentPrefix = currentValue.substring(0, currentSelectionStart);\r\n        var prefixLength = strings.commonPrefixLength(previousPrefix, currentPrefix);\r\n        currentValue = currentValue.substring(prefixLength);\r\n        previousValue = previousValue.substring(prefixLength);\r\n        currentSelectionStart -= prefixLength;\r\n        previousSelectionStart -= prefixLength;\r\n        currentSelectionEnd -= prefixLength;\r\n        previousSelectionEnd -= prefixLength;\r\n        // console.log('AFTER DIFFING PREVIOUS STATE: <' + previousValue + '>, selectionStart: ' + previousSelectionStart + ', selectionEnd: ' + previousSelectionEnd);\r\n        // console.log('AFTER DIFFING CURRENT STATE: <' + currentValue + '>, selectionStart: ' + currentSelectionStart + ', selectionEnd: ' + currentSelectionEnd);\r\n        if (couldBeEmojiInput && currentSelectionStart === currentSelectionEnd && previousValue.length > 0) {\r\n            // on OSX, emojis from the emoji picker are inserted at random locations\r\n            // the only hints we can use is that the selection is immediately after the inserted emoji\r\n            // and that none of the old text has been deleted\r\n            var potentialEmojiInput = null;\r\n            if (currentSelectionStart === currentValue.length) {\r\n                // emoji potentially inserted \"somewhere\" after the previous selection => it should appear at the end of `currentValue`\r\n                if (strings.startsWith(currentValue, previousValue)) {\r\n                    // only if all of the old text is accounted for\r\n                    potentialEmojiInput = currentValue.substring(previousValue.length);\r\n                }\r\n            }\r\n            else {\r\n                // emoji potentially inserted \"somewhere\" before the previous selection => it should appear at the start of `currentValue`\r\n                if (strings.endsWith(currentValue, previousValue)) {\r\n                    // only if all of the old text is accounted for\r\n                    potentialEmojiInput = currentValue.substring(0, currentValue.length - previousValue.length);\r\n                }\r\n            }\r\n            if (potentialEmojiInput !== null && potentialEmojiInput.length > 0) {\r\n                // now we check that this is indeed an emoji\r\n                // emojis can grow quite long, so a length check is of no help\r\n                // e.g. 1F3F4 E0067 E0062 E0065 E006E E0067 E007F  ; fully-qualified     # 🏴󠁧󠁢󠁥󠁮󠁧󠁿 England\r\n                // Oftentimes, emojis use Variation Selector-16 (U+FE0F), so that is a good hint\r\n                // http://emojipedia.org/variation-selector-16/\r\n                // > An invisible codepoint which specifies that the preceding character\r\n                // > should be displayed with emoji presentation. Only required if the\r\n                // > preceding character defaults to text presentation.\r\n                if (/\\uFE0F/.test(potentialEmojiInput) || strings.containsEmoji(potentialEmojiInput)) {\r\n                    return {\r\n                        text: potentialEmojiInput,\r\n                        replaceCharCnt: 0\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        if (currentSelectionStart === currentSelectionEnd) {\r\n            // composition accept case (noticed in FF + Japanese)\r\n            // [blahblah] => blahblah|\r\n            if (previousValue === currentValue\r\n                && previousSelectionStart === 0\r\n                && previousSelectionEnd === previousValue.length\r\n                && currentSelectionStart === currentValue.length\r\n                && currentValue.indexOf('\\n') === -1) {\r\n                if (strings.containsFullWidthCharacter(currentValue)) {\r\n                    return {\r\n                        text: '',\r\n                        replaceCharCnt: 0\r\n                    };\r\n                }\r\n            }\r\n            // no current selection\r\n            var replacePreviousCharacters_1 = (previousPrefix.length - prefixLength);\r\n            // console.log('REMOVE PREVIOUS: ' + (previousPrefix.length - prefixLength) + ' chars');\r\n            return {\r\n                text: currentValue,\r\n                replaceCharCnt: replacePreviousCharacters_1\r\n            };\r\n        }\r\n        // there is a current selection => composition case\r\n        var replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\r\n        return {\r\n            text: currentValue,\r\n            replaceCharCnt: replacePreviousCharacters\r\n        };\r\n    };\r\n    TextAreaState.EMPTY = new TextAreaState('', 0, 0, null, null);\r\n    return TextAreaState;\r\n}());\r\nexport { TextAreaState };\r\nvar PagedScreenReaderStrategy = /** @class */ (function () {\r\n    function PagedScreenReaderStrategy() {\r\n    }\r\n    PagedScreenReaderStrategy._getPageOfLine = function (lineNumber, linesPerPage) {\r\n        return Math.floor((lineNumber - 1) / linesPerPage);\r\n    };\r\n    PagedScreenReaderStrategy._getRangeForPage = function (page, linesPerPage) {\r\n        var offset = page * linesPerPage;\r\n        var startLineNumber = offset + 1;\r\n        var endLineNumber = offset + linesPerPage;\r\n        return new Range(startLineNumber, 1, endLineNumber + 1, 1);\r\n    };\r\n    PagedScreenReaderStrategy.fromEditorSelection = function (previousState, model, selection, linesPerPage, trimLongText) {\r\n        var selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber, linesPerPage);\r\n        var selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage, linesPerPage);\r\n        var selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber, linesPerPage);\r\n        var selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage, linesPerPage);\r\n        var pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn));\r\n        var pretext = model.getValueInRange(pretextRange, 1 /* LF */);\r\n        var lastLine = model.getLineCount();\r\n        var lastLineMaxColumn = model.getLineMaxColumn(lastLine);\r\n        var posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\r\n        var posttext = model.getValueInRange(posttextRange, 1 /* LF */);\r\n        var text;\r\n        if (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\r\n            // take full selection\r\n            text = model.getValueInRange(selection, 1 /* LF */);\r\n        }\r\n        else {\r\n            var selectionRange1 = selectionStartPageRange.intersectRanges(selection);\r\n            var selectionRange2 = selectionEndPageRange.intersectRanges(selection);\r\n            text = (model.getValueInRange(selectionRange1, 1 /* LF */)\r\n                + String.fromCharCode(8230)\r\n                + model.getValueInRange(selectionRange2, 1 /* LF */));\r\n        }\r\n        // Chromium handles very poorly text even of a few thousand chars\r\n        // Cut text to avoid stalling the entire UI\r\n        if (trimLongText) {\r\n            var LIMIT_CHARS = 500;\r\n            if (pretext.length > LIMIT_CHARS) {\r\n                pretext = pretext.substring(pretext.length - LIMIT_CHARS, pretext.length);\r\n            }\r\n            if (posttext.length > LIMIT_CHARS) {\r\n                posttext = posttext.substring(0, LIMIT_CHARS);\r\n            }\r\n            if (text.length > 2 * LIMIT_CHARS) {\r\n                text = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\r\n            }\r\n        }\r\n        return new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, new Position(selection.startLineNumber, selection.startColumn), new Position(selection.endLineNumber, selection.endColumn));\r\n    };\r\n    return PagedScreenReaderStrategy;\r\n}());\r\nexport { PagedScreenReaderStrategy };\r\n"]},"metadata":{},"sourceType":"module"}