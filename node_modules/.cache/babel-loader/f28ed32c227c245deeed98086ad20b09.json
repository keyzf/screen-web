{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { toUint32 } from '../../../base/common/uint.js';\n\nvar PrefixSumIndexOfResult =\n/** @class */\nfunction () {\n  function PrefixSumIndexOfResult(index, remainder) {\n    this.index = index;\n    this.remainder = remainder;\n  }\n\n  return PrefixSumIndexOfResult;\n}();\n\nexport { PrefixSumIndexOfResult };\n\nvar PrefixSumComputer =\n/** @class */\nfunction () {\n  function PrefixSumComputer(values) {\n    this.values = values;\n    this.prefixSum = new Uint32Array(values.length);\n    this.prefixSumValidIndex = new Int32Array(1);\n    this.prefixSumValidIndex[0] = -1;\n  }\n\n  PrefixSumComputer.prototype.insertValues = function (insertIndex, insertValues) {\n    insertIndex = toUint32(insertIndex);\n    var oldValues = this.values;\n    var oldPrefixSum = this.prefixSum;\n    var insertValuesLen = insertValues.length;\n\n    if (insertValuesLen === 0) {\n      return false;\n    }\n\n    this.values = new Uint32Array(oldValues.length + insertValuesLen);\n    this.values.set(oldValues.subarray(0, insertIndex), 0);\n    this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n    this.values.set(insertValues, insertIndex);\n\n    if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = insertIndex - 1;\n    }\n\n    this.prefixSum = new Uint32Array(this.values.length);\n\n    if (this.prefixSumValidIndex[0] >= 0) {\n      this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n    }\n\n    return true;\n  };\n\n  PrefixSumComputer.prototype.changeValue = function (index, value) {\n    index = toUint32(index);\n    value = toUint32(value);\n\n    if (this.values[index] === value) {\n      return false;\n    }\n\n    this.values[index] = value;\n\n    if (index - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = index - 1;\n    }\n\n    return true;\n  };\n\n  PrefixSumComputer.prototype.removeValues = function (startIndex, cnt) {\n    startIndex = toUint32(startIndex);\n    cnt = toUint32(cnt);\n    var oldValues = this.values;\n    var oldPrefixSum = this.prefixSum;\n\n    if (startIndex >= oldValues.length) {\n      return false;\n    }\n\n    var maxCnt = oldValues.length - startIndex;\n\n    if (cnt >= maxCnt) {\n      cnt = maxCnt;\n    }\n\n    if (cnt === 0) {\n      return false;\n    }\n\n    this.values = new Uint32Array(oldValues.length - cnt);\n    this.values.set(oldValues.subarray(0, startIndex), 0);\n    this.values.set(oldValues.subarray(startIndex + cnt), startIndex);\n    this.prefixSum = new Uint32Array(this.values.length);\n\n    if (startIndex - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = startIndex - 1;\n    }\n\n    if (this.prefixSumValidIndex[0] >= 0) {\n      this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n    }\n\n    return true;\n  };\n\n  PrefixSumComputer.prototype.getTotalValue = function () {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    return this._getAccumulatedValue(this.values.length - 1);\n  };\n\n  PrefixSumComputer.prototype.getAccumulatedValue = function (index) {\n    if (index < 0) {\n      return 0;\n    }\n\n    index = toUint32(index);\n    return this._getAccumulatedValue(index);\n  };\n\n  PrefixSumComputer.prototype._getAccumulatedValue = function (index) {\n    if (index <= this.prefixSumValidIndex[0]) {\n      return this.prefixSum[index];\n    }\n\n    var startIndex = this.prefixSumValidIndex[0] + 1;\n\n    if (startIndex === 0) {\n      this.prefixSum[0] = this.values[0];\n      startIndex++;\n    }\n\n    if (index >= this.values.length) {\n      index = this.values.length - 1;\n    }\n\n    for (var i = startIndex; i <= index; i++) {\n      this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n    }\n\n    this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n    return this.prefixSum[index];\n  };\n\n  PrefixSumComputer.prototype.getIndexOf = function (accumulatedValue) {\n    accumulatedValue = Math.floor(accumulatedValue); //@perf\n    // Compute all sums (to get a fully valid prefixSum)\n\n    this.getTotalValue();\n    var low = 0;\n    var high = this.values.length - 1;\n    var mid = 0;\n    var midStop = 0;\n    var midStart = 0;\n\n    while (low <= high) {\n      mid = low + (high - low) / 2 | 0;\n      midStop = this.prefixSum[mid];\n      midStart = midStop - this.values[mid];\n\n      if (accumulatedValue < midStart) {\n        high = mid - 1;\n      } else if (accumulatedValue >= midStop) {\n        low = mid + 1;\n      } else {\n        break;\n      }\n    }\n\n    return new PrefixSumIndexOfResult(mid, accumulatedValue - midStart);\n  };\n\n  return PrefixSumComputer;\n}();\n\nexport { PrefixSumComputer };","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js"],"names":["toUint32","PrefixSumIndexOfResult","index","remainder","PrefixSumComputer","values","prefixSum","Uint32Array","length","prefixSumValidIndex","Int32Array","prototype","insertValues","insertIndex","oldValues","oldPrefixSum","insertValuesLen","set","subarray","changeValue","value","removeValues","startIndex","cnt","maxCnt","getTotalValue","_getAccumulatedValue","getAccumulatedValue","i","Math","max","getIndexOf","accumulatedValue","floor","low","high","mid","midStop","midStart"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { toUint32 } from '../../../base/common/uint.js';\r\nvar PrefixSumIndexOfResult = /** @class */ (function () {\r\n    function PrefixSumIndexOfResult(index, remainder) {\r\n        this.index = index;\r\n        this.remainder = remainder;\r\n    }\r\n    return PrefixSumIndexOfResult;\r\n}());\r\nexport { PrefixSumIndexOfResult };\r\nvar PrefixSumComputer = /** @class */ (function () {\r\n    function PrefixSumComputer(values) {\r\n        this.values = values;\r\n        this.prefixSum = new Uint32Array(values.length);\r\n        this.prefixSumValidIndex = new Int32Array(1);\r\n        this.prefixSumValidIndex[0] = -1;\r\n    }\r\n    PrefixSumComputer.prototype.insertValues = function (insertIndex, insertValues) {\r\n        insertIndex = toUint32(insertIndex);\r\n        var oldValues = this.values;\r\n        var oldPrefixSum = this.prefixSum;\r\n        var insertValuesLen = insertValues.length;\r\n        if (insertValuesLen === 0) {\r\n            return false;\r\n        }\r\n        this.values = new Uint32Array(oldValues.length + insertValuesLen);\r\n        this.values.set(oldValues.subarray(0, insertIndex), 0);\r\n        this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\r\n        this.values.set(insertValues, insertIndex);\r\n        if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = insertIndex - 1;\r\n        }\r\n        this.prefixSum = new Uint32Array(this.values.length);\r\n        if (this.prefixSumValidIndex[0] >= 0) {\r\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\r\n        }\r\n        return true;\r\n    };\r\n    PrefixSumComputer.prototype.changeValue = function (index, value) {\r\n        index = toUint32(index);\r\n        value = toUint32(value);\r\n        if (this.values[index] === value) {\r\n            return false;\r\n        }\r\n        this.values[index] = value;\r\n        if (index - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = index - 1;\r\n        }\r\n        return true;\r\n    };\r\n    PrefixSumComputer.prototype.removeValues = function (startIndex, cnt) {\r\n        startIndex = toUint32(startIndex);\r\n        cnt = toUint32(cnt);\r\n        var oldValues = this.values;\r\n        var oldPrefixSum = this.prefixSum;\r\n        if (startIndex >= oldValues.length) {\r\n            return false;\r\n        }\r\n        var maxCnt = oldValues.length - startIndex;\r\n        if (cnt >= maxCnt) {\r\n            cnt = maxCnt;\r\n        }\r\n        if (cnt === 0) {\r\n            return false;\r\n        }\r\n        this.values = new Uint32Array(oldValues.length - cnt);\r\n        this.values.set(oldValues.subarray(0, startIndex), 0);\r\n        this.values.set(oldValues.subarray(startIndex + cnt), startIndex);\r\n        this.prefixSum = new Uint32Array(this.values.length);\r\n        if (startIndex - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = startIndex - 1;\r\n        }\r\n        if (this.prefixSumValidIndex[0] >= 0) {\r\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\r\n        }\r\n        return true;\r\n    };\r\n    PrefixSumComputer.prototype.getTotalValue = function () {\r\n        if (this.values.length === 0) {\r\n            return 0;\r\n        }\r\n        return this._getAccumulatedValue(this.values.length - 1);\r\n    };\r\n    PrefixSumComputer.prototype.getAccumulatedValue = function (index) {\r\n        if (index < 0) {\r\n            return 0;\r\n        }\r\n        index = toUint32(index);\r\n        return this._getAccumulatedValue(index);\r\n    };\r\n    PrefixSumComputer.prototype._getAccumulatedValue = function (index) {\r\n        if (index <= this.prefixSumValidIndex[0]) {\r\n            return this.prefixSum[index];\r\n        }\r\n        var startIndex = this.prefixSumValidIndex[0] + 1;\r\n        if (startIndex === 0) {\r\n            this.prefixSum[0] = this.values[0];\r\n            startIndex++;\r\n        }\r\n        if (index >= this.values.length) {\r\n            index = this.values.length - 1;\r\n        }\r\n        for (var i = startIndex; i <= index; i++) {\r\n            this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\r\n        }\r\n        this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\r\n        return this.prefixSum[index];\r\n    };\r\n    PrefixSumComputer.prototype.getIndexOf = function (accumulatedValue) {\r\n        accumulatedValue = Math.floor(accumulatedValue); //@perf\r\n        // Compute all sums (to get a fully valid prefixSum)\r\n        this.getTotalValue();\r\n        var low = 0;\r\n        var high = this.values.length - 1;\r\n        var mid = 0;\r\n        var midStop = 0;\r\n        var midStart = 0;\r\n        while (low <= high) {\r\n            mid = low + ((high - low) / 2) | 0;\r\n            midStop = this.prefixSum[mid];\r\n            midStart = midStop - this.values[mid];\r\n            if (accumulatedValue < midStart) {\r\n                high = mid - 1;\r\n            }\r\n            else if (accumulatedValue >= midStop) {\r\n                low = mid + 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return new PrefixSumIndexOfResult(mid, accumulatedValue - midStart);\r\n    };\r\n    return PrefixSumComputer;\r\n}());\r\nexport { PrefixSumComputer };\r\n"]},"metadata":{},"sourceType":"module"}