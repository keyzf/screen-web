{"ast":null,"code":"import { startsWithIgnoreCase } from './strings.js';\nimport { sep, posix } from './path.js';\n/**\r\n * Takes a Windows OS path and changes backward slashes to forward slashes.\r\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\r\n * Using it on a Linux or MaxOS path might change it.\r\n */\n\nexport function toSlashes(osPath) {\n  return osPath.replace(/[\\\\/]/g, posix.sep);\n}\nexport function isEqualOrParent(path, candidate, ignoreCase, separator) {\n  if (separator === void 0) {\n    separator = sep;\n  }\n\n  if (path === candidate) {\n    return true;\n  }\n\n  if (!path || !candidate) {\n    return false;\n  }\n\n  if (candidate.length > path.length) {\n    return false;\n  }\n\n  if (ignoreCase) {\n    var beginsWith = startsWithIgnoreCase(path, candidate);\n\n    if (!beginsWith) {\n      return false;\n    }\n\n    if (candidate.length === path.length) {\n      return true; // same path, different casing\n    }\n\n    var sepOffset = candidate.length;\n\n    if (candidate.charAt(candidate.length - 1) === separator) {\n      sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\n    }\n\n    return path.charAt(sepOffset) === separator;\n  }\n\n  if (candidate.charAt(candidate.length - 1) !== separator) {\n    candidate += separator;\n  }\n\n  return path.indexOf(candidate) === 0;\n}\nexport function isWindowsDriveLetter(char0) {\n  return char0 >= 65\n  /* A */\n  && char0 <= 90\n  /* Z */\n  || char0 >= 97\n  /* a */\n  && char0 <= 122\n  /* z */\n  ;\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/base/common/extpath.js"],"names":["startsWithIgnoreCase","sep","posix","toSlashes","osPath","replace","isEqualOrParent","path","candidate","ignoreCase","separator","length","beginsWith","sepOffset","charAt","indexOf","isWindowsDriveLetter","char0"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,cAArC;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,WAA3B;AACA;;;;;;AAKA,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AAC9B,SAAOA,MAAM,CAACC,OAAP,CAAe,QAAf,EAAyBH,KAAK,CAACD,GAA/B,CAAP;AACH;AACD,OAAO,SAASK,eAAT,CAAyBC,IAAzB,EAA+BC,SAA/B,EAA0CC,UAA1C,EAAsDC,SAAtD,EAAiE;AACpE,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAGT,GAAZ;AAAkB;;AAC9C,MAAIM,IAAI,KAAKC,SAAb,EAAwB;AACpB,WAAO,IAAP;AACH;;AACD,MAAI,CAACD,IAAD,IAAS,CAACC,SAAd,EAAyB;AACrB,WAAO,KAAP;AACH;;AACD,MAAIA,SAAS,CAACG,MAAV,GAAmBJ,IAAI,CAACI,MAA5B,EAAoC;AAChC,WAAO,KAAP;AACH;;AACD,MAAIF,UAAJ,EAAgB;AACZ,QAAIG,UAAU,GAAGZ,oBAAoB,CAACO,IAAD,EAAOC,SAAP,CAArC;;AACA,QAAI,CAACI,UAAL,EAAiB;AACb,aAAO,KAAP;AACH;;AACD,QAAIJ,SAAS,CAACG,MAAV,KAAqBJ,IAAI,CAACI,MAA9B,EAAsC;AAClC,aAAO,IAAP,CADkC,CACrB;AAChB;;AACD,QAAIE,SAAS,GAAGL,SAAS,CAACG,MAA1B;;AACA,QAAIH,SAAS,CAACM,MAAV,CAAiBN,SAAS,CAACG,MAAV,GAAmB,CAApC,MAA2CD,SAA/C,EAA0D;AACtDG,MAAAA,SAAS,GAD6C,CACzC;AAChB;;AACD,WAAON,IAAI,CAACO,MAAL,CAAYD,SAAZ,MAA2BH,SAAlC;AACH;;AACD,MAAIF,SAAS,CAACM,MAAV,CAAiBN,SAAS,CAACG,MAAV,GAAmB,CAApC,MAA2CD,SAA/C,EAA0D;AACtDF,IAAAA,SAAS,IAAIE,SAAb;AACH;;AACD,SAAOH,IAAI,CAACQ,OAAL,CAAaP,SAAb,MAA4B,CAAnC;AACH;AACD,OAAO,SAASQ,oBAAT,CAA8BC,KAA9B,EAAqC;AACxC,SAAOA,KAAK,IAAI;AAAG;AAAZ,KAAuBA,KAAK,IAAI;AAAG;AAAnC,KAA8CA,KAAK,IAAI;AAAG;AAAZ,KAAuBA,KAAK,IAAI;AAAI;AAAzF;AACH","sourcesContent":["import { startsWithIgnoreCase } from './strings.js';\r\nimport { sep, posix } from './path.js';\r\n/**\r\n * Takes a Windows OS path and changes backward slashes to forward slashes.\r\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\r\n * Using it on a Linux or MaxOS path might change it.\r\n */\r\nexport function toSlashes(osPath) {\r\n    return osPath.replace(/[\\\\/]/g, posix.sep);\r\n}\r\nexport function isEqualOrParent(path, candidate, ignoreCase, separator) {\r\n    if (separator === void 0) { separator = sep; }\r\n    if (path === candidate) {\r\n        return true;\r\n    }\r\n    if (!path || !candidate) {\r\n        return false;\r\n    }\r\n    if (candidate.length > path.length) {\r\n        return false;\r\n    }\r\n    if (ignoreCase) {\r\n        var beginsWith = startsWithIgnoreCase(path, candidate);\r\n        if (!beginsWith) {\r\n            return false;\r\n        }\r\n        if (candidate.length === path.length) {\r\n            return true; // same path, different casing\r\n        }\r\n        var sepOffset = candidate.length;\r\n        if (candidate.charAt(candidate.length - 1) === separator) {\r\n            sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\r\n        }\r\n        return path.charAt(sepOffset) === separator;\r\n    }\r\n    if (candidate.charAt(candidate.length - 1) !== separator) {\r\n        candidate += separator;\r\n    }\r\n    return path.indexOf(candidate) === 0;\r\n}\r\nexport function isWindowsDriveLetter(char0) {\r\n    return char0 >= 65 /* A */ && char0 <= 90 /* Z */ || char0 >= 97 /* a */ && char0 <= 122 /* z */;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}