{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range, SelectionRange } from '../jsonLanguageTypes.js';\nimport { createScanner } from './../../jsonc-parser/main.js';\nexport function getSelectionRanges(document, positions, doc) {\n  function getSelectionRange(position) {\n    var offset = document.offsetAt(position);\n    var node = doc.getNodeFromOffset(offset, true);\n    var result = [];\n\n    while (node) {\n      switch (node.type) {\n        case 'string':\n        case 'object':\n        case 'array':\n          // range without \", [ or {\n          var cStart = node.offset + 1,\n              cEnd = node.offset + node.length - 1;\n\n          if (cStart < cEnd && offset >= cStart && offset <= cEnd) {\n            result.push(newRange(cStart, cEnd));\n          }\n\n          result.push(newRange(node.offset, node.offset + node.length));\n          break;\n\n        case 'number':\n        case 'boolean':\n        case 'null':\n        case 'property':\n          result.push(newRange(node.offset, node.offset + node.length));\n          break;\n      }\n\n      if (node.type === 'property' || node.parent && node.parent.type === 'array') {\n        var afterCommaOffset = getOffsetAfterNextToken(node.offset + node.length, 5\n        /* CommaToken */\n        );\n\n        if (afterCommaOffset !== -1) {\n          result.push(newRange(node.offset, afterCommaOffset));\n        }\n      }\n\n      node = node.parent;\n    }\n\n    var current = undefined;\n\n    for (var index = result.length - 1; index >= 0; index--) {\n      current = SelectionRange.create(result[index], current);\n    }\n\n    if (!current) {\n      current = SelectionRange.create(Range.create(position, position));\n    }\n\n    return current;\n  }\n\n  function newRange(start, end) {\n    return Range.create(document.positionAt(start), document.positionAt(end));\n  }\n\n  var scanner = createScanner(document.getText(), true);\n\n  function getOffsetAfterNextToken(offset, expectedToken) {\n    scanner.setPosition(offset);\n    var token = scanner.scan();\n\n    if (token === expectedToken) {\n      return scanner.getTokenOffset() + scanner.getTokenLength();\n    }\n\n    return -1;\n  }\n\n  return positions.map(getSelectionRange);\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonSelectionRanges.js"],"names":["Range","SelectionRange","createScanner","getSelectionRanges","document","positions","doc","getSelectionRange","position","offset","offsetAt","node","getNodeFromOffset","result","type","cStart","cEnd","length","push","newRange","parent","afterCommaOffset","getOffsetAfterNextToken","current","undefined","index","create","start","end","positionAt","scanner","getText","expectedToken","setPosition","token","scan","getTokenOffset","getTokenLength","map"],"mappings":"AAAA;;;;AAIA,SAASA,KAAT,EAAgBC,cAAhB,QAAsC,yBAAtC;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,GAAjD,EAAsD;AACzD,WAASC,iBAAT,CAA2BC,QAA3B,EAAqC;AACjC,QAAIC,MAAM,GAAGL,QAAQ,CAACM,QAAT,CAAkBF,QAAlB,CAAb;AACA,QAAIG,IAAI,GAAGL,GAAG,CAACM,iBAAJ,CAAsBH,MAAtB,EAA8B,IAA9B,CAAX;AACA,QAAII,MAAM,GAAG,EAAb;;AACA,WAAOF,IAAP,EAAa;AACT,cAAQA,IAAI,CAACG,IAAb;AACI,aAAK,QAAL;AACA,aAAK,QAAL;AACA,aAAK,OAAL;AACI;AACA,cAAIC,MAAM,GAAGJ,IAAI,CAACF,MAAL,GAAc,CAA3B;AAAA,cAA8BO,IAAI,GAAGL,IAAI,CAACF,MAAL,GAAcE,IAAI,CAACM,MAAnB,GAA4B,CAAjE;;AACA,cAAIF,MAAM,GAAGC,IAAT,IAAiBP,MAAM,IAAIM,MAA3B,IAAqCN,MAAM,IAAIO,IAAnD,EAAyD;AACrDH,YAAAA,MAAM,CAACK,IAAP,CAAYC,QAAQ,CAACJ,MAAD,EAASC,IAAT,CAApB;AACH;;AACDH,UAAAA,MAAM,CAACK,IAAP,CAAYC,QAAQ,CAACR,IAAI,CAACF,MAAN,EAAcE,IAAI,CAACF,MAAL,GAAcE,IAAI,CAACM,MAAjC,CAApB;AACA;;AACJ,aAAK,QAAL;AACA,aAAK,SAAL;AACA,aAAK,MAAL;AACA,aAAK,UAAL;AACIJ,UAAAA,MAAM,CAACK,IAAP,CAAYC,QAAQ,CAACR,IAAI,CAACF,MAAN,EAAcE,IAAI,CAACF,MAAL,GAAcE,IAAI,CAACM,MAAjC,CAApB;AACA;AAhBR;;AAkBA,UAAIN,IAAI,CAACG,IAAL,KAAc,UAAd,IAA4BH,IAAI,CAACS,MAAL,IAAeT,IAAI,CAACS,MAAL,CAAYN,IAAZ,KAAqB,OAApE,EAA6E;AACzE,YAAIO,gBAAgB,GAAGC,uBAAuB,CAACX,IAAI,CAACF,MAAL,GAAcE,IAAI,CAACM,MAApB,EAA4B;AAAE;AAA9B,SAA9C;;AACA,YAAII,gBAAgB,KAAK,CAAC,CAA1B,EAA6B;AACzBR,UAAAA,MAAM,CAACK,IAAP,CAAYC,QAAQ,CAACR,IAAI,CAACF,MAAN,EAAcY,gBAAd,CAApB;AACH;AACJ;;AACDV,MAAAA,IAAI,GAAGA,IAAI,CAACS,MAAZ;AACH;;AACD,QAAIG,OAAO,GAAGC,SAAd;;AACA,SAAK,IAAIC,KAAK,GAAGZ,MAAM,CAACI,MAAP,GAAgB,CAAjC,EAAoCQ,KAAK,IAAI,CAA7C,EAAgDA,KAAK,EAArD,EAAyD;AACrDF,MAAAA,OAAO,GAAGtB,cAAc,CAACyB,MAAf,CAAsBb,MAAM,CAACY,KAAD,CAA5B,EAAqCF,OAArC,CAAV;AACH;;AACD,QAAI,CAACA,OAAL,EAAc;AACVA,MAAAA,OAAO,GAAGtB,cAAc,CAACyB,MAAf,CAAsB1B,KAAK,CAAC0B,MAAN,CAAalB,QAAb,EAAuBA,QAAvB,CAAtB,CAAV;AACH;;AACD,WAAOe,OAAP;AACH;;AACD,WAASJ,QAAT,CAAkBQ,KAAlB,EAAyBC,GAAzB,EAA8B;AAC1B,WAAO5B,KAAK,CAAC0B,MAAN,CAAatB,QAAQ,CAACyB,UAAT,CAAoBF,KAApB,CAAb,EAAyCvB,QAAQ,CAACyB,UAAT,CAAoBD,GAApB,CAAzC,CAAP;AACH;;AACD,MAAIE,OAAO,GAAG5B,aAAa,CAACE,QAAQ,CAAC2B,OAAT,EAAD,EAAqB,IAArB,CAA3B;;AACA,WAAST,uBAAT,CAAiCb,MAAjC,EAAyCuB,aAAzC,EAAwD;AACpDF,IAAAA,OAAO,CAACG,WAAR,CAAoBxB,MAApB;AACA,QAAIyB,KAAK,GAAGJ,OAAO,CAACK,IAAR,EAAZ;;AACA,QAAID,KAAK,KAAKF,aAAd,EAA6B;AACzB,aAAOF,OAAO,CAACM,cAAR,KAA2BN,OAAO,CAACO,cAAR,EAAlC;AACH;;AACD,WAAO,CAAC,CAAR;AACH;;AACD,SAAOhC,SAAS,CAACiC,GAAV,CAAc/B,iBAAd,CAAP;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range, SelectionRange } from '../jsonLanguageTypes.js';\nimport { createScanner } from './../../jsonc-parser/main.js';\nexport function getSelectionRanges(document, positions, doc) {\n    function getSelectionRange(position) {\n        var offset = document.offsetAt(position);\n        var node = doc.getNodeFromOffset(offset, true);\n        var result = [];\n        while (node) {\n            switch (node.type) {\n                case 'string':\n                case 'object':\n                case 'array':\n                    // range without \", [ or {\n                    var cStart = node.offset + 1, cEnd = node.offset + node.length - 1;\n                    if (cStart < cEnd && offset >= cStart && offset <= cEnd) {\n                        result.push(newRange(cStart, cEnd));\n                    }\n                    result.push(newRange(node.offset, node.offset + node.length));\n                    break;\n                case 'number':\n                case 'boolean':\n                case 'null':\n                case 'property':\n                    result.push(newRange(node.offset, node.offset + node.length));\n                    break;\n            }\n            if (node.type === 'property' || node.parent && node.parent.type === 'array') {\n                var afterCommaOffset = getOffsetAfterNextToken(node.offset + node.length, 5 /* CommaToken */);\n                if (afterCommaOffset !== -1) {\n                    result.push(newRange(node.offset, afterCommaOffset));\n                }\n            }\n            node = node.parent;\n        }\n        var current = undefined;\n        for (var index = result.length - 1; index >= 0; index--) {\n            current = SelectionRange.create(result[index], current);\n        }\n        if (!current) {\n            current = SelectionRange.create(Range.create(position, position));\n        }\n        return current;\n    }\n    function newRange(start, end) {\n        return Range.create(document.positionAt(start), document.positionAt(end));\n    }\n    var scanner = createScanner(document.getText(), true);\n    function getOffsetAfterNextToken(offset, expectedToken) {\n        scanner.setPosition(offset);\n        var token = scanner.scan();\n        if (token === expectedToken) {\n            return scanner.getTokenOffset() + scanner.getTokenLength();\n        }\n        return -1;\n    }\n    return positions.map(getSelectionRange);\n}\n"]},"metadata":{},"sourceType":"module"}