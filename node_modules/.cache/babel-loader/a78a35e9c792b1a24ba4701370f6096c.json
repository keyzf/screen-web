{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './clipboard.css';\nimport * as nls from '../../../nls.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { CopyOptions } from '../../browser/controller/textAreaInput.js';\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nvar CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\nvar supportsCut = platform.isNative || document.queryCommandSupported('cut');\nvar supportsCopy = platform.isNative || document.queryCommandSupported('copy'); // IE and Edge have trouble with setting html content in clipboard\n\nvar supportsCopyWithSyntaxHighlighting = supportsCopy && !browser.isEdgeOrIE; // Chrome incorrectly returns true for document.queryCommandSupported('paste')\n// when the paste feature is available but the calling script has insufficient\n// privileges to actually perform the action\n\nvar supportsPaste = platform.isNative || !browser.isChrome && document.queryCommandSupported('paste');\n\nvar ExecCommandAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecCommandAction, _super);\n\n  function ExecCommandAction(browserCommand, opts) {\n    var _this = _super.call(this, opts) || this;\n\n    _this.browserCommand = browserCommand;\n    return _this;\n  }\n\n  ExecCommandAction.prototype.runCommand = function (accessor, args) {\n    var focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor(); // Only if editor text focus (i.e. not if editor has widget focus).\n\n    if (focusedEditor && focusedEditor.hasTextFocus()) {\n      focusedEditor.trigger('keyboard', this.id, args);\n      return;\n    }\n\n    document.execCommand(this.browserCommand);\n  };\n\n  ExecCommandAction.prototype.run = function (accessor, editor) {\n    editor.focus();\n    document.execCommand(this.browserCommand);\n  };\n\n  return ExecCommandAction;\n}(EditorAction);\n\nvar ExecCommandCutAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecCommandCutAction, _super);\n\n  function ExecCommandCutAction() {\n    var _this = this;\n\n    var kbOpts = {\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 54\n      /* KEY_X */\n      ,\n      win: {\n        primary: 2048\n        /* CtrlCmd */\n        | 54\n        /* KEY_X */\n        ,\n        secondary: [1024\n        /* Shift */\n        | 20\n        /* Delete */\n        ]\n      },\n      weight: 100\n      /* EditorContrib */\n\n    }; // Do not bind cut keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n\n    if (!platform.isNative) {\n      kbOpts = undefined;\n    }\n\n    _this = _super.call(this, 'cut', {\n      id: 'editor.action.clipboardCutAction',\n      label: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n      alias: 'Cut',\n      precondition: EditorContextKeys.writable,\n      kbOpts: kbOpts,\n      contextMenuOpts: {\n        group: CLIPBOARD_CONTEXT_MENU_GROUP,\n        order: 1\n      },\n      menuOpts: {\n        menuId: 17\n        /* MenubarEditMenu */\n        ,\n        group: '2_ccp',\n        title: nls.localize({\n          key: 'miCut',\n          comment: ['&& denotes a mnemonic']\n        }, \"Cu&&t\"),\n        order: 1\n      }\n    }) || this;\n    return _this;\n  }\n\n  ExecCommandCutAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var emptySelectionClipboard = editor.getOption(25\n    /* emptySelectionClipboard */\n    );\n\n    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n      return;\n    }\n\n    _super.prototype.run.call(this, accessor, editor);\n  };\n\n  return ExecCommandCutAction;\n}(ExecCommandAction);\n\nvar ExecCommandCopyAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecCommandCopyAction, _super);\n\n  function ExecCommandCopyAction() {\n    var _this = this;\n\n    var kbOpts = {\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 33\n      /* KEY_C */\n      ,\n      win: {\n        primary: 2048\n        /* CtrlCmd */\n        | 33\n        /* KEY_C */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 19\n        /* Insert */\n        ]\n      },\n      weight: 100\n      /* EditorContrib */\n\n    }; // Do not bind copy keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n\n    if (!platform.isNative) {\n      kbOpts = undefined;\n    }\n\n    _this = _super.call(this, 'copy', {\n      id: 'editor.action.clipboardCopyAction',\n      label: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n      alias: 'Copy',\n      precondition: undefined,\n      kbOpts: kbOpts,\n      contextMenuOpts: {\n        group: CLIPBOARD_CONTEXT_MENU_GROUP,\n        order: 2\n      },\n      menuOpts: {\n        menuId: 17\n        /* MenubarEditMenu */\n        ,\n        group: '2_ccp',\n        title: nls.localize({\n          key: 'miCopy',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Copy\"),\n        order: 2\n      }\n    }) || this;\n    return _this;\n  }\n\n  ExecCommandCopyAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var emptySelectionClipboard = editor.getOption(25\n    /* emptySelectionClipboard */\n    );\n\n    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n      return;\n    }\n\n    _super.prototype.run.call(this, accessor, editor);\n  };\n\n  return ExecCommandCopyAction;\n}(ExecCommandAction);\n\nvar ExecCommandPasteAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecCommandPasteAction, _super);\n\n  function ExecCommandPasteAction() {\n    var _this = this;\n\n    var kbOpts = {\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 52\n      /* KEY_V */\n      ,\n      win: {\n        primary: 2048\n        /* CtrlCmd */\n        | 52\n        /* KEY_V */\n        ,\n        secondary: [1024\n        /* Shift */\n        | 19\n        /* Insert */\n        ]\n      },\n      weight: 100\n      /* EditorContrib */\n\n    }; // Do not bind paste keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n\n    if (!platform.isNative) {\n      kbOpts = undefined;\n    }\n\n    _this = _super.call(this, 'paste', {\n      id: 'editor.action.clipboardPasteAction',\n      label: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n      alias: 'Paste',\n      precondition: EditorContextKeys.writable,\n      kbOpts: kbOpts,\n      contextMenuOpts: {\n        group: CLIPBOARD_CONTEXT_MENU_GROUP,\n        order: 3\n      },\n      menuOpts: {\n        menuId: 17\n        /* MenubarEditMenu */\n        ,\n        group: '2_ccp',\n        title: nls.localize({\n          key: 'miPaste',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Paste\"),\n        order: 3\n      }\n    }) || this;\n    return _this;\n  }\n\n  return ExecCommandPasteAction;\n}(ExecCommandAction);\n\nvar ExecCommandCopyWithSyntaxHighlightingAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecCommandCopyWithSyntaxHighlightingAction, _super);\n\n  function ExecCommandCopyWithSyntaxHighlightingAction() {\n    return _super.call(this, 'copy', {\n      id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n      label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n      alias: 'Copy With Syntax Highlighting',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  ExecCommandCopyWithSyntaxHighlightingAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var emptySelectionClipboard = editor.getOption(25\n    /* emptySelectionClipboard */\n    );\n\n    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n      return;\n    }\n\n    CopyOptions.forceCopyWithSyntaxHighlighting = true;\n\n    _super.prototype.run.call(this, accessor, editor);\n\n    CopyOptions.forceCopyWithSyntaxHighlighting = false;\n  };\n\n  return ExecCommandCopyWithSyntaxHighlightingAction;\n}(ExecCommandAction);\n\nif (supportsCut) {\n  registerEditorAction(ExecCommandCutAction);\n}\n\nif (supportsCopy) {\n  registerEditorAction(ExecCommandCopyAction);\n}\n\nif (supportsPaste) {\n  registerEditorAction(ExecCommandPasteAction);\n}\n\nif (supportsCopyWithSyntaxHighlighting) {\n  registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/editor/contrib/clipboard/clipboard.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","nls","browser","platform","CopyOptions","EditorAction","registerEditorAction","ICodeEditorService","EditorContextKeys","CLIPBOARD_CONTEXT_MENU_GROUP","supportsCut","isNative","document","queryCommandSupported","supportsCopy","supportsCopyWithSyntaxHighlighting","isEdgeOrIE","supportsPaste","isChrome","ExecCommandAction","_super","browserCommand","opts","_this","call","runCommand","accessor","args","focusedEditor","get","getFocusedCodeEditor","hasTextFocus","trigger","id","execCommand","run","editor","focus","ExecCommandCutAction","kbOpts","kbExpr","textInputFocus","primary","win","secondary","weight","undefined","label","localize","alias","precondition","writable","contextMenuOpts","group","order","menuOpts","menuId","title","key","comment","hasModel","emptySelectionClipboard","getOption","getSelection","isEmpty","ExecCommandCopyAction","ExecCommandPasteAction","ExecCommandCopyWithSyntaxHighlightingAction","forceCopyWithSyntaxHighlighting"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport './clipboard.css';\r\nimport * as nls from '../../../nls.js';\r\nimport * as browser from '../../../base/browser/browser.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nimport { CopyOptions } from '../../browser/controller/textAreaInput.js';\r\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\r\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nvar CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\r\nvar supportsCut = (platform.isNative || document.queryCommandSupported('cut'));\r\nvar supportsCopy = (platform.isNative || document.queryCommandSupported('copy'));\r\n// IE and Edge have trouble with setting html content in clipboard\r\nvar supportsCopyWithSyntaxHighlighting = (supportsCopy && !browser.isEdgeOrIE);\r\n// Chrome incorrectly returns true for document.queryCommandSupported('paste')\r\n// when the paste feature is available but the calling script has insufficient\r\n// privileges to actually perform the action\r\nvar supportsPaste = (platform.isNative || (!browser.isChrome && document.queryCommandSupported('paste')));\r\nvar ExecCommandAction = /** @class */ (function (_super) {\r\n    __extends(ExecCommandAction, _super);\r\n    function ExecCommandAction(browserCommand, opts) {\r\n        var _this = _super.call(this, opts) || this;\r\n        _this.browserCommand = browserCommand;\r\n        return _this;\r\n    }\r\n    ExecCommandAction.prototype.runCommand = function (accessor, args) {\r\n        var focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\r\n        // Only if editor text focus (i.e. not if editor has widget focus).\r\n        if (focusedEditor && focusedEditor.hasTextFocus()) {\r\n            focusedEditor.trigger('keyboard', this.id, args);\r\n            return;\r\n        }\r\n        document.execCommand(this.browserCommand);\r\n    };\r\n    ExecCommandAction.prototype.run = function (accessor, editor) {\r\n        editor.focus();\r\n        document.execCommand(this.browserCommand);\r\n    };\r\n    return ExecCommandAction;\r\n}(EditorAction));\r\nvar ExecCommandCutAction = /** @class */ (function (_super) {\r\n    __extends(ExecCommandCutAction, _super);\r\n    function ExecCommandCutAction() {\r\n        var _this = this;\r\n        var kbOpts = {\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 54 /* KEY_X */,\r\n            win: { primary: 2048 /* CtrlCmd */ | 54 /* KEY_X */, secondary: [1024 /* Shift */ | 20 /* Delete */] },\r\n            weight: 100 /* EditorContrib */\r\n        };\r\n        // Do not bind cut keybindings in the browser,\r\n        // since browsers do that for us and it avoids security prompts\r\n        if (!platform.isNative) {\r\n            kbOpts = undefined;\r\n        }\r\n        _this = _super.call(this, 'cut', {\r\n            id: 'editor.action.clipboardCutAction',\r\n            label: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\r\n            alias: 'Cut',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: kbOpts,\r\n            contextMenuOpts: {\r\n                group: CLIPBOARD_CONTEXT_MENU_GROUP,\r\n                order: 1\r\n            },\r\n            menuOpts: {\r\n                menuId: 17 /* MenubarEditMenu */,\r\n                group: '2_ccp',\r\n                title: nls.localize({ key: 'miCut', comment: ['&& denotes a mnemonic'] }, \"Cu&&t\"),\r\n                order: 1\r\n            }\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    ExecCommandCutAction.prototype.run = function (accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        var emptySelectionClipboard = editor.getOption(25 /* emptySelectionClipboard */);\r\n        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\r\n            return;\r\n        }\r\n        _super.prototype.run.call(this, accessor, editor);\r\n    };\r\n    return ExecCommandCutAction;\r\n}(ExecCommandAction));\r\nvar ExecCommandCopyAction = /** @class */ (function (_super) {\r\n    __extends(ExecCommandCopyAction, _super);\r\n    function ExecCommandCopyAction() {\r\n        var _this = this;\r\n        var kbOpts = {\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 33 /* KEY_C */,\r\n            win: { primary: 2048 /* CtrlCmd */ | 33 /* KEY_C */, secondary: [2048 /* CtrlCmd */ | 19 /* Insert */] },\r\n            weight: 100 /* EditorContrib */\r\n        };\r\n        // Do not bind copy keybindings in the browser,\r\n        // since browsers do that for us and it avoids security prompts\r\n        if (!platform.isNative) {\r\n            kbOpts = undefined;\r\n        }\r\n        _this = _super.call(this, 'copy', {\r\n            id: 'editor.action.clipboardCopyAction',\r\n            label: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\r\n            alias: 'Copy',\r\n            precondition: undefined,\r\n            kbOpts: kbOpts,\r\n            contextMenuOpts: {\r\n                group: CLIPBOARD_CONTEXT_MENU_GROUP,\r\n                order: 2\r\n            },\r\n            menuOpts: {\r\n                menuId: 17 /* MenubarEditMenu */,\r\n                group: '2_ccp',\r\n                title: nls.localize({ key: 'miCopy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"),\r\n                order: 2\r\n            }\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    ExecCommandCopyAction.prototype.run = function (accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        var emptySelectionClipboard = editor.getOption(25 /* emptySelectionClipboard */);\r\n        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\r\n            return;\r\n        }\r\n        _super.prototype.run.call(this, accessor, editor);\r\n    };\r\n    return ExecCommandCopyAction;\r\n}(ExecCommandAction));\r\nvar ExecCommandPasteAction = /** @class */ (function (_super) {\r\n    __extends(ExecCommandPasteAction, _super);\r\n    function ExecCommandPasteAction() {\r\n        var _this = this;\r\n        var kbOpts = {\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */,\r\n            win: { primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */, secondary: [1024 /* Shift */ | 19 /* Insert */] },\r\n            weight: 100 /* EditorContrib */\r\n        };\r\n        // Do not bind paste keybindings in the browser,\r\n        // since browsers do that for us and it avoids security prompts\r\n        if (!platform.isNative) {\r\n            kbOpts = undefined;\r\n        }\r\n        _this = _super.call(this, 'paste', {\r\n            id: 'editor.action.clipboardPasteAction',\r\n            label: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\r\n            alias: 'Paste',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: kbOpts,\r\n            contextMenuOpts: {\r\n                group: CLIPBOARD_CONTEXT_MENU_GROUP,\r\n                order: 3\r\n            },\r\n            menuOpts: {\r\n                menuId: 17 /* MenubarEditMenu */,\r\n                group: '2_ccp',\r\n                title: nls.localize({ key: 'miPaste', comment: ['&& denotes a mnemonic'] }, \"&&Paste\"),\r\n                order: 3\r\n            }\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    return ExecCommandPasteAction;\r\n}(ExecCommandAction));\r\nvar ExecCommandCopyWithSyntaxHighlightingAction = /** @class */ (function (_super) {\r\n    __extends(ExecCommandCopyWithSyntaxHighlightingAction, _super);\r\n    function ExecCommandCopyWithSyntaxHighlightingAction() {\r\n        return _super.call(this, 'copy', {\r\n            id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\r\n            label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\r\n            alias: 'Copy With Syntax Highlighting',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.textInputFocus,\r\n                primary: 0,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        }) || this;\r\n    }\r\n    ExecCommandCopyWithSyntaxHighlightingAction.prototype.run = function (accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        var emptySelectionClipboard = editor.getOption(25 /* emptySelectionClipboard */);\r\n        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\r\n            return;\r\n        }\r\n        CopyOptions.forceCopyWithSyntaxHighlighting = true;\r\n        _super.prototype.run.call(this, accessor, editor);\r\n        CopyOptions.forceCopyWithSyntaxHighlighting = false;\r\n    };\r\n    return ExecCommandCopyWithSyntaxHighlightingAction;\r\n}(ExecCommandAction));\r\nif (supportsCut) {\r\n    registerEditorAction(ExecCommandCutAction);\r\n}\r\nif (supportsCopy) {\r\n    registerEditorAction(ExecCommandCopyAction);\r\n}\r\nif (supportsPaste) {\r\n    registerEditorAction(ExecCommandPasteAction);\r\n}\r\nif (supportsCopyWithSyntaxHighlighting) {\r\n    registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}