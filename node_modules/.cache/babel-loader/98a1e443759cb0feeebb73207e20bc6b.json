{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { createKeybinding } from '../../../base/common/keyCodes.js';\nimport { OS } from '../../../base/common/platform.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { Registry } from '../../registry/common/platform.js';\n\nvar KeybindingsRegistryImpl =\n/** @class */\nfunction () {\n  function KeybindingsRegistryImpl() {\n    this._coreKeybindings = [];\n    this._extensionKeybindings = [];\n    this._cachedMergedKeybindings = null;\n  }\n  /**\r\n   * Take current platform into account and reduce to primary & secondary.\r\n   */\n\n\n  KeybindingsRegistryImpl.bindToCurrentPlatform = function (kb) {\n    if (OS === 1\n    /* Windows */\n    ) {\n        if (kb && kb.win) {\n          return kb.win;\n        }\n      } else if (OS === 2\n    /* Macintosh */\n    ) {\n        if (kb && kb.mac) {\n          return kb.mac;\n        }\n      } else {\n      if (kb && kb.linux) {\n        return kb.linux;\n      }\n    }\n\n    return kb;\n  };\n\n  KeybindingsRegistryImpl.prototype.registerKeybindingRule = function (rule) {\n    var actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n\n    if (actualKb && actualKb.primary) {\n      var kk = createKeybinding(actualKb.primary, OS);\n\n      if (kk) {\n        this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, 0, rule.when);\n      }\n    }\n\n    if (actualKb && Array.isArray(actualKb.secondary)) {\n      for (var i = 0, len = actualKb.secondary.length; i < len; i++) {\n        var k = actualKb.secondary[i];\n        var kk = createKeybinding(k, OS);\n\n        if (kk) {\n          this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, -i - 1, rule.when);\n        }\n      }\n    }\n  };\n\n  KeybindingsRegistryImpl.prototype.registerCommandAndKeybindingRule = function (desc) {\n    this.registerKeybindingRule(desc);\n    CommandsRegistry.registerCommand(desc);\n  };\n\n  KeybindingsRegistryImpl._mightProduceChar = function (keyCode) {\n    if (keyCode >= 21\n    /* KEY_0 */\n    && keyCode <= 30\n    /* KEY_9 */\n    ) {\n        return true;\n      }\n\n    if (keyCode >= 31\n    /* KEY_A */\n    && keyCode <= 56\n    /* KEY_Z */\n    ) {\n        return true;\n      }\n\n    return keyCode === 80\n    /* US_SEMICOLON */\n    || keyCode === 81\n    /* US_EQUAL */\n    || keyCode === 82\n    /* US_COMMA */\n    || keyCode === 83\n    /* US_MINUS */\n    || keyCode === 84\n    /* US_DOT */\n    || keyCode === 85\n    /* US_SLASH */\n    || keyCode === 86\n    /* US_BACKTICK */\n    || keyCode === 110\n    /* ABNT_C1 */\n    || keyCode === 111\n    /* ABNT_C2 */\n    || keyCode === 87\n    /* US_OPEN_SQUARE_BRACKET */\n    || keyCode === 88\n    /* US_BACKSLASH */\n    || keyCode === 89\n    /* US_CLOSE_SQUARE_BRACKET */\n    || keyCode === 90\n    /* US_QUOTE */\n    || keyCode === 91\n    /* OEM_8 */\n    || keyCode === 92\n    /* OEM_102 */\n    ;\n  };\n\n  KeybindingsRegistryImpl.prototype._assertNoCtrlAlt = function (keybinding, commandId) {\n    if (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\n      if (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\n        console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\n      }\n    }\n  };\n\n  KeybindingsRegistryImpl.prototype._registerDefaultKeybinding = function (keybinding, commandId, commandArgs, weight1, weight2, when) {\n    if (OS === 1\n    /* Windows */\n    ) {\n        this._assertNoCtrlAlt(keybinding.parts[0], commandId);\n      }\n\n    this._coreKeybindings.push({\n      keybinding: keybinding,\n      command: commandId,\n      commandArgs: commandArgs,\n      when: when,\n      weight1: weight1,\n      weight2: weight2\n    });\n\n    this._cachedMergedKeybindings = null;\n  };\n\n  KeybindingsRegistryImpl.prototype.getDefaultKeybindings = function () {\n    if (!this._cachedMergedKeybindings) {\n      this._cachedMergedKeybindings = [].concat(this._coreKeybindings).concat(this._extensionKeybindings);\n\n      this._cachedMergedKeybindings.sort(sorter);\n    }\n\n    return this._cachedMergedKeybindings.slice(0);\n  };\n\n  return KeybindingsRegistryImpl;\n}();\n\nexport var KeybindingsRegistry = new KeybindingsRegistryImpl(); // Define extension point ids\n\nexport var Extensions = {\n  EditorModes: 'platform.keybindingsRegistry'\n};\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\n\nfunction sorter(a, b) {\n  if (a.weight1 !== b.weight1) {\n    return a.weight1 - b.weight1;\n  }\n\n  if (a.command < b.command) {\n    return -1;\n  }\n\n  if (a.command > b.command) {\n    return 1;\n  }\n\n  return a.weight2 - b.weight2;\n}","map":{"version":3,"sources":["/Users/ifudata/eclipse-workspace/screen-web/node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js"],"names":["createKeybinding","OS","CommandsRegistry","Registry","KeybindingsRegistryImpl","_coreKeybindings","_extensionKeybindings","_cachedMergedKeybindings","bindToCurrentPlatform","kb","win","mac","linux","prototype","registerKeybindingRule","rule","actualKb","primary","kk","_registerDefaultKeybinding","id","args","weight","when","Array","isArray","secondary","i","len","length","k","registerCommandAndKeybindingRule","desc","registerCommand","_mightProduceChar","keyCode","_assertNoCtrlAlt","keybinding","commandId","ctrlKey","altKey","metaKey","console","warn","commandArgs","weight1","weight2","parts","push","command","getDefaultKeybindings","concat","sort","sorter","slice","KeybindingsRegistry","Extensions","EditorModes","add","a","b"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { createKeybinding } from '../../../base/common/keyCodes.js';\r\nimport { OS } from '../../../base/common/platform.js';\r\nimport { CommandsRegistry } from '../../commands/common/commands.js';\r\nimport { Registry } from '../../registry/common/platform.js';\r\nvar KeybindingsRegistryImpl = /** @class */ (function () {\r\n    function KeybindingsRegistryImpl() {\r\n        this._coreKeybindings = [];\r\n        this._extensionKeybindings = [];\r\n        this._cachedMergedKeybindings = null;\r\n    }\r\n    /**\r\n     * Take current platform into account and reduce to primary & secondary.\r\n     */\r\n    KeybindingsRegistryImpl.bindToCurrentPlatform = function (kb) {\r\n        if (OS === 1 /* Windows */) {\r\n            if (kb && kb.win) {\r\n                return kb.win;\r\n            }\r\n        }\r\n        else if (OS === 2 /* Macintosh */) {\r\n            if (kb && kb.mac) {\r\n                return kb.mac;\r\n            }\r\n        }\r\n        else {\r\n            if (kb && kb.linux) {\r\n                return kb.linux;\r\n            }\r\n        }\r\n        return kb;\r\n    };\r\n    KeybindingsRegistryImpl.prototype.registerKeybindingRule = function (rule) {\r\n        var actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\r\n        if (actualKb && actualKb.primary) {\r\n            var kk = createKeybinding(actualKb.primary, OS);\r\n            if (kk) {\r\n                this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, 0, rule.when);\r\n            }\r\n        }\r\n        if (actualKb && Array.isArray(actualKb.secondary)) {\r\n            for (var i = 0, len = actualKb.secondary.length; i < len; i++) {\r\n                var k = actualKb.secondary[i];\r\n                var kk = createKeybinding(k, OS);\r\n                if (kk) {\r\n                    this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, -i - 1, rule.when);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    KeybindingsRegistryImpl.prototype.registerCommandAndKeybindingRule = function (desc) {\r\n        this.registerKeybindingRule(desc);\r\n        CommandsRegistry.registerCommand(desc);\r\n    };\r\n    KeybindingsRegistryImpl._mightProduceChar = function (keyCode) {\r\n        if (keyCode >= 21 /* KEY_0 */ && keyCode <= 30 /* KEY_9 */) {\r\n            return true;\r\n        }\r\n        if (keyCode >= 31 /* KEY_A */ && keyCode <= 56 /* KEY_Z */) {\r\n            return true;\r\n        }\r\n        return (keyCode === 80 /* US_SEMICOLON */\r\n            || keyCode === 81 /* US_EQUAL */\r\n            || keyCode === 82 /* US_COMMA */\r\n            || keyCode === 83 /* US_MINUS */\r\n            || keyCode === 84 /* US_DOT */\r\n            || keyCode === 85 /* US_SLASH */\r\n            || keyCode === 86 /* US_BACKTICK */\r\n            || keyCode === 110 /* ABNT_C1 */\r\n            || keyCode === 111 /* ABNT_C2 */\r\n            || keyCode === 87 /* US_OPEN_SQUARE_BRACKET */\r\n            || keyCode === 88 /* US_BACKSLASH */\r\n            || keyCode === 89 /* US_CLOSE_SQUARE_BRACKET */\r\n            || keyCode === 90 /* US_QUOTE */\r\n            || keyCode === 91 /* OEM_8 */\r\n            || keyCode === 92 /* OEM_102 */);\r\n    };\r\n    KeybindingsRegistryImpl.prototype._assertNoCtrlAlt = function (keybinding, commandId) {\r\n        if (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\r\n            if (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\r\n                console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\r\n            }\r\n        }\r\n    };\r\n    KeybindingsRegistryImpl.prototype._registerDefaultKeybinding = function (keybinding, commandId, commandArgs, weight1, weight2, when) {\r\n        if (OS === 1 /* Windows */) {\r\n            this._assertNoCtrlAlt(keybinding.parts[0], commandId);\r\n        }\r\n        this._coreKeybindings.push({\r\n            keybinding: keybinding,\r\n            command: commandId,\r\n            commandArgs: commandArgs,\r\n            when: when,\r\n            weight1: weight1,\r\n            weight2: weight2\r\n        });\r\n        this._cachedMergedKeybindings = null;\r\n    };\r\n    KeybindingsRegistryImpl.prototype.getDefaultKeybindings = function () {\r\n        if (!this._cachedMergedKeybindings) {\r\n            this._cachedMergedKeybindings = [].concat(this._coreKeybindings).concat(this._extensionKeybindings);\r\n            this._cachedMergedKeybindings.sort(sorter);\r\n        }\r\n        return this._cachedMergedKeybindings.slice(0);\r\n    };\r\n    return KeybindingsRegistryImpl;\r\n}());\r\nexport var KeybindingsRegistry = new KeybindingsRegistryImpl();\r\n// Define extension point ids\r\nexport var Extensions = {\r\n    EditorModes: 'platform.keybindingsRegistry'\r\n};\r\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\r\nfunction sorter(a, b) {\r\n    if (a.weight1 !== b.weight1) {\r\n        return a.weight1 - b.weight1;\r\n    }\r\n    if (a.command < b.command) {\r\n        return -1;\r\n    }\r\n    if (a.command > b.command) {\r\n        return 1;\r\n    }\r\n    return a.weight2 - b.weight2;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}