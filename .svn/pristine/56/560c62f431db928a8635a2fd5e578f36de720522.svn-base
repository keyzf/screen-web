import React,{Component,Fragment} from 'react'
import { 
	Row,
	Col,
	Form,
	Input,
	Button,
	Card,
	Modal,
	message,
	Select
} from 'antd';
import { PlusOutlined } from '@ant-design/icons';

import Util from '../../../util';
import Datatable from './table.js';
import TreeSet from './tree.js';

const { TextArea } = Input;
const { Option } = Select;
const layout = {//弹窗表单布局
	labelCol: { span: 8 },
	wrapperCol: { span: 12 },
};

class UserList extends Component{
	constructor(props){
		super(props);
		this.addItemForm = React.createRef();
		this.formRef = React.createRef();
		this.initTreeNode();
	}

	state = {
		searchValue:{},
		modalVisible:false,
		loading:false,
		modalTitle:"",

		//角色员工权限弹框相关值
		userRoleModalVisible : false,
		selectUserId:0,
		selectRoleIds:[],
		initTreeNodeData : {},

	};

	onSearch = (value)=>{
		value['refresh']=Math.random();
		this.setState({
			searchValue:value
		})
	};

	onReset = () => {
		this.formRef.current.resetFields();
	};

	addItem = ()=>{
		this.setState({
			modalVisible:true,
			modalTitle:"新增用户"
		})
	};

	addItemOk = ()=>{
		let value = this.addItemForm.current.getFieldsValue();
		this.setState({loading:true})
		let _this = this;
		let param = {};
		let url = "";
		if (value.roleId==null) {
			param = {
				'loginCode':value.loginCode,
				'userName':value.userName,
				'phone':value.phone,
				'sex':value.sex,
				'email':value.email
			};
			url = "/user/save/";
		} else {
			param = {
				'userId':value.userId,
				'loginCode':value.loginCode,
				'userName':value.userName,
				'phone':value.phone,
				'sex':value.sex,
				'email':value.email
			};
			url = '/user/update/';
		}
		Util.ajax({
			url:url,
			data:param
		}).then((res)=>{
			_this.setState({loading:false});
			if(res.code === 200){
				message.success(res.message);
				_this.setState({
					modalVisible:false, searchValue:{}
				});
				_this.addItemForm.current.resetFields();
			}else{
				message.error(res.message);
			}
		})
	};

	addItemCancel = ()=>{
		this.setState({
			modalVisible:false
		})
	};

	handleEdit = (record)=>{
		let _this = this;
		Util.ajax({
			url:'/user/get/'+record.key,
			data:{}
		}).then((res)=>{
			if(res.code === 200){
				_this.setState({modalVisible:true,
					modalTitle:"修改用户"
				})
				_this.addItemForm.current.setFieldsValue({
					userId:res.data.data.userId,
					loginCode:res.data.data.loginCode,
					userName:res.data.data.userName,
					phone:res.data.data.phone,
					sex:res.data.data.sex,
					email:res.data.data.email
				});
			}else{
				message.error(res.message);
			}
		})
	};


	//第一次加载树形菜单数据
	initTreeNode(){
		Util.ajax({
			url:'/role/query',
			data:{"startIndex":1,"pageSize":9999
			}
		}).then((res)=>{
			if(res.code === 200){
				this.setState({initTreeNodeData: res.data.data})
			}else{
				message.error(res.message);
			}
		})
	}

	userRoleItemCancel = ()=>{
		this.setState({
			userRoleModalVisible:false
		})
	};

	//从tree组件获取所选值
	getSelectUserRole(values){
		this.setState({selectRoleIds:values});
	}

	//获取角色已经设置的菜单
	handleSetRole = (record)=>{
		const _this = this;
		this.setState({loading: true})
		Util.ajax({
			url:'/user/queryUserRole/'+record.key,
			data:{}
		}).then((res)=>{
			if(res.code === 200){
				_this.setState({
					selectUserId:record.key,
					userRoleModalVisible:true,
					loading: false,
					selectRoleIds:res.data.data.map((item)=>{
						return item.roleId+""
					})
				})
			}else{
				message.error(res.message);
			}
		})
	};

	//设置角色用户关系     确定按钮事件
	handleSetUserRole = (values)=>{
		let _this = this;
		_this.setState({loading: true,userRoleModalVisible:false});
		Util.ajax({
			url:'/user/setUserRole/',
			data:{'userId':_this.state.selectUserId,'roleIds':_this.state.selectRoleIds}
		}).then((res)=>{
			_this.setState({loading:false});
			if(res.code === 200){
				message.success(res.message);
				_this.setState({loading: false,userRoleModalVisible:false});
			}else{
				message.error(res.message);
			}
		})
	}


	render() {
		return (
			<Fragment>
				<Row
					gutter={[10,10]}
				>
					<Col span={24}>
						<Card
							title="查询条件" 
							bordered={false}
							size="small"
						>
							<Form
								onFinish={this.onSearch}
								layout="inline"
								ref={this.formRef}

							>
								<Form.Item
									label="用户姓名"
									name="userName"
								>
									<Input 
										placeholder="请输入关键字"
										autoComplete="off"
									/>
								</Form.Item>
								<Form.Item
									label="登录账号"
									name="loginCode"
								>
									<Input
										placeholder="请输入关键字"
										autoComplete="off"
									/>
								</Form.Item>
								<Form.Item>
									<Button type="primary" htmlType="submit">查询</Button>
								</Form.Item>
								<Form.Item>
									<Button htmlType="button" onClick={this.onReset}>重置</Button>
								</Form.Item>
							</Form>
						</Card>
					</Col>
					<Col span={24}>
						<Card
							title="查询结果" 
							bordered={false}
							size="small"
							extra={
								<Button 
									type="primary"
									icon={<PlusOutlined />}
									onClick={this.addItem}
								>新增</Button>
							}
						>
							<Datatable
								searchValue={this.state.searchValue} handleEdit={this.handleEdit} handleSetRole={this.handleSetRole}
							/>
						</Card>
					</Col>
				</Row>
				<Modal
					title={this.state.modalTitle}
					maskClosable={false}
					visible={this.state.modalVisible}
					onOk={this.addItemOk}
					onCancel={this.addItemCancel}
				>
					<Form
						{...layout}
						ref={this.addItemForm}
					>
						<Form.Item
							name="userId"
							rules={[]}
						>
							<Input type="hidden"/>
						</Form.Item>
						<Form.Item
							label="登录账号"
							name="loginCode"
							rules={[{
								required: true,
								message: '登录账号不能为空！',
							}]}
						>
							<Input 
								placeholder="请输入登录账号"
								autoComplete="off"
							/>
						</Form.Item>
						<Form.Item
						label="用户姓名"
						name="userName"
						rules={[{
							required: true,
							message: '用户姓名不能为空！',
						}]}
					>
						<Input
							placeholder="请输入用户姓名"
							autoComplete="off"
						/>
					</Form.Item>
					<Form.Item
						label="手机号码"
						name="phone"
						rules={[{
							required: true,
							pattern: /^[1][3,4,5,7,8][0-9]{9}$/,
							message: '手机号码不能为空！',
						}]}
					>
						<Input
							placeholder="请输入手机号码"
							autoComplete="off"
						/>
					</Form.Item>

					<Form.Item
						label="性别"
						name="sex"
						rules={[{
							required: true,
							message: '性别不能为空！',
						}]}
					>
						<Select placeholder="请选择性别" autoComplete="off">
							<Option value="男">男</Option>
							<Option value="女">女</Option>
						</Select>
					</Form.Item>

					<Form.Item
						label="电子邮箱"
						name="email"
						rules={[{
							required: true,
							pattern: /^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.[a-zA-Z0-9]{2,6}$/,
							message: '电子邮箱不能为空！',
						}]}
					>
						<Input
							placeholder="请输入电子邮箱"
							autoComplete="off"
						/>
					</Form.Item>
					</Form>
				</Modal>

				<Modal
					title={'设置角色'}
					visible={this.state.userRoleModalVisible}
					maskClosable={false}
					confirmLoading={this.state.loading}
					onCancel={this.userRoleItemCancel}
					onOk={this.handleSetUserRole}
				>
					<TreeSet selectRoleIds={this.state.selectRoleIds}  getSelectUserRole = {this.getSelectUserRole.bind(this)}  initTreeNodeData={this.state.initTreeNodeData} ></TreeSet>
				</Modal>

			</Fragment>
		)
	}
}
export default UserList;